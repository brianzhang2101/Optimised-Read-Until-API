# Copyright 2018 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# cmake build file for C++ route_guide example.
# Assumes protobuf and gRPC have been installed using cmake.
# See cmake_externalproject/CMakeLists.txt for all-in-one cmake build
# that automatically builds all the dependencies before building route_guide.

cmake_minimum_required(VERSION 3.5.1)

project(RouteGuide C CXX)

include(../cmake/common.cmake)

# Proto files
get_filename_component(rg_proto "../../proto/minknow_api/acquisition.proto" ABSOLUTE)
get_filename_component(proto_path "${rg_proto}" PATH)
file(GLOB proto_files "../../proto/minknow_api/*.proto")
set(src_n_hdrs "")

get_filename_component(dir_name
                       "../../proto/"
                       ABSOLUTE)

foreach(file ${proto_files})
  get_filename_component(file_name ${file} NAME)
  string(REGEX MATCH "^(.*)\\.[^.]*$" dummy ${file_name})
  set(barename ${CMAKE_MATCH_1})
  message("Checking: ${barename}.proto")

  get_filename_component(proto "${proto_path}/${barename}.proto" ABSOLUTE)
  # Generated client sources
  set(rg_proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/${barename}.pb.cc")
  list(APPEND src_n_hdrs ${rg_proto_srcs})
  set(rg_proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/${barename}.pb.h")
  list(APPEND src_n_hdrs ${rg_proto_hdrs})
  add_custom_command(
        OUTPUT "${rg_proto_srcs}" "${rg_proto_hdrs}"
        COMMAND ${_PROTOBUF_PROTOC}
        ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
          --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
          -I "${dir_name}"
          --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
          "${proto}"
        DEPENDS "${proto}")
endforeach()

# Include generated *.pb.h files
include_directories("${CMAKE_CURRENT_BINARY_DIR}")

# rg_grpc_proto
add_library(rg_grpc_proto
  ${src_n_hdrs})
target_link_libraries(rg_grpc_proto
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})

# Targets route_guide_(client|server)
foreach(_target
  acquisition_client analysis_configuration_client rpc_options_client)
  add_executable(${_target}
    "${_target}.cc")
  target_link_libraries(${_target}
    rg_grpc_proto
    ${_REFLECTION}
    ${_GRPC_GRPCPP}
    ${_PROTOBUF_LIBPROTOBUF})
endforeach()


option java_multiple_files = true;
option java_package = "io.grpc.examples.minknow_api";