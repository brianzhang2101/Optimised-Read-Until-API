// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/basecaller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fbasecaller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fbasecaller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "minknow_api/analysis_configuration.pb.h"
#include "minknow_api/protocol_settings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2fbasecaller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2fbasecaller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fbasecaller_2eproto;
namespace minknow_api {
namespace basecaller {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class GetInfoRequest;
struct GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoRequest_IdList;
struct GetInfoRequest_IdListDefaultTypeInternal;
extern GetInfoRequest_IdListDefaultTypeInternal _GetInfoRequest_IdList_default_instance_;
class GetInfoResponse;
struct GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class ListConfigsByKitRequest;
struct ListConfigsByKitRequestDefaultTypeInternal;
extern ListConfigsByKitRequestDefaultTypeInternal _ListConfigsByKitRequest_default_instance_;
class ListConfigsByKitResponse;
struct ListConfigsByKitResponseDefaultTypeInternal;
extern ListConfigsByKitResponseDefaultTypeInternal _ListConfigsByKitResponse_default_instance_;
class ListConfigsByKitResponse_ConfigList;
struct ListConfigsByKitResponse_ConfigListDefaultTypeInternal;
extern ListConfigsByKitResponse_ConfigListDefaultTypeInternal _ListConfigsByKitResponse_ConfigList_default_instance_;
class ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse;
struct ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUseDefaultTypeInternal;
extern ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUseDefaultTypeInternal _ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse_default_instance_;
class ListConfigsByKitResponse_PerFlowCell;
struct ListConfigsByKitResponse_PerFlowCellDefaultTypeInternal;
extern ListConfigsByKitResponse_PerFlowCellDefaultTypeInternal _ListConfigsByKitResponse_PerFlowCell_default_instance_;
class ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse;
struct ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUseDefaultTypeInternal;
extern ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUseDefaultTypeInternal _ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse_default_instance_;
class ListPostProcessingProtocolsRequest;
struct ListPostProcessingProtocolsRequestDefaultTypeInternal;
extern ListPostProcessingProtocolsRequestDefaultTypeInternal _ListPostProcessingProtocolsRequest_default_instance_;
class ListPostProcessingProtocolsResponse;
struct ListPostProcessingProtocolsResponseDefaultTypeInternal;
extern ListPostProcessingProtocolsResponseDefaultTypeInternal _ListPostProcessingProtocolsResponse_default_instance_;
class ListSettingsForPostProcessingProtocolRequest;
struct ListSettingsForPostProcessingProtocolRequestDefaultTypeInternal;
extern ListSettingsForPostProcessingProtocolRequestDefaultTypeInternal _ListSettingsForPostProcessingProtocolRequest_default_instance_;
class ListSettingsForPostProcessingProtocolResponse;
struct ListSettingsForPostProcessingProtocolResponseDefaultTypeInternal;
extern ListSettingsForPostProcessingProtocolResponseDefaultTypeInternal _ListSettingsForPostProcessingProtocolResponse_default_instance_;
class MakeAlignmentIndexRequest;
struct MakeAlignmentIndexRequestDefaultTypeInternal;
extern MakeAlignmentIndexRequestDefaultTypeInternal _MakeAlignmentIndexRequest_default_instance_;
class MakeAlignmentIndexResponse;
struct MakeAlignmentIndexResponseDefaultTypeInternal;
extern MakeAlignmentIndexResponseDefaultTypeInternal _MakeAlignmentIndexResponse_default_instance_;
class PostProcessingProtocolInfo;
struct PostProcessingProtocolInfoDefaultTypeInternal;
extern PostProcessingProtocolInfoDefaultTypeInternal _PostProcessingProtocolInfo_default_instance_;
class RunInfo;
struct RunInfoDefaultTypeInternal;
extern RunInfoDefaultTypeInternal _RunInfo_default_instance_;
class StartAlignmentRequest;
struct StartAlignmentRequestDefaultTypeInternal;
extern StartAlignmentRequestDefaultTypeInternal _StartAlignmentRequest_default_instance_;
class StartAlignmentResponse;
struct StartAlignmentResponseDefaultTypeInternal;
extern StartAlignmentResponseDefaultTypeInternal _StartAlignmentResponse_default_instance_;
class StartBarcodingRequest;
struct StartBarcodingRequestDefaultTypeInternal;
extern StartBarcodingRequestDefaultTypeInternal _StartBarcodingRequest_default_instance_;
class StartBarcodingResponse;
struct StartBarcodingResponseDefaultTypeInternal;
extern StartBarcodingResponseDefaultTypeInternal _StartBarcodingResponse_default_instance_;
class StartBasecallingRequest;
struct StartBasecallingRequestDefaultTypeInternal;
extern StartBasecallingRequestDefaultTypeInternal _StartBasecallingRequest_default_instance_;
class StartBasecallingResponse;
struct StartBasecallingResponseDefaultTypeInternal;
extern StartBasecallingResponseDefaultTypeInternal _StartBasecallingResponse_default_instance_;
class StartPostProcessingProtocolRequest;
struct StartPostProcessingProtocolRequestDefaultTypeInternal;
extern StartPostProcessingProtocolRequestDefaultTypeInternal _StartPostProcessingProtocolRequest_default_instance_;
class StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse;
struct StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUseDefaultTypeInternal;
extern StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUseDefaultTypeInternal _StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse_default_instance_;
class StartPostProcessingProtocolResponse;
struct StartPostProcessingProtocolResponseDefaultTypeInternal;
extern StartPostProcessingProtocolResponseDefaultTypeInternal _StartPostProcessingProtocolResponse_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class UpdateProgressRequest;
struct UpdateProgressRequestDefaultTypeInternal;
extern UpdateProgressRequestDefaultTypeInternal _UpdateProgressRequest_default_instance_;
class UpdateProgressResponse;
struct UpdateProgressResponseDefaultTypeInternal;
extern UpdateProgressResponseDefaultTypeInternal _UpdateProgressResponse_default_instance_;
class WatchRequest;
struct WatchRequestDefaultTypeInternal;
extern WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
class WatchResponse;
struct WatchResponseDefaultTypeInternal;
extern WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
}  // namespace basecaller
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::basecaller::CancelRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::CancelRequest>(Arena*);
template<> ::minknow_api::basecaller::CancelResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::CancelResponse>(Arena*);
template<> ::minknow_api::basecaller::GetInfoRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::GetInfoRequest>(Arena*);
template<> ::minknow_api::basecaller::GetInfoRequest_IdList* Arena::CreateMaybeMessage<::minknow_api::basecaller::GetInfoRequest_IdList>(Arena*);
template<> ::minknow_api::basecaller::GetInfoResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::GetInfoResponse>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitRequest>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitResponse>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell>(Arena*);
template<> ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse>(Arena*);
template<> ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListPostProcessingProtocolsRequest>(Arena*);
template<> ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListPostProcessingProtocolsResponse>(Arena*);
template<> ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest>(Arena*);
template<> ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>(Arena*);
template<> ::minknow_api::basecaller::MakeAlignmentIndexRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::MakeAlignmentIndexRequest>(Arena*);
template<> ::minknow_api::basecaller::MakeAlignmentIndexResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::MakeAlignmentIndexResponse>(Arena*);
template<> ::minknow_api::basecaller::PostProcessingProtocolInfo* Arena::CreateMaybeMessage<::minknow_api::basecaller::PostProcessingProtocolInfo>(Arena*);
template<> ::minknow_api::basecaller::RunInfo* Arena::CreateMaybeMessage<::minknow_api::basecaller::RunInfo>(Arena*);
template<> ::minknow_api::basecaller::StartAlignmentRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartAlignmentRequest>(Arena*);
template<> ::minknow_api::basecaller::StartAlignmentResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartAlignmentResponse>(Arena*);
template<> ::minknow_api::basecaller::StartBarcodingRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartBarcodingRequest>(Arena*);
template<> ::minknow_api::basecaller::StartBarcodingResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartBarcodingResponse>(Arena*);
template<> ::minknow_api::basecaller::StartBasecallingRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartBasecallingRequest>(Arena*);
template<> ::minknow_api::basecaller::StartBasecallingResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartBasecallingResponse>(Arena*);
template<> ::minknow_api::basecaller::StartPostProcessingProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartPostProcessingProtocolRequest>(Arena*);
template<> ::minknow_api::basecaller::StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse>(Arena*);
template<> ::minknow_api::basecaller::StartPostProcessingProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartPostProcessingProtocolResponse>(Arena*);
template<> ::minknow_api::basecaller::StartRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::StartRequest>(Arena*);
template<> ::minknow_api::basecaller::UpdateProgressRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::UpdateProgressRequest>(Arena*);
template<> ::minknow_api::basecaller::UpdateProgressResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::UpdateProgressResponse>(Arena*);
template<> ::minknow_api::basecaller::WatchRequest* Arena::CreateMaybeMessage<::minknow_api::basecaller::WatchRequest>(Arena*);
template<> ::minknow_api::basecaller::WatchResponse* Arena::CreateMaybeMessage<::minknow_api::basecaller::WatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace basecaller {

enum State : int {
  STATE_RUNNING = 0,
  STATE_SUCCESS = 1,
  STATE_ERROR = 2,
  STATE_CANCELLED = 3,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool State_IsValid(int value);
constexpr State State_MIN = STATE_RUNNING;
constexpr State State_MAX = STATE_CANCELLED;
constexpr int State_ARRAYSIZE = State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor();
template<typename T>
inline const std::string& State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_descriptor(), enum_t_value);
}
inline bool State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum SelectionPreset : int {
  PRESET_ALL_RUNNING = 0,
  PRESET_MOST_RECENTLY_STARTED = 1,
  PRESET_ALL = 2,
  SelectionPreset_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelectionPreset_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelectionPreset_IsValid(int value);
constexpr SelectionPreset SelectionPreset_MIN = PRESET_ALL_RUNNING;
constexpr SelectionPreset SelectionPreset_MAX = PRESET_ALL;
constexpr int SelectionPreset_ARRAYSIZE = SelectionPreset_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionPreset_descriptor();
template<typename T>
inline const std::string& SelectionPreset_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionPreset>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionPreset_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionPreset_descriptor(), enum_t_value);
}
inline bool SelectionPreset_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectionPreset* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionPreset>(
    SelectionPreset_descriptor(), name, value);
}
// ===================================================================

class ListConfigsByKitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListConfigsByKitRequest) */ {
 public:
  inline ListConfigsByKitRequest() : ListConfigsByKitRequest(nullptr) {}
  explicit constexpr ListConfigsByKitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigsByKitRequest(const ListConfigsByKitRequest& from);
  ListConfigsByKitRequest(ListConfigsByKitRequest&& from) noexcept
    : ListConfigsByKitRequest() {
    *this = ::std::move(from);
  }

  inline ListConfigsByKitRequest& operator=(const ListConfigsByKitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigsByKitRequest& operator=(ListConfigsByKitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigsByKitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigsByKitRequest* internal_default_instance() {
    return reinterpret_cast<const ListConfigsByKitRequest*>(
               &_ListConfigsByKitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListConfigsByKitRequest& a, ListConfigsByKitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigsByKitRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigsByKitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConfigsByKitRequest* New() const final {
    return new ListConfigsByKitRequest();
  }

  ListConfigsByKitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConfigsByKitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListConfigsByKitRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListConfigsByKitRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListConfigsByKitRequest";
  }
  protected:
  explicit ListConfigsByKitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListConfigsByKitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListConfigsByKitResponse_ConfigList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList) */ {
 public:
  inline ListConfigsByKitResponse_ConfigList() : ListConfigsByKitResponse_ConfigList(nullptr) {}
  ~ListConfigsByKitResponse_ConfigList() override;
  explicit constexpr ListConfigsByKitResponse_ConfigList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigsByKitResponse_ConfigList(const ListConfigsByKitResponse_ConfigList& from);
  ListConfigsByKitResponse_ConfigList(ListConfigsByKitResponse_ConfigList&& from) noexcept
    : ListConfigsByKitResponse_ConfigList() {
    *this = ::std::move(from);
  }

  inline ListConfigsByKitResponse_ConfigList& operator=(const ListConfigsByKitResponse_ConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigsByKitResponse_ConfigList& operator=(ListConfigsByKitResponse_ConfigList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigsByKitResponse_ConfigList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigsByKitResponse_ConfigList* internal_default_instance() {
    return reinterpret_cast<const ListConfigsByKitResponse_ConfigList*>(
               &_ListConfigsByKitResponse_ConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListConfigsByKitResponse_ConfigList& a, ListConfigsByKitResponse_ConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigsByKitResponse_ConfigList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigsByKitResponse_ConfigList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConfigsByKitResponse_ConfigList* New() const final {
    return new ListConfigsByKitResponse_ConfigList();
  }

  ListConfigsByKitResponse_ConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConfigsByKitResponse_ConfigList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConfigsByKitResponse_ConfigList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConfigsByKitResponse_ConfigList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConfigsByKitResponse_ConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListConfigsByKitResponse.ConfigList";
  }
  protected:
  explicit ListConfigsByKitResponse_ConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated string configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  const std::string& configs(int index) const;
  std::string* mutable_configs(int index);
  void set_configs(int index, const std::string& value);
  void set_configs(int index, std::string&& value);
  void set_configs(int index, const char* value);
  void set_configs(int index, const char* value, size_t size);
  std::string* add_configs();
  void add_configs(const std::string& value);
  void add_configs(std::string&& value);
  void add_configs(const char* value);
  void add_configs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_configs();
  private:
  const std::string& _internal_configs(int index) const;
  std::string* _internal_add_configs();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse, 
    std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse, 
    std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse();
  explicit constexpr ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse& other);
  static const ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse*>(&_ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.KitConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ListConfigsByKitResponse_PerFlowCell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell) */ {
 public:
  inline ListConfigsByKitResponse_PerFlowCell() : ListConfigsByKitResponse_PerFlowCell(nullptr) {}
  ~ListConfigsByKitResponse_PerFlowCell() override;
  explicit constexpr ListConfigsByKitResponse_PerFlowCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigsByKitResponse_PerFlowCell(const ListConfigsByKitResponse_PerFlowCell& from);
  ListConfigsByKitResponse_PerFlowCell(ListConfigsByKitResponse_PerFlowCell&& from) noexcept
    : ListConfigsByKitResponse_PerFlowCell() {
    *this = ::std::move(from);
  }

  inline ListConfigsByKitResponse_PerFlowCell& operator=(const ListConfigsByKitResponse_PerFlowCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigsByKitResponse_PerFlowCell& operator=(ListConfigsByKitResponse_PerFlowCell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigsByKitResponse_PerFlowCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigsByKitResponse_PerFlowCell* internal_default_instance() {
    return reinterpret_cast<const ListConfigsByKitResponse_PerFlowCell*>(
               &_ListConfigsByKitResponse_PerFlowCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListConfigsByKitResponse_PerFlowCell& a, ListConfigsByKitResponse_PerFlowCell& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigsByKitResponse_PerFlowCell* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigsByKitResponse_PerFlowCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConfigsByKitResponse_PerFlowCell* New() const final {
    return new ListConfigsByKitResponse_PerFlowCell();
  }

  ListConfigsByKitResponse_PerFlowCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConfigsByKitResponse_PerFlowCell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConfigsByKitResponse_PerFlowCell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConfigsByKitResponse_PerFlowCell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConfigsByKitResponse_PerFlowCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell";
  }
  protected:
  explicit ListConfigsByKitResponse_PerFlowCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKitConfigsFieldNumber = 1,
  };
  // map<string, .minknow_api.basecaller.ListConfigsByKitResponse.ConfigList> kit_configs = 1;
  int kit_configs_size() const;
  private:
  int _internal_kit_configs_size() const;
  public:
  void clear_kit_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >&
      _internal_kit_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >*
      _internal_mutable_kit_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >&
      kit_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >*
      mutable_kit_configs();

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListConfigsByKitResponse_PerFlowCell_KitConfigsEntry_DoNotUse,
      std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> kit_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse, 
    std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse, 
    std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse();
  explicit constexpr ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse& other);
  static const ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse*>(&_ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.basecaller.ListConfigsByKitResponse.FlowCellConfigsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ListConfigsByKitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListConfigsByKitResponse) */ {
 public:
  inline ListConfigsByKitResponse() : ListConfigsByKitResponse(nullptr) {}
  ~ListConfigsByKitResponse() override;
  explicit constexpr ListConfigsByKitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigsByKitResponse(const ListConfigsByKitResponse& from);
  ListConfigsByKitResponse(ListConfigsByKitResponse&& from) noexcept
    : ListConfigsByKitResponse() {
    *this = ::std::move(from);
  }

  inline ListConfigsByKitResponse& operator=(const ListConfigsByKitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigsByKitResponse& operator=(ListConfigsByKitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigsByKitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigsByKitResponse* internal_default_instance() {
    return reinterpret_cast<const ListConfigsByKitResponse*>(
               &_ListConfigsByKitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListConfigsByKitResponse& a, ListConfigsByKitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigsByKitResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigsByKitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListConfigsByKitResponse* New() const final {
    return new ListConfigsByKitResponse();
  }

  ListConfigsByKitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListConfigsByKitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConfigsByKitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConfigsByKitResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConfigsByKitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListConfigsByKitResponse";
  }
  protected:
  explicit ListConfigsByKitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListConfigsByKitResponse_ConfigList ConfigList;
  typedef ListConfigsByKitResponse_PerFlowCell PerFlowCell;

  // accessors -------------------------------------------------------

  enum : int {
    kFlowCellConfigsFieldNumber = 1,
  };
  // map<string, .minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell> flow_cell_configs = 1;
  int flow_cell_configs_size() const;
  private:
  int _internal_flow_cell_configs_size() const;
  public:
  void clear_flow_cell_configs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >&
      _internal_flow_cell_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >*
      _internal_mutable_flow_cell_configs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >&
      flow_cell_configs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >*
      mutable_flow_cell_configs();

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListConfigsByKitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListConfigsByKitResponse_FlowCellConfigsEntry_DoNotUse,
      std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> flow_cell_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartBasecallingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartBasecallingRequest) */ {
 public:
  inline StartBasecallingRequest() : StartBasecallingRequest(nullptr) {}
  ~StartBasecallingRequest() override;
  explicit constexpr StartBasecallingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBasecallingRequest(const StartBasecallingRequest& from);
  StartBasecallingRequest(StartBasecallingRequest&& from) noexcept
    : StartBasecallingRequest() {
    *this = ::std::move(from);
  }

  inline StartBasecallingRequest& operator=(const StartBasecallingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBasecallingRequest& operator=(StartBasecallingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBasecallingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBasecallingRequest* internal_default_instance() {
    return reinterpret_cast<const StartBasecallingRequest*>(
               &_StartBasecallingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartBasecallingRequest& a, StartBasecallingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBasecallingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBasecallingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBasecallingRequest* New() const final {
    return new StartBasecallingRequest();
  }

  StartBasecallingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBasecallingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBasecallingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBasecallingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBasecallingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartBasecallingRequest";
  }
  protected:
  explicit StartBasecallingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputReadsDirectoriesFieldNumber = 1,
    kOutputReadsDirectoryFieldNumber = 2,
    kConfigurationFieldNumber = 3,
    kNameFieldNumber = 12,
    kBarcodingConfigurationFieldNumber = 10,
    kAlignmentConfigurationFieldNumber = 11,
    kFast5OutFieldNumber = 4,
    kCompressFastqFieldNumber = 5,
    kDisableEventsFieldNumber = 6,
    kRecursiveFieldNumber = 7,
  };
  // repeated string input_reads_directories = 1;
  int input_reads_directories_size() const;
  private:
  int _internal_input_reads_directories_size() const;
  public:
  void clear_input_reads_directories();
  const std::string& input_reads_directories(int index) const;
  std::string* mutable_input_reads_directories(int index);
  void set_input_reads_directories(int index, const std::string& value);
  void set_input_reads_directories(int index, std::string&& value);
  void set_input_reads_directories(int index, const char* value);
  void set_input_reads_directories(int index, const char* value, size_t size);
  std::string* add_input_reads_directories();
  void add_input_reads_directories(const std::string& value);
  void add_input_reads_directories(std::string&& value);
  void add_input_reads_directories(const char* value);
  void add_input_reads_directories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_reads_directories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_reads_directories();
  private:
  const std::string& _internal_input_reads_directories(int index) const;
  std::string* _internal_add_input_reads_directories();
  public:

  // string output_reads_directory = 2;
  void clear_output_reads_directory();
  const std::string& output_reads_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_reads_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_reads_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_reads_directory();
  void set_allocated_output_reads_directory(std::string* output_reads_directory);
  private:
  const std::string& _internal_output_reads_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_reads_directory(const std::string& value);
  std::string* _internal_mutable_output_reads_directory();
  public:

  // string configuration = 3;
  void clear_configuration();
  const std::string& configuration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configuration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configuration();
  PROTOBUF_MUST_USE_RESULT std::string* release_configuration();
  void set_allocated_configuration(std::string* configuration);
  private:
  const std::string& _internal_configuration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configuration(const std::string& value);
  std::string* _internal_mutable_configuration();
  public:

  // string name = 12;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;
  bool has_barcoding_configuration() const;
  private:
  bool _internal_has_barcoding_configuration() const;
  public:
  void clear_barcoding_configuration();
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& barcoding_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BarcodingConfiguration* release_barcoding_configuration();
  ::minknow_api::analysis_configuration::BarcodingConfiguration* mutable_barcoding_configuration();
  void set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  private:
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& _internal_barcoding_configuration() const;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _internal_mutable_barcoding_configuration();
  public:
  void unsafe_arena_set_allocated_barcoding_configuration(
      ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  ::minknow_api::analysis_configuration::BarcodingConfiguration* unsafe_arena_release_barcoding_configuration();

  // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 11;
  bool has_alignment_configuration() const;
  private:
  bool _internal_has_alignment_configuration() const;
  public:
  void clear_alignment_configuration();
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& alignment_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::AlignmentConfiguration* release_alignment_configuration();
  ::minknow_api::analysis_configuration::AlignmentConfiguration* mutable_alignment_configuration();
  void set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  private:
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& _internal_alignment_configuration() const;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _internal_mutable_alignment_configuration();
  public:
  void unsafe_arena_set_allocated_alignment_configuration(
      ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  ::minknow_api::analysis_configuration::AlignmentConfiguration* unsafe_arena_release_alignment_configuration();

  // bool fast5_out = 4;
  void clear_fast5_out();
  bool fast5_out() const;
  void set_fast5_out(bool value);
  private:
  bool _internal_fast5_out() const;
  void _internal_set_fast5_out(bool value);
  public:

  // bool compress_fastq = 5;
  void clear_compress_fastq();
  bool compress_fastq() const;
  void set_compress_fastq(bool value);
  private:
  bool _internal_compress_fastq() const;
  void _internal_set_compress_fastq(bool value);
  public:

  // bool disable_events = 6;
  void clear_disable_events();
  bool disable_events() const;
  void set_disable_events(bool value);
  private:
  bool _internal_disable_events() const;
  void _internal_set_disable_events(bool value);
  public:

  // bool recursive = 7;
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartBasecallingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_reads_directories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_reads_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration_;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration_;
  bool fast5_out_;
  bool compress_fastq_;
  bool disable_events_;
  bool recursive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartBasecallingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartBasecallingResponse) */ {
 public:
  inline StartBasecallingResponse() : StartBasecallingResponse(nullptr) {}
  ~StartBasecallingResponse() override;
  explicit constexpr StartBasecallingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBasecallingResponse(const StartBasecallingResponse& from);
  StartBasecallingResponse(StartBasecallingResponse&& from) noexcept
    : StartBasecallingResponse() {
    *this = ::std::move(from);
  }

  inline StartBasecallingResponse& operator=(const StartBasecallingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBasecallingResponse& operator=(StartBasecallingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBasecallingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBasecallingResponse* internal_default_instance() {
    return reinterpret_cast<const StartBasecallingResponse*>(
               &_StartBasecallingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartBasecallingResponse& a, StartBasecallingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBasecallingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBasecallingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBasecallingResponse* New() const final {
    return new StartBasecallingResponse();
  }

  StartBasecallingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBasecallingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBasecallingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBasecallingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBasecallingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartBasecallingResponse";
  }
  protected:
  explicit StartBasecallingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartBasecallingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartBarcodingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartBarcodingRequest) */ {
 public:
  inline StartBarcodingRequest() : StartBarcodingRequest(nullptr) {}
  ~StartBarcodingRequest() override;
  explicit constexpr StartBarcodingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBarcodingRequest(const StartBarcodingRequest& from);
  StartBarcodingRequest(StartBarcodingRequest&& from) noexcept
    : StartBarcodingRequest() {
    *this = ::std::move(from);
  }

  inline StartBarcodingRequest& operator=(const StartBarcodingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBarcodingRequest& operator=(StartBarcodingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBarcodingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBarcodingRequest* internal_default_instance() {
    return reinterpret_cast<const StartBarcodingRequest*>(
               &_StartBarcodingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartBarcodingRequest& a, StartBarcodingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBarcodingRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBarcodingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBarcodingRequest* New() const final {
    return new StartBarcodingRequest();
  }

  StartBarcodingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBarcodingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBarcodingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBarcodingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBarcodingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartBarcodingRequest";
  }
  protected:
  explicit StartBarcodingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputReadsDirectoriesFieldNumber = 1,
    kOutputReadsDirectoryFieldNumber = 2,
    kNameFieldNumber = 11,
    kBarcodingConfigurationFieldNumber = 10,
    kCompressFastqFieldNumber = 4,
    kRecursiveFieldNumber = 5,
  };
  // repeated string input_reads_directories = 1;
  int input_reads_directories_size() const;
  private:
  int _internal_input_reads_directories_size() const;
  public:
  void clear_input_reads_directories();
  const std::string& input_reads_directories(int index) const;
  std::string* mutable_input_reads_directories(int index);
  void set_input_reads_directories(int index, const std::string& value);
  void set_input_reads_directories(int index, std::string&& value);
  void set_input_reads_directories(int index, const char* value);
  void set_input_reads_directories(int index, const char* value, size_t size);
  std::string* add_input_reads_directories();
  void add_input_reads_directories(const std::string& value);
  void add_input_reads_directories(std::string&& value);
  void add_input_reads_directories(const char* value);
  void add_input_reads_directories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_reads_directories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_reads_directories();
  private:
  const std::string& _internal_input_reads_directories(int index) const;
  std::string* _internal_add_input_reads_directories();
  public:

  // string output_reads_directory = 2;
  void clear_output_reads_directory();
  const std::string& output_reads_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_reads_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_reads_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_reads_directory();
  void set_allocated_output_reads_directory(std::string* output_reads_directory);
  private:
  const std::string& _internal_output_reads_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_reads_directory(const std::string& value);
  std::string* _internal_mutable_output_reads_directory();
  public:

  // string name = 11;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;
  bool has_barcoding_configuration() const;
  private:
  bool _internal_has_barcoding_configuration() const;
  public:
  void clear_barcoding_configuration();
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& barcoding_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BarcodingConfiguration* release_barcoding_configuration();
  ::minknow_api::analysis_configuration::BarcodingConfiguration* mutable_barcoding_configuration();
  void set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  private:
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& _internal_barcoding_configuration() const;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _internal_mutable_barcoding_configuration();
  public:
  void unsafe_arena_set_allocated_barcoding_configuration(
      ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  ::minknow_api::analysis_configuration::BarcodingConfiguration* unsafe_arena_release_barcoding_configuration();

  // bool compress_fastq = 4;
  void clear_compress_fastq();
  bool compress_fastq() const;
  void set_compress_fastq(bool value);
  private:
  bool _internal_compress_fastq() const;
  void _internal_set_compress_fastq(bool value);
  public:

  // bool recursive = 5;
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartBarcodingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_reads_directories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_reads_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration_;
  bool compress_fastq_;
  bool recursive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartBarcodingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartBarcodingResponse) */ {
 public:
  inline StartBarcodingResponse() : StartBarcodingResponse(nullptr) {}
  ~StartBarcodingResponse() override;
  explicit constexpr StartBarcodingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartBarcodingResponse(const StartBarcodingResponse& from);
  StartBarcodingResponse(StartBarcodingResponse&& from) noexcept
    : StartBarcodingResponse() {
    *this = ::std::move(from);
  }

  inline StartBarcodingResponse& operator=(const StartBarcodingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBarcodingResponse& operator=(StartBarcodingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartBarcodingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartBarcodingResponse* internal_default_instance() {
    return reinterpret_cast<const StartBarcodingResponse*>(
               &_StartBarcodingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StartBarcodingResponse& a, StartBarcodingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBarcodingResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBarcodingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBarcodingResponse* New() const final {
    return new StartBarcodingResponse();
  }

  StartBarcodingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBarcodingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartBarcodingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartBarcodingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBarcodingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartBarcodingResponse";
  }
  protected:
  explicit StartBarcodingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartBarcodingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartAlignmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartAlignmentRequest) */ {
 public:
  inline StartAlignmentRequest() : StartAlignmentRequest(nullptr) {}
  ~StartAlignmentRequest() override;
  explicit constexpr StartAlignmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartAlignmentRequest(const StartAlignmentRequest& from);
  StartAlignmentRequest(StartAlignmentRequest&& from) noexcept
    : StartAlignmentRequest() {
    *this = ::std::move(from);
  }

  inline StartAlignmentRequest& operator=(const StartAlignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAlignmentRequest& operator=(StartAlignmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartAlignmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartAlignmentRequest* internal_default_instance() {
    return reinterpret_cast<const StartAlignmentRequest*>(
               &_StartAlignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StartAlignmentRequest& a, StartAlignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAlignmentRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAlignmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartAlignmentRequest* New() const final {
    return new StartAlignmentRequest();
  }

  StartAlignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartAlignmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartAlignmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartAlignmentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAlignmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartAlignmentRequest";
  }
  protected:
  explicit StartAlignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputReadsDirectoriesFieldNumber = 1,
    kOutputReadsDirectoryFieldNumber = 2,
    kNameFieldNumber = 7,
    kAlignmentConfigurationFieldNumber = 6,
    kRecursiveFieldNumber = 4,
  };
  // repeated string input_reads_directories = 1;
  int input_reads_directories_size() const;
  private:
  int _internal_input_reads_directories_size() const;
  public:
  void clear_input_reads_directories();
  const std::string& input_reads_directories(int index) const;
  std::string* mutable_input_reads_directories(int index);
  void set_input_reads_directories(int index, const std::string& value);
  void set_input_reads_directories(int index, std::string&& value);
  void set_input_reads_directories(int index, const char* value);
  void set_input_reads_directories(int index, const char* value, size_t size);
  std::string* add_input_reads_directories();
  void add_input_reads_directories(const std::string& value);
  void add_input_reads_directories(std::string&& value);
  void add_input_reads_directories(const char* value);
  void add_input_reads_directories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_reads_directories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_reads_directories();
  private:
  const std::string& _internal_input_reads_directories(int index) const;
  std::string* _internal_add_input_reads_directories();
  public:

  // string output_reads_directory = 2;
  void clear_output_reads_directory();
  const std::string& output_reads_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_reads_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_reads_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_reads_directory();
  void set_allocated_output_reads_directory(std::string* output_reads_directory);
  private:
  const std::string& _internal_output_reads_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_reads_directory(const std::string& value);
  std::string* _internal_mutable_output_reads_directory();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
  bool has_alignment_configuration() const;
  private:
  bool _internal_has_alignment_configuration() const;
  public:
  void clear_alignment_configuration();
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& alignment_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::AlignmentConfiguration* release_alignment_configuration();
  ::minknow_api::analysis_configuration::AlignmentConfiguration* mutable_alignment_configuration();
  void set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  private:
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& _internal_alignment_configuration() const;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _internal_mutable_alignment_configuration();
  public:
  void unsafe_arena_set_allocated_alignment_configuration(
      ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  ::minknow_api::analysis_configuration::AlignmentConfiguration* unsafe_arena_release_alignment_configuration();

  // bool recursive = 4;
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartAlignmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_reads_directories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_reads_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration_;
  bool recursive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartAlignmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartAlignmentResponse) */ {
 public:
  inline StartAlignmentResponse() : StartAlignmentResponse(nullptr) {}
  ~StartAlignmentResponse() override;
  explicit constexpr StartAlignmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartAlignmentResponse(const StartAlignmentResponse& from);
  StartAlignmentResponse(StartAlignmentResponse&& from) noexcept
    : StartAlignmentResponse() {
    *this = ::std::move(from);
  }

  inline StartAlignmentResponse& operator=(const StartAlignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartAlignmentResponse& operator=(StartAlignmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartAlignmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartAlignmentResponse* internal_default_instance() {
    return reinterpret_cast<const StartAlignmentResponse*>(
               &_StartAlignmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StartAlignmentResponse& a, StartAlignmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartAlignmentResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartAlignmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartAlignmentResponse* New() const final {
    return new StartAlignmentResponse();
  }

  StartAlignmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartAlignmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartAlignmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartAlignmentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAlignmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartAlignmentResponse";
  }
  protected:
  explicit StartAlignmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartAlignmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse, 
    std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse, 
    std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse();
  explicit constexpr StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse& other);
  static const StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse*>(&_StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.basecaller.StartPostProcessingProtocolRequest.SettingValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class StartPostProcessingProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartPostProcessingProtocolRequest) */ {
 public:
  inline StartPostProcessingProtocolRequest() : StartPostProcessingProtocolRequest(nullptr) {}
  ~StartPostProcessingProtocolRequest() override;
  explicit constexpr StartPostProcessingProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPostProcessingProtocolRequest(const StartPostProcessingProtocolRequest& from);
  StartPostProcessingProtocolRequest(StartPostProcessingProtocolRequest&& from) noexcept
    : StartPostProcessingProtocolRequest() {
    *this = ::std::move(from);
  }

  inline StartPostProcessingProtocolRequest& operator=(const StartPostProcessingProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPostProcessingProtocolRequest& operator=(StartPostProcessingProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPostProcessingProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPostProcessingProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const StartPostProcessingProtocolRequest*>(
               &_StartPostProcessingProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StartPostProcessingProtocolRequest& a, StartPostProcessingProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPostProcessingProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPostProcessingProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartPostProcessingProtocolRequest* New() const final {
    return new StartPostProcessingProtocolRequest();
  }

  StartPostProcessingProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartPostProcessingProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPostProcessingProtocolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartPostProcessingProtocolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPostProcessingProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartPostProcessingProtocolRequest";
  }
  protected:
  explicit StartPostProcessingProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSettingValuesFieldNumber = 6,
    kIdentifierFieldNumber = 1,
    kInputFast5DirectoryFieldNumber = 2,
    kInputFastqDirectoryFieldNumber = 3,
    kInputBamDirectoryFieldNumber = 4,
    kOutputDirectoryFieldNumber = 5,
    kSequencingProtocolRunIdFieldNumber = 7,
  };
  // map<string, .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue> setting_values = 6;
  int setting_values_size() const;
  private:
  int _internal_setting_values_size() const;
  public:
  void clear_setting_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >&
      _internal_setting_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >*
      _internal_mutable_setting_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >&
      setting_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >*
      mutable_setting_values();

  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string input_fast5_directory = 2;
  void clear_input_fast5_directory();
  const std::string& input_fast5_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_fast5_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_fast5_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_input_fast5_directory();
  void set_allocated_input_fast5_directory(std::string* input_fast5_directory);
  private:
  const std::string& _internal_input_fast5_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_fast5_directory(const std::string& value);
  std::string* _internal_mutable_input_fast5_directory();
  public:

  // string input_fastq_directory = 3;
  void clear_input_fastq_directory();
  const std::string& input_fastq_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_fastq_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_fastq_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_input_fastq_directory();
  void set_allocated_input_fastq_directory(std::string* input_fastq_directory);
  private:
  const std::string& _internal_input_fastq_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_fastq_directory(const std::string& value);
  std::string* _internal_mutable_input_fastq_directory();
  public:

  // string input_bam_directory = 4;
  void clear_input_bam_directory();
  const std::string& input_bam_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_bam_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_bam_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_input_bam_directory();
  void set_allocated_input_bam_directory(std::string* input_bam_directory);
  private:
  const std::string& _internal_input_bam_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_bam_directory(const std::string& value);
  std::string* _internal_mutable_input_bam_directory();
  public:

  // string output_directory = 5;
  void clear_output_directory();
  const std::string& output_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_directory();
  void set_allocated_output_directory(std::string* output_directory);
  private:
  const std::string& _internal_output_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_directory(const std::string& value);
  std::string* _internal_mutable_output_directory();
  public:

  // string sequencing_protocol_run_id = 7;
  void clear_sequencing_protocol_run_id();
  const std::string& sequencing_protocol_run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequencing_protocol_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequencing_protocol_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_sequencing_protocol_run_id();
  void set_allocated_sequencing_protocol_run_id(std::string* sequencing_protocol_run_id);
  private:
  const std::string& _internal_sequencing_protocol_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequencing_protocol_run_id(const std::string& value);
  std::string* _internal_mutable_sequencing_protocol_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartPostProcessingProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StartPostProcessingProtocolRequest_SettingValuesEntry_DoNotUse,
      std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> setting_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_fast5_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_fastq_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_bam_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequencing_protocol_run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  ~StartRequest() override;
  explicit constexpr StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StartRequestCase {
    kStartBasecallingRequest = 2,
    kStartBarcodingRequest = 3,
    kStartAlignmentRequest = 4,
    kStartPostProcessingProtocolRequest = 5,
    START_REQUEST_NOT_SET = 0,
  };

  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return new StartRequest();
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartBasecallingRequestFieldNumber = 2,
    kStartBarcodingRequestFieldNumber = 3,
    kStartAlignmentRequestFieldNumber = 4,
    kStartPostProcessingProtocolRequestFieldNumber = 5,
  };
  // .minknow_api.basecaller.StartBasecallingRequest start_basecalling_request = 2;
  bool has_start_basecalling_request() const;
  private:
  bool _internal_has_start_basecalling_request() const;
  public:
  void clear_start_basecalling_request();
  const ::minknow_api::basecaller::StartBasecallingRequest& start_basecalling_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartBasecallingRequest* release_start_basecalling_request();
  ::minknow_api::basecaller::StartBasecallingRequest* mutable_start_basecalling_request();
  void set_allocated_start_basecalling_request(::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request);
  private:
  const ::minknow_api::basecaller::StartBasecallingRequest& _internal_start_basecalling_request() const;
  ::minknow_api::basecaller::StartBasecallingRequest* _internal_mutable_start_basecalling_request();
  public:
  void unsafe_arena_set_allocated_start_basecalling_request(
      ::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request);
  ::minknow_api::basecaller::StartBasecallingRequest* unsafe_arena_release_start_basecalling_request();

  // .minknow_api.basecaller.StartBarcodingRequest start_barcoding_request = 3;
  bool has_start_barcoding_request() const;
  private:
  bool _internal_has_start_barcoding_request() const;
  public:
  void clear_start_barcoding_request();
  const ::minknow_api::basecaller::StartBarcodingRequest& start_barcoding_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartBarcodingRequest* release_start_barcoding_request();
  ::minknow_api::basecaller::StartBarcodingRequest* mutable_start_barcoding_request();
  void set_allocated_start_barcoding_request(::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request);
  private:
  const ::minknow_api::basecaller::StartBarcodingRequest& _internal_start_barcoding_request() const;
  ::minknow_api::basecaller::StartBarcodingRequest* _internal_mutable_start_barcoding_request();
  public:
  void unsafe_arena_set_allocated_start_barcoding_request(
      ::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request);
  ::minknow_api::basecaller::StartBarcodingRequest* unsafe_arena_release_start_barcoding_request();

  // .minknow_api.basecaller.StartAlignmentRequest start_alignment_request = 4;
  bool has_start_alignment_request() const;
  private:
  bool _internal_has_start_alignment_request() const;
  public:
  void clear_start_alignment_request();
  const ::minknow_api::basecaller::StartAlignmentRequest& start_alignment_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartAlignmentRequest* release_start_alignment_request();
  ::minknow_api::basecaller::StartAlignmentRequest* mutable_start_alignment_request();
  void set_allocated_start_alignment_request(::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request);
  private:
  const ::minknow_api::basecaller::StartAlignmentRequest& _internal_start_alignment_request() const;
  ::minknow_api::basecaller::StartAlignmentRequest* _internal_mutable_start_alignment_request();
  public:
  void unsafe_arena_set_allocated_start_alignment_request(
      ::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request);
  ::minknow_api::basecaller::StartAlignmentRequest* unsafe_arena_release_start_alignment_request();

  // .minknow_api.basecaller.StartPostProcessingProtocolRequest start_post_processing_protocol_request = 5;
  bool has_start_post_processing_protocol_request() const;
  private:
  bool _internal_has_start_post_processing_protocol_request() const;
  public:
  void clear_start_post_processing_protocol_request();
  const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& start_post_processing_protocol_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartPostProcessingProtocolRequest* release_start_post_processing_protocol_request();
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* mutable_start_post_processing_protocol_request();
  void set_allocated_start_post_processing_protocol_request(::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request);
  private:
  const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& _internal_start_post_processing_protocol_request() const;
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* _internal_mutable_start_post_processing_protocol_request();
  public:
  void unsafe_arena_set_allocated_start_post_processing_protocol_request(
      ::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request);
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* unsafe_arena_release_start_post_processing_protocol_request();

  void clear_start_request();
  StartRequestCase start_request_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartRequest)
 private:
  class _Internal;
  void set_has_start_basecalling_request();
  void set_has_start_barcoding_request();
  void set_has_start_alignment_request();
  void set_has_start_post_processing_protocol_request();

  inline bool has_start_request() const;
  inline void clear_has_start_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StartRequestUnion {
    constexpr StartRequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request_;
    ::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request_;
    ::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request_;
    ::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request_;
  } start_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class StartPostProcessingProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.StartPostProcessingProtocolResponse) */ {
 public:
  inline StartPostProcessingProtocolResponse() : StartPostProcessingProtocolResponse(nullptr) {}
  ~StartPostProcessingProtocolResponse() override;
  explicit constexpr StartPostProcessingProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPostProcessingProtocolResponse(const StartPostProcessingProtocolResponse& from);
  StartPostProcessingProtocolResponse(StartPostProcessingProtocolResponse&& from) noexcept
    : StartPostProcessingProtocolResponse() {
    *this = ::std::move(from);
  }

  inline StartPostProcessingProtocolResponse& operator=(const StartPostProcessingProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPostProcessingProtocolResponse& operator=(StartPostProcessingProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPostProcessingProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPostProcessingProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const StartPostProcessingProtocolResponse*>(
               &_StartPostProcessingProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StartPostProcessingProtocolResponse& a, StartPostProcessingProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPostProcessingProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPostProcessingProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartPostProcessingProtocolResponse* New() const final {
    return new StartPostProcessingProtocolResponse();
  }

  StartPostProcessingProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartPostProcessingProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPostProcessingProtocolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartPostProcessingProtocolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPostProcessingProtocolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.StartPostProcessingProtocolResponse";
  }
  protected:
  explicit StartPostProcessingProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.StartPostProcessingProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() override;
  explicit constexpr CancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelRequest* New() const final {
    return new CancelRequest();
  }

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  explicit constexpr CancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelResponse* New() const final {
    return new CancelResponse();
  }

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class RunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.RunInfo) */ {
 public:
  inline RunInfo() : RunInfo(nullptr) {}
  ~RunInfo() override;
  explicit constexpr RunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunInfo(const RunInfo& from);
  RunInfo(RunInfo&& from) noexcept
    : RunInfo() {
    *this = ::std::move(from);
  }

  inline RunInfo& operator=(const RunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunInfo& operator=(RunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunInfo& default_instance() {
    return *internal_default_instance();
  }
  enum StartRequestOneofCase {
    kStartBasecallingRequest = 2,
    kStartBarcodingRequest = 11,
    kStartAlignmentRequest = 12,
    kStartPostProcessingProtocolRequest = 13,
    START_REQUEST_ONEOF_NOT_SET = 0,
  };

  static inline const RunInfo* internal_default_instance() {
    return reinterpret_cast<const RunInfo*>(
               &_RunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RunInfo& a, RunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RunInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunInfo* New() const final {
    return new RunInfo();
  }

  RunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RunInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.RunInfo";
  }
  protected:
  explicit RunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 4,
    kIdFieldNumber = 1,
    kStartTimeFieldNumber = 8,
    kEndTimeFieldNumber = 9,
    kEstimatedEndTimeFieldNumber = 10,
    kStateFieldNumber = 3,
    kFilesDiscoveredFieldNumber = 5,
    kProgressCurrentFieldNumber = 6,
    kProgressTotalFieldNumber = 7,
    kStartBasecallingRequestFieldNumber = 2,
    kStartBarcodingRequestFieldNumber = 11,
    kStartAlignmentRequestFieldNumber = 12,
    kStartPostProcessingProtocolRequestFieldNumber = 13,
  };
  // repeated string errors = 4;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp start_time = 8;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 9;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.protobuf.Timestamp estimated_end_time = 10;
  bool has_estimated_end_time() const;
  private:
  bool _internal_has_estimated_end_time() const;
  public:
  void clear_estimated_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& estimated_end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_estimated_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_estimated_end_time();
  void set_allocated_estimated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_estimated_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_estimated_end_time();
  public:
  void unsafe_arena_set_allocated_estimated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_estimated_end_time();

  // .minknow_api.basecaller.State state = 3;
  void clear_state();
  ::minknow_api::basecaller::State state() const;
  void set_state(::minknow_api::basecaller::State value);
  private:
  ::minknow_api::basecaller::State _internal_state() const;
  void _internal_set_state(::minknow_api::basecaller::State value);
  public:

  // int32 files_discovered = 5;
  void clear_files_discovered();
  ::PROTOBUF_NAMESPACE_ID::int32 files_discovered() const;
  void set_files_discovered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_files_discovered() const;
  void _internal_set_files_discovered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 progress_current = 6;
  void clear_progress_current();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_current() const;
  void set_progress_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_current() const;
  void _internal_set_progress_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 progress_total = 7;
  void clear_progress_total();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_total() const;
  void set_progress_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_total() const;
  void _internal_set_progress_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .minknow_api.basecaller.StartBasecallingRequest start_basecalling_request = 2;
  bool has_start_basecalling_request() const;
  private:
  bool _internal_has_start_basecalling_request() const;
  public:
  void clear_start_basecalling_request();
  const ::minknow_api::basecaller::StartBasecallingRequest& start_basecalling_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartBasecallingRequest* release_start_basecalling_request();
  ::minknow_api::basecaller::StartBasecallingRequest* mutable_start_basecalling_request();
  void set_allocated_start_basecalling_request(::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request);
  private:
  const ::minknow_api::basecaller::StartBasecallingRequest& _internal_start_basecalling_request() const;
  ::minknow_api::basecaller::StartBasecallingRequest* _internal_mutable_start_basecalling_request();
  public:
  void unsafe_arena_set_allocated_start_basecalling_request(
      ::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request);
  ::minknow_api::basecaller::StartBasecallingRequest* unsafe_arena_release_start_basecalling_request();

  // .minknow_api.basecaller.StartBarcodingRequest start_barcoding_request = 11;
  bool has_start_barcoding_request() const;
  private:
  bool _internal_has_start_barcoding_request() const;
  public:
  void clear_start_barcoding_request();
  const ::minknow_api::basecaller::StartBarcodingRequest& start_barcoding_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartBarcodingRequest* release_start_barcoding_request();
  ::minknow_api::basecaller::StartBarcodingRequest* mutable_start_barcoding_request();
  void set_allocated_start_barcoding_request(::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request);
  private:
  const ::minknow_api::basecaller::StartBarcodingRequest& _internal_start_barcoding_request() const;
  ::minknow_api::basecaller::StartBarcodingRequest* _internal_mutable_start_barcoding_request();
  public:
  void unsafe_arena_set_allocated_start_barcoding_request(
      ::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request);
  ::minknow_api::basecaller::StartBarcodingRequest* unsafe_arena_release_start_barcoding_request();

  // .minknow_api.basecaller.StartAlignmentRequest start_alignment_request = 12;
  bool has_start_alignment_request() const;
  private:
  bool _internal_has_start_alignment_request() const;
  public:
  void clear_start_alignment_request();
  const ::minknow_api::basecaller::StartAlignmentRequest& start_alignment_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartAlignmentRequest* release_start_alignment_request();
  ::minknow_api::basecaller::StartAlignmentRequest* mutable_start_alignment_request();
  void set_allocated_start_alignment_request(::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request);
  private:
  const ::minknow_api::basecaller::StartAlignmentRequest& _internal_start_alignment_request() const;
  ::minknow_api::basecaller::StartAlignmentRequest* _internal_mutable_start_alignment_request();
  public:
  void unsafe_arena_set_allocated_start_alignment_request(
      ::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request);
  ::minknow_api::basecaller::StartAlignmentRequest* unsafe_arena_release_start_alignment_request();

  // .minknow_api.basecaller.StartPostProcessingProtocolRequest start_post_processing_protocol_request = 13;
  bool has_start_post_processing_protocol_request() const;
  private:
  bool _internal_has_start_post_processing_protocol_request() const;
  public:
  void clear_start_post_processing_protocol_request();
  const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& start_post_processing_protocol_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartPostProcessingProtocolRequest* release_start_post_processing_protocol_request();
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* mutable_start_post_processing_protocol_request();
  void set_allocated_start_post_processing_protocol_request(::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request);
  private:
  const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& _internal_start_post_processing_protocol_request() const;
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* _internal_mutable_start_post_processing_protocol_request();
  public:
  void unsafe_arena_set_allocated_start_post_processing_protocol_request(
      ::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request);
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* unsafe_arena_release_start_post_processing_protocol_request();

  void clear_start_request_oneof();
  StartRequestOneofCase start_request_oneof_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.RunInfo)
 private:
  class _Internal;
  void set_has_start_basecalling_request();
  void set_has_start_barcoding_request();
  void set_has_start_alignment_request();
  void set_has_start_post_processing_protocol_request();

  inline bool has_start_request_oneof() const;
  inline void clear_has_start_request_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_end_time_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 files_discovered_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_current_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_total_;
  union StartRequestOneofUnion {
    constexpr StartRequestOneofUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request_;
    ::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request_;
    ::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request_;
    ::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request_;
  } start_request_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequest_IdList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.GetInfoRequest.IdList) */ {
 public:
  inline GetInfoRequest_IdList() : GetInfoRequest_IdList(nullptr) {}
  ~GetInfoRequest_IdList() override;
  explicit constexpr GetInfoRequest_IdList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfoRequest_IdList(const GetInfoRequest_IdList& from);
  GetInfoRequest_IdList(GetInfoRequest_IdList&& from) noexcept
    : GetInfoRequest_IdList() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest_IdList& operator=(const GetInfoRequest_IdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest_IdList& operator=(GetInfoRequest_IdList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfoRequest_IdList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInfoRequest_IdList* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest_IdList*>(
               &_GetInfoRequest_IdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetInfoRequest_IdList& a, GetInfoRequest_IdList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequest_IdList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoRequest_IdList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest_IdList* New() const final {
    return new GetInfoRequest_IdList();
  }

  GetInfoRequest_IdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest_IdList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInfoRequest_IdList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInfoRequest_IdList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest_IdList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.GetInfoRequest.IdList";
  }
  protected:
  explicit GetInfoRequest_IdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.GetInfoRequest.IdList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.GetInfoRequest) */ {
 public:
  inline GetInfoRequest() : GetInfoRequest(nullptr) {}
  ~GetInfoRequest() override;
  explicit constexpr GetInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfoRequest(const GetInfoRequest& from);
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  enum SelectionCase {
    kPreset = 1,
    kId = 2,
    kList = 3,
    SELECTION_NOT_SET = 0,
  };

  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return new GetInfoRequest();
  }

  GetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.GetInfoRequest";
  }
  protected:
  explicit GetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetInfoRequest_IdList IdList;

  // accessors -------------------------------------------------------

  enum : int {
    kPresetFieldNumber = 1,
    kIdFieldNumber = 2,
    kListFieldNumber = 3,
  };
  // .minknow_api.basecaller.SelectionPreset preset = 1;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  ::minknow_api::basecaller::SelectionPreset preset() const;
  void set_preset(::minknow_api::basecaller::SelectionPreset value);
  private:
  ::minknow_api::basecaller::SelectionPreset _internal_preset() const;
  void _internal_set_preset(::minknow_api::basecaller::SelectionPreset value);
  public:

  // string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .minknow_api.basecaller.GetInfoRequest.IdList list = 3;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::minknow_api::basecaller::GetInfoRequest_IdList& list() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::GetInfoRequest_IdList* release_list();
  ::minknow_api::basecaller::GetInfoRequest_IdList* mutable_list();
  void set_allocated_list(::minknow_api::basecaller::GetInfoRequest_IdList* list);
  private:
  const ::minknow_api::basecaller::GetInfoRequest_IdList& _internal_list() const;
  ::minknow_api::basecaller::GetInfoRequest_IdList* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::minknow_api::basecaller::GetInfoRequest_IdList* list);
  ::minknow_api::basecaller::GetInfoRequest_IdList* unsafe_arena_release_list();

  void clear_selection();
  SelectionCase selection_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.GetInfoRequest)
 private:
  class _Internal;
  void set_has_preset();
  void set_has_id();
  void set_has_list();

  inline bool has_selection() const;
  inline void clear_has_selection();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SelectionUnion {
    constexpr SelectionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int preset_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::minknow_api::basecaller::GetInfoRequest_IdList* list_;
  } selection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.GetInfoResponse) */ {
 public:
  inline GetInfoResponse() : GetInfoResponse(nullptr) {}
  ~GetInfoResponse() override;
  explicit constexpr GetInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfoResponse(const GetInfoResponse& from);
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return new GetInfoResponse();
  }

  GetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.GetInfoResponse";
  }
  protected:
  explicit GetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
  };
  // repeated .minknow_api.basecaller.RunInfo runs = 1;
  int runs_size() const;
  private:
  int _internal_runs_size() const;
  public:
  void clear_runs();
  ::minknow_api::basecaller::RunInfo* mutable_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >*
      mutable_runs();
  private:
  const ::minknow_api::basecaller::RunInfo& _internal_runs(int index) const;
  ::minknow_api::basecaller::RunInfo* _internal_add_runs();
  public:
  const ::minknow_api::basecaller::RunInfo& runs(int index) const;
  ::minknow_api::basecaller::RunInfo* add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >&
      runs() const;

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.GetInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo > runs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class WatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.WatchRequest) */ {
 public:
  inline WatchRequest() : WatchRequest(nullptr) {}
  ~WatchRequest() override;
  explicit constexpr WatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchRequest(const WatchRequest& from);
  WatchRequest(WatchRequest&& from) noexcept
    : WatchRequest() {
    *this = ::std::move(from);
  }

  inline WatchRequest& operator=(const WatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRequest& operator=(WatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRequest*>(
               &_WatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WatchRequest& a, WatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchRequest* New() const final {
    return new WatchRequest();
  }

  WatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.WatchRequest";
  }
  protected:
  explicit WatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendFinishedRunsFieldNumber = 1,
  };
  // bool send_finished_runs = 1;
  void clear_send_finished_runs();
  bool send_finished_runs() const;
  void set_send_finished_runs(bool value);
  private:
  bool _internal_send_finished_runs() const;
  void _internal_set_send_finished_runs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.WatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool send_finished_runs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class WatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.WatchResponse) */ {
 public:
  inline WatchResponse() : WatchResponse(nullptr) {}
  ~WatchResponse() override;
  explicit constexpr WatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchResponse(const WatchResponse& from);
  WatchResponse(WatchResponse&& from) noexcept
    : WatchResponse() {
    *this = ::std::move(from);
  }

  inline WatchResponse& operator=(const WatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchResponse& operator=(WatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchResponse* internal_default_instance() {
    return reinterpret_cast<const WatchResponse*>(
               &_WatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WatchResponse& a, WatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchResponse* New() const final {
    return new WatchResponse();
  }

  WatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.WatchResponse";
  }
  protected:
  explicit WatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
  };
  // repeated .minknow_api.basecaller.RunInfo runs = 1;
  int runs_size() const;
  private:
  int _internal_runs_size() const;
  public:
  void clear_runs();
  ::minknow_api::basecaller::RunInfo* mutable_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >*
      mutable_runs();
  private:
  const ::minknow_api::basecaller::RunInfo& _internal_runs(int index) const;
  ::minknow_api::basecaller::RunInfo* _internal_add_runs();
  public:
  const ::minknow_api::basecaller::RunInfo& runs(int index) const;
  ::minknow_api::basecaller::RunInfo* add_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >&
      runs() const;

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.WatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo > runs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class MakeAlignmentIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.MakeAlignmentIndexRequest) */ {
 public:
  inline MakeAlignmentIndexRequest() : MakeAlignmentIndexRequest(nullptr) {}
  ~MakeAlignmentIndexRequest() override;
  explicit constexpr MakeAlignmentIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeAlignmentIndexRequest(const MakeAlignmentIndexRequest& from);
  MakeAlignmentIndexRequest(MakeAlignmentIndexRequest&& from) noexcept
    : MakeAlignmentIndexRequest() {
    *this = ::std::move(from);
  }

  inline MakeAlignmentIndexRequest& operator=(const MakeAlignmentIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeAlignmentIndexRequest& operator=(MakeAlignmentIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MakeAlignmentIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeAlignmentIndexRequest* internal_default_instance() {
    return reinterpret_cast<const MakeAlignmentIndexRequest*>(
               &_MakeAlignmentIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MakeAlignmentIndexRequest& a, MakeAlignmentIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeAlignmentIndexRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeAlignmentIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeAlignmentIndexRequest* New() const final {
    return new MakeAlignmentIndexRequest();
  }

  MakeAlignmentIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeAlignmentIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MakeAlignmentIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MakeAlignmentIndexRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeAlignmentIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.MakeAlignmentIndexRequest";
  }
  protected:
  explicit MakeAlignmentIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputAlignmentReferenceFieldNumber = 1,
    kOutputAlignmentIndexFieldNumber = 2,
  };
  // string input_alignment_reference = 1;
  void clear_input_alignment_reference();
  const std::string& input_alignment_reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_alignment_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_alignment_reference();
  PROTOBUF_MUST_USE_RESULT std::string* release_input_alignment_reference();
  void set_allocated_input_alignment_reference(std::string* input_alignment_reference);
  private:
  const std::string& _internal_input_alignment_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_alignment_reference(const std::string& value);
  std::string* _internal_mutable_input_alignment_reference();
  public:

  // string output_alignment_index = 2;
  void clear_output_alignment_index();
  const std::string& output_alignment_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_alignment_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_alignment_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_alignment_index();
  void set_allocated_output_alignment_index(std::string* output_alignment_index);
  private:
  const std::string& _internal_output_alignment_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_alignment_index(const std::string& value);
  std::string* _internal_mutable_output_alignment_index();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.MakeAlignmentIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_alignment_reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_alignment_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class MakeAlignmentIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.MakeAlignmentIndexResponse) */ {
 public:
  inline MakeAlignmentIndexResponse() : MakeAlignmentIndexResponse(nullptr) {}
  explicit constexpr MakeAlignmentIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeAlignmentIndexResponse(const MakeAlignmentIndexResponse& from);
  MakeAlignmentIndexResponse(MakeAlignmentIndexResponse&& from) noexcept
    : MakeAlignmentIndexResponse() {
    *this = ::std::move(from);
  }

  inline MakeAlignmentIndexResponse& operator=(const MakeAlignmentIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeAlignmentIndexResponse& operator=(MakeAlignmentIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MakeAlignmentIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeAlignmentIndexResponse* internal_default_instance() {
    return reinterpret_cast<const MakeAlignmentIndexResponse*>(
               &_MakeAlignmentIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MakeAlignmentIndexResponse& a, MakeAlignmentIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeAlignmentIndexResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeAlignmentIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeAlignmentIndexResponse* New() const final {
    return new MakeAlignmentIndexResponse();
  }

  MakeAlignmentIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeAlignmentIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MakeAlignmentIndexResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MakeAlignmentIndexResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.MakeAlignmentIndexResponse";
  }
  protected:
  explicit MakeAlignmentIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.MakeAlignmentIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListPostProcessingProtocolsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListPostProcessingProtocolsRequest) */ {
 public:
  inline ListPostProcessingProtocolsRequest() : ListPostProcessingProtocolsRequest(nullptr) {}
  explicit constexpr ListPostProcessingProtocolsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPostProcessingProtocolsRequest(const ListPostProcessingProtocolsRequest& from);
  ListPostProcessingProtocolsRequest(ListPostProcessingProtocolsRequest&& from) noexcept
    : ListPostProcessingProtocolsRequest() {
    *this = ::std::move(from);
  }

  inline ListPostProcessingProtocolsRequest& operator=(const ListPostProcessingProtocolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPostProcessingProtocolsRequest& operator=(ListPostProcessingProtocolsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPostProcessingProtocolsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPostProcessingProtocolsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPostProcessingProtocolsRequest*>(
               &_ListPostProcessingProtocolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListPostProcessingProtocolsRequest& a, ListPostProcessingProtocolsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPostProcessingProtocolsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPostProcessingProtocolsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPostProcessingProtocolsRequest* New() const final {
    return new ListPostProcessingProtocolsRequest();
  }

  ListPostProcessingProtocolsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPostProcessingProtocolsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListPostProcessingProtocolsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListPostProcessingProtocolsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListPostProcessingProtocolsRequest";
  }
  protected:
  explicit ListPostProcessingProtocolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListPostProcessingProtocolsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class PostProcessingProtocolInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.PostProcessingProtocolInfo) */ {
 public:
  inline PostProcessingProtocolInfo() : PostProcessingProtocolInfo(nullptr) {}
  ~PostProcessingProtocolInfo() override;
  explicit constexpr PostProcessingProtocolInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostProcessingProtocolInfo(const PostProcessingProtocolInfo& from);
  PostProcessingProtocolInfo(PostProcessingProtocolInfo&& from) noexcept
    : PostProcessingProtocolInfo() {
    *this = ::std::move(from);
  }

  inline PostProcessingProtocolInfo& operator=(const PostProcessingProtocolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostProcessingProtocolInfo& operator=(PostProcessingProtocolInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostProcessingProtocolInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostProcessingProtocolInfo* internal_default_instance() {
    return reinterpret_cast<const PostProcessingProtocolInfo*>(
               &_PostProcessingProtocolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PostProcessingProtocolInfo& a, PostProcessingProtocolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PostProcessingProtocolInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostProcessingProtocolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostProcessingProtocolInfo* New() const final {
    return new PostProcessingProtocolInfo();
  }

  PostProcessingProtocolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostProcessingProtocolInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PostProcessingProtocolInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PostProcessingProtocolInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostProcessingProtocolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.PostProcessingProtocolInfo";
  }
  protected:
  explicit PostProcessingProtocolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.PostProcessingProtocolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListPostProcessingProtocolsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListPostProcessingProtocolsResponse) */ {
 public:
  inline ListPostProcessingProtocolsResponse() : ListPostProcessingProtocolsResponse(nullptr) {}
  ~ListPostProcessingProtocolsResponse() override;
  explicit constexpr ListPostProcessingProtocolsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPostProcessingProtocolsResponse(const ListPostProcessingProtocolsResponse& from);
  ListPostProcessingProtocolsResponse(ListPostProcessingProtocolsResponse&& from) noexcept
    : ListPostProcessingProtocolsResponse() {
    *this = ::std::move(from);
  }

  inline ListPostProcessingProtocolsResponse& operator=(const ListPostProcessingProtocolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPostProcessingProtocolsResponse& operator=(ListPostProcessingProtocolsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPostProcessingProtocolsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPostProcessingProtocolsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPostProcessingProtocolsResponse*>(
               &_ListPostProcessingProtocolsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListPostProcessingProtocolsResponse& a, ListPostProcessingProtocolsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPostProcessingProtocolsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPostProcessingProtocolsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPostProcessingProtocolsResponse* New() const final {
    return new ListPostProcessingProtocolsResponse();
  }

  ListPostProcessingProtocolsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPostProcessingProtocolsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPostProcessingProtocolsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPostProcessingProtocolsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPostProcessingProtocolsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListPostProcessingProtocolsResponse";
  }
  protected:
  explicit ListPostProcessingProtocolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolsFieldNumber = 1,
  };
  // repeated .minknow_api.basecaller.PostProcessingProtocolInfo protocols = 1;
  int protocols_size() const;
  private:
  int _internal_protocols_size() const;
  public:
  void clear_protocols();
  ::minknow_api::basecaller::PostProcessingProtocolInfo* mutable_protocols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::PostProcessingProtocolInfo >*
      mutable_protocols();
  private:
  const ::minknow_api::basecaller::PostProcessingProtocolInfo& _internal_protocols(int index) const;
  ::minknow_api::basecaller::PostProcessingProtocolInfo* _internal_add_protocols();
  public:
  const ::minknow_api::basecaller::PostProcessingProtocolInfo& protocols(int index) const;
  ::minknow_api::basecaller::PostProcessingProtocolInfo* add_protocols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::PostProcessingProtocolInfo >&
      protocols() const;

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListPostProcessingProtocolsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::PostProcessingProtocolInfo > protocols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForPostProcessingProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest) */ {
 public:
  inline ListSettingsForPostProcessingProtocolRequest() : ListSettingsForPostProcessingProtocolRequest(nullptr) {}
  ~ListSettingsForPostProcessingProtocolRequest() override;
  explicit constexpr ListSettingsForPostProcessingProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForPostProcessingProtocolRequest(const ListSettingsForPostProcessingProtocolRequest& from);
  ListSettingsForPostProcessingProtocolRequest(ListSettingsForPostProcessingProtocolRequest&& from) noexcept
    : ListSettingsForPostProcessingProtocolRequest() {
    *this = ::std::move(from);
  }

  inline ListSettingsForPostProcessingProtocolRequest& operator=(const ListSettingsForPostProcessingProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForPostProcessingProtocolRequest& operator=(ListSettingsForPostProcessingProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForPostProcessingProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForPostProcessingProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForPostProcessingProtocolRequest*>(
               &_ListSettingsForPostProcessingProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ListSettingsForPostProcessingProtocolRequest& a, ListSettingsForPostProcessingProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForPostProcessingProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForPostProcessingProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForPostProcessingProtocolRequest* New() const final {
    return new ListSettingsForPostProcessingProtocolRequest();
  }

  ListSettingsForPostProcessingProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForPostProcessingProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForPostProcessingProtocolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForPostProcessingProtocolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForPostProcessingProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest";
  }
  protected:
  explicit ListSettingsForPostProcessingProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForPostProcessingProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse) */ {
 public:
  inline ListSettingsForPostProcessingProtocolResponse() : ListSettingsForPostProcessingProtocolResponse(nullptr) {}
  ~ListSettingsForPostProcessingProtocolResponse() override;
  explicit constexpr ListSettingsForPostProcessingProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForPostProcessingProtocolResponse(const ListSettingsForPostProcessingProtocolResponse& from);
  ListSettingsForPostProcessingProtocolResponse(ListSettingsForPostProcessingProtocolResponse&& from) noexcept
    : ListSettingsForPostProcessingProtocolResponse() {
    *this = ::std::move(from);
  }

  inline ListSettingsForPostProcessingProtocolResponse& operator=(const ListSettingsForPostProcessingProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForPostProcessingProtocolResponse& operator=(ListSettingsForPostProcessingProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForPostProcessingProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForPostProcessingProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForPostProcessingProtocolResponse*>(
               &_ListSettingsForPostProcessingProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ListSettingsForPostProcessingProtocolResponse& a, ListSettingsForPostProcessingProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForPostProcessingProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForPostProcessingProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForPostProcessingProtocolResponse* New() const final {
    return new ListSettingsForPostProcessingProtocolResponse();
  }

  ListSettingsForPostProcessingProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForPostProcessingProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForPostProcessingProtocolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForPostProcessingProtocolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForPostProcessingProtocolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse";
  }
  protected:
  explicit ListSettingsForPostProcessingProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolSettingsFieldNumber = 4,
    kRequiresFast5InputFieldNumber = 1,
    kRequiresFastqInputFieldNumber = 2,
    kRequiresBamInputFieldNumber = 3,
  };
  // repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 4;
  int protocol_settings_size() const;
  private:
  int _internal_protocol_settings_size() const;
  public:
  void clear_protocol_settings();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_protocol_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >*
      mutable_protocol_settings();
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_protocol_settings(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_add_protocol_settings();
  public:
  const ::minknow_api::protocol_settings::ProtocolSetting& protocol_settings(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting* add_protocol_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >&
      protocol_settings() const;

  // bool requires_fast5_input = 1;
  void clear_requires_fast5_input();
  bool requires_fast5_input() const;
  void set_requires_fast5_input(bool value);
  private:
  bool _internal_requires_fast5_input() const;
  void _internal_set_requires_fast5_input(bool value);
  public:

  // bool requires_fastq_input = 2;
  void clear_requires_fastq_input();
  bool requires_fastq_input() const;
  void set_requires_fastq_input(bool value);
  private:
  bool _internal_requires_fastq_input() const;
  void _internal_set_requires_fastq_input(bool value);
  public:

  // bool requires_bam_input = 3;
  void clear_requires_bam_input();
  bool requires_bam_input() const;
  void set_requires_bam_input(bool value);
  private:
  bool _internal_requires_bam_input() const;
  void _internal_set_requires_bam_input(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting > protocol_settings_;
  bool requires_fast5_input_;
  bool requires_fastq_input_;
  bool requires_bam_input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class UpdateProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.UpdateProgressRequest) */ {
 public:
  inline UpdateProgressRequest() : UpdateProgressRequest(nullptr) {}
  ~UpdateProgressRequest() override;
  explicit constexpr UpdateProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProgressRequest(const UpdateProgressRequest& from);
  UpdateProgressRequest(UpdateProgressRequest&& from) noexcept
    : UpdateProgressRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProgressRequest& operator=(const UpdateProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProgressRequest& operator=(UpdateProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProgressRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProgressRequest*>(
               &_UpdateProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateProgressRequest& a, UpdateProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProgressRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProgressRequest* New() const final {
    return new UpdateProgressRequest();
  }

  UpdateProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProgressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProgressRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.UpdateProgressRequest";
  }
  protected:
  explicit UpdateProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProgressFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.UpdateProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// -------------------------------------------------------------------

class UpdateProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.basecaller.UpdateProgressResponse) */ {
 public:
  inline UpdateProgressResponse() : UpdateProgressResponse(nullptr) {}
  explicit constexpr UpdateProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProgressResponse(const UpdateProgressResponse& from);
  UpdateProgressResponse(UpdateProgressResponse&& from) noexcept
    : UpdateProgressResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProgressResponse& operator=(const UpdateProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProgressResponse& operator=(UpdateProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProgressResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProgressResponse*>(
               &_UpdateProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UpdateProgressResponse& a, UpdateProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProgressResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProgressResponse* New() const final {
    return new UpdateProgressResponse();
  }

  UpdateProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateProgressResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateProgressResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.basecaller.UpdateProgressResponse";
  }
  protected:
  explicit UpdateProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.basecaller.UpdateProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fbasecaller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListConfigsByKitRequest

// -------------------------------------------------------------------

// ListConfigsByKitResponse_ConfigList

// repeated string configs = 1;
inline int ListConfigsByKitResponse_ConfigList::_internal_configs_size() const {
  return configs_.size();
}
inline int ListConfigsByKitResponse_ConfigList::configs_size() const {
  return _internal_configs_size();
}
inline void ListConfigsByKitResponse_ConfigList::clear_configs() {
  configs_.Clear();
}
inline std::string* ListConfigsByKitResponse_ConfigList::add_configs() {
  std::string* _s = _internal_add_configs();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
  return _s;
}
inline const std::string& ListConfigsByKitResponse_ConfigList::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const std::string& ListConfigsByKitResponse_ConfigList::configs(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
  return _internal_configs(index);
}
inline std::string* ListConfigsByKitResponse_ConfigList::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
  return configs_.Mutable(index);
}
inline void ListConfigsByKitResponse_ConfigList::set_configs(int index, const std::string& value) {
  configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::set_configs(int index, std::string&& value) {
  configs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::set_configs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::set_configs(int index, const char* value, size_t size) {
  configs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline std::string* ListConfigsByKitResponse_ConfigList::_internal_add_configs() {
  return configs_.Add();
}
inline void ListConfigsByKitResponse_ConfigList::add_configs(const std::string& value) {
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::add_configs(std::string&& value) {
  configs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::add_configs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline void ListConfigsByKitResponse_ConfigList::add_configs(const char* value, size_t size) {
  configs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListConfigsByKitResponse_ConfigList::configs() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
  return configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListConfigsByKitResponse_ConfigList::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.ListConfigsByKitResponse.ConfigList.configs)
  return &configs_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListConfigsByKitResponse_PerFlowCell

// map<string, .minknow_api.basecaller.ListConfigsByKitResponse.ConfigList> kit_configs = 1;
inline int ListConfigsByKitResponse_PerFlowCell::_internal_kit_configs_size() const {
  return kit_configs_.size();
}
inline int ListConfigsByKitResponse_PerFlowCell::kit_configs_size() const {
  return _internal_kit_configs_size();
}
inline void ListConfigsByKitResponse_PerFlowCell::clear_kit_configs() {
  kit_configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >&
ListConfigsByKitResponse_PerFlowCell::_internal_kit_configs() const {
  return kit_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >&
ListConfigsByKitResponse_PerFlowCell::kit_configs() const {
  // @@protoc_insertion_point(field_map:minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.kit_configs)
  return _internal_kit_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >*
ListConfigsByKitResponse_PerFlowCell::_internal_mutable_kit_configs() {
  return kit_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_ConfigList >*
ListConfigsByKitResponse_PerFlowCell::mutable_kit_configs() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell.kit_configs)
  return _internal_mutable_kit_configs();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListConfigsByKitResponse

// map<string, .minknow_api.basecaller.ListConfigsByKitResponse.PerFlowCell> flow_cell_configs = 1;
inline int ListConfigsByKitResponse::_internal_flow_cell_configs_size() const {
  return flow_cell_configs_.size();
}
inline int ListConfigsByKitResponse::flow_cell_configs_size() const {
  return _internal_flow_cell_configs_size();
}
inline void ListConfigsByKitResponse::clear_flow_cell_configs() {
  flow_cell_configs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >&
ListConfigsByKitResponse::_internal_flow_cell_configs() const {
  return flow_cell_configs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >&
ListConfigsByKitResponse::flow_cell_configs() const {
  // @@protoc_insertion_point(field_map:minknow_api.basecaller.ListConfigsByKitResponse.flow_cell_configs)
  return _internal_flow_cell_configs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >*
ListConfigsByKitResponse::_internal_mutable_flow_cell_configs() {
  return flow_cell_configs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::basecaller::ListConfigsByKitResponse_PerFlowCell >*
ListConfigsByKitResponse::mutable_flow_cell_configs() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.basecaller.ListConfigsByKitResponse.flow_cell_configs)
  return _internal_mutable_flow_cell_configs();
}

// -------------------------------------------------------------------

// StartBasecallingRequest

// string name = 12;
inline void StartBasecallingRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StartBasecallingRequest::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBasecallingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.name)
}
inline std::string* StartBasecallingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.name)
  return _s;
}
inline const std::string& StartBasecallingRequest::_internal_name() const {
  return name_.Get();
}
inline void StartBasecallingRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBasecallingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingRequest.name)
}

// repeated string input_reads_directories = 1;
inline int StartBasecallingRequest::_internal_input_reads_directories_size() const {
  return input_reads_directories_.size();
}
inline int StartBasecallingRequest::input_reads_directories_size() const {
  return _internal_input_reads_directories_size();
}
inline void StartBasecallingRequest::clear_input_reads_directories() {
  input_reads_directories_.Clear();
}
inline std::string* StartBasecallingRequest::add_input_reads_directories() {
  std::string* _s = _internal_add_input_reads_directories();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
  return _s;
}
inline const std::string& StartBasecallingRequest::_internal_input_reads_directories(int index) const {
  return input_reads_directories_.Get(index);
}
inline const std::string& StartBasecallingRequest::input_reads_directories(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
  return _internal_input_reads_directories(index);
}
inline std::string* StartBasecallingRequest::mutable_input_reads_directories(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
  return input_reads_directories_.Mutable(index);
}
inline void StartBasecallingRequest::set_input_reads_directories(int index, const std::string& value) {
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::set_input_reads_directories(int index, std::string&& value) {
  input_reads_directories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::set_input_reads_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::set_input_reads_directories(int index, const char* value, size_t size) {
  input_reads_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline std::string* StartBasecallingRequest::_internal_add_input_reads_directories() {
  return input_reads_directories_.Add();
}
inline void StartBasecallingRequest::add_input_reads_directories(const std::string& value) {
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::add_input_reads_directories(std::string&& value) {
  input_reads_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::add_input_reads_directories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline void StartBasecallingRequest::add_input_reads_directories(const char* value, size_t size) {
  input_reads_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartBasecallingRequest::input_reads_directories() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
  return input_reads_directories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartBasecallingRequest::mutable_input_reads_directories() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.StartBasecallingRequest.input_reads_directories)
  return &input_reads_directories_;
}

// string output_reads_directory = 2;
inline void StartBasecallingRequest::clear_output_reads_directory() {
  output_reads_directory_.ClearToEmpty();
}
inline const std::string& StartBasecallingRequest::output_reads_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.output_reads_directory)
  return _internal_output_reads_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBasecallingRequest::set_output_reads_directory(ArgT0&& arg0, ArgT... args) {
 
 output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.output_reads_directory)
}
inline std::string* StartBasecallingRequest::mutable_output_reads_directory() {
  std::string* _s = _internal_mutable_output_reads_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.output_reads_directory)
  return _s;
}
inline const std::string& StartBasecallingRequest::_internal_output_reads_directory() const {
  return output_reads_directory_.Get();
}
inline void StartBasecallingRequest::_internal_set_output_reads_directory(const std::string& value) {
  
  output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::_internal_mutable_output_reads_directory() {
  
  return output_reads_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::release_output_reads_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingRequest.output_reads_directory)
  return output_reads_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBasecallingRequest::set_allocated_output_reads_directory(std::string* output_reads_directory) {
  if (output_reads_directory != nullptr) {
    
  } else {
    
  }
  output_reads_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_reads_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingRequest.output_reads_directory)
}

// string configuration = 3;
inline void StartBasecallingRequest::clear_configuration() {
  configuration_.ClearToEmpty();
}
inline const std::string& StartBasecallingRequest::configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.configuration)
  return _internal_configuration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBasecallingRequest::set_configuration(ArgT0&& arg0, ArgT... args) {
 
 configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.configuration)
}
inline std::string* StartBasecallingRequest::mutable_configuration() {
  std::string* _s = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.configuration)
  return _s;
}
inline const std::string& StartBasecallingRequest::_internal_configuration() const {
  return configuration_.Get();
}
inline void StartBasecallingRequest::_internal_set_configuration(const std::string& value) {
  
  configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::_internal_mutable_configuration() {
  
  return configuration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBasecallingRequest::release_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingRequest.configuration)
  return configuration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBasecallingRequest::set_allocated_configuration(std::string* configuration) {
  if (configuration != nullptr) {
    
  } else {
    
  }
  configuration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configuration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingRequest.configuration)
}

// bool fast5_out = 4;
inline void StartBasecallingRequest::clear_fast5_out() {
  fast5_out_ = false;
}
inline bool StartBasecallingRequest::_internal_fast5_out() const {
  return fast5_out_;
}
inline bool StartBasecallingRequest::fast5_out() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.fast5_out)
  return _internal_fast5_out();
}
inline void StartBasecallingRequest::_internal_set_fast5_out(bool value) {
  
  fast5_out_ = value;
}
inline void StartBasecallingRequest::set_fast5_out(bool value) {
  _internal_set_fast5_out(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.fast5_out)
}

// bool compress_fastq = 5;
inline void StartBasecallingRequest::clear_compress_fastq() {
  compress_fastq_ = false;
}
inline bool StartBasecallingRequest::_internal_compress_fastq() const {
  return compress_fastq_;
}
inline bool StartBasecallingRequest::compress_fastq() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.compress_fastq)
  return _internal_compress_fastq();
}
inline void StartBasecallingRequest::_internal_set_compress_fastq(bool value) {
  
  compress_fastq_ = value;
}
inline void StartBasecallingRequest::set_compress_fastq(bool value) {
  _internal_set_compress_fastq(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.compress_fastq)
}

// bool disable_events = 6;
inline void StartBasecallingRequest::clear_disable_events() {
  disable_events_ = false;
}
inline bool StartBasecallingRequest::_internal_disable_events() const {
  return disable_events_;
}
inline bool StartBasecallingRequest::disable_events() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.disable_events)
  return _internal_disable_events();
}
inline void StartBasecallingRequest::_internal_set_disable_events(bool value) {
  
  disable_events_ = value;
}
inline void StartBasecallingRequest::set_disable_events(bool value) {
  _internal_set_disable_events(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.disable_events)
}

// bool recursive = 7;
inline void StartBasecallingRequest::clear_recursive() {
  recursive_ = false;
}
inline bool StartBasecallingRequest::_internal_recursive() const {
  return recursive_;
}
inline bool StartBasecallingRequest::recursive() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.recursive)
  return _internal_recursive();
}
inline void StartBasecallingRequest::_internal_set_recursive(bool value) {
  
  recursive_ = value;
}
inline void StartBasecallingRequest::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingRequest.recursive)
}

// .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;
inline bool StartBasecallingRequest::_internal_has_barcoding_configuration() const {
  return this != internal_default_instance() && barcoding_configuration_ != nullptr;
}
inline bool StartBasecallingRequest::has_barcoding_configuration() const {
  return _internal_has_barcoding_configuration();
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& StartBasecallingRequest::_internal_barcoding_configuration() const {
  const ::minknow_api::analysis_configuration::BarcodingConfiguration* p = barcoding_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BarcodingConfiguration&>(
      ::minknow_api::analysis_configuration::_BarcodingConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& StartBasecallingRequest::barcoding_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration)
  return _internal_barcoding_configuration();
}
inline void StartBasecallingRequest::unsafe_arena_set_allocated_barcoding_configuration(
    ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration_);
  }
  barcoding_configuration_ = barcoding_configuration;
  if (barcoding_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration)
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBasecallingRequest::release_barcoding_configuration() {
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBasecallingRequest::unsafe_arena_release_barcoding_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration)
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBasecallingRequest::_internal_mutable_barcoding_configuration() {
  
  if (barcoding_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BarcodingConfiguration>(GetArenaForAllocation());
    barcoding_configuration_ = p;
  }
  return barcoding_configuration_;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBasecallingRequest::mutable_barcoding_configuration() {
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _msg = _internal_mutable_barcoding_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration)
  return _msg;
}
inline void StartBasecallingRequest::set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration_);
  }
  if (barcoding_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration));
    if (message_arena != submessage_arena) {
      barcoding_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barcoding_configuration, submessage_arena);
    }
    
  } else {
    
  }
  barcoding_configuration_ = barcoding_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingRequest.barcoding_configuration)
}

// .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 11;
inline bool StartBasecallingRequest::_internal_has_alignment_configuration() const {
  return this != internal_default_instance() && alignment_configuration_ != nullptr;
}
inline bool StartBasecallingRequest::has_alignment_configuration() const {
  return _internal_has_alignment_configuration();
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& StartBasecallingRequest::_internal_alignment_configuration() const {
  const ::minknow_api::analysis_configuration::AlignmentConfiguration* p = alignment_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::AlignmentConfiguration&>(
      ::minknow_api::analysis_configuration::_AlignmentConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& StartBasecallingRequest::alignment_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingRequest.alignment_configuration)
  return _internal_alignment_configuration();
}
inline void StartBasecallingRequest::unsafe_arena_set_allocated_alignment_configuration(
    ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration_);
  }
  alignment_configuration_ = alignment_configuration;
  if (alignment_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartBasecallingRequest.alignment_configuration)
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartBasecallingRequest::release_alignment_configuration() {
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartBasecallingRequest::unsafe_arena_release_alignment_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingRequest.alignment_configuration)
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartBasecallingRequest::_internal_mutable_alignment_configuration() {
  
  if (alignment_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::AlignmentConfiguration>(GetArenaForAllocation());
    alignment_configuration_ = p;
  }
  return alignment_configuration_;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartBasecallingRequest::mutable_alignment_configuration() {
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _msg = _internal_mutable_alignment_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingRequest.alignment_configuration)
  return _msg;
}
inline void StartBasecallingRequest::set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration_);
  }
  if (alignment_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration));
    if (message_arena != submessage_arena) {
      alignment_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_configuration, submessage_arena);
    }
    
  } else {
    
  }
  alignment_configuration_ = alignment_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingRequest.alignment_configuration)
}

// -------------------------------------------------------------------

// StartBasecallingResponse

// string id = 1;
inline void StartBasecallingResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StartBasecallingResponse::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBasecallingResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBasecallingResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBasecallingResponse.id)
}
inline std::string* StartBasecallingResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBasecallingResponse.id)
  return _s;
}
inline const std::string& StartBasecallingResponse::_internal_id() const {
  return id_.Get();
}
inline void StartBasecallingResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBasecallingResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBasecallingResponse::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBasecallingResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBasecallingResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBasecallingResponse.id)
}

// -------------------------------------------------------------------

// StartBarcodingRequest

// string name = 11;
inline void StartBarcodingRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StartBarcodingRequest::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBarcodingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.name)
}
inline std::string* StartBarcodingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBarcodingRequest.name)
  return _s;
}
inline const std::string& StartBarcodingRequest::_internal_name() const {
  return name_.Get();
}
inline void StartBarcodingRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBarcodingRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBarcodingRequest::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBarcodingRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBarcodingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBarcodingRequest.name)
}

// repeated string input_reads_directories = 1;
inline int StartBarcodingRequest::_internal_input_reads_directories_size() const {
  return input_reads_directories_.size();
}
inline int StartBarcodingRequest::input_reads_directories_size() const {
  return _internal_input_reads_directories_size();
}
inline void StartBarcodingRequest::clear_input_reads_directories() {
  input_reads_directories_.Clear();
}
inline std::string* StartBarcodingRequest::add_input_reads_directories() {
  std::string* _s = _internal_add_input_reads_directories();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
  return _s;
}
inline const std::string& StartBarcodingRequest::_internal_input_reads_directories(int index) const {
  return input_reads_directories_.Get(index);
}
inline const std::string& StartBarcodingRequest::input_reads_directories(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
  return _internal_input_reads_directories(index);
}
inline std::string* StartBarcodingRequest::mutable_input_reads_directories(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
  return input_reads_directories_.Mutable(index);
}
inline void StartBarcodingRequest::set_input_reads_directories(int index, const std::string& value) {
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::set_input_reads_directories(int index, std::string&& value) {
  input_reads_directories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::set_input_reads_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::set_input_reads_directories(int index, const char* value, size_t size) {
  input_reads_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline std::string* StartBarcodingRequest::_internal_add_input_reads_directories() {
  return input_reads_directories_.Add();
}
inline void StartBarcodingRequest::add_input_reads_directories(const std::string& value) {
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::add_input_reads_directories(std::string&& value) {
  input_reads_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::add_input_reads_directories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline void StartBarcodingRequest::add_input_reads_directories(const char* value, size_t size) {
  input_reads_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartBarcodingRequest::input_reads_directories() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
  return input_reads_directories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartBarcodingRequest::mutable_input_reads_directories() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.StartBarcodingRequest.input_reads_directories)
  return &input_reads_directories_;
}

// string output_reads_directory = 2;
inline void StartBarcodingRequest::clear_output_reads_directory() {
  output_reads_directory_.ClearToEmpty();
}
inline const std::string& StartBarcodingRequest::output_reads_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.output_reads_directory)
  return _internal_output_reads_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBarcodingRequest::set_output_reads_directory(ArgT0&& arg0, ArgT... args) {
 
 output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.output_reads_directory)
}
inline std::string* StartBarcodingRequest::mutable_output_reads_directory() {
  std::string* _s = _internal_mutable_output_reads_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBarcodingRequest.output_reads_directory)
  return _s;
}
inline const std::string& StartBarcodingRequest::_internal_output_reads_directory() const {
  return output_reads_directory_.Get();
}
inline void StartBarcodingRequest::_internal_set_output_reads_directory(const std::string& value) {
  
  output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBarcodingRequest::_internal_mutable_output_reads_directory() {
  
  return output_reads_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBarcodingRequest::release_output_reads_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBarcodingRequest.output_reads_directory)
  return output_reads_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBarcodingRequest::set_allocated_output_reads_directory(std::string* output_reads_directory) {
  if (output_reads_directory != nullptr) {
    
  } else {
    
  }
  output_reads_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_reads_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBarcodingRequest.output_reads_directory)
}

// bool compress_fastq = 4;
inline void StartBarcodingRequest::clear_compress_fastq() {
  compress_fastq_ = false;
}
inline bool StartBarcodingRequest::_internal_compress_fastq() const {
  return compress_fastq_;
}
inline bool StartBarcodingRequest::compress_fastq() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.compress_fastq)
  return _internal_compress_fastq();
}
inline void StartBarcodingRequest::_internal_set_compress_fastq(bool value) {
  
  compress_fastq_ = value;
}
inline void StartBarcodingRequest::set_compress_fastq(bool value) {
  _internal_set_compress_fastq(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.compress_fastq)
}

// bool recursive = 5;
inline void StartBarcodingRequest::clear_recursive() {
  recursive_ = false;
}
inline bool StartBarcodingRequest::_internal_recursive() const {
  return recursive_;
}
inline bool StartBarcodingRequest::recursive() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.recursive)
  return _internal_recursive();
}
inline void StartBarcodingRequest::_internal_set_recursive(bool value) {
  
  recursive_ = value;
}
inline void StartBarcodingRequest::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingRequest.recursive)
}

// .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 10;
inline bool StartBarcodingRequest::_internal_has_barcoding_configuration() const {
  return this != internal_default_instance() && barcoding_configuration_ != nullptr;
}
inline bool StartBarcodingRequest::has_barcoding_configuration() const {
  return _internal_has_barcoding_configuration();
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& StartBarcodingRequest::_internal_barcoding_configuration() const {
  const ::minknow_api::analysis_configuration::BarcodingConfiguration* p = barcoding_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BarcodingConfiguration&>(
      ::minknow_api::analysis_configuration::_BarcodingConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& StartBarcodingRequest::barcoding_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration)
  return _internal_barcoding_configuration();
}
inline void StartBarcodingRequest::unsafe_arena_set_allocated_barcoding_configuration(
    ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration_);
  }
  barcoding_configuration_ = barcoding_configuration;
  if (barcoding_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration)
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBarcodingRequest::release_barcoding_configuration() {
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBarcodingRequest::unsafe_arena_release_barcoding_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration)
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBarcodingRequest::_internal_mutable_barcoding_configuration() {
  
  if (barcoding_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BarcodingConfiguration>(GetArenaForAllocation());
    barcoding_configuration_ = p;
  }
  return barcoding_configuration_;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* StartBarcodingRequest::mutable_barcoding_configuration() {
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _msg = _internal_mutable_barcoding_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration)
  return _msg;
}
inline void StartBarcodingRequest::set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration_);
  }
  if (barcoding_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration));
    if (message_arena != submessage_arena) {
      barcoding_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barcoding_configuration, submessage_arena);
    }
    
  } else {
    
  }
  barcoding_configuration_ = barcoding_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBarcodingRequest.barcoding_configuration)
}

// -------------------------------------------------------------------

// StartBarcodingResponse

// string id = 1;
inline void StartBarcodingResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StartBarcodingResponse::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartBarcodingResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartBarcodingResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartBarcodingResponse.id)
}
inline std::string* StartBarcodingResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartBarcodingResponse.id)
  return _s;
}
inline const std::string& StartBarcodingResponse::_internal_id() const {
  return id_.Get();
}
inline void StartBarcodingResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartBarcodingResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartBarcodingResponse::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartBarcodingResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartBarcodingResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartBarcodingResponse.id)
}

// -------------------------------------------------------------------

// StartAlignmentRequest

// string name = 7;
inline void StartAlignmentRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StartAlignmentRequest::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartAlignmentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentRequest.name)
}
inline std::string* StartAlignmentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartAlignmentRequest.name)
  return _s;
}
inline const std::string& StartAlignmentRequest::_internal_name() const {
  return name_.Get();
}
inline void StartAlignmentRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartAlignmentRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartAlignmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartAlignmentRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartAlignmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartAlignmentRequest.name)
}

// repeated string input_reads_directories = 1;
inline int StartAlignmentRequest::_internal_input_reads_directories_size() const {
  return input_reads_directories_.size();
}
inline int StartAlignmentRequest::input_reads_directories_size() const {
  return _internal_input_reads_directories_size();
}
inline void StartAlignmentRequest::clear_input_reads_directories() {
  input_reads_directories_.Clear();
}
inline std::string* StartAlignmentRequest::add_input_reads_directories() {
  std::string* _s = _internal_add_input_reads_directories();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
  return _s;
}
inline const std::string& StartAlignmentRequest::_internal_input_reads_directories(int index) const {
  return input_reads_directories_.Get(index);
}
inline const std::string& StartAlignmentRequest::input_reads_directories(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
  return _internal_input_reads_directories(index);
}
inline std::string* StartAlignmentRequest::mutable_input_reads_directories(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
  return input_reads_directories_.Mutable(index);
}
inline void StartAlignmentRequest::set_input_reads_directories(int index, const std::string& value) {
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::set_input_reads_directories(int index, std::string&& value) {
  input_reads_directories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::set_input_reads_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::set_input_reads_directories(int index, const char* value, size_t size) {
  input_reads_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline std::string* StartAlignmentRequest::_internal_add_input_reads_directories() {
  return input_reads_directories_.Add();
}
inline void StartAlignmentRequest::add_input_reads_directories(const std::string& value) {
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::add_input_reads_directories(std::string&& value) {
  input_reads_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::add_input_reads_directories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_reads_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline void StartAlignmentRequest::add_input_reads_directories(const char* value, size_t size) {
  input_reads_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartAlignmentRequest::input_reads_directories() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
  return input_reads_directories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartAlignmentRequest::mutable_input_reads_directories() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.StartAlignmentRequest.input_reads_directories)
  return &input_reads_directories_;
}

// string output_reads_directory = 2;
inline void StartAlignmentRequest::clear_output_reads_directory() {
  output_reads_directory_.ClearToEmpty();
}
inline const std::string& StartAlignmentRequest::output_reads_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentRequest.output_reads_directory)
  return _internal_output_reads_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartAlignmentRequest::set_output_reads_directory(ArgT0&& arg0, ArgT... args) {
 
 output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentRequest.output_reads_directory)
}
inline std::string* StartAlignmentRequest::mutable_output_reads_directory() {
  std::string* _s = _internal_mutable_output_reads_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartAlignmentRequest.output_reads_directory)
  return _s;
}
inline const std::string& StartAlignmentRequest::_internal_output_reads_directory() const {
  return output_reads_directory_.Get();
}
inline void StartAlignmentRequest::_internal_set_output_reads_directory(const std::string& value) {
  
  output_reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartAlignmentRequest::_internal_mutable_output_reads_directory() {
  
  return output_reads_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartAlignmentRequest::release_output_reads_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartAlignmentRequest.output_reads_directory)
  return output_reads_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartAlignmentRequest::set_allocated_output_reads_directory(std::string* output_reads_directory) {
  if (output_reads_directory != nullptr) {
    
  } else {
    
  }
  output_reads_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_reads_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartAlignmentRequest.output_reads_directory)
}

// bool recursive = 4;
inline void StartAlignmentRequest::clear_recursive() {
  recursive_ = false;
}
inline bool StartAlignmentRequest::_internal_recursive() const {
  return recursive_;
}
inline bool StartAlignmentRequest::recursive() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentRequest.recursive)
  return _internal_recursive();
}
inline void StartAlignmentRequest::_internal_set_recursive(bool value) {
  
  recursive_ = value;
}
inline void StartAlignmentRequest::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentRequest.recursive)
}

// .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
inline bool StartAlignmentRequest::_internal_has_alignment_configuration() const {
  return this != internal_default_instance() && alignment_configuration_ != nullptr;
}
inline bool StartAlignmentRequest::has_alignment_configuration() const {
  return _internal_has_alignment_configuration();
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& StartAlignmentRequest::_internal_alignment_configuration() const {
  const ::minknow_api::analysis_configuration::AlignmentConfiguration* p = alignment_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::AlignmentConfiguration&>(
      ::minknow_api::analysis_configuration::_AlignmentConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& StartAlignmentRequest::alignment_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentRequest.alignment_configuration)
  return _internal_alignment_configuration();
}
inline void StartAlignmentRequest::unsafe_arena_set_allocated_alignment_configuration(
    ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration_);
  }
  alignment_configuration_ = alignment_configuration;
  if (alignment_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartAlignmentRequest.alignment_configuration)
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartAlignmentRequest::release_alignment_configuration() {
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartAlignmentRequest::unsafe_arena_release_alignment_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartAlignmentRequest.alignment_configuration)
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartAlignmentRequest::_internal_mutable_alignment_configuration() {
  
  if (alignment_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::AlignmentConfiguration>(GetArenaForAllocation());
    alignment_configuration_ = p;
  }
  return alignment_configuration_;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* StartAlignmentRequest::mutable_alignment_configuration() {
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _msg = _internal_mutable_alignment_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartAlignmentRequest.alignment_configuration)
  return _msg;
}
inline void StartAlignmentRequest::set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration_);
  }
  if (alignment_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration));
    if (message_arena != submessage_arena) {
      alignment_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_configuration, submessage_arena);
    }
    
  } else {
    
  }
  alignment_configuration_ = alignment_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartAlignmentRequest.alignment_configuration)
}

// -------------------------------------------------------------------

// StartAlignmentResponse

// string id = 1;
inline void StartAlignmentResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StartAlignmentResponse::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartAlignmentResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartAlignmentResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartAlignmentResponse.id)
}
inline std::string* StartAlignmentResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartAlignmentResponse.id)
  return _s;
}
inline const std::string& StartAlignmentResponse::_internal_id() const {
  return id_.Get();
}
inline void StartAlignmentResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartAlignmentResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartAlignmentResponse::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartAlignmentResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartAlignmentResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartAlignmentResponse.id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StartPostProcessingProtocolRequest

// string identifier = 1;
inline void StartPostProcessingProtocolRequest::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.identifier)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.identifier)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.identifier)
}

// string sequencing_protocol_run_id = 7;
inline void StartPostProcessingProtocolRequest::clear_sequencing_protocol_run_id() {
  sequencing_protocol_run_id_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::sequencing_protocol_run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.sequencing_protocol_run_id)
  return _internal_sequencing_protocol_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_sequencing_protocol_run_id(ArgT0&& arg0, ArgT... args) {
 
 sequencing_protocol_run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.sequencing_protocol_run_id)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_sequencing_protocol_run_id() {
  std::string* _s = _internal_mutable_sequencing_protocol_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.sequencing_protocol_run_id)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_sequencing_protocol_run_id() const {
  return sequencing_protocol_run_id_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_sequencing_protocol_run_id(const std::string& value) {
  
  sequencing_protocol_run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_sequencing_protocol_run_id() {
  
  return sequencing_protocol_run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_sequencing_protocol_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.sequencing_protocol_run_id)
  return sequencing_protocol_run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_sequencing_protocol_run_id(std::string* sequencing_protocol_run_id) {
  if (sequencing_protocol_run_id != nullptr) {
    
  } else {
    
  }
  sequencing_protocol_run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequencing_protocol_run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.sequencing_protocol_run_id)
}

// string input_fast5_directory = 2;
inline void StartPostProcessingProtocolRequest::clear_input_fast5_directory() {
  input_fast5_directory_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::input_fast5_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fast5_directory)
  return _internal_input_fast5_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_input_fast5_directory(ArgT0&& arg0, ArgT... args) {
 
 input_fast5_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fast5_directory)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_input_fast5_directory() {
  std::string* _s = _internal_mutable_input_fast5_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fast5_directory)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_input_fast5_directory() const {
  return input_fast5_directory_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_input_fast5_directory(const std::string& value) {
  
  input_fast5_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_input_fast5_directory() {
  
  return input_fast5_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_input_fast5_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fast5_directory)
  return input_fast5_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_input_fast5_directory(std::string* input_fast5_directory) {
  if (input_fast5_directory != nullptr) {
    
  } else {
    
  }
  input_fast5_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_fast5_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fast5_directory)
}

// string input_fastq_directory = 3;
inline void StartPostProcessingProtocolRequest::clear_input_fastq_directory() {
  input_fastq_directory_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::input_fastq_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fastq_directory)
  return _internal_input_fastq_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_input_fastq_directory(ArgT0&& arg0, ArgT... args) {
 
 input_fastq_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fastq_directory)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_input_fastq_directory() {
  std::string* _s = _internal_mutable_input_fastq_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fastq_directory)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_input_fastq_directory() const {
  return input_fastq_directory_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_input_fastq_directory(const std::string& value) {
  
  input_fastq_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_input_fastq_directory() {
  
  return input_fastq_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_input_fastq_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fastq_directory)
  return input_fastq_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_input_fastq_directory(std::string* input_fastq_directory) {
  if (input_fastq_directory != nullptr) {
    
  } else {
    
  }
  input_fastq_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_fastq_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_fastq_directory)
}

// string input_bam_directory = 4;
inline void StartPostProcessingProtocolRequest::clear_input_bam_directory() {
  input_bam_directory_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::input_bam_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_bam_directory)
  return _internal_input_bam_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_input_bam_directory(ArgT0&& arg0, ArgT... args) {
 
 input_bam_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_bam_directory)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_input_bam_directory() {
  std::string* _s = _internal_mutable_input_bam_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_bam_directory)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_input_bam_directory() const {
  return input_bam_directory_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_input_bam_directory(const std::string& value) {
  
  input_bam_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_input_bam_directory() {
  
  return input_bam_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_input_bam_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_bam_directory)
  return input_bam_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_input_bam_directory(std::string* input_bam_directory) {
  if (input_bam_directory != nullptr) {
    
  } else {
    
  }
  input_bam_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_bam_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.input_bam_directory)
}

// string output_directory = 5;
inline void StartPostProcessingProtocolRequest::clear_output_directory() {
  output_directory_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolRequest::output_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolRequest.output_directory)
  return _internal_output_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolRequest::set_output_directory(ArgT0&& arg0, ArgT... args) {
 
 output_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolRequest.output_directory)
}
inline std::string* StartPostProcessingProtocolRequest::mutable_output_directory() {
  std::string* _s = _internal_mutable_output_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolRequest.output_directory)
  return _s;
}
inline const std::string& StartPostProcessingProtocolRequest::_internal_output_directory() const {
  return output_directory_.Get();
}
inline void StartPostProcessingProtocolRequest::_internal_set_output_directory(const std::string& value) {
  
  output_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::_internal_mutable_output_directory() {
  
  return output_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolRequest::release_output_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolRequest.output_directory)
  return output_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolRequest::set_allocated_output_directory(std::string* output_directory) {
  if (output_directory != nullptr) {
    
  } else {
    
  }
  output_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolRequest.output_directory)
}

// map<string, .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue> setting_values = 6;
inline int StartPostProcessingProtocolRequest::_internal_setting_values_size() const {
  return setting_values_.size();
}
inline int StartPostProcessingProtocolRequest::setting_values_size() const {
  return _internal_setting_values_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >&
StartPostProcessingProtocolRequest::_internal_setting_values() const {
  return setting_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >&
StartPostProcessingProtocolRequest::setting_values() const {
  // @@protoc_insertion_point(field_map:minknow_api.basecaller.StartPostProcessingProtocolRequest.setting_values)
  return _internal_setting_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >*
StartPostProcessingProtocolRequest::_internal_mutable_setting_values() {
  return setting_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue >*
StartPostProcessingProtocolRequest::mutable_setting_values() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.basecaller.StartPostProcessingProtocolRequest.setting_values)
  return _internal_mutable_setting_values();
}

// -------------------------------------------------------------------

// StartRequest

// .minknow_api.basecaller.StartBasecallingRequest start_basecalling_request = 2;
inline bool StartRequest::_internal_has_start_basecalling_request() const {
  return start_request_case() == kStartBasecallingRequest;
}
inline bool StartRequest::has_start_basecalling_request() const {
  return _internal_has_start_basecalling_request();
}
inline void StartRequest::set_has_start_basecalling_request() {
  _oneof_case_[0] = kStartBasecallingRequest;
}
inline void StartRequest::clear_start_basecalling_request() {
  if (_internal_has_start_basecalling_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_.start_basecalling_request_;
    }
    clear_has_start_request();
  }
}
inline ::minknow_api::basecaller::StartBasecallingRequest* StartRequest::release_start_basecalling_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartRequest.start_basecalling_request)
  if (_internal_has_start_basecalling_request()) {
    clear_has_start_request();
      ::minknow_api::basecaller::StartBasecallingRequest* temp = start_request_.start_basecalling_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_.start_basecalling_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartBasecallingRequest& StartRequest::_internal_start_basecalling_request() const {
  return _internal_has_start_basecalling_request()
      ? *start_request_.start_basecalling_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartBasecallingRequest&>(::minknow_api::basecaller::_StartBasecallingRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartBasecallingRequest& StartRequest::start_basecalling_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartRequest.start_basecalling_request)
  return _internal_start_basecalling_request();
}
inline ::minknow_api::basecaller::StartBasecallingRequest* StartRequest::unsafe_arena_release_start_basecalling_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.StartRequest.start_basecalling_request)
  if (_internal_has_start_basecalling_request()) {
    clear_has_start_request();
    ::minknow_api::basecaller::StartBasecallingRequest* temp = start_request_.start_basecalling_request_;
    start_request_.start_basecalling_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartRequest::unsafe_arena_set_allocated_start_basecalling_request(::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request) {
  clear_start_request();
  if (start_basecalling_request) {
    set_has_start_basecalling_request();
    start_request_.start_basecalling_request_ = start_basecalling_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartRequest.start_basecalling_request)
}
inline ::minknow_api::basecaller::StartBasecallingRequest* StartRequest::_internal_mutable_start_basecalling_request() {
  if (!_internal_has_start_basecalling_request()) {
    clear_start_request();
    set_has_start_basecalling_request();
    start_request_.start_basecalling_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartBasecallingRequest >(GetArenaForAllocation());
  }
  return start_request_.start_basecalling_request_;
}
inline ::minknow_api::basecaller::StartBasecallingRequest* StartRequest::mutable_start_basecalling_request() {
  ::minknow_api::basecaller::StartBasecallingRequest* _msg = _internal_mutable_start_basecalling_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartRequest.start_basecalling_request)
  return _msg;
}

// .minknow_api.basecaller.StartBarcodingRequest start_barcoding_request = 3;
inline bool StartRequest::_internal_has_start_barcoding_request() const {
  return start_request_case() == kStartBarcodingRequest;
}
inline bool StartRequest::has_start_barcoding_request() const {
  return _internal_has_start_barcoding_request();
}
inline void StartRequest::set_has_start_barcoding_request() {
  _oneof_case_[0] = kStartBarcodingRequest;
}
inline void StartRequest::clear_start_barcoding_request() {
  if (_internal_has_start_barcoding_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_.start_barcoding_request_;
    }
    clear_has_start_request();
  }
}
inline ::minknow_api::basecaller::StartBarcodingRequest* StartRequest::release_start_barcoding_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartRequest.start_barcoding_request)
  if (_internal_has_start_barcoding_request()) {
    clear_has_start_request();
      ::minknow_api::basecaller::StartBarcodingRequest* temp = start_request_.start_barcoding_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_.start_barcoding_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartBarcodingRequest& StartRequest::_internal_start_barcoding_request() const {
  return _internal_has_start_barcoding_request()
      ? *start_request_.start_barcoding_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartBarcodingRequest&>(::minknow_api::basecaller::_StartBarcodingRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartBarcodingRequest& StartRequest::start_barcoding_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartRequest.start_barcoding_request)
  return _internal_start_barcoding_request();
}
inline ::minknow_api::basecaller::StartBarcodingRequest* StartRequest::unsafe_arena_release_start_barcoding_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.StartRequest.start_barcoding_request)
  if (_internal_has_start_barcoding_request()) {
    clear_has_start_request();
    ::minknow_api::basecaller::StartBarcodingRequest* temp = start_request_.start_barcoding_request_;
    start_request_.start_barcoding_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartRequest::unsafe_arena_set_allocated_start_barcoding_request(::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request) {
  clear_start_request();
  if (start_barcoding_request) {
    set_has_start_barcoding_request();
    start_request_.start_barcoding_request_ = start_barcoding_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartRequest.start_barcoding_request)
}
inline ::minknow_api::basecaller::StartBarcodingRequest* StartRequest::_internal_mutable_start_barcoding_request() {
  if (!_internal_has_start_barcoding_request()) {
    clear_start_request();
    set_has_start_barcoding_request();
    start_request_.start_barcoding_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartBarcodingRequest >(GetArenaForAllocation());
  }
  return start_request_.start_barcoding_request_;
}
inline ::minknow_api::basecaller::StartBarcodingRequest* StartRequest::mutable_start_barcoding_request() {
  ::minknow_api::basecaller::StartBarcodingRequest* _msg = _internal_mutable_start_barcoding_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartRequest.start_barcoding_request)
  return _msg;
}

// .minknow_api.basecaller.StartAlignmentRequest start_alignment_request = 4;
inline bool StartRequest::_internal_has_start_alignment_request() const {
  return start_request_case() == kStartAlignmentRequest;
}
inline bool StartRequest::has_start_alignment_request() const {
  return _internal_has_start_alignment_request();
}
inline void StartRequest::set_has_start_alignment_request() {
  _oneof_case_[0] = kStartAlignmentRequest;
}
inline void StartRequest::clear_start_alignment_request() {
  if (_internal_has_start_alignment_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_.start_alignment_request_;
    }
    clear_has_start_request();
  }
}
inline ::minknow_api::basecaller::StartAlignmentRequest* StartRequest::release_start_alignment_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartRequest.start_alignment_request)
  if (_internal_has_start_alignment_request()) {
    clear_has_start_request();
      ::minknow_api::basecaller::StartAlignmentRequest* temp = start_request_.start_alignment_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_.start_alignment_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartAlignmentRequest& StartRequest::_internal_start_alignment_request() const {
  return _internal_has_start_alignment_request()
      ? *start_request_.start_alignment_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartAlignmentRequest&>(::minknow_api::basecaller::_StartAlignmentRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartAlignmentRequest& StartRequest::start_alignment_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartRequest.start_alignment_request)
  return _internal_start_alignment_request();
}
inline ::minknow_api::basecaller::StartAlignmentRequest* StartRequest::unsafe_arena_release_start_alignment_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.StartRequest.start_alignment_request)
  if (_internal_has_start_alignment_request()) {
    clear_has_start_request();
    ::minknow_api::basecaller::StartAlignmentRequest* temp = start_request_.start_alignment_request_;
    start_request_.start_alignment_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartRequest::unsafe_arena_set_allocated_start_alignment_request(::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request) {
  clear_start_request();
  if (start_alignment_request) {
    set_has_start_alignment_request();
    start_request_.start_alignment_request_ = start_alignment_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartRequest.start_alignment_request)
}
inline ::minknow_api::basecaller::StartAlignmentRequest* StartRequest::_internal_mutable_start_alignment_request() {
  if (!_internal_has_start_alignment_request()) {
    clear_start_request();
    set_has_start_alignment_request();
    start_request_.start_alignment_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartAlignmentRequest >(GetArenaForAllocation());
  }
  return start_request_.start_alignment_request_;
}
inline ::minknow_api::basecaller::StartAlignmentRequest* StartRequest::mutable_start_alignment_request() {
  ::minknow_api::basecaller::StartAlignmentRequest* _msg = _internal_mutable_start_alignment_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartRequest.start_alignment_request)
  return _msg;
}

// .minknow_api.basecaller.StartPostProcessingProtocolRequest start_post_processing_protocol_request = 5;
inline bool StartRequest::_internal_has_start_post_processing_protocol_request() const {
  return start_request_case() == kStartPostProcessingProtocolRequest;
}
inline bool StartRequest::has_start_post_processing_protocol_request() const {
  return _internal_has_start_post_processing_protocol_request();
}
inline void StartRequest::set_has_start_post_processing_protocol_request() {
  _oneof_case_[0] = kStartPostProcessingProtocolRequest;
}
inline void StartRequest::clear_start_post_processing_protocol_request() {
  if (_internal_has_start_post_processing_protocol_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_.start_post_processing_protocol_request_;
    }
    clear_has_start_request();
  }
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* StartRequest::release_start_post_processing_protocol_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartRequest.start_post_processing_protocol_request)
  if (_internal_has_start_post_processing_protocol_request()) {
    clear_has_start_request();
      ::minknow_api::basecaller::StartPostProcessingProtocolRequest* temp = start_request_.start_post_processing_protocol_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_.start_post_processing_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& StartRequest::_internal_start_post_processing_protocol_request() const {
  return _internal_has_start_post_processing_protocol_request()
      ? *start_request_.start_post_processing_protocol_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartPostProcessingProtocolRequest&>(::minknow_api::basecaller::_StartPostProcessingProtocolRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& StartRequest::start_post_processing_protocol_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartRequest.start_post_processing_protocol_request)
  return _internal_start_post_processing_protocol_request();
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* StartRequest::unsafe_arena_release_start_post_processing_protocol_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.StartRequest.start_post_processing_protocol_request)
  if (_internal_has_start_post_processing_protocol_request()) {
    clear_has_start_request();
    ::minknow_api::basecaller::StartPostProcessingProtocolRequest* temp = start_request_.start_post_processing_protocol_request_;
    start_request_.start_post_processing_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StartRequest::unsafe_arena_set_allocated_start_post_processing_protocol_request(::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request) {
  clear_start_request();
  if (start_post_processing_protocol_request) {
    set_has_start_post_processing_protocol_request();
    start_request_.start_post_processing_protocol_request_ = start_post_processing_protocol_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.StartRequest.start_post_processing_protocol_request)
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* StartRequest::_internal_mutable_start_post_processing_protocol_request() {
  if (!_internal_has_start_post_processing_protocol_request()) {
    clear_start_request();
    set_has_start_post_processing_protocol_request();
    start_request_.start_post_processing_protocol_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartPostProcessingProtocolRequest >(GetArenaForAllocation());
  }
  return start_request_.start_post_processing_protocol_request_;
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* StartRequest::mutable_start_post_processing_protocol_request() {
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* _msg = _internal_mutable_start_post_processing_protocol_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartRequest.start_post_processing_protocol_request)
  return _msg;
}

inline bool StartRequest::has_start_request() const {
  return start_request_case() != START_REQUEST_NOT_SET;
}
inline void StartRequest::clear_has_start_request() {
  _oneof_case_[0] = START_REQUEST_NOT_SET;
}
inline StartRequest::StartRequestCase StartRequest::start_request_case() const {
  return StartRequest::StartRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartPostProcessingProtocolResponse

// string id = 1;
inline void StartPostProcessingProtocolResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StartPostProcessingProtocolResponse::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.StartPostProcessingProtocolResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPostProcessingProtocolResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.StartPostProcessingProtocolResponse.id)
}
inline std::string* StartPostProcessingProtocolResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.StartPostProcessingProtocolResponse.id)
  return _s;
}
inline const std::string& StartPostProcessingProtocolResponse::_internal_id() const {
  return id_.Get();
}
inline void StartPostProcessingProtocolResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartPostProcessingProtocolResponse::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.StartPostProcessingProtocolResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartPostProcessingProtocolResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.StartPostProcessingProtocolResponse.id)
}

// -------------------------------------------------------------------

// CancelRequest

// string id = 1;
inline void CancelRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CancelRequest::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.CancelRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.CancelRequest.id)
}
inline std::string* CancelRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.CancelRequest.id)
  return _s;
}
inline const std::string& CancelRequest::_internal_id() const {
  return id_.Get();
}
inline void CancelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CancelRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CancelRequest::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.CancelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CancelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.CancelRequest.id)
}

// -------------------------------------------------------------------

// CancelResponse

// -------------------------------------------------------------------

// RunInfo

// string id = 1;
inline void RunInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RunInfo::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.id)
}
inline std::string* RunInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.id)
  return _s;
}
inline const std::string& RunInfo::_internal_id() const {
  return id_.Get();
}
inline void RunInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RunInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RunInfo::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RunInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.RunInfo.id)
}

// .minknow_api.basecaller.StartBasecallingRequest start_basecalling_request = 2;
inline bool RunInfo::_internal_has_start_basecalling_request() const {
  return start_request_oneof_case() == kStartBasecallingRequest;
}
inline bool RunInfo::has_start_basecalling_request() const {
  return _internal_has_start_basecalling_request();
}
inline void RunInfo::set_has_start_basecalling_request() {
  _oneof_case_[0] = kStartBasecallingRequest;
}
inline void RunInfo::clear_start_basecalling_request() {
  if (_internal_has_start_basecalling_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_oneof_.start_basecalling_request_;
    }
    clear_has_start_request_oneof();
  }
}
inline ::minknow_api::basecaller::StartBasecallingRequest* RunInfo::release_start_basecalling_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.start_basecalling_request)
  if (_internal_has_start_basecalling_request()) {
    clear_has_start_request_oneof();
      ::minknow_api::basecaller::StartBasecallingRequest* temp = start_request_oneof_.start_basecalling_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_oneof_.start_basecalling_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartBasecallingRequest& RunInfo::_internal_start_basecalling_request() const {
  return _internal_has_start_basecalling_request()
      ? *start_request_oneof_.start_basecalling_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartBasecallingRequest&>(::minknow_api::basecaller::_StartBasecallingRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartBasecallingRequest& RunInfo::start_basecalling_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.start_basecalling_request)
  return _internal_start_basecalling_request();
}
inline ::minknow_api::basecaller::StartBasecallingRequest* RunInfo::unsafe_arena_release_start_basecalling_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.RunInfo.start_basecalling_request)
  if (_internal_has_start_basecalling_request()) {
    clear_has_start_request_oneof();
    ::minknow_api::basecaller::StartBasecallingRequest* temp = start_request_oneof_.start_basecalling_request_;
    start_request_oneof_.start_basecalling_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RunInfo::unsafe_arena_set_allocated_start_basecalling_request(::minknow_api::basecaller::StartBasecallingRequest* start_basecalling_request) {
  clear_start_request_oneof();
  if (start_basecalling_request) {
    set_has_start_basecalling_request();
    start_request_oneof_.start_basecalling_request_ = start_basecalling_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.start_basecalling_request)
}
inline ::minknow_api::basecaller::StartBasecallingRequest* RunInfo::_internal_mutable_start_basecalling_request() {
  if (!_internal_has_start_basecalling_request()) {
    clear_start_request_oneof();
    set_has_start_basecalling_request();
    start_request_oneof_.start_basecalling_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartBasecallingRequest >(GetArenaForAllocation());
  }
  return start_request_oneof_.start_basecalling_request_;
}
inline ::minknow_api::basecaller::StartBasecallingRequest* RunInfo::mutable_start_basecalling_request() {
  ::minknow_api::basecaller::StartBasecallingRequest* _msg = _internal_mutable_start_basecalling_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.start_basecalling_request)
  return _msg;
}

// .minknow_api.basecaller.StartBarcodingRequest start_barcoding_request = 11;
inline bool RunInfo::_internal_has_start_barcoding_request() const {
  return start_request_oneof_case() == kStartBarcodingRequest;
}
inline bool RunInfo::has_start_barcoding_request() const {
  return _internal_has_start_barcoding_request();
}
inline void RunInfo::set_has_start_barcoding_request() {
  _oneof_case_[0] = kStartBarcodingRequest;
}
inline void RunInfo::clear_start_barcoding_request() {
  if (_internal_has_start_barcoding_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_oneof_.start_barcoding_request_;
    }
    clear_has_start_request_oneof();
  }
}
inline ::minknow_api::basecaller::StartBarcodingRequest* RunInfo::release_start_barcoding_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.start_barcoding_request)
  if (_internal_has_start_barcoding_request()) {
    clear_has_start_request_oneof();
      ::minknow_api::basecaller::StartBarcodingRequest* temp = start_request_oneof_.start_barcoding_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_oneof_.start_barcoding_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartBarcodingRequest& RunInfo::_internal_start_barcoding_request() const {
  return _internal_has_start_barcoding_request()
      ? *start_request_oneof_.start_barcoding_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartBarcodingRequest&>(::minknow_api::basecaller::_StartBarcodingRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartBarcodingRequest& RunInfo::start_barcoding_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.start_barcoding_request)
  return _internal_start_barcoding_request();
}
inline ::minknow_api::basecaller::StartBarcodingRequest* RunInfo::unsafe_arena_release_start_barcoding_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.RunInfo.start_barcoding_request)
  if (_internal_has_start_barcoding_request()) {
    clear_has_start_request_oneof();
    ::minknow_api::basecaller::StartBarcodingRequest* temp = start_request_oneof_.start_barcoding_request_;
    start_request_oneof_.start_barcoding_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RunInfo::unsafe_arena_set_allocated_start_barcoding_request(::minknow_api::basecaller::StartBarcodingRequest* start_barcoding_request) {
  clear_start_request_oneof();
  if (start_barcoding_request) {
    set_has_start_barcoding_request();
    start_request_oneof_.start_barcoding_request_ = start_barcoding_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.start_barcoding_request)
}
inline ::minknow_api::basecaller::StartBarcodingRequest* RunInfo::_internal_mutable_start_barcoding_request() {
  if (!_internal_has_start_barcoding_request()) {
    clear_start_request_oneof();
    set_has_start_barcoding_request();
    start_request_oneof_.start_barcoding_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartBarcodingRequest >(GetArenaForAllocation());
  }
  return start_request_oneof_.start_barcoding_request_;
}
inline ::minknow_api::basecaller::StartBarcodingRequest* RunInfo::mutable_start_barcoding_request() {
  ::minknow_api::basecaller::StartBarcodingRequest* _msg = _internal_mutable_start_barcoding_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.start_barcoding_request)
  return _msg;
}

// .minknow_api.basecaller.StartAlignmentRequest start_alignment_request = 12;
inline bool RunInfo::_internal_has_start_alignment_request() const {
  return start_request_oneof_case() == kStartAlignmentRequest;
}
inline bool RunInfo::has_start_alignment_request() const {
  return _internal_has_start_alignment_request();
}
inline void RunInfo::set_has_start_alignment_request() {
  _oneof_case_[0] = kStartAlignmentRequest;
}
inline void RunInfo::clear_start_alignment_request() {
  if (_internal_has_start_alignment_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_oneof_.start_alignment_request_;
    }
    clear_has_start_request_oneof();
  }
}
inline ::minknow_api::basecaller::StartAlignmentRequest* RunInfo::release_start_alignment_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.start_alignment_request)
  if (_internal_has_start_alignment_request()) {
    clear_has_start_request_oneof();
      ::minknow_api::basecaller::StartAlignmentRequest* temp = start_request_oneof_.start_alignment_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_oneof_.start_alignment_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartAlignmentRequest& RunInfo::_internal_start_alignment_request() const {
  return _internal_has_start_alignment_request()
      ? *start_request_oneof_.start_alignment_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartAlignmentRequest&>(::minknow_api::basecaller::_StartAlignmentRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartAlignmentRequest& RunInfo::start_alignment_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.start_alignment_request)
  return _internal_start_alignment_request();
}
inline ::minknow_api::basecaller::StartAlignmentRequest* RunInfo::unsafe_arena_release_start_alignment_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.RunInfo.start_alignment_request)
  if (_internal_has_start_alignment_request()) {
    clear_has_start_request_oneof();
    ::minknow_api::basecaller::StartAlignmentRequest* temp = start_request_oneof_.start_alignment_request_;
    start_request_oneof_.start_alignment_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RunInfo::unsafe_arena_set_allocated_start_alignment_request(::minknow_api::basecaller::StartAlignmentRequest* start_alignment_request) {
  clear_start_request_oneof();
  if (start_alignment_request) {
    set_has_start_alignment_request();
    start_request_oneof_.start_alignment_request_ = start_alignment_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.start_alignment_request)
}
inline ::minknow_api::basecaller::StartAlignmentRequest* RunInfo::_internal_mutable_start_alignment_request() {
  if (!_internal_has_start_alignment_request()) {
    clear_start_request_oneof();
    set_has_start_alignment_request();
    start_request_oneof_.start_alignment_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartAlignmentRequest >(GetArenaForAllocation());
  }
  return start_request_oneof_.start_alignment_request_;
}
inline ::minknow_api::basecaller::StartAlignmentRequest* RunInfo::mutable_start_alignment_request() {
  ::minknow_api::basecaller::StartAlignmentRequest* _msg = _internal_mutable_start_alignment_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.start_alignment_request)
  return _msg;
}

// .minknow_api.basecaller.StartPostProcessingProtocolRequest start_post_processing_protocol_request = 13;
inline bool RunInfo::_internal_has_start_post_processing_protocol_request() const {
  return start_request_oneof_case() == kStartPostProcessingProtocolRequest;
}
inline bool RunInfo::has_start_post_processing_protocol_request() const {
  return _internal_has_start_post_processing_protocol_request();
}
inline void RunInfo::set_has_start_post_processing_protocol_request() {
  _oneof_case_[0] = kStartPostProcessingProtocolRequest;
}
inline void RunInfo::clear_start_post_processing_protocol_request() {
  if (_internal_has_start_post_processing_protocol_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete start_request_oneof_.start_post_processing_protocol_request_;
    }
    clear_has_start_request_oneof();
  }
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* RunInfo::release_start_post_processing_protocol_request() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.start_post_processing_protocol_request)
  if (_internal_has_start_post_processing_protocol_request()) {
    clear_has_start_request_oneof();
      ::minknow_api::basecaller::StartPostProcessingProtocolRequest* temp = start_request_oneof_.start_post_processing_protocol_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    start_request_oneof_.start_post_processing_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& RunInfo::_internal_start_post_processing_protocol_request() const {
  return _internal_has_start_post_processing_protocol_request()
      ? *start_request_oneof_.start_post_processing_protocol_request_
      : reinterpret_cast< ::minknow_api::basecaller::StartPostProcessingProtocolRequest&>(::minknow_api::basecaller::_StartPostProcessingProtocolRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& RunInfo::start_post_processing_protocol_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.start_post_processing_protocol_request)
  return _internal_start_post_processing_protocol_request();
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* RunInfo::unsafe_arena_release_start_post_processing_protocol_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.RunInfo.start_post_processing_protocol_request)
  if (_internal_has_start_post_processing_protocol_request()) {
    clear_has_start_request_oneof();
    ::minknow_api::basecaller::StartPostProcessingProtocolRequest* temp = start_request_oneof_.start_post_processing_protocol_request_;
    start_request_oneof_.start_post_processing_protocol_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RunInfo::unsafe_arena_set_allocated_start_post_processing_protocol_request(::minknow_api::basecaller::StartPostProcessingProtocolRequest* start_post_processing_protocol_request) {
  clear_start_request_oneof();
  if (start_post_processing_protocol_request) {
    set_has_start_post_processing_protocol_request();
    start_request_oneof_.start_post_processing_protocol_request_ = start_post_processing_protocol_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.start_post_processing_protocol_request)
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* RunInfo::_internal_mutable_start_post_processing_protocol_request() {
  if (!_internal_has_start_post_processing_protocol_request()) {
    clear_start_request_oneof();
    set_has_start_post_processing_protocol_request();
    start_request_oneof_.start_post_processing_protocol_request_ = CreateMaybeMessage< ::minknow_api::basecaller::StartPostProcessingProtocolRequest >(GetArenaForAllocation());
  }
  return start_request_oneof_.start_post_processing_protocol_request_;
}
inline ::minknow_api::basecaller::StartPostProcessingProtocolRequest* RunInfo::mutable_start_post_processing_protocol_request() {
  ::minknow_api::basecaller::StartPostProcessingProtocolRequest* _msg = _internal_mutable_start_post_processing_protocol_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.start_post_processing_protocol_request)
  return _msg;
}

// .minknow_api.basecaller.State state = 3;
inline void RunInfo::clear_state() {
  state_ = 0;
}
inline ::minknow_api::basecaller::State RunInfo::_internal_state() const {
  return static_cast< ::minknow_api::basecaller::State >(state_);
}
inline ::minknow_api::basecaller::State RunInfo::state() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.state)
  return _internal_state();
}
inline void RunInfo::_internal_set_state(::minknow_api::basecaller::State value) {
  
  state_ = value;
}
inline void RunInfo::set_state(::minknow_api::basecaller::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.state)
}

// repeated string errors = 4;
inline int RunInfo::_internal_errors_size() const {
  return errors_.size();
}
inline int RunInfo::errors_size() const {
  return _internal_errors_size();
}
inline void RunInfo::clear_errors() {
  errors_.Clear();
}
inline std::string* RunInfo::add_errors() {
  std::string* _s = _internal_add_errors();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.RunInfo.errors)
  return _s;
}
inline const std::string& RunInfo::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& RunInfo::errors(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.errors)
  return _internal_errors(index);
}
inline std::string* RunInfo::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.errors)
  return errors_.Mutable(index);
}
inline void RunInfo::set_errors(int index, const std::string& value) {
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::set_errors(int index, std::string&& value) {
  errors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.RunInfo.errors)
}
inline std::string* RunInfo::_internal_add_errors() {
  return errors_.Add();
}
inline void RunInfo::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.RunInfo.errors)
}
inline void RunInfo::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.RunInfo.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunInfo::errors() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.RunInfo.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunInfo::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.RunInfo.errors)
  return &errors_;
}

// int32 files_discovered = 5;
inline void RunInfo::clear_files_discovered() {
  files_discovered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::_internal_files_discovered() const {
  return files_discovered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::files_discovered() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.files_discovered)
  return _internal_files_discovered();
}
inline void RunInfo::_internal_set_files_discovered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  files_discovered_ = value;
}
inline void RunInfo::set_files_discovered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_files_discovered(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.files_discovered)
}

// int32 progress_current = 6;
inline void RunInfo::clear_progress_current() {
  progress_current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::_internal_progress_current() const {
  return progress_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::progress_current() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.progress_current)
  return _internal_progress_current();
}
inline void RunInfo::_internal_set_progress_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_current_ = value;
}
inline void RunInfo::set_progress_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_current(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.progress_current)
}

// int32 progress_total = 7;
inline void RunInfo::clear_progress_total() {
  progress_total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::_internal_progress_total() const {
  return progress_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunInfo::progress_total() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.progress_total)
  return _internal_progress_total();
}
inline void RunInfo::_internal_set_progress_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_total_ = value;
}
inline void RunInfo::set_progress_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_total(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.RunInfo.progress_total)
}

// .google.protobuf.Timestamp start_time = 8;
inline bool RunInfo::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool RunInfo::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::start_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.start_time)
  return _internal_start_time();
}
inline void RunInfo::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_time_ = p;
  }
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.start_time)
  return _msg;
}
inline void RunInfo::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.RunInfo.start_time)
}

// .google.protobuf.Timestamp end_time = 9;
inline bool RunInfo::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool RunInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.end_time)
  return _internal_end_time();
}
inline void RunInfo::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_time_ = p;
  }
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.end_time)
  return _msg;
}
inline void RunInfo::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.RunInfo.end_time)
}

// .google.protobuf.Timestamp estimated_end_time = 10;
inline bool RunInfo::_internal_has_estimated_end_time() const {
  return this != internal_default_instance() && estimated_end_time_ != nullptr;
}
inline bool RunInfo::has_estimated_end_time() const {
  return _internal_has_estimated_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::_internal_estimated_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = estimated_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RunInfo::estimated_end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.RunInfo.estimated_end_time)
  return _internal_estimated_end_time();
}
inline void RunInfo::unsafe_arena_set_allocated_estimated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_end_time_);
  }
  estimated_end_time_ = estimated_end_time;
  if (estimated_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.RunInfo.estimated_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::release_estimated_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = estimated_end_time_;
  estimated_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::unsafe_arena_release_estimated_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.RunInfo.estimated_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = estimated_end_time_;
  estimated_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::_internal_mutable_estimated_end_time() {
  
  if (estimated_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    estimated_end_time_ = p;
  }
  return estimated_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RunInfo::mutable_estimated_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_estimated_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.RunInfo.estimated_end_time)
  return _msg;
}
inline void RunInfo::set_allocated_estimated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* estimated_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_end_time_);
  }
  if (estimated_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(estimated_end_time));
    if (message_arena != submessage_arena) {
      estimated_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estimated_end_time, submessage_arena);
    }
    
  } else {
    
  }
  estimated_end_time_ = estimated_end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.RunInfo.estimated_end_time)
}

inline bool RunInfo::has_start_request_oneof() const {
  return start_request_oneof_case() != START_REQUEST_ONEOF_NOT_SET;
}
inline void RunInfo::clear_has_start_request_oneof() {
  _oneof_case_[0] = START_REQUEST_ONEOF_NOT_SET;
}
inline RunInfo::StartRequestOneofCase RunInfo::start_request_oneof_case() const {
  return RunInfo::StartRequestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetInfoRequest_IdList

// repeated string ids = 1;
inline int GetInfoRequest_IdList::_internal_ids_size() const {
  return ids_.size();
}
inline int GetInfoRequest_IdList::ids_size() const {
  return _internal_ids_size();
}
inline void GetInfoRequest_IdList::clear_ids() {
  ids_.Clear();
}
inline std::string* GetInfoRequest_IdList::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.basecaller.GetInfoRequest.IdList.ids)
  return _s;
}
inline const std::string& GetInfoRequest_IdList::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetInfoRequest_IdList::ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.GetInfoRequest.IdList.ids)
  return _internal_ids(index);
}
inline std::string* GetInfoRequest_IdList::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.GetInfoRequest.IdList.ids)
  return ids_.Mutable(index);
}
inline void GetInfoRequest_IdList::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline std::string* GetInfoRequest_IdList::_internal_add_ids() {
  return ids_.Add();
}
inline void GetInfoRequest_IdList::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline void GetInfoRequest_IdList::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.basecaller.GetInfoRequest.IdList.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInfoRequest_IdList::ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.GetInfoRequest.IdList.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInfoRequest_IdList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.GetInfoRequest.IdList.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetInfoRequest

// .minknow_api.basecaller.SelectionPreset preset = 1;
inline bool GetInfoRequest::_internal_has_preset() const {
  return selection_case() == kPreset;
}
inline bool GetInfoRequest::has_preset() const {
  return _internal_has_preset();
}
inline void GetInfoRequest::set_has_preset() {
  _oneof_case_[0] = kPreset;
}
inline void GetInfoRequest::clear_preset() {
  if (_internal_has_preset()) {
    selection_.preset_ = 0;
    clear_has_selection();
  }
}
inline ::minknow_api::basecaller::SelectionPreset GetInfoRequest::_internal_preset() const {
  if (_internal_has_preset()) {
    return static_cast< ::minknow_api::basecaller::SelectionPreset >(selection_.preset_);
  }
  return static_cast< ::minknow_api::basecaller::SelectionPreset >(0);
}
inline ::minknow_api::basecaller::SelectionPreset GetInfoRequest::preset() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.GetInfoRequest.preset)
  return _internal_preset();
}
inline void GetInfoRequest::_internal_set_preset(::minknow_api::basecaller::SelectionPreset value) {
  if (!_internal_has_preset()) {
    clear_selection();
    set_has_preset();
  }
  selection_.preset_ = value;
}
inline void GetInfoRequest::set_preset(::minknow_api::basecaller::SelectionPreset value) {
  _internal_set_preset(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.GetInfoRequest.preset)
}

// string id = 2;
inline bool GetInfoRequest::_internal_has_id() const {
  return selection_case() == kId;
}
inline bool GetInfoRequest::has_id() const {
  return _internal_has_id();
}
inline void GetInfoRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void GetInfoRequest::clear_id() {
  if (_internal_has_id()) {
    selection_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_selection();
  }
}
inline const std::string& GetInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.GetInfoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline void GetInfoRequest::set_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_id()) {
    clear_selection();
    set_has_id();
    selection_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  selection_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.GetInfoRequest.id)
}
inline std::string* GetInfoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.GetInfoRequest.id)
  return _s;
}
inline const std::string& GetInfoRequest::_internal_id() const {
  if (_internal_has_id()) {
    return selection_.id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetInfoRequest::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_selection();
    set_has_id();
    selection_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  selection_.id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInfoRequest::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_selection();
    set_has_id();
    selection_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return selection_.id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.GetInfoRequest.id)
  if (_internal_has_id()) {
    clear_has_selection();
    return selection_.id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void GetInfoRequest::set_allocated_id(std::string* id) {
  if (has_selection()) {
    clear_selection();
  }
  if (id != nullptr) {
    set_has_id();
    selection_.id_.UnsafeSetDefault(id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.GetInfoRequest.id)
}

// .minknow_api.basecaller.GetInfoRequest.IdList list = 3;
inline bool GetInfoRequest::_internal_has_list() const {
  return selection_case() == kList;
}
inline bool GetInfoRequest::has_list() const {
  return _internal_has_list();
}
inline void GetInfoRequest::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void GetInfoRequest::clear_list() {
  if (_internal_has_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete selection_.list_;
    }
    clear_has_selection();
  }
}
inline ::minknow_api::basecaller::GetInfoRequest_IdList* GetInfoRequest::release_list() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.GetInfoRequest.list)
  if (_internal_has_list()) {
    clear_has_selection();
      ::minknow_api::basecaller::GetInfoRequest_IdList* temp = selection_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    selection_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::basecaller::GetInfoRequest_IdList& GetInfoRequest::_internal_list() const {
  return _internal_has_list()
      ? *selection_.list_
      : reinterpret_cast< ::minknow_api::basecaller::GetInfoRequest_IdList&>(::minknow_api::basecaller::_GetInfoRequest_IdList_default_instance_);
}
inline const ::minknow_api::basecaller::GetInfoRequest_IdList& GetInfoRequest::list() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.GetInfoRequest.list)
  return _internal_list();
}
inline ::minknow_api::basecaller::GetInfoRequest_IdList* GetInfoRequest::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.basecaller.GetInfoRequest.list)
  if (_internal_has_list()) {
    clear_has_selection();
    ::minknow_api::basecaller::GetInfoRequest_IdList* temp = selection_.list_;
    selection_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetInfoRequest::unsafe_arena_set_allocated_list(::minknow_api::basecaller::GetInfoRequest_IdList* list) {
  clear_selection();
  if (list) {
    set_has_list();
    selection_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.basecaller.GetInfoRequest.list)
}
inline ::minknow_api::basecaller::GetInfoRequest_IdList* GetInfoRequest::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_selection();
    set_has_list();
    selection_.list_ = CreateMaybeMessage< ::minknow_api::basecaller::GetInfoRequest_IdList >(GetArenaForAllocation());
  }
  return selection_.list_;
}
inline ::minknow_api::basecaller::GetInfoRequest_IdList* GetInfoRequest::mutable_list() {
  ::minknow_api::basecaller::GetInfoRequest_IdList* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.GetInfoRequest.list)
  return _msg;
}

inline bool GetInfoRequest::has_selection() const {
  return selection_case() != SELECTION_NOT_SET;
}
inline void GetInfoRequest::clear_has_selection() {
  _oneof_case_[0] = SELECTION_NOT_SET;
}
inline GetInfoRequest::SelectionCase GetInfoRequest::selection_case() const {
  return GetInfoRequest::SelectionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetInfoResponse

// repeated .minknow_api.basecaller.RunInfo runs = 1;
inline int GetInfoResponse::_internal_runs_size() const {
  return runs_.size();
}
inline int GetInfoResponse::runs_size() const {
  return _internal_runs_size();
}
inline void GetInfoResponse::clear_runs() {
  runs_.Clear();
}
inline ::minknow_api::basecaller::RunInfo* GetInfoResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.GetInfoResponse.runs)
  return runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >*
GetInfoResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.GetInfoResponse.runs)
  return &runs_;
}
inline const ::minknow_api::basecaller::RunInfo& GetInfoResponse::_internal_runs(int index) const {
  return runs_.Get(index);
}
inline const ::minknow_api::basecaller::RunInfo& GetInfoResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.GetInfoResponse.runs)
  return _internal_runs(index);
}
inline ::minknow_api::basecaller::RunInfo* GetInfoResponse::_internal_add_runs() {
  return runs_.Add();
}
inline ::minknow_api::basecaller::RunInfo* GetInfoResponse::add_runs() {
  ::minknow_api::basecaller::RunInfo* _add = _internal_add_runs();
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.GetInfoResponse.runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >&
GetInfoResponse::runs() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.GetInfoResponse.runs)
  return runs_;
}

// -------------------------------------------------------------------

// WatchRequest

// bool send_finished_runs = 1;
inline void WatchRequest::clear_send_finished_runs() {
  send_finished_runs_ = false;
}
inline bool WatchRequest::_internal_send_finished_runs() const {
  return send_finished_runs_;
}
inline bool WatchRequest::send_finished_runs() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.WatchRequest.send_finished_runs)
  return _internal_send_finished_runs();
}
inline void WatchRequest::_internal_set_send_finished_runs(bool value) {
  
  send_finished_runs_ = value;
}
inline void WatchRequest::set_send_finished_runs(bool value) {
  _internal_set_send_finished_runs(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.WatchRequest.send_finished_runs)
}

// -------------------------------------------------------------------

// WatchResponse

// repeated .minknow_api.basecaller.RunInfo runs = 1;
inline int WatchResponse::_internal_runs_size() const {
  return runs_.size();
}
inline int WatchResponse::runs_size() const {
  return _internal_runs_size();
}
inline void WatchResponse::clear_runs() {
  runs_.Clear();
}
inline ::minknow_api::basecaller::RunInfo* WatchResponse::mutable_runs(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.WatchResponse.runs)
  return runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >*
WatchResponse::mutable_runs() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.WatchResponse.runs)
  return &runs_;
}
inline const ::minknow_api::basecaller::RunInfo& WatchResponse::_internal_runs(int index) const {
  return runs_.Get(index);
}
inline const ::minknow_api::basecaller::RunInfo& WatchResponse::runs(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.WatchResponse.runs)
  return _internal_runs(index);
}
inline ::minknow_api::basecaller::RunInfo* WatchResponse::_internal_add_runs() {
  return runs_.Add();
}
inline ::minknow_api::basecaller::RunInfo* WatchResponse::add_runs() {
  ::minknow_api::basecaller::RunInfo* _add = _internal_add_runs();
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.WatchResponse.runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::RunInfo >&
WatchResponse::runs() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.WatchResponse.runs)
  return runs_;
}

// -------------------------------------------------------------------

// MakeAlignmentIndexRequest

// string input_alignment_reference = 1;
inline void MakeAlignmentIndexRequest::clear_input_alignment_reference() {
  input_alignment_reference_.ClearToEmpty();
}
inline const std::string& MakeAlignmentIndexRequest::input_alignment_reference() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.MakeAlignmentIndexRequest.input_alignment_reference)
  return _internal_input_alignment_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MakeAlignmentIndexRequest::set_input_alignment_reference(ArgT0&& arg0, ArgT... args) {
 
 input_alignment_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.MakeAlignmentIndexRequest.input_alignment_reference)
}
inline std::string* MakeAlignmentIndexRequest::mutable_input_alignment_reference() {
  std::string* _s = _internal_mutable_input_alignment_reference();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.MakeAlignmentIndexRequest.input_alignment_reference)
  return _s;
}
inline const std::string& MakeAlignmentIndexRequest::_internal_input_alignment_reference() const {
  return input_alignment_reference_.Get();
}
inline void MakeAlignmentIndexRequest::_internal_set_input_alignment_reference(const std::string& value) {
  
  input_alignment_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MakeAlignmentIndexRequest::_internal_mutable_input_alignment_reference() {
  
  return input_alignment_reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MakeAlignmentIndexRequest::release_input_alignment_reference() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.MakeAlignmentIndexRequest.input_alignment_reference)
  return input_alignment_reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MakeAlignmentIndexRequest::set_allocated_input_alignment_reference(std::string* input_alignment_reference) {
  if (input_alignment_reference != nullptr) {
    
  } else {
    
  }
  input_alignment_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_alignment_reference,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.MakeAlignmentIndexRequest.input_alignment_reference)
}

// string output_alignment_index = 2;
inline void MakeAlignmentIndexRequest::clear_output_alignment_index() {
  output_alignment_index_.ClearToEmpty();
}
inline const std::string& MakeAlignmentIndexRequest::output_alignment_index() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.MakeAlignmentIndexRequest.output_alignment_index)
  return _internal_output_alignment_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MakeAlignmentIndexRequest::set_output_alignment_index(ArgT0&& arg0, ArgT... args) {
 
 output_alignment_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.MakeAlignmentIndexRequest.output_alignment_index)
}
inline std::string* MakeAlignmentIndexRequest::mutable_output_alignment_index() {
  std::string* _s = _internal_mutable_output_alignment_index();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.MakeAlignmentIndexRequest.output_alignment_index)
  return _s;
}
inline const std::string& MakeAlignmentIndexRequest::_internal_output_alignment_index() const {
  return output_alignment_index_.Get();
}
inline void MakeAlignmentIndexRequest::_internal_set_output_alignment_index(const std::string& value) {
  
  output_alignment_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MakeAlignmentIndexRequest::_internal_mutable_output_alignment_index() {
  
  return output_alignment_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MakeAlignmentIndexRequest::release_output_alignment_index() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.MakeAlignmentIndexRequest.output_alignment_index)
  return output_alignment_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MakeAlignmentIndexRequest::set_allocated_output_alignment_index(std::string* output_alignment_index) {
  if (output_alignment_index != nullptr) {
    
  } else {
    
  }
  output_alignment_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_alignment_index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.MakeAlignmentIndexRequest.output_alignment_index)
}

// -------------------------------------------------------------------

// MakeAlignmentIndexResponse

// -------------------------------------------------------------------

// ListPostProcessingProtocolsRequest

// -------------------------------------------------------------------

// PostProcessingProtocolInfo

// string identifier = 1;
inline void PostProcessingProtocolInfo::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& PostProcessingProtocolInfo::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.PostProcessingProtocolInfo.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostProcessingProtocolInfo::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.PostProcessingProtocolInfo.identifier)
}
inline std::string* PostProcessingProtocolInfo::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.PostProcessingProtocolInfo.identifier)
  return _s;
}
inline const std::string& PostProcessingProtocolInfo::_internal_identifier() const {
  return identifier_.Get();
}
inline void PostProcessingProtocolInfo::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostProcessingProtocolInfo::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostProcessingProtocolInfo::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.PostProcessingProtocolInfo.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostProcessingProtocolInfo::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.PostProcessingProtocolInfo.identifier)
}

// string name = 2;
inline void PostProcessingProtocolInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PostProcessingProtocolInfo::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.PostProcessingProtocolInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostProcessingProtocolInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.PostProcessingProtocolInfo.name)
}
inline std::string* PostProcessingProtocolInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.PostProcessingProtocolInfo.name)
  return _s;
}
inline const std::string& PostProcessingProtocolInfo::_internal_name() const {
  return name_.Get();
}
inline void PostProcessingProtocolInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostProcessingProtocolInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostProcessingProtocolInfo::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.PostProcessingProtocolInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostProcessingProtocolInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.PostProcessingProtocolInfo.name)
}

// -------------------------------------------------------------------

// ListPostProcessingProtocolsResponse

// repeated .minknow_api.basecaller.PostProcessingProtocolInfo protocols = 1;
inline int ListPostProcessingProtocolsResponse::_internal_protocols_size() const {
  return protocols_.size();
}
inline int ListPostProcessingProtocolsResponse::protocols_size() const {
  return _internal_protocols_size();
}
inline void ListPostProcessingProtocolsResponse::clear_protocols() {
  protocols_.Clear();
}
inline ::minknow_api::basecaller::PostProcessingProtocolInfo* ListPostProcessingProtocolsResponse::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.ListPostProcessingProtocolsResponse.protocols)
  return protocols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::PostProcessingProtocolInfo >*
ListPostProcessingProtocolsResponse::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.ListPostProcessingProtocolsResponse.protocols)
  return &protocols_;
}
inline const ::minknow_api::basecaller::PostProcessingProtocolInfo& ListPostProcessingProtocolsResponse::_internal_protocols(int index) const {
  return protocols_.Get(index);
}
inline const ::minknow_api::basecaller::PostProcessingProtocolInfo& ListPostProcessingProtocolsResponse::protocols(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListPostProcessingProtocolsResponse.protocols)
  return _internal_protocols(index);
}
inline ::minknow_api::basecaller::PostProcessingProtocolInfo* ListPostProcessingProtocolsResponse::_internal_add_protocols() {
  return protocols_.Add();
}
inline ::minknow_api::basecaller::PostProcessingProtocolInfo* ListPostProcessingProtocolsResponse::add_protocols() {
  ::minknow_api::basecaller::PostProcessingProtocolInfo* _add = _internal_add_protocols();
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.ListPostProcessingProtocolsResponse.protocols)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::basecaller::PostProcessingProtocolInfo >&
ListPostProcessingProtocolsResponse::protocols() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.ListPostProcessingProtocolsResponse.protocols)
  return protocols_;
}

// -------------------------------------------------------------------

// ListSettingsForPostProcessingProtocolRequest

// string identifier = 1;
inline void ListSettingsForPostProcessingProtocolRequest::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& ListSettingsForPostProcessingProtocolRequest::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSettingsForPostProcessingProtocolRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest.identifier)
}
inline std::string* ListSettingsForPostProcessingProtocolRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest.identifier)
  return _s;
}
inline const std::string& ListSettingsForPostProcessingProtocolRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void ListSettingsForPostProcessingProtocolRequest::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSettingsForPostProcessingProtocolRequest::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSettingsForPostProcessingProtocolRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSettingsForPostProcessingProtocolRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.ListSettingsForPostProcessingProtocolRequest.identifier)
}

// -------------------------------------------------------------------

// ListSettingsForPostProcessingProtocolResponse

// bool requires_fast5_input = 1;
inline void ListSettingsForPostProcessingProtocolResponse::clear_requires_fast5_input() {
  requires_fast5_input_ = false;
}
inline bool ListSettingsForPostProcessingProtocolResponse::_internal_requires_fast5_input() const {
  return requires_fast5_input_;
}
inline bool ListSettingsForPostProcessingProtocolResponse::requires_fast5_input() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_fast5_input)
  return _internal_requires_fast5_input();
}
inline void ListSettingsForPostProcessingProtocolResponse::_internal_set_requires_fast5_input(bool value) {
  
  requires_fast5_input_ = value;
}
inline void ListSettingsForPostProcessingProtocolResponse::set_requires_fast5_input(bool value) {
  _internal_set_requires_fast5_input(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_fast5_input)
}

// bool requires_fastq_input = 2;
inline void ListSettingsForPostProcessingProtocolResponse::clear_requires_fastq_input() {
  requires_fastq_input_ = false;
}
inline bool ListSettingsForPostProcessingProtocolResponse::_internal_requires_fastq_input() const {
  return requires_fastq_input_;
}
inline bool ListSettingsForPostProcessingProtocolResponse::requires_fastq_input() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_fastq_input)
  return _internal_requires_fastq_input();
}
inline void ListSettingsForPostProcessingProtocolResponse::_internal_set_requires_fastq_input(bool value) {
  
  requires_fastq_input_ = value;
}
inline void ListSettingsForPostProcessingProtocolResponse::set_requires_fastq_input(bool value) {
  _internal_set_requires_fastq_input(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_fastq_input)
}

// bool requires_bam_input = 3;
inline void ListSettingsForPostProcessingProtocolResponse::clear_requires_bam_input() {
  requires_bam_input_ = false;
}
inline bool ListSettingsForPostProcessingProtocolResponse::_internal_requires_bam_input() const {
  return requires_bam_input_;
}
inline bool ListSettingsForPostProcessingProtocolResponse::requires_bam_input() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_bam_input)
  return _internal_requires_bam_input();
}
inline void ListSettingsForPostProcessingProtocolResponse::_internal_set_requires_bam_input(bool value) {
  
  requires_bam_input_ = value;
}
inline void ListSettingsForPostProcessingProtocolResponse::set_requires_bam_input(bool value) {
  _internal_set_requires_bam_input(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.requires_bam_input)
}

// repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 4;
inline int ListSettingsForPostProcessingProtocolResponse::_internal_protocol_settings_size() const {
  return protocol_settings_.size();
}
inline int ListSettingsForPostProcessingProtocolResponse::protocol_settings_size() const {
  return _internal_protocol_settings_size();
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForPostProcessingProtocolResponse::mutable_protocol_settings(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.protocol_settings)
  return protocol_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >*
ListSettingsForPostProcessingProtocolResponse::mutable_protocol_settings() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.protocol_settings)
  return &protocol_settings_;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForPostProcessingProtocolResponse::_internal_protocol_settings(int index) const {
  return protocol_settings_.Get(index);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForPostProcessingProtocolResponse::protocol_settings(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.protocol_settings)
  return _internal_protocol_settings(index);
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForPostProcessingProtocolResponse::_internal_add_protocol_settings() {
  return protocol_settings_.Add();
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForPostProcessingProtocolResponse::add_protocol_settings() {
  ::minknow_api::protocol_settings::ProtocolSetting* _add = _internal_add_protocol_settings();
  // @@protoc_insertion_point(field_add:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.protocol_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >&
ListSettingsForPostProcessingProtocolResponse::protocol_settings() const {
  // @@protoc_insertion_point(field_list:minknow_api.basecaller.ListSettingsForPostProcessingProtocolResponse.protocol_settings)
  return protocol_settings_;
}

// -------------------------------------------------------------------

// UpdateProgressRequest

// string id = 1;
inline void UpdateProgressRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UpdateProgressRequest::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.UpdateProgressRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProgressRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.UpdateProgressRequest.id)
}
inline std::string* UpdateProgressRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.basecaller.UpdateProgressRequest.id)
  return _s;
}
inline const std::string& UpdateProgressRequest::_internal_id() const {
  return id_.Get();
}
inline void UpdateProgressRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProgressRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProgressRequest::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.basecaller.UpdateProgressRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProgressRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.basecaller.UpdateProgressRequest.id)
}

// float progress = 2;
inline void UpdateProgressRequest::clear_progress() {
  progress_ = 0;
}
inline float UpdateProgressRequest::_internal_progress() const {
  return progress_;
}
inline float UpdateProgressRequest::progress() const {
  // @@protoc_insertion_point(field_get:minknow_api.basecaller.UpdateProgressRequest.progress)
  return _internal_progress();
}
inline void UpdateProgressRequest::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void UpdateProgressRequest::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:minknow_api.basecaller.UpdateProgressRequest.progress)
}

// -------------------------------------------------------------------

// UpdateProgressResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace basecaller
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::basecaller::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::basecaller::State>() {
  return ::minknow_api::basecaller::State_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::basecaller::SelectionPreset> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::basecaller::SelectionPreset>() {
  return ::minknow_api::basecaller::SelectionPreset_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fbasecaller_2eproto
