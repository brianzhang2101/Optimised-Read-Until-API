// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/data.proto

#include "minknow_api/data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace data {
constexpr GetChannelStatesRequest::GetChannelStatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : use_channel_states_ids_(nullptr)
  , heartbeat_(nullptr)
  , first_channel_(0u)
  , last_channel_(0u)
  , wait_for_processing_(false){}
struct GetChannelStatesRequestDefaultTypeInternal {
  constexpr GetChannelStatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesRequestDefaultTypeInternal() {}
  union {
    GetChannelStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesRequestDefaultTypeInternal _GetChannelStatesRequest_default_instance_;
constexpr GetChannelStatesResponse_ChannelStateData::GetChannelStatesResponse_ChannelStateData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , acquisition_raw_index_(uint64_t{0u})
  , analysis_raw_index_(uint64_t{0u})
  , channel_(0u)
  , trigger_time_(uint64_t{0u})
  , _oneof_case_{}{}
struct GetChannelStatesResponse_ChannelStateDataDefaultTypeInternal {
  constexpr GetChannelStatesResponse_ChannelStateDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesResponse_ChannelStateDataDefaultTypeInternal() {}
  union {
    GetChannelStatesResponse_ChannelStateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesResponse_ChannelStateDataDefaultTypeInternal _GetChannelStatesResponse_ChannelStateData_default_instance_;
constexpr GetChannelStatesResponse::GetChannelStatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_states_(){}
struct GetChannelStatesResponseDefaultTypeInternal {
  constexpr GetChannelStatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesResponseDefaultTypeInternal() {}
  union {
    GetChannelStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesResponseDefaultTypeInternal _GetChannelStatesResponse_default_instance_;
constexpr GetDataTypesRequest::GetDataTypesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDataTypesRequestDefaultTypeInternal {
  constexpr GetDataTypesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDataTypesRequestDefaultTypeInternal() {}
  union {
    GetDataTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDataTypesRequestDefaultTypeInternal _GetDataTypesRequest_default_instance_;
constexpr GetDataTypesResponse_DataType::GetDataTypesResponse_DataType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , big_endian_(false)
  , size_(0u){}
struct GetDataTypesResponse_DataTypeDefaultTypeInternal {
  constexpr GetDataTypesResponse_DataTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDataTypesResponse_DataTypeDefaultTypeInternal() {}
  union {
    GetDataTypesResponse_DataType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDataTypesResponse_DataTypeDefaultTypeInternal _GetDataTypesResponse_DataType_default_instance_;
constexpr GetDataTypesResponse::GetDataTypesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uncalibrated_signal_(nullptr)
  , calibrated_signal_(nullptr)
  , bias_voltages_(nullptr){}
struct GetDataTypesResponseDefaultTypeInternal {
  constexpr GetDataTypesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDataTypesResponseDefaultTypeInternal() {}
  union {
    GetDataTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDataTypesResponseDefaultTypeInternal _GetDataTypesResponse_default_instance_;
constexpr GetSignalBytesRequest::GetSignalBytesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_channel_(0u)
  , last_channel_(0u)
  , include_channel_configs_(false)
  , include_bias_voltages_(false)
  , calibrated_data_(false)
  , return_when_listening_(false)
  , _oneof_case_{}{}
struct GetSignalBytesRequestDefaultTypeInternal {
  constexpr GetSignalBytesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalBytesRequestDefaultTypeInternal() {}
  union {
    GetSignalBytesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalBytesRequestDefaultTypeInternal _GetSignalBytesRequest_default_instance_;
constexpr GetSignalBytesResponse_ChannelConfigChange::GetSignalBytesResponse_ChannelConfigChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , offset_(uint64_t{0u}){}
struct GetSignalBytesResponse_ChannelConfigChangeDefaultTypeInternal {
  constexpr GetSignalBytesResponse_ChannelConfigChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalBytesResponse_ChannelConfigChangeDefaultTypeInternal() {}
  union {
    GetSignalBytesResponse_ChannelConfigChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalBytesResponse_ChannelConfigChangeDefaultTypeInternal _GetSignalBytesResponse_ChannelConfigChange_default_instance_;
constexpr GetSignalBytesResponse_ChannelData::GetSignalBytesResponse_ChannelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_changes_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSignalBytesResponse_ChannelDataDefaultTypeInternal {
  constexpr GetSignalBytesResponse_ChannelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalBytesResponse_ChannelDataDefaultTypeInternal() {}
  union {
    GetSignalBytesResponse_ChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalBytesResponse_ChannelDataDefaultTypeInternal _GetSignalBytesResponse_ChannelData_default_instance_;
constexpr GetSignalBytesResponse::GetSignalBytesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , bias_voltages_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , samples_since_start_(uint64_t{0u})
  , seconds_since_start_(0)
  , skipped_channels_(0u){}
struct GetSignalBytesResponseDefaultTypeInternal {
  constexpr GetSignalBytesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalBytesResponseDefaultTypeInternal() {}
  union {
    GetSignalBytesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalBytesResponseDefaultTypeInternal _GetSignalBytesResponse_default_instance_;
constexpr GetSignalMinMaxRequest::GetSignalMinMaxRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_channel_(0u)
  , last_channel_(0u)
  , window_size_(0u)
  , calibrated_data_(false){}
struct GetSignalMinMaxRequestDefaultTypeInternal {
  constexpr GetSignalMinMaxRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalMinMaxRequestDefaultTypeInternal() {}
  union {
    GetSignalMinMaxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalMinMaxRequestDefaultTypeInternal _GetSignalMinMaxRequest_default_instance_;
constexpr GetSignalMinMaxResponse_ChannelData::GetSignalMinMaxResponse_ChannelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : calibrated_minima_()
  , raw_minima_()
  , _raw_minima_cached_byte_size_(0)
  , calibrated_maxima_()
  , raw_maxima_()
  , _raw_maxima_cached_byte_size_(0){}
struct GetSignalMinMaxResponse_ChannelDataDefaultTypeInternal {
  constexpr GetSignalMinMaxResponse_ChannelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalMinMaxResponse_ChannelDataDefaultTypeInternal() {}
  union {
    GetSignalMinMaxResponse_ChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalMinMaxResponse_ChannelDataDefaultTypeInternal _GetSignalMinMaxResponse_ChannelData_default_instance_;
constexpr GetSignalMinMaxResponse::GetSignalMinMaxResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , samples_since_start_(uint64_t{0u})
  , seconds_since_start_(0)
  , skipped_channels_(0u){}
struct GetSignalMinMaxResponseDefaultTypeInternal {
  constexpr GetSignalMinMaxResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignalMinMaxResponseDefaultTypeInternal() {}
  union {
    GetSignalMinMaxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignalMinMaxResponseDefaultTypeInternal _GetSignalMinMaxResponse_default_instance_;
constexpr GetLiveReadsRequest_UnblockAction::GetLiveReadsRequest_UnblockAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_(0){}
struct GetLiveReadsRequest_UnblockActionDefaultTypeInternal {
  constexpr GetLiveReadsRequest_UnblockActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequest_UnblockActionDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest_UnblockAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequest_UnblockActionDefaultTypeInternal _GetLiveReadsRequest_UnblockAction_default_instance_;
constexpr GetLiveReadsRequest_StopFurtherData::GetLiveReadsRequest_StopFurtherData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLiveReadsRequest_StopFurtherDataDefaultTypeInternal {
  constexpr GetLiveReadsRequest_StopFurtherDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequest_StopFurtherDataDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest_StopFurtherData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequest_StopFurtherDataDefaultTypeInternal _GetLiveReadsRequest_StopFurtherData_default_instance_;
constexpr GetLiveReadsRequest_Action::GetLiveReadsRequest_Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0u)
  , _oneof_case_{}{}
struct GetLiveReadsRequest_ActionDefaultTypeInternal {
  constexpr GetLiveReadsRequest_ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequest_ActionDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest_Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequest_ActionDefaultTypeInternal _GetLiveReadsRequest_Action_default_instance_;
constexpr GetLiveReadsRequest_StreamSetup::GetLiveReadsRequest_StreamSetup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_channel_(0u)
  , last_channel_(0u)
  , sample_minimum_chunk_size_(uint64_t{0u})
  , raw_data_type_(0)

  , _oneof_case_{}{}
struct GetLiveReadsRequest_StreamSetupDefaultTypeInternal {
  constexpr GetLiveReadsRequest_StreamSetupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequest_StreamSetupDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest_StreamSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequest_StreamSetupDefaultTypeInternal _GetLiveReadsRequest_StreamSetup_default_instance_;
constexpr GetLiveReadsRequest_Actions::GetLiveReadsRequest_Actions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(){}
struct GetLiveReadsRequest_ActionsDefaultTypeInternal {
  constexpr GetLiveReadsRequest_ActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequest_ActionsDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest_Actions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequest_ActionsDefaultTypeInternal _GetLiveReadsRequest_Actions_default_instance_;
constexpr GetLiveReadsRequest::GetLiveReadsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct GetLiveReadsRequestDefaultTypeInternal {
  constexpr GetLiveReadsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsRequestDefaultTypeInternal() {}
  union {
    GetLiveReadsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsRequestDefaultTypeInternal _GetLiveReadsRequest_default_instance_;
constexpr GetLiveReadsResponse_ReadData::GetLiveReadsResponse_ReadData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_classifications_()
  , _chunk_classifications_cached_byte_size_(0)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_sample_(uint64_t{0u})
  , chunk_start_sample_(uint64_t{0u})
  , chunk_length_(uint64_t{0u})
  , number_(0u)
  , median_before_(0)
  , median_(0){}
struct GetLiveReadsResponse_ReadDataDefaultTypeInternal {
  constexpr GetLiveReadsResponse_ReadDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsResponse_ReadDataDefaultTypeInternal() {}
  union {
    GetLiveReadsResponse_ReadData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsResponse_ReadDataDefaultTypeInternal _GetLiveReadsResponse_ReadData_default_instance_;
constexpr GetLiveReadsResponse_ActionResponse::GetLiveReadsResponse_ActionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(0)
{}
struct GetLiveReadsResponse_ActionResponseDefaultTypeInternal {
  constexpr GetLiveReadsResponse_ActionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsResponse_ActionResponseDefaultTypeInternal() {}
  union {
    GetLiveReadsResponse_ActionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsResponse_ActionResponseDefaultTypeInternal _GetLiveReadsResponse_ActionResponse_default_instance_;
constexpr GetLiveReadsResponse_ChannelsEntry_DoNotUse::GetLiveReadsResponse_ChannelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLiveReadsResponse_ChannelsEntry_DoNotUseDefaultTypeInternal {
  constexpr GetLiveReadsResponse_ChannelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsResponse_ChannelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetLiveReadsResponse_ChannelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsResponse_ChannelsEntry_DoNotUseDefaultTypeInternal _GetLiveReadsResponse_ChannelsEntry_DoNotUse_default_instance_;
constexpr GetLiveReadsResponse::GetLiveReadsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , action_responses_()
  , samples_since_start_(uint64_t{0u})
  , seconds_since_start_(0){}
struct GetLiveReadsResponseDefaultTypeInternal {
  constexpr GetLiveReadsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLiveReadsResponseDefaultTypeInternal() {}
  union {
    GetLiveReadsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLiveReadsResponseDefaultTypeInternal _GetLiveReadsResponse_default_instance_;
constexpr ResetChannelStatesRequest::ResetChannelStatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetChannelStatesRequestDefaultTypeInternal {
  constexpr ResetChannelStatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetChannelStatesRequestDefaultTypeInternal() {}
  union {
    ResetChannelStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetChannelStatesRequestDefaultTypeInternal _ResetChannelStatesRequest_default_instance_;
constexpr ResetChannelStatesResponse::ResetChannelStatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetChannelStatesResponseDefaultTypeInternal {
  constexpr ResetChannelStatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetChannelStatesResponseDefaultTypeInternal() {}
  union {
    ResetChannelStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetChannelStatesResponseDefaultTypeInternal _ResetChannelStatesResponse_default_instance_;
constexpr GetReadStatisticsRequest::GetReadStatisticsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0)
  , required_classifications_()
  , read_split_(0)

  , no_current_statistics_(false)
  , no_chunk_statistics_(false)
  , _oneof_case_{}{}
struct GetReadStatisticsRequestDefaultTypeInternal {
  constexpr GetReadStatisticsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsRequestDefaultTypeInternal() {}
  union {
    GetReadStatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsRequestDefaultTypeInternal _GetReadStatisticsRequest_default_instance_;
constexpr GetReadStatisticsResponse_Statistics::GetReadStatisticsResponse_Statistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(0)
  , max_(0)
  , mean_(0)
  , s_d_(0)
  , median_(0)
  , q_5_(0)
  , q_10_(0)
  , q_25_(0)
  , q_75_(0)
  , q_90_(0)
  , q_95_(0){}
struct GetReadStatisticsResponse_StatisticsDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_StatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_StatisticsDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_StatisticsDefaultTypeInternal _GetReadStatisticsResponse_Statistics_default_instance_;
constexpr GetReadStatisticsResponse_ChunkStatistics::GetReadStatisticsResponse_ChunkStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : median_sd_(0)
  , median_(0)
  , range_(0){}
struct GetReadStatisticsResponse_ChunkStatisticsDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_ChunkStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_ChunkStatisticsDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_ChunkStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_ChunkStatisticsDefaultTypeInternal _GetReadStatisticsResponse_ChunkStatistics_default_instance_;
constexpr GetReadStatisticsResponse_PerClassificationData::GetReadStatisticsResponse_PerClassificationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : duration_statistics_(nullptr)
  , current_statistics_(nullptr)
  , chunk_statistics_(nullptr)
  , samples_duration_(uint64_t{0u})
  , seconds_duration_(0){}
struct GetReadStatisticsResponse_PerClassificationDataDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_PerClassificationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_PerClassificationDataDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_PerClassificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_PerClassificationDataDefaultTypeInternal _GetReadStatisticsResponse_PerClassificationData_default_instance_;
constexpr GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUseDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUseDefaultTypeInternal _GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse_default_instance_;
constexpr GetReadStatisticsResponse_PerConfigurationData::GetReadStatisticsResponse_PerConfigurationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classifications_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , channel_configuration_(nullptr)
  , incomplete_(nullptr){}
struct GetReadStatisticsResponse_PerConfigurationDataDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_PerConfigurationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_PerConfigurationDataDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_PerConfigurationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_PerConfigurationDataDefaultTypeInternal _GetReadStatisticsResponse_PerConfigurationData_default_instance_;
constexpr GetReadStatisticsResponse_PerChannelData::GetReadStatisticsResponse_PerChannelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configurations_()
  , samples_since_start_(uint64_t{0u})
  , seconds_since_start_(0)
  , samples_duration_(uint64_t{0u})
  , seconds_duration_(0){}
struct GetReadStatisticsResponse_PerChannelDataDefaultTypeInternal {
  constexpr GetReadStatisticsResponse_PerChannelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponse_PerChannelDataDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse_PerChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponse_PerChannelDataDefaultTypeInternal _GetReadStatisticsResponse_PerChannelData_default_instance_;
constexpr GetReadStatisticsResponse::GetReadStatisticsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , samples_since_start_(uint64_t{0u})
  , seconds_since_start_(0){}
struct GetReadStatisticsResponseDefaultTypeInternal {
  constexpr GetReadStatisticsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadStatisticsResponseDefaultTypeInternal() {}
  union {
    GetReadStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadStatisticsResponseDefaultTypeInternal _GetReadStatisticsResponse_default_instance_;
constexpr LockChannelStatesRequest::LockChannelStatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0)
  , state_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LockChannelStatesRequestDefaultTypeInternal {
  constexpr LockChannelStatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LockChannelStatesRequestDefaultTypeInternal() {}
  union {
    LockChannelStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LockChannelStatesRequestDefaultTypeInternal _LockChannelStatesRequest_default_instance_;
constexpr LockChannelStatesResponse::LockChannelStatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LockChannelStatesResponseDefaultTypeInternal {
  constexpr LockChannelStatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LockChannelStatesResponseDefaultTypeInternal() {}
  union {
    LockChannelStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LockChannelStatesResponseDefaultTypeInternal _LockChannelStatesResponse_default_instance_;
constexpr UnlockChannelStatesRequest::UnlockChannelStatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0){}
struct UnlockChannelStatesRequestDefaultTypeInternal {
  constexpr UnlockChannelStatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlockChannelStatesRequestDefaultTypeInternal() {}
  union {
    UnlockChannelStatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlockChannelStatesRequestDefaultTypeInternal _UnlockChannelStatesRequest_default_instance_;
constexpr UnlockChannelStatesResponse::UnlockChannelStatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UnlockChannelStatesResponseDefaultTypeInternal {
  constexpr UnlockChannelStatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlockChannelStatesResponseDefaultTypeInternal() {}
  union {
    UnlockChannelStatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlockChannelStatesResponseDefaultTypeInternal _UnlockChannelStatesResponse_default_instance_;
constexpr GetExperimentYieldInfoRequest::GetExperimentYieldInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetExperimentYieldInfoRequestDefaultTypeInternal {
  constexpr GetExperimentYieldInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoRequestDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoRequestDefaultTypeInternal _GetExperimentYieldInfoRequest_default_instance_;
constexpr GetExperimentYieldInfoResponse_CompleteReadInfo::GetExperimentYieldInfoResponse_CompleteReadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pending_chunks_(uint64_t{0u})
  , pending_memory_reads_(uint64_t{0u})
  , pending_multi_disk_reads_(uint64_t{0u})
  , pending_skipped_reads_(uint64_t{0u})
  , pending_force_skipped_reads_(uint64_t{0u})
  , processed_memory_reads_(uint64_t{0u})
  , processed_disk_reads_(uint64_t{0u})
  , processed_skipped_reads_(uint64_t{0u})
  , processed_force_skipped_reads_(uint64_t{0u})
  , stored_reads_bytes_memory_(uint64_t{0u})
  , stored_reads_bytes_disk_(uint64_t{0u})
  , discarded_error_bytes_(uint64_t{0u})
  , channels_writing_to_disk_(uint64_t{0u})
  , channels_writing_to_disk_tmp_(uint64_t{0u})
  , pending_disk_reads_(uint64_t{0u})
  , stored_read_supporting_bytes_memory_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_CompleteReadInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_CompleteReadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_CompleteReadInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_CompleteReadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_CompleteReadInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_CompleteReadInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_AcquisitionInfo::GetExperimentYieldInfoResponse_AcquisitionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_per_channel_(uint64_t{0u})
  , frame_discontinuities_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_AcquisitionInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_AcquisitionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_AcquisitionInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_AcquisitionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_AcquisitionInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_AcquisitionInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_AnalyserInfo::GetExperimentYieldInfoResponse_AnalyserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_per_channel_(uint64_t{0u})
  , total_selected_raw_(uint64_t{0u})
  , total_selected_events_(uint64_t{0u})
  , total_events_(uint64_t{0u})
  , total_read_chunks_(uint64_t{0u})
  , completed_selected_reads_count_(uint64_t{0u})
  , completed_unselected_reads_count_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_AnalyserInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_AnalyserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_AnalyserInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_AnalyserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_AnalyserInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_AnalyserInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_BulkInfo::GetExperimentYieldInfoResponse_BulkInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_raw_(uint64_t{0u})
  , total_events_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_BulkInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_BulkInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_BulkInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_BulkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_BulkInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_BulkInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_HdfWriterInfo::GetExperimentYieldInfoResponse_HdfWriterInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pending_compressions_(uint64_t{0u})
  , pending_writes_(uint64_t{0u})
  , pending_hdf_tasks_(uint64_t{0u})
  , completed_writes_(uint64_t{0u})
  , dataset_bytes_data_in_flight_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_HdfWriterInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_HdfWriterInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_HdfWriterInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_HdfWriterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_HdfWriterInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_HdfWriterInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_BasecallStatistics::GetExperimentYieldInfoResponse_BasecallStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reads_in_progress_(uint64_t{0u})
  , reads_processed_(uint64_t{0u})
  , reads_skipped_(uint64_t{0u})
  , reads_force_skipped_(uint64_t{0u})
  , reads_failed_calling_filtered_(uint64_t{0u})
  , reads_failed_calling_(uint64_t{0u})
  , reads_called_(uint64_t{0u})
  , samples_called_(uint64_t{0u})
  , samples_skipped_(uint64_t{0u})
  , bases_passed_called_(uint64_t{0u})
  , events_called_(uint64_t{0u})
  , bases_failed_called_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_BasecallStatisticsDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_BasecallStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_BasecallStatisticsDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_BasecallStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_BasecallStatisticsDefaultTypeInternal _GetExperimentYieldInfoResponse_BasecallStatistics_default_instance_;
constexpr GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reads_written_(uint64_t{0u})
  , passed_reads_written_(uint64_t{0u})
  , failed_reads_written_(uint64_t{0u})
  , force_skipped_reads_written_(uint64_t{0u})
  , raw_bytes_written_(uint64_t{0u})
  , fastq_bytes_written_(uint64_t{0u})
  , basecall_events_bytes_written_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_HdfMultiReadWritingStatisticsDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_HdfMultiReadWritingStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_HdfMultiReadWritingStatisticsDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_HdfMultiReadWritingStatisticsDefaultTypeInternal _GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics_default_instance_;
constexpr GetExperimentYieldInfoResponse_FastqReadWritingStatistics::GetExperimentYieldInfoResponse_FastqReadWritingStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : passed_reads_written_(uint64_t{0u})
  , skipped_reads_(uint64_t{0u})
  , forced_skipped_(uint64_t{0u})
  , failed_reads_written_(uint64_t{0u})
  , failed_reads_discarded_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_FastqReadWritingStatisticsDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_FastqReadWritingStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_FastqReadWritingStatisticsDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_FastqReadWritingStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_FastqReadWritingStatisticsDefaultTypeInternal _GetExperimentYieldInfoResponse_FastqReadWritingStatistics_default_instance_;
constexpr GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_chunks_written_(uint64_t{0u})
  , read_chunks_discarded_(uint64_t{0u})
  , reads_written_(uint64_t{0u})
  , reads_discarded_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_ProtobufReadWritingStatisticsDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_ProtobufReadWritingStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_ProtobufReadWritingStatisticsDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_ProtobufReadWritingStatisticsDefaultTypeInternal _GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics_default_instance_;
constexpr GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_moved_successfully_(uint64_t{0u})
  , files_moved_to_fallback_(uint64_t{0u})
  , files_failed_to_move_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfoDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfoDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfoDefaultTypeInternal _GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo_default_instance_;
constexpr GetExperimentYieldInfoResponse_FileOperationQueueProgress::GetExperimentYieldInfoResponse_FileOperationQueueProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fast5_(nullptr)
  , fastq_(nullptr)
  , pending_operations_(uint64_t{0u})
  , complete_successful_operations_(uint64_t{0u})
  , complete_failed_operations_(uint64_t{0u})
  , bytes_to_move_posted_(uint64_t{0u})
  , bytes_to_move_failed_(uint64_t{0u})
  , bytes_to_move_completed_(uint64_t{0u}){}
struct GetExperimentYieldInfoResponse_FileOperationQueueProgressDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponse_FileOperationQueueProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponse_FileOperationQueueProgressDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse_FileOperationQueueProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponse_FileOperationQueueProgressDefaultTypeInternal _GetExperimentYieldInfoResponse_FileOperationQueueProgress_default_instance_;
constexpr GetExperimentYieldInfoResponse::GetExperimentYieldInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : complete_read_info_(nullptr)
  , acquisition_info_(nullptr)
  , analyser_info_(nullptr)
  , bulk_info_(nullptr)
  , hdf_writer_info_(nullptr)
  , basecaller_statistics_(nullptr)
  , hdf_multi_read_writing_statisitics_(nullptr)
  , fastq_read_writing_statistics_(nullptr)
  , protobuf_read_writing_statistics_(nullptr)
  , file_operation_queue_progress_(nullptr){}
struct GetExperimentYieldInfoResponseDefaultTypeInternal {
  constexpr GetExperimentYieldInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExperimentYieldInfoResponseDefaultTypeInternal() {}
  union {
    GetExperimentYieldInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExperimentYieldInfoResponseDefaultTypeInternal _GetExperimentYieldInfoResponse_default_instance_;
}  // namespace data
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2fdata_2eproto[50];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, last_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, use_channel_states_ids_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, wait_for_processing_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesRequest, heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, channel_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, acquisition_raw_index_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, analysis_raw_index_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, trigger_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, config_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse_ChannelStateData, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetChannelStatesResponse, channel_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse_DataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse_DataType, type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse_DataType, big_endian_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse_DataType, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse, uncalibrated_signal_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse, calibrated_signal_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetDataTypesResponse, bias_voltages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, last_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, include_channel_configs_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, include_bias_voltages_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, calibrated_data_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, return_when_listening_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesRequest, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange, config_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelData, data_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse_ChannelData, config_changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, samples_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, seconds_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, skipped_channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalBytesResponse, bias_voltages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxRequest, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxRequest, last_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxRequest, window_size_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxRequest, calibrated_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse_ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse_ChannelData, calibrated_minima_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse_ChannelData, raw_minima_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse_ChannelData, calibrated_maxima_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse_ChannelData, raw_maxima_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse, samples_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse, seconds_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse, skipped_channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetSignalMinMaxResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_UnblockAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_UnblockAction, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StopFurtherData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, channel_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, read_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Action, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, last_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, raw_data_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, sample_minimum_chunk_size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_StreamSetup, max_unblock_read_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest_Actions, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, number_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, start_sample_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, chunk_start_sample_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, chunk_length_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, chunk_classifications_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, raw_data_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, median_before_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ReadData, median_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ActionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ActionResponse, action_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ActionResponse, response_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse, samples_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse, seconds_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetLiveReadsResponse, action_responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::ResetChannelStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::ResetChannelStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, channels_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, read_split_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, no_current_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, no_chunk_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, required_classifications_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsRequest, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, min_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, max_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, mean_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, s_d_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, median_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_5_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_10_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_25_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_75_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_90_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_Statistics, q_95_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics, median_sd_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics, median_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, duration_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, current_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, chunk_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, samples_duration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData, seconds_duration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData, channel_configuration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData, classifications_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData, incomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, configurations_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, samples_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, seconds_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, samples_duration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse_PerChannelData, seconds_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse, samples_since_start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetReadStatisticsResponse, seconds_since_start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::LockChannelStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::LockChannelStatesRequest, channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::LockChannelStatesRequest, state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::LockChannelStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::UnlockChannelStatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::UnlockChannelStatesRequest, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::UnlockChannelStatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_chunks_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_memory_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_disk_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_multi_disk_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, pending_force_skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, processed_memory_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, processed_disk_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, processed_skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, processed_force_skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, stored_reads_bytes_memory_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, stored_read_supporting_bytes_memory_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, stored_reads_bytes_disk_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, discarded_error_bytes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, channels_writing_to_disk_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo, channels_writing_to_disk_tmp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo, raw_per_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo, frame_discontinuities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, raw_per_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, total_selected_raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, total_selected_events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, total_events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, total_read_chunks_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, completed_selected_reads_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo, completed_unselected_reads_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo, total_raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo, total_events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, pending_compressions_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, pending_writes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, pending_hdf_tasks_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, completed_writes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo, dataset_bytes_data_in_flight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_in_progress_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_processed_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_skipped_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_force_skipped_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_failed_calling_filtered_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_failed_calling_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, reads_called_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, samples_called_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, samples_skipped_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, bases_passed_called_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, bases_failed_called_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics, events_called_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, passed_reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, failed_reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, force_skipped_reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, raw_bytes_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, fastq_bytes_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, basecall_events_bytes_written_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, passed_reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, forced_skipped_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, failed_reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics, failed_reads_discarded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, read_chunks_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, read_chunks_discarded_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, reads_written_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, reads_discarded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, files_moved_successfully_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, files_moved_to_fallback_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, files_failed_to_move_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, pending_operations_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, complete_successful_operations_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, complete_failed_operations_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, bytes_to_move_posted_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, bytes_to_move_failed_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, bytes_to_move_completed_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, fast5_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress, fastq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, complete_read_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, acquisition_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, analyser_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, bulk_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, hdf_writer_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, basecaller_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, hdf_multi_read_writing_statisitics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, fastq_read_writing_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, protobuf_read_writing_statistics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::data::GetExperimentYieldInfoResponse, file_operation_queue_progress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::data::GetChannelStatesRequest)},
  { 11, -1, -1, sizeof(::minknow_api::data::GetChannelStatesResponse_ChannelStateData)},
  { 25, -1, -1, sizeof(::minknow_api::data::GetChannelStatesResponse)},
  { 32, -1, -1, sizeof(::minknow_api::data::GetDataTypesRequest)},
  { 38, -1, -1, sizeof(::minknow_api::data::GetDataTypesResponse_DataType)},
  { 47, -1, -1, sizeof(::minknow_api::data::GetDataTypesResponse)},
  { 56, -1, -1, sizeof(::minknow_api::data::GetSignalBytesRequest)},
  { 71, -1, -1, sizeof(::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange)},
  { 79, -1, -1, sizeof(::minknow_api::data::GetSignalBytesResponse_ChannelData)},
  { 87, -1, -1, sizeof(::minknow_api::data::GetSignalBytesResponse)},
  { 98, -1, -1, sizeof(::minknow_api::data::GetSignalMinMaxRequest)},
  { 108, -1, -1, sizeof(::minknow_api::data::GetSignalMinMaxResponse_ChannelData)},
  { 118, -1, -1, sizeof(::minknow_api::data::GetSignalMinMaxResponse)},
  { 128, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest_UnblockAction)},
  { 135, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest_StopFurtherData)},
  { 141, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest_Action)},
  { 155, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest_StreamSetup)},
  { 168, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest_Actions)},
  { 175, -1, -1, sizeof(::minknow_api::data::GetLiveReadsRequest)},
  { 184, -1, -1, sizeof(::minknow_api::data::GetLiveReadsResponse_ReadData)},
  { 199, -1, -1, sizeof(::minknow_api::data::GetLiveReadsResponse_ActionResponse)},
  { 207, 215, -1, sizeof(::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse)},
  { 217, -1, -1, sizeof(::minknow_api::data::GetLiveReadsResponse)},
  { 227, -1, -1, sizeof(::minknow_api::data::ResetChannelStatesRequest)},
  { 233, -1, -1, sizeof(::minknow_api::data::ResetChannelStatesResponse)},
  { 239, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsRequest)},
  { 253, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_Statistics)},
  { 270, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics)},
  { 279, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_PerClassificationData)},
  { 290, 298, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse)},
  { 300, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData)},
  { 309, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse_PerChannelData)},
  { 320, -1, -1, sizeof(::minknow_api::data::GetReadStatisticsResponse)},
  { 329, -1, -1, sizeof(::minknow_api::data::LockChannelStatesRequest)},
  { 337, -1, -1, sizeof(::minknow_api::data::LockChannelStatesResponse)},
  { 343, -1, -1, sizeof(::minknow_api::data::UnlockChannelStatesRequest)},
  { 350, -1, -1, sizeof(::minknow_api::data::UnlockChannelStatesResponse)},
  { 356, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoRequest)},
  { 362, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo)},
  { 384, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo)},
  { 392, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo)},
  { 405, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo)},
  { 413, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo)},
  { 424, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics)},
  { 442, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics)},
  { 455, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics)},
  { 466, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics)},
  { 476, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo)},
  { 485, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress)},
  { 499, -1, -1, sizeof(::minknow_api::data::GetExperimentYieldInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetChannelStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetChannelStatesResponse_ChannelStateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetChannelStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetDataTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetDataTypesResponse_DataType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetDataTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalBytesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalBytesResponse_ChannelConfigChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalBytesResponse_ChannelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalBytesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalMinMaxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalMinMaxResponse_ChannelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetSignalMinMaxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_UnblockAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_StopFurtherData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_StreamSetup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_Actions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsResponse_ReadData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsResponse_ActionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsResponse_ChannelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetLiveReadsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_ResetChannelStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_ResetChannelStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_ChunkStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_PerClassificationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_PerConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_PerChannelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetReadStatisticsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_LockChannelStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_LockChannelStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_UnlockChannelStatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_UnlockChannelStatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_CompleteReadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_AcquisitionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_AnalyserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_BulkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_HdfWriterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_BasecallStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_FastqReadWritingStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_FileOperationQueueProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::data::_GetExperimentYieldInfoResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026minknow_api/data.proto\022\020minknow_api.da"
  "ta\032\035minknow_api/rpc_options.proto\032\030minkn"
  "ow_api/device.proto\032\036google/protobuf/dur"
  "ation.proto\032\036google/protobuf/wrappers.pr"
  "oto\"\331\001\n\027GetChannelStatesRequest\022\033\n\rfirst"
  "_channel\030\001 \001(\rB\004\210\265\030\001\022\032\n\014last_channel\030\002 \001"
  "(\rB\004\210\265\030\001\022:\n\026use_channel_states_ids\030\003 \001(\013"
  "2\032.google.protobuf.BoolValue\022\033\n\023wait_for"
  "_processing\030\004 \001(\010\022,\n\theartbeat\030\005 \001(\0132\031.g"
  "oogle.protobuf.Duration\"\333\002\n\030GetChannelSt"
  "atesResponse\022S\n\016channel_states\030\001 \003(\0132;.m"
  "inknow_api.data.GetChannelStatesResponse"
  ".ChannelStateData\032\351\001\n\020ChannelStateData\022\017"
  "\n\007channel\030\001 \001(\r\022\022\n\010state_id\030\002 \001(\rH\000\022\024\n\ns"
  "tate_name\030\003 \001(\tH\000\022\035\n\025acquisition_raw_ind"
  "ex\030\004 \001(\004\022\032\n\022analysis_raw_index\030\005 \001(\004\022\024\n\014"
  "trigger_time\030\007 \001(\004\022@\n\006config\030\006 \001(\01320.min"
  "know_api.device.ReturnedChannelConfigura"
  "tionB\007\n\005state\"\025\n\023GetDataTypesRequest\"\261\003\n"
  "\024GetDataTypesResponse\022L\n\023uncalibrated_si"
  "gnal\030\001 \001(\0132/.minknow_api.data.GetDataTyp"
  "esResponse.DataType\022J\n\021calibrated_signal"
  "\030\002 \001(\0132/.minknow_api.data.GetDataTypesRe"
  "sponse.DataType\022F\n\rbias_voltages\030\003 \001(\0132/"
  ".minknow_api.data.GetDataTypesResponse.D"
  "ataType\032\266\001\n\010DataType\022B\n\004type\030\001 \001(\01624.min"
  "know_api.data.GetDataTypesResponse.DataT"
  "ype.Type\022\022\n\nbig_endian\030\002 \001(\010\022\014\n\004size\030\003 \001"
  "(\r\"D\n\004Type\022\022\n\016SIGNED_INTEGER\020\000\022\024\n\020UNSIGN"
  "ED_INTEGER\020\001\022\022\n\016FLOATING_POINT\020\002\"\370\001\n\025Get"
  "SignalBytesRequest\022\021\n\007seconds\030\001 \001(\002H\000\022\021\n"
  "\007samples\030\002 \001(\rH\000\022\033\n\rfirst_channel\030\003 \001(\rB"
  "\004\210\265\030\001\022\032\n\014last_channel\030\004 \001(\rB\004\210\265\030\001\022\037\n\027inc"
  "lude_channel_configs\030\005 \001(\010\022\035\n\025include_bi"
  "as_voltages\030\006 \001(\010\022\027\n\017calibrated_data\030\007 \001"
  "(\010\022\035\n\025return_when_listening\030\010 \001(\010B\010\n\006len"
  "gth\"\247\003\n\026GetSignalBytesResponse\022\033\n\023sample"
  "s_since_start\030\001 \001(\004\022\033\n\023seconds_since_sta"
  "rt\030\002 \001(\001\022\030\n\020skipped_channels\030\003 \001(\r\022F\n\010ch"
  "annels\030\004 \003(\01324.minknow_api.data.GetSigna"
  "lBytesResponse.ChannelData\022\025\n\rbias_volta"
  "ges\030\005 \001(\014\032g\n\023ChannelConfigChange\022@\n\006conf"
  "ig\030\001 \001(\01320.minknow_api.device.ReturnedCh"
  "annelConfiguration\022\016\n\006offset\030\002 \001(\004\032q\n\013Ch"
  "annelData\022\014\n\004data\030\001 \001(\014\022T\n\016config_change"
  "s\030\003 \003(\0132<.minknow_api.data.GetSignalByte"
  "sResponse.ChannelConfigChange\"\205\001\n\026GetSig"
  "nalMinMaxRequest\022\033\n\rfirst_channel\030\003 \001(\rB"
  "\004\210\265\030\001\022\032\n\014last_channel\030\004 \001(\rB\004\210\265\030\001\022\031\n\013win"
  "dow_size\030\005 \001(\rB\004\210\265\030\001\022\027\n\017calibrated_data\030"
  "\007 \001(\010\"\243\002\n\027GetSignalMinMaxResponse\022\033\n\023sam"
  "ples_since_start\030\001 \001(\004\022\033\n\023seconds_since_"
  "start\030\002 \001(\001\022\030\n\020skipped_channels\030\003 \001(\r\022G\n"
  "\010channels\030\004 \003(\01325.minknow_api.data.GetSi"
  "gnalMinMaxResponse.ChannelData\032k\n\013Channe"
  "lData\022\031\n\021calibrated_minima\030\001 \003(\002\022\022\n\nraw_"
  "minima\030\002 \003(\005\022\031\n\021calibrated_maxima\030\003 \003(\002\022"
  "\022\n\nraw_maxima\030\004 \003(\005\"\210\007\n\023GetLiveReadsRequ"
  "est\022B\n\005setup\030\001 \001(\01321.minknow_api.data.Ge"
  "tLiveReadsRequest.StreamSetupH\000\022@\n\007actio"
  "ns\030\002 \001(\0132-.minknow_api.data.GetLiveReads"
  "Request.ActionsH\000\032!\n\rUnblockAction\022\020\n\010du"
  "ration\030\001 \001(\001\032\021\n\017StopFurtherData\032\372\001\n\006Acti"
  "on\022\021\n\taction_id\030\001 \001(\t\022\017\n\007channel\030\002 \001(\r\022\014"
  "\n\002id\030\003 \001(\tH\000\022\020\n\006number\030\004 \001(\rH\000\022F\n\007unbloc"
  "k\030\005 \001(\01323.minknow_api.data.GetLiveReadsR"
  "equest.UnblockActionH\001\022R\n\021stop_further_d"
  "ata\030\006 \001(\01325.minknow_api.data.GetLiveRead"
  "sRequest.StopFurtherDataH\001B\006\n\004readB\010\n\006ac"
  "tion\032\230\002\n\013StreamSetup\022\025\n\rfirst_channel\030\001 "
  "\001(\r\022\024\n\014last_channel\030\002 \001(\r\022H\n\rraw_data_ty"
  "pe\030\003 \001(\01621.minknow_api.data.GetLiveReads"
  "Request.RawDataType\022!\n\031sample_minimum_ch"
  "unk_size\030\004 \001(\004\022)\n\037max_unblock_read_lengt"
  "h_samples\030\005 \001(\004H\000\022)\n\037max_unblock_read_le"
  "ngth_seconds\030\006 \001(\001H\000B\031\n\027max_unblock_read"
  "_length\032H\n\007Actions\022=\n\007actions\030\002 \003(\0132,.mi"
  "nknow_api.data.GetLiveReadsRequest.Actio"
  "n\"H\n\013RawDataType\022\r\n\tKEEP_LAST\020\000\022\010\n\004NONE\020"
  "\001\022\016\n\nCALIBRATED\020\002\022\020\n\014UNCALIBRATED\020\003B\t\n\007r"
  "equest\"\331\005\n\024GetLiveReadsResponse\022\033\n\023sampl"
  "es_since_start\030\001 \001(\004\022\033\n\023seconds_since_st"
  "art\030\002 \001(\001\022F\n\010channels\030\004 \003(\01324.minknow_ap"
  "i.data.GetLiveReadsResponse.ChannelsEntr"
  "y\022O\n\020action_responses\030\005 \003(\01325.minknow_ap"
  "i.data.GetLiveReadsResponse.ActionRespon"
  "se\032\306\001\n\010ReadData\022\n\n\002id\030\001 \001(\t\022\016\n\006number\030\002 "
  "\001(\r\022\024\n\014start_sample\030\003 \001(\004\022\032\n\022chunk_start"
  "_sample\030\004 \001(\004\022\024\n\014chunk_length\030\005 \001(\004\022\035\n\025c"
  "hunk_classifications\030\006 \003(\005\022\020\n\010raw_data\030\007"
  " \001(\014\022\025\n\rmedian_before\030\010 \001(\002\022\016\n\006median\030\t "
  "\001(\002\032\302\001\n\016ActionResponse\022\021\n\taction_id\030\001 \001("
  "\t\022P\n\010response\030\002 \001(\0162>.minknow_api.data.G"
  "etLiveReadsResponse.ActionResponse.Respo"
  "nse\"K\n\010Response\022\013\n\007SUCCESS\020\000\022\030\n\024FAILED_R"
  "EAD_FINISHED\020\001\022\030\n\024FAILED_READ_TOO_LONG\020\002"
  "\032`\n\rChannelsEntry\022\013\n\003key\030\001 \001(\r\022>\n\005value\030"
  "\002 \001(\0132/.minknow_api.data.GetLiveReadsRes"
  "ponse.ReadData:\0028\001\"\033\n\031ResetChannelStates"
  "Request\"\034\n\032ResetChannelStatesResponse\"\270\002"
  "\n\030GetReadStatisticsRequest\022\020\n\010channels\030\001"
  " \003(\r\022\021\n\007seconds\030\002 \001(\002H\000\022\021\n\007samples\030\003 \001(\004"
  "H\000\022N\n\nread_split\030\004 \001(\01624.minknow_api.dat"
  "a.GetReadStatisticsRequest.ReadSplitB\004\210\265"
  "\030\001\022\035\n\025no_current_statistics\030\005 \001(\010\022\033\n\023no_"
  "chunk_statistics\030\006 \001(\010\022 \n\030required_class"
  "ifications\030\007 \003(\t\"*\n\tReadSplit\022\t\n\005CHUNK\020\000"
  "\022\022\n\016COMPLETED_READ\020\001B\n\n\010duration\"\344\n\n\031Get"
  "ReadStatisticsResponse\022L\n\010channels\030\001 \003(\013"
  "2:.minknow_api.data.GetReadStatisticsRes"
  "ponse.PerChannelData\022\033\n\023samples_since_st"
  "art\030\002 \001(\004\022\033\n\023seconds_since_start\030\003 \001(\001\032\244"
  "\001\n\nStatistics\022\013\n\003min\030\001 \001(\001\022\013\n\003max\030\002 \001(\001\022"
  "\014\n\004mean\030\003 \001(\001\022\013\n\003s_d\030\004 \001(\001\022\016\n\006median\030\006 \001"
  "(\001\022\013\n\003q_5\030\007 \001(\001\022\014\n\004q_10\030\010 \001(\001\022\014\n\004q_25\030\t "
  "\001(\001\022\014\n\004q_75\030\n \001(\001\022\014\n\004q_90\030\013 \001(\001\022\014\n\004q_95\030"
  "\014 \001(\001\032C\n\017ChunkStatistics\022\021\n\tmedian_sd\030\001 "
  "\001(\001\022\016\n\006median\030\002 \001(\001\022\r\n\005range\030\003 \001(\001\032\313\002\n\025P"
  "erClassificationData\022S\n\023duration_statist"
  "ics\030\001 \001(\01326.minknow_api.data.GetReadStat"
  "isticsResponse.Statistics\022R\n\022current_sta"
  "tistics\030\002 \001(\01326.minknow_api.data.GetRead"
  "StatisticsResponse.Statistics\022U\n\020chunk_s"
  "tatistics\030\006 \001(\0132;.minknow_api.data.GetRe"
  "adStatisticsResponse.ChunkStatistics\022\030\n\020"
  "samples_duration\030\004 \001(\004\022\030\n\020seconds_durati"
  "on\030\005 \001(\001\032\251\003\n\024PerConfigurationData\022O\n\025cha"
  "nnel_configuration\030\001 \001(\01320.minknow_api.d"
  "evice.ReturnedChannelConfiguration\022n\n\017cl"
  "assifications\030\002 \003(\0132U.minknow_api.data.G"
  "etReadStatisticsResponse.PerConfiguratio"
  "nData.ClassificationsEntry\022U\n\nincomplete"
  "\030\003 \001(\0132A.minknow_api.data.GetReadStatist"
  "icsResponse.PerClassificationData\032y\n\024Cla"
  "ssificationsEntry\022\013\n\003key\030\001 \001(\t\022P\n\005value\030"
  "\002 \001(\0132A.minknow_api.data.GetReadStatisti"
  "csResponse.PerClassificationData:\0028\001\032\330\001\n"
  "\016PerChannelData\022X\n\016configurations\030\006 \003(\0132"
  "@.minknow_api.data.GetReadStatisticsResp"
  "onse.PerConfigurationData\022\033\n\023samples_sin"
  "ce_start\030\002 \001(\004\022\033\n\023seconds_since_start\030\003 "
  "\001(\001\022\030\n\020samples_duration\030\004 \001(\004\022\030\n\020seconds"
  "_duration\030\005 \001(\001\"L\n\030LockChannelStatesRequ"
  "est\022\026\n\010channels\030\001 \003(\004B\004\210\265\030\001\022\030\n\nstate_nam"
  "e\030\002 \001(\tB\004\210\265\030\001\"\033\n\031LockChannelStatesRespon"
  "se\"4\n\032UnlockChannelStatesRequest\022\026\n\010chan"
  "nels\030\001 \003(\004B\004\210\265\030\001\"\035\n\033UnlockChannelStatesR"
  "esponse\"\037\n\035GetExperimentYieldInfoRequest"
  "\"\204\034\n\036GetExperimentYieldInfoResponse\022]\n\022c"
  "omplete_read_info\030\001 \001(\0132A.minknow_api.da"
  "ta.GetExperimentYieldInfoResponse.Comple"
  "teReadInfo\022Z\n\020acquisition_info\030\002 \001(\0132@.m"
  "inknow_api.data.GetExperimentYieldInfoRe"
  "sponse.AcquisitionInfo\022T\n\ranalyser_info\030"
  "\003 \001(\0132=.minknow_api.data.GetExperimentYi"
  "eldInfoResponse.AnalyserInfo\022L\n\tbulk_inf"
  "o\030\004 \001(\01329.minknow_api.data.GetExperiment"
  "YieldInfoResponse.BulkInfo\022W\n\017hdf_writer"
  "_info\030\005 \001(\0132>.minknow_api.data.GetExperi"
  "mentYieldInfoResponse.HdfWriterInfo\022b\n\025b"
  "asecaller_statistics\030\006 \001(\0132C.minknow_api"
  ".data.GetExperimentYieldInfoResponse.Bas"
  "ecallStatistics\022z\n\"hdf_multi_read_writin"
  "g_statisitics\030\007 \001(\0132N.minknow_api.data.G"
  "etExperimentYieldInfoResponse.HdfMultiRe"
  "adWritingStatistics\022r\n\035fastq_read_writin"
  "g_statistics\030\010 \001(\0132K.minknow_api.data.Ge"
  "tExperimentYieldInfoResponse.FastqReadWr"
  "itingStatistics\022x\n protobuf_read_writing"
  "_statistics\030\t \001(\0132N.minknow_api.data.Get"
  "ExperimentYieldInfoResponse.ProtobufRead"
  "WritingStatistics\022r\n\035file_operation_queu"
  "e_progress\030\n \001(\0132K.minknow_api.data.GetE"
  "xperimentYieldInfoResponse.FileOperation"
  "QueueProgress\032\250\004\n\020CompleteReadInfo\022\026\n\016pe"
  "nding_chunks\030\001 \001(\004\022\034\n\024pending_memory_rea"
  "ds\030\002 \001(\004\022\032\n\022pending_disk_reads\030\017 \001(\004\022 \n\030"
  "pending_multi_disk_reads\030\003 \001(\004\022\035\n\025pendin"
  "g_skipped_reads\030\004 \001(\004\022#\n\033pending_force_s"
  "kipped_reads\030\005 \001(\004\022\036\n\026processed_memory_r"
  "eads\030\006 \001(\004\022\034\n\024processed_disk_reads\030\007 \001(\004"
  "\022\037\n\027processed_skipped_reads\030\010 \001(\004\022%\n\035pro"
  "cessed_force_skipped_reads\030\t \001(\004\022!\n\031stor"
  "ed_reads_bytes_memory\030\n \001(\004\022+\n#stored_re"
  "ad_supporting_bytes_memory\030\020 \001(\004\022\037\n\027stor"
  "ed_reads_bytes_disk\030\013 \001(\004\022\035\n\025discarded_e"
  "rror_bytes\030\014 \001(\004\022 \n\030channels_writing_to_"
  "disk\030\r \001(\004\022$\n\034channels_writing_to_disk_t"
  "mp\030\016 \001(\004\032I\n\017AcquisitionInfo\022\027\n\017raw_per_c"
  "hannel\030\001 \001(\004\022\035\n\025frame_discontinuities\030\002 "
  "\001(\004\032\345\001\n\014AnalyserInfo\022\027\n\017raw_per_channel\030"
  "\001 \001(\004\022\032\n\022total_selected_raw\030\002 \001(\004\022\035\n\025tot"
  "al_selected_events\030\003 \001(\004\022\024\n\014total_events"
  "\030\004 \001(\004\022\031\n\021total_read_chunks\030\005 \001(\004\022&\n\036com"
  "pleted_selected_reads_count\030\006 \001(\004\022(\n com"
  "pleted_unselected_reads_count\030\007 \001(\004\0323\n\010B"
  "ulkInfo\022\021\n\ttotal_raw\030\001 \001(\004\022\024\n\014total_even"
  "ts\030\002 \001(\004\032\240\001\n\rHdfWriterInfo\022\034\n\024pending_co"
  "mpressions\030\001 \001(\004\022\026\n\016pending_writes\030\002 \001(\004"
  "\022\031\n\021pending_hdf_tasks\030\003 \001(\004\022\030\n\020completed"
  "_writes\030\004 \001(\004\022$\n\034dataset_bytes_data_in_f"
  "light\030\005 \001(\004\032\331\002\n\022BasecallStatistics\022\031\n\021re"
  "ads_in_progress\030\001 \001(\004\022\027\n\017reads_processed"
  "\030\002 \001(\004\022\025\n\rreads_skipped\030\003 \001(\004\022\033\n\023reads_f"
  "orce_skipped\030\004 \001(\004\022%\n\035reads_failed_calli"
  "ng_filtered\030\005 \001(\004\022\034\n\024reads_failed_callin"
  "g\030\006 \001(\004\022\024\n\014reads_called\030\007 \001(\004\022\026\n\016samples"
  "_called\030\010 \001(\004\022\027\n\017samples_skipped\030\t \001(\004\022\033"
  "\n\023bases_passed_called\030\n \001(\004\022\033\n\023bases_fai"
  "led_called\030\014 \001(\004\022\025\n\revents_called\030\013 \001(\004\032"
  "\366\001\n\035HdfMultiReadWritingStatistics\022\025\n\rrea"
  "ds_written\030\001 \001(\004\022\034\n\024passed_reads_written"
  "\030\002 \001(\004\022\034\n\024failed_reads_written\030\003 \001(\004\022#\n\033"
  "force_skipped_reads_written\030\004 \001(\004\022\031\n\021raw"
  "_bytes_written\030\005 \001(\004\022\033\n\023fastq_bytes_writ"
  "ten\030\006 \001(\004\022%\n\035basecall_events_bytes_writt"
  "en\030\007 \001(\004\032\247\001\n\032FastqReadWritingStatistics\022"
  "\034\n\024passed_reads_written\030\001 \001(\004\022\025\n\rskipped"
  "_reads\030\002 \001(\004\022\026\n\016forced_skipped\030\003 \001(\004\022\034\n\024"
  "failed_reads_written\030\004 \001(\004\022\036\n\026failed_rea"
  "ds_discarded\030\005 \001(\004\032\213\001\n\035ProtobufReadWriti"
  "ngStatistics\022\033\n\023read_chunks_written\030\001 \001("
  "\004\022\035\n\025read_chunks_discarded\030\002 \001(\004\022\025\n\rread"
  "s_written\030\003 \001(\004\022\027\n\017reads_discarded\030\004 \001(\004"
  "\032\244\004\n\032FileOperationQueueProgress\022\032\n\022pendi"
  "ng_operations\030\001 \001(\004\022&\n\036complete_successf"
  "ul_operations\030\002 \001(\004\022\"\n\032complete_failed_o"
  "perations\030\003 \001(\004\022\034\n\024bytes_to_move_posted\030"
  "\004 \001(\004\022\034\n\024bytes_to_move_failed\030\005 \001(\004\022\037\n\027b"
  "ytes_to_move_completed\030\006 \001(\004\022g\n\005fast5\030\007 "
  "\001(\0132X.minknow_api.data.GetExperimentYiel"
  "dInfoResponse.FileOperationQueueProgress"
  ".FileTypeInfo\022g\n\005fastq\030\010 \001(\0132X.minknow_a"
  "pi.data.GetExperimentYieldInfoResponse.F"
  "ileOperationQueueProgress.FileTypeInfo\032o"
  "\n\014FileTypeInfo\022 \n\030files_moved_successful"
  "ly\030\001 \001(\004\022\037\n\027files_moved_to_fallback\030\002 \001("
  "\004\022\034\n\024files_failed_to_move\030\003 \001(\0042\213\t\n\013Data"
  "Service\022r\n\022get_channel_states\022).minknow_"
  "api.data.GetChannelStatesRequest\032*.minkn"
  "ow_api.data.GetChannelStatesResponse\"\003\220\002"
  "\0010\001\022d\n\016get_data_types\022%.minknow_api.data"
  ".GetDataTypesRequest\032&.minknow_api.data."
  "GetDataTypesResponse\"\003\220\002\001\022l\n\020get_signal_"
  "bytes\022\'.minknow_api.data.GetSignalBytesR"
  "equest\032(.minknow_api.data.GetSignalBytes"
  "Response\"\003\220\002\0010\001\022p\n\022get_signal_min_max\022(."
  "minknow_api.data.GetSignalMinMaxRequest\032"
  ").minknow_api.data.GetSignalMinMaxRespon"
  "se\"\003\220\002\0010\001\022s\n\024reset_channel_states\022+.mink"
  "now_api.data.ResetChannelStatesRequest\032,"
  ".minknow_api.data.ResetChannelStatesResp"
  "onse\"\000\022p\n\023lock_channel_states\022*.minknow_"
  "api.data.LockChannelStatesRequest\032+.mink"
  "now_api.data.LockChannelStatesResponse\"\000"
  "\022v\n\025unlock_channel_states\022,.minknow_api."
  "data.UnlockChannelStatesRequest\032-.minkno"
  "w_api.data.UnlockChannelStatesResponse\"\000"
  "\022h\n\016get_live_reads\022%.minknow_api.data.Ge"
  "tLiveReadsRequest\032&.minknow_api.data.Get"
  "LiveReadsResponse\"\003\220\002\001(\0010\001\022s\n\023get_read_s"
  "tatistics\022*.minknow_api.data.GetReadStat"
  "isticsRequest\032+.minknow_api.data.GetRead"
  "StatisticsResponse\"\003\220\002\001\022\203\001\n\031get_experime"
  "nt_yield_info\022/.minknow_api.data.GetExpe"
  "rimentYieldInfoRequest\0320.minknow_api.dat"
  "a.GetExperimentYieldInfoResponse\"\003\220\002\001B&\n"
  "\034com.nanoporetech.minknow_api\242\002\005MKAPIb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2fdata_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_minknow_5fapi_2fdevice_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fdata_2eproto = {
  false, false, 10725, descriptor_table_protodef_minknow_5fapi_2fdata_2eproto, "minknow_api/data.proto", 
  &descriptor_table_minknow_5fapi_2fdata_2eproto_once, descriptor_table_minknow_5fapi_2fdata_2eproto_deps, 4, 50,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2fdata_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2fdata_2eproto, file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto, file_level_service_descriptors_minknow_5fapi_2fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2fdata_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2fdata_2eproto(&descriptor_table_minknow_5fapi_2fdata_2eproto);
namespace minknow_api {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDataTypesResponse_DataType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdata_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto[0];
}
bool GetDataTypesResponse_DataType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetDataTypesResponse_DataType_Type GetDataTypesResponse_DataType::SIGNED_INTEGER;
constexpr GetDataTypesResponse_DataType_Type GetDataTypesResponse_DataType::UNSIGNED_INTEGER;
constexpr GetDataTypesResponse_DataType_Type GetDataTypesResponse_DataType::FLOATING_POINT;
constexpr GetDataTypesResponse_DataType_Type GetDataTypesResponse_DataType::Type_MIN;
constexpr GetDataTypesResponse_DataType_Type GetDataTypesResponse_DataType::Type_MAX;
constexpr int GetDataTypesResponse_DataType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetLiveReadsRequest_RawDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdata_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto[1];
}
bool GetLiveReadsRequest_RawDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::KEEP_LAST;
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::NONE;
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::CALIBRATED;
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::UNCALIBRATED;
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::RawDataType_MIN;
constexpr GetLiveReadsRequest_RawDataType GetLiveReadsRequest::RawDataType_MAX;
constexpr int GetLiveReadsRequest::RawDataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetLiveReadsResponse_ActionResponse_Response_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdata_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto[2];
}
bool GetLiveReadsResponse_ActionResponse_Response_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetLiveReadsResponse_ActionResponse_Response GetLiveReadsResponse_ActionResponse::SUCCESS;
constexpr GetLiveReadsResponse_ActionResponse_Response GetLiveReadsResponse_ActionResponse::FAILED_READ_FINISHED;
constexpr GetLiveReadsResponse_ActionResponse_Response GetLiveReadsResponse_ActionResponse::FAILED_READ_TOO_LONG;
constexpr GetLiveReadsResponse_ActionResponse_Response GetLiveReadsResponse_ActionResponse::Response_MIN;
constexpr GetLiveReadsResponse_ActionResponse_Response GetLiveReadsResponse_ActionResponse::Response_MAX;
constexpr int GetLiveReadsResponse_ActionResponse::Response_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetReadStatisticsRequest_ReadSplit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdata_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdata_2eproto[3];
}
bool GetReadStatisticsRequest_ReadSplit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetReadStatisticsRequest_ReadSplit GetReadStatisticsRequest::CHUNK;
constexpr GetReadStatisticsRequest_ReadSplit GetReadStatisticsRequest::COMPLETED_READ;
constexpr GetReadStatisticsRequest_ReadSplit GetReadStatisticsRequest::ReadSplit_MIN;
constexpr GetReadStatisticsRequest_ReadSplit GetReadStatisticsRequest::ReadSplit_MAX;
constexpr int GetReadStatisticsRequest::ReadSplit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GetChannelStatesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& use_channel_states_ids(const GetChannelStatesRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& heartbeat(const GetChannelStatesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
GetChannelStatesRequest::_Internal::use_channel_states_ids(const GetChannelStatesRequest* msg) {
  return *msg->use_channel_states_ids_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
GetChannelStatesRequest::_Internal::heartbeat(const GetChannelStatesRequest* msg) {
  return *msg->heartbeat_;
}
void GetChannelStatesRequest::clear_use_channel_states_ids() {
  if (GetArenaForAllocation() == nullptr && use_channel_states_ids_ != nullptr) {
    delete use_channel_states_ids_;
  }
  use_channel_states_ids_ = nullptr;
}
void GetChannelStatesRequest::clear_heartbeat() {
  if (GetArenaForAllocation() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
}
GetChannelStatesRequest::GetChannelStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetChannelStatesRequest)
}
GetChannelStatesRequest::GetChannelStatesRequest(const GetChannelStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_use_channel_states_ids()) {
    use_channel_states_ids_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.use_channel_states_ids_);
  } else {
    use_channel_states_ids_ = nullptr;
  }
  if (from._internal_has_heartbeat()) {
    heartbeat_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.heartbeat_);
  } else {
    heartbeat_ = nullptr;
  }
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_for_processing_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(wait_for_processing_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetChannelStatesRequest)
}

void GetChannelStatesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_channel_states_ids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wait_for_processing_) -
    reinterpret_cast<char*>(&use_channel_states_ids_)) + sizeof(wait_for_processing_));
}

GetChannelStatesRequest::~GetChannelStatesRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetChannelStatesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete use_channel_states_ids_;
  if (this != internal_default_instance()) delete heartbeat_;
}

void GetChannelStatesRequest::ArenaDtor(void* object) {
  GetChannelStatesRequest* _this = reinterpret_cast< GetChannelStatesRequest* >(object);
  (void)_this;
}
void GetChannelStatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && use_channel_states_ids_ != nullptr) {
    delete use_channel_states_ids_;
  }
  use_channel_states_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_for_processing_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(wait_for_processing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue use_channel_states_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_channel_states_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wait_for_processing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wait_for_processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration heartbeat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_channel(), target);
  }

  // .google.protobuf.BoolValue use_channel_states_ids = 3;
  if (this->_internal_has_use_channel_states_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::use_channel_states_ids(this), target, stream);
  }

  // bool wait_for_processing = 4;
  if (this->_internal_wait_for_processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_wait_for_processing(), target);
  }

  // .google.protobuf.Duration heartbeat = 5;
  if (this->_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heartbeat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetChannelStatesRequest)
  return target;
}

size_t GetChannelStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetChannelStatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue use_channel_states_ids = 3;
  if (this->_internal_has_use_channel_states_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_channel_states_ids_);
  }

  // .google.protobuf.Duration heartbeat = 5;
  if (this->_internal_has_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  // bool wait_for_processing = 4;
  if (this->_internal_wait_for_processing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesRequest::GetClassData() const { return &_class_data_; }

void GetChannelStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesRequest *>(to)->MergeFrom(
      static_cast<const GetChannelStatesRequest &>(from));
}


void GetChannelStatesRequest::MergeFrom(const GetChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetChannelStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_channel_states_ids()) {
    _internal_mutable_use_channel_states_ids()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_use_channel_states_ids());
  }
  if (from._internal_has_heartbeat()) {
    _internal_mutable_heartbeat()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_heartbeat());
  }
  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  if (from._internal_wait_for_processing() != 0) {
    _internal_set_wait_for_processing(from._internal_wait_for_processing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesRequest::CopyFrom(const GetChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetChannelStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesRequest::IsInitialized() const {
  return true;
}

void GetChannelStatesRequest::InternalSwap(GetChannelStatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChannelStatesRequest, wait_for_processing_)
      + sizeof(GetChannelStatesRequest::wait_for_processing_)
      - PROTOBUF_FIELD_OFFSET(GetChannelStatesRequest, use_channel_states_ids_)>(
          reinterpret_cast<char*>(&use_channel_states_ids_),
          reinterpret_cast<char*>(&other->use_channel_states_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[0]);
}

// ===================================================================

class GetChannelStatesResponse_ChannelStateData::_Internal {
 public:
  static const ::minknow_api::device::ReturnedChannelConfiguration& config(const GetChannelStatesResponse_ChannelStateData* msg);
};

const ::minknow_api::device::ReturnedChannelConfiguration&
GetChannelStatesResponse_ChannelStateData::_Internal::config(const GetChannelStatesResponse_ChannelStateData* msg) {
  return *msg->config_;
}
void GetChannelStatesResponse_ChannelStateData::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
GetChannelStatesResponse_ChannelStateData::GetChannelStatesResponse_ChannelStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
}
GetChannelStatesResponse_ChannelStateData::GetChannelStatesResponse_ChannelStateData(const GetChannelStatesResponse_ChannelStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::minknow_api::device::ReturnedChannelConfiguration(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&acquisition_raw_index_, &from.acquisition_raw_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_time_) -
    reinterpret_cast<char*>(&acquisition_raw_index_)) + sizeof(trigger_time_));
  clear_has_state();
  switch (from.state_case()) {
    case kStateId: {
      _internal_set_state_id(from._internal_state_id());
      break;
    }
    case kStateName: {
      _internal_set_state_name(from._internal_state_name());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
}

void GetChannelStatesResponse_ChannelStateData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trigger_time_) -
    reinterpret_cast<char*>(&config_)) + sizeof(trigger_time_));
clear_has_state();
}

GetChannelStatesResponse_ChannelStateData::~GetChannelStatesResponse_ChannelStateData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesResponse_ChannelStateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (has_state()) {
    clear_state();
  }
}

void GetChannelStatesResponse_ChannelStateData::ArenaDtor(void* object) {
  GetChannelStatesResponse_ChannelStateData* _this = reinterpret_cast< GetChannelStatesResponse_ChannelStateData* >(object);
  (void)_this;
}
void GetChannelStatesResponse_ChannelStateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesResponse_ChannelStateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesResponse_ChannelStateData::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  switch (state_case()) {
    case kStateId: {
      // No need to clear
      break;
    }
    case kStateName: {
      state_.state_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void GetChannelStatesResponse_ChannelStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&acquisition_raw_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_time_) -
      reinterpret_cast<char*>(&acquisition_raw_index_)) + sizeof(trigger_time_));
  clear_state();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesResponse_ChannelStateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_state_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string state_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetChannelStatesResponse.ChannelStateData.state_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 acquisition_raw_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          acquisition_raw_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 analysis_raw_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          analysis_raw_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.ReturnedChannelConfiguration config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trigger_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          trigger_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesResponse_ChannelStateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // uint32 state_id = 2;
  if (_internal_has_state_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state_id(), target);
  }

  // string state_name = 3;
  if (_internal_has_state_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetChannelStatesResponse.ChannelStateData.state_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state_name(), target);
  }

  // uint64 acquisition_raw_index = 4;
  if (this->_internal_acquisition_raw_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_acquisition_raw_index(), target);
  }

  // uint64 analysis_raw_index = 5;
  if (this->_internal_analysis_raw_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_analysis_raw_index(), target);
  }

  // .minknow_api.device.ReturnedChannelConfiguration config = 6;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  // uint64 trigger_time = 7;
  if (this->_internal_trigger_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_trigger_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  return target;
}

size_t GetChannelStatesResponse_ChannelStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.ReturnedChannelConfiguration config = 6;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint64 acquisition_raw_index = 4;
  if (this->_internal_acquisition_raw_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_acquisition_raw_index());
  }

  // uint64 analysis_raw_index = 5;
  if (this->_internal_analysis_raw_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_analysis_raw_index());
  }

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint64 trigger_time = 7;
  if (this->_internal_trigger_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_trigger_time());
  }

  switch (state_case()) {
    // uint32 state_id = 2;
    case kStateId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_state_id());
      break;
    }
    // string state_name = 3;
    case kStateName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state_name());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesResponse_ChannelStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesResponse_ChannelStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesResponse_ChannelStateData::GetClassData() const { return &_class_data_; }

void GetChannelStatesResponse_ChannelStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesResponse_ChannelStateData *>(to)->MergeFrom(
      static_cast<const GetChannelStatesResponse_ChannelStateData &>(from));
}


void GetChannelStatesResponse_ChannelStateData::MergeFrom(const GetChannelStatesResponse_ChannelStateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::minknow_api::device::ReturnedChannelConfiguration::MergeFrom(from._internal_config());
  }
  if (from._internal_acquisition_raw_index() != 0) {
    _internal_set_acquisition_raw_index(from._internal_acquisition_raw_index());
  }
  if (from._internal_analysis_raw_index() != 0) {
    _internal_set_analysis_raw_index(from._internal_analysis_raw_index());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_trigger_time() != 0) {
    _internal_set_trigger_time(from._internal_trigger_time());
  }
  switch (from.state_case()) {
    case kStateId: {
      _internal_set_state_id(from._internal_state_id());
      break;
    }
    case kStateName: {
      _internal_set_state_name(from._internal_state_name());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesResponse_ChannelStateData::CopyFrom(const GetChannelStatesResponse_ChannelStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetChannelStatesResponse.ChannelStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesResponse_ChannelStateData::IsInitialized() const {
  return true;
}

void GetChannelStatesResponse_ChannelStateData::InternalSwap(GetChannelStatesResponse_ChannelStateData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChannelStatesResponse_ChannelStateData, trigger_time_)
      + sizeof(GetChannelStatesResponse_ChannelStateData::trigger_time_)
      - PROTOBUF_FIELD_OFFSET(GetChannelStatesResponse_ChannelStateData, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
  swap(state_, other->state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesResponse_ChannelStateData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[1]);
}

// ===================================================================

class GetChannelStatesResponse::_Internal {
 public:
};

GetChannelStatesResponse::GetChannelStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetChannelStatesResponse)
}
GetChannelStatesResponse::GetChannelStatesResponse(const GetChannelStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_states_(from.channel_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetChannelStatesResponse)
}

void GetChannelStatesResponse::SharedCtor() {
}

GetChannelStatesResponse::~GetChannelStatesResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetChannelStatesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelStatesResponse::ArenaDtor(void* object) {
  GetChannelStatesResponse* _this = reinterpret_cast< GetChannelStatesResponse* >(object);
  (void)_this;
}
void GetChannelStatesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetChannelStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.data.GetChannelStatesResponse.ChannelStateData channel_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetChannelStatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetChannelStatesResponse.ChannelStateData channel_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetChannelStatesResponse)
  return target;
}

size_t GetChannelStatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetChannelStatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetChannelStatesResponse.ChannelStateData channel_states = 1;
  total_size += 1UL * this->_internal_channel_states_size();
  for (const auto& msg : this->channel_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesResponse::GetClassData() const { return &_class_data_; }

void GetChannelStatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesResponse *>(to)->MergeFrom(
      static_cast<const GetChannelStatesResponse &>(from));
}


void GetChannelStatesResponse::MergeFrom(const GetChannelStatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetChannelStatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_states_.MergeFrom(from.channel_states_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesResponse::CopyFrom(const GetChannelStatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetChannelStatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesResponse::IsInitialized() const {
  return true;
}

void GetChannelStatesResponse::InternalSwap(GetChannelStatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_states_.InternalSwap(&other->channel_states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[2]);
}

// ===================================================================

class GetDataTypesRequest::_Internal {
 public:
};

GetDataTypesRequest::GetDataTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetDataTypesRequest)
}
GetDataTypesRequest::GetDataTypesRequest(const GetDataTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetDataTypesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDataTypesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDataTypesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDataTypesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[3]);
}

// ===================================================================

class GetDataTypesResponse_DataType::_Internal {
 public:
};

GetDataTypesResponse_DataType::GetDataTypesResponse_DataType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetDataTypesResponse.DataType)
}
GetDataTypesResponse_DataType::GetDataTypesResponse_DataType(const GetDataTypesResponse_DataType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetDataTypesResponse.DataType)
}

void GetDataTypesResponse_DataType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

GetDataTypesResponse_DataType::~GetDataTypesResponse_DataType() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetDataTypesResponse.DataType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDataTypesResponse_DataType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDataTypesResponse_DataType::ArenaDtor(void* object) {
  GetDataTypesResponse_DataType* _this = reinterpret_cast< GetDataTypesResponse_DataType* >(object);
  (void)_this;
}
void GetDataTypesResponse_DataType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataTypesResponse_DataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDataTypesResponse_DataType::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetDataTypesResponse.DataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataTypesResponse_DataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.data.GetDataTypesResponse.DataType.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minknow_api::data::GetDataTypesResponse_DataType_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // bool big_endian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          big_endian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataTypesResponse_DataType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetDataTypesResponse.DataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.data.GetDataTypesResponse.DataType.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool big_endian = 2;
  if (this->_internal_big_endian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_big_endian(), target);
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetDataTypesResponse.DataType)
  return target;
}

size_t GetDataTypesResponse_DataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetDataTypesResponse.DataType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.data.GetDataTypesResponse.DataType.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool big_endian = 2;
  if (this->_internal_big_endian() != 0) {
    total_size += 1 + 1;
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDataTypesResponse_DataType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDataTypesResponse_DataType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDataTypesResponse_DataType::GetClassData() const { return &_class_data_; }

void GetDataTypesResponse_DataType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDataTypesResponse_DataType *>(to)->MergeFrom(
      static_cast<const GetDataTypesResponse_DataType &>(from));
}


void GetDataTypesResponse_DataType::MergeFrom(const GetDataTypesResponse_DataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetDataTypesResponse.DataType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_big_endian() != 0) {
    _internal_set_big_endian(from._internal_big_endian());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataTypesResponse_DataType::CopyFrom(const GetDataTypesResponse_DataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetDataTypesResponse.DataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataTypesResponse_DataType::IsInitialized() const {
  return true;
}

void GetDataTypesResponse_DataType::InternalSwap(GetDataTypesResponse_DataType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDataTypesResponse_DataType, size_)
      + sizeof(GetDataTypesResponse_DataType::size_)
      - PROTOBUF_FIELD_OFFSET(GetDataTypesResponse_DataType, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataTypesResponse_DataType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[4]);
}

// ===================================================================

class GetDataTypesResponse::_Internal {
 public:
  static const ::minknow_api::data::GetDataTypesResponse_DataType& uncalibrated_signal(const GetDataTypesResponse* msg);
  static const ::minknow_api::data::GetDataTypesResponse_DataType& calibrated_signal(const GetDataTypesResponse* msg);
  static const ::minknow_api::data::GetDataTypesResponse_DataType& bias_voltages(const GetDataTypesResponse* msg);
};

const ::minknow_api::data::GetDataTypesResponse_DataType&
GetDataTypesResponse::_Internal::uncalibrated_signal(const GetDataTypesResponse* msg) {
  return *msg->uncalibrated_signal_;
}
const ::minknow_api::data::GetDataTypesResponse_DataType&
GetDataTypesResponse::_Internal::calibrated_signal(const GetDataTypesResponse* msg) {
  return *msg->calibrated_signal_;
}
const ::minknow_api::data::GetDataTypesResponse_DataType&
GetDataTypesResponse::_Internal::bias_voltages(const GetDataTypesResponse* msg) {
  return *msg->bias_voltages_;
}
GetDataTypesResponse::GetDataTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetDataTypesResponse)
}
GetDataTypesResponse::GetDataTypesResponse(const GetDataTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uncalibrated_signal()) {
    uncalibrated_signal_ = new ::minknow_api::data::GetDataTypesResponse_DataType(*from.uncalibrated_signal_);
  } else {
    uncalibrated_signal_ = nullptr;
  }
  if (from._internal_has_calibrated_signal()) {
    calibrated_signal_ = new ::minknow_api::data::GetDataTypesResponse_DataType(*from.calibrated_signal_);
  } else {
    calibrated_signal_ = nullptr;
  }
  if (from._internal_has_bias_voltages()) {
    bias_voltages_ = new ::minknow_api::data::GetDataTypesResponse_DataType(*from.bias_voltages_);
  } else {
    bias_voltages_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetDataTypesResponse)
}

void GetDataTypesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uncalibrated_signal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bias_voltages_) -
    reinterpret_cast<char*>(&uncalibrated_signal_)) + sizeof(bias_voltages_));
}

GetDataTypesResponse::~GetDataTypesResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetDataTypesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDataTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete uncalibrated_signal_;
  if (this != internal_default_instance()) delete calibrated_signal_;
  if (this != internal_default_instance()) delete bias_voltages_;
}

void GetDataTypesResponse::ArenaDtor(void* object) {
  GetDataTypesResponse* _this = reinterpret_cast< GetDataTypesResponse* >(object);
  (void)_this;
}
void GetDataTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDataTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetDataTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && uncalibrated_signal_ != nullptr) {
    delete uncalibrated_signal_;
  }
  uncalibrated_signal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && calibrated_signal_ != nullptr) {
    delete calibrated_signal_;
  }
  calibrated_signal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bias_voltages_ != nullptr) {
    delete bias_voltages_;
  }
  bias_voltages_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.data.GetDataTypesResponse.DataType uncalibrated_signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncalibrated_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetDataTypesResponse.DataType calibrated_signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibrated_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetDataTypesResponse.DataType bias_voltages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_voltages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetDataTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.data.GetDataTypesResponse.DataType uncalibrated_signal = 1;
  if (this->_internal_has_uncalibrated_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uncalibrated_signal(this), target, stream);
  }

  // .minknow_api.data.GetDataTypesResponse.DataType calibrated_signal = 2;
  if (this->_internal_has_calibrated_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::calibrated_signal(this), target, stream);
  }

  // .minknow_api.data.GetDataTypesResponse.DataType bias_voltages = 3;
  if (this->_internal_has_bias_voltages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bias_voltages(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetDataTypesResponse)
  return target;
}

size_t GetDataTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetDataTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.data.GetDataTypesResponse.DataType uncalibrated_signal = 1;
  if (this->_internal_has_uncalibrated_signal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncalibrated_signal_);
  }

  // .minknow_api.data.GetDataTypesResponse.DataType calibrated_signal = 2;
  if (this->_internal_has_calibrated_signal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calibrated_signal_);
  }

  // .minknow_api.data.GetDataTypesResponse.DataType bias_voltages = 3;
  if (this->_internal_has_bias_voltages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_voltages_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDataTypesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDataTypesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDataTypesResponse::GetClassData() const { return &_class_data_; }

void GetDataTypesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDataTypesResponse *>(to)->MergeFrom(
      static_cast<const GetDataTypesResponse &>(from));
}


void GetDataTypesResponse::MergeFrom(const GetDataTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetDataTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uncalibrated_signal()) {
    _internal_mutable_uncalibrated_signal()->::minknow_api::data::GetDataTypesResponse_DataType::MergeFrom(from._internal_uncalibrated_signal());
  }
  if (from._internal_has_calibrated_signal()) {
    _internal_mutable_calibrated_signal()->::minknow_api::data::GetDataTypesResponse_DataType::MergeFrom(from._internal_calibrated_signal());
  }
  if (from._internal_has_bias_voltages()) {
    _internal_mutable_bias_voltages()->::minknow_api::data::GetDataTypesResponse_DataType::MergeFrom(from._internal_bias_voltages());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataTypesResponse::CopyFrom(const GetDataTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetDataTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataTypesResponse::IsInitialized() const {
  return true;
}

void GetDataTypesResponse::InternalSwap(GetDataTypesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDataTypesResponse, bias_voltages_)
      + sizeof(GetDataTypesResponse::bias_voltages_)
      - PROTOBUF_FIELD_OFFSET(GetDataTypesResponse, uncalibrated_signal_)>(
          reinterpret_cast<char*>(&uncalibrated_signal_),
          reinterpret_cast<char*>(&other->uncalibrated_signal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataTypesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[5]);
}

// ===================================================================

class GetSignalBytesRequest::_Internal {
 public:
};

GetSignalBytesRequest::GetSignalBytesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalBytesRequest)
}
GetSignalBytesRequest::GetSignalBytesRequest(const GetSignalBytesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_when_listening_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(return_when_listening_));
  clear_has_length();
  switch (from.length_case()) {
    case kSeconds: {
      _internal_set_seconds(from._internal_seconds());
      break;
    }
    case kSamples: {
      _internal_set_samples(from._internal_samples());
      break;
    }
    case LENGTH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalBytesRequest)
}

void GetSignalBytesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_when_listening_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(return_when_listening_));
clear_has_length();
}

GetSignalBytesRequest::~GetSignalBytesRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalBytesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalBytesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_length()) {
    clear_length();
  }
}

void GetSignalBytesRequest::ArenaDtor(void* object) {
  GetSignalBytesRequest* _this = reinterpret_cast< GetSignalBytesRequest* >(object);
  (void)_this;
}
void GetSignalBytesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalBytesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalBytesRequest::clear_length() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetSignalBytesRequest)
  switch (length_case()) {
    case kSeconds: {
      // No need to clear
      break;
    }
    case kSamples: {
      // No need to clear
      break;
    }
    case LENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LENGTH_NOT_SET;
}


void GetSignalBytesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalBytesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_when_listening_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(return_when_listening_));
  clear_length();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalBytesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_channel_configs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          include_channel_configs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_bias_voltages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          include_bias_voltages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool calibrated_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          calibrated_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_when_listening = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          return_when_listening_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalBytesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalBytesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float seconds = 1;
  if (_internal_has_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_seconds(), target);
  }

  // uint32 samples = 2;
  if (_internal_has_samples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_samples(), target);
  }

  // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_channel(), target);
  }

  // bool include_channel_configs = 5;
  if (this->_internal_include_channel_configs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_include_channel_configs(), target);
  }

  // bool include_bias_voltages = 6;
  if (this->_internal_include_bias_voltages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_include_bias_voltages(), target);
  }

  // bool calibrated_data = 7;
  if (this->_internal_calibrated_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_calibrated_data(), target);
  }

  // bool return_when_listening = 8;
  if (this->_internal_return_when_listening() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_return_when_listening(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalBytesRequest)
  return target;
}

size_t GetSignalBytesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalBytesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  // bool include_channel_configs = 5;
  if (this->_internal_include_channel_configs() != 0) {
    total_size += 1 + 1;
  }

  // bool include_bias_voltages = 6;
  if (this->_internal_include_bias_voltages() != 0) {
    total_size += 1 + 1;
  }

  // bool calibrated_data = 7;
  if (this->_internal_calibrated_data() != 0) {
    total_size += 1 + 1;
  }

  // bool return_when_listening = 8;
  if (this->_internal_return_when_listening() != 0) {
    total_size += 1 + 1;
  }

  switch (length_case()) {
    // float seconds = 1;
    case kSeconds: {
      total_size += 1 + 4;
      break;
    }
    // uint32 samples = 2;
    case kSamples: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_samples());
      break;
    }
    case LENGTH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalBytesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalBytesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalBytesRequest::GetClassData() const { return &_class_data_; }

void GetSignalBytesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalBytesRequest *>(to)->MergeFrom(
      static_cast<const GetSignalBytesRequest &>(from));
}


void GetSignalBytesRequest::MergeFrom(const GetSignalBytesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalBytesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  if (from._internal_include_channel_configs() != 0) {
    _internal_set_include_channel_configs(from._internal_include_channel_configs());
  }
  if (from._internal_include_bias_voltages() != 0) {
    _internal_set_include_bias_voltages(from._internal_include_bias_voltages());
  }
  if (from._internal_calibrated_data() != 0) {
    _internal_set_calibrated_data(from._internal_calibrated_data());
  }
  if (from._internal_return_when_listening() != 0) {
    _internal_set_return_when_listening(from._internal_return_when_listening());
  }
  switch (from.length_case()) {
    case kSeconds: {
      _internal_set_seconds(from._internal_seconds());
      break;
    }
    case kSamples: {
      _internal_set_samples(from._internal_samples());
      break;
    }
    case LENGTH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalBytesRequest::CopyFrom(const GetSignalBytesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalBytesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalBytesRequest::IsInitialized() const {
  return true;
}

void GetSignalBytesRequest::InternalSwap(GetSignalBytesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalBytesRequest, return_when_listening_)
      + sizeof(GetSignalBytesRequest::return_when_listening_)
      - PROTOBUF_FIELD_OFFSET(GetSignalBytesRequest, first_channel_)>(
          reinterpret_cast<char*>(&first_channel_),
          reinterpret_cast<char*>(&other->first_channel_));
  swap(length_, other->length_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalBytesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[6]);
}

// ===================================================================

class GetSignalBytesResponse_ChannelConfigChange::_Internal {
 public:
  static const ::minknow_api::device::ReturnedChannelConfiguration& config(const GetSignalBytesResponse_ChannelConfigChange* msg);
};

const ::minknow_api::device::ReturnedChannelConfiguration&
GetSignalBytesResponse_ChannelConfigChange::_Internal::config(const GetSignalBytesResponse_ChannelConfigChange* msg) {
  return *msg->config_;
}
void GetSignalBytesResponse_ChannelConfigChange::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
GetSignalBytesResponse_ChannelConfigChange::GetSignalBytesResponse_ChannelConfigChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
}
GetSignalBytesResponse_ChannelConfigChange::GetSignalBytesResponse_ChannelConfigChange(const GetSignalBytesResponse_ChannelConfigChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::minknow_api::device::ReturnedChannelConfiguration(*from.config_);
  } else {
    config_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
}

void GetSignalBytesResponse_ChannelConfigChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&config_)) + sizeof(offset_));
}

GetSignalBytesResponse_ChannelConfigChange::~GetSignalBytesResponse_ChannelConfigChange() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalBytesResponse_ChannelConfigChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void GetSignalBytesResponse_ChannelConfigChange::ArenaDtor(void* object) {
  GetSignalBytesResponse_ChannelConfigChange* _this = reinterpret_cast< GetSignalBytesResponse_ChannelConfigChange* >(object);
  (void)_this;
}
void GetSignalBytesResponse_ChannelConfigChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalBytesResponse_ChannelConfigChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalBytesResponse_ChannelConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  offset_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalBytesResponse_ChannelConfigChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.ReturnedChannelConfiguration config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalBytesResponse_ChannelConfigChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.ReturnedChannelConfiguration config = 1;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  return target;
}

size_t GetSignalBytesResponse_ChannelConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.ReturnedChannelConfiguration config = 1;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalBytesResponse_ChannelConfigChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalBytesResponse_ChannelConfigChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalBytesResponse_ChannelConfigChange::GetClassData() const { return &_class_data_; }

void GetSignalBytesResponse_ChannelConfigChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalBytesResponse_ChannelConfigChange *>(to)->MergeFrom(
      static_cast<const GetSignalBytesResponse_ChannelConfigChange &>(from));
}


void GetSignalBytesResponse_ChannelConfigChange::MergeFrom(const GetSignalBytesResponse_ChannelConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::minknow_api::device::ReturnedChannelConfiguration::MergeFrom(from._internal_config());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalBytesResponse_ChannelConfigChange::CopyFrom(const GetSignalBytesResponse_ChannelConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalBytesResponse.ChannelConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalBytesResponse_ChannelConfigChange::IsInitialized() const {
  return true;
}

void GetSignalBytesResponse_ChannelConfigChange::InternalSwap(GetSignalBytesResponse_ChannelConfigChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalBytesResponse_ChannelConfigChange, offset_)
      + sizeof(GetSignalBytesResponse_ChannelConfigChange::offset_)
      - PROTOBUF_FIELD_OFFSET(GetSignalBytesResponse_ChannelConfigChange, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalBytesResponse_ChannelConfigChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[7]);
}

// ===================================================================

class GetSignalBytesResponse_ChannelData::_Internal {
 public:
};

GetSignalBytesResponse_ChannelData::GetSignalBytesResponse_ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  config_changes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalBytesResponse.ChannelData)
}
GetSignalBytesResponse_ChannelData::GetSignalBytesResponse_ChannelData(const GetSignalBytesResponse_ChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_changes_(from.config_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalBytesResponse.ChannelData)
}

void GetSignalBytesResponse_ChannelData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSignalBytesResponse_ChannelData::~GetSignalBytesResponse_ChannelData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalBytesResponse.ChannelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalBytesResponse_ChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSignalBytesResponse_ChannelData::ArenaDtor(void* object) {
  GetSignalBytesResponse_ChannelData* _this = reinterpret_cast< GetSignalBytesResponse_ChannelData* >(object);
  (void)_this;
}
void GetSignalBytesResponse_ChannelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalBytesResponse_ChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalBytesResponse_ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalBytesResponse.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_changes_.Clear();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalBytesResponse_ChannelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.data.GetSignalBytesResponse.ChannelConfigChange config_changes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalBytesResponse_ChannelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalBytesResponse.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated .minknow_api.data.GetSignalBytesResponse.ChannelConfigChange config_changes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_config_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalBytesResponse.ChannelData)
  return target;
}

size_t GetSignalBytesResponse_ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalBytesResponse.ChannelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetSignalBytesResponse.ChannelConfigChange config_changes = 3;
  total_size += 1UL * this->_internal_config_changes_size();
  for (const auto& msg : this->config_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalBytesResponse_ChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalBytesResponse_ChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalBytesResponse_ChannelData::GetClassData() const { return &_class_data_; }

void GetSignalBytesResponse_ChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalBytesResponse_ChannelData *>(to)->MergeFrom(
      static_cast<const GetSignalBytesResponse_ChannelData &>(from));
}


void GetSignalBytesResponse_ChannelData::MergeFrom(const GetSignalBytesResponse_ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalBytesResponse.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_changes_.MergeFrom(from.config_changes_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalBytesResponse_ChannelData::CopyFrom(const GetSignalBytesResponse_ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalBytesResponse.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalBytesResponse_ChannelData::IsInitialized() const {
  return true;
}

void GetSignalBytesResponse_ChannelData::InternalSwap(GetSignalBytesResponse_ChannelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  config_changes_.InternalSwap(&other->config_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalBytesResponse_ChannelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[8]);
}

// ===================================================================

class GetSignalBytesResponse::_Internal {
 public:
};

GetSignalBytesResponse::GetSignalBytesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalBytesResponse)
}
GetSignalBytesResponse::GetSignalBytesResponse(const GetSignalBytesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bias_voltages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bias_voltages().empty()) {
    bias_voltages_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bias_voltages(), 
      GetArenaForAllocation());
  }
  ::memcpy(&samples_since_start_, &from.samples_since_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&skipped_channels_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalBytesResponse)
}

void GetSignalBytesResponse::SharedCtor() {
bias_voltages_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_since_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skipped_channels_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
}

GetSignalBytesResponse::~GetSignalBytesResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalBytesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalBytesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bias_voltages_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSignalBytesResponse::ArenaDtor(void* object) {
  GetSignalBytesResponse* _this = reinterpret_cast< GetSignalBytesResponse* >(object);
  (void)_this;
}
void GetSignalBytesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalBytesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalBytesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalBytesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  bias_voltages_.ClearToEmpty();
  ::memset(&samples_since_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skipped_channels_) -
      reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalBytesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 samples_since_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          samples_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_since_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          seconds_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 skipped_channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skipped_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.data.GetSignalBytesResponse.ChannelData channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes bias_voltages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bias_voltages();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalBytesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalBytesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_samples_since_start(), target);
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_since_start(), target);
  }

  // uint32 skipped_channels = 3;
  if (this->_internal_skipped_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skipped_channels(), target);
  }

  // repeated .minknow_api.data.GetSignalBytesResponse.ChannelData channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channels(i), target, stream);
  }

  // bytes bias_voltages = 5;
  if (!this->_internal_bias_voltages().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bias_voltages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalBytesResponse)
  return target;
}

size_t GetSignalBytesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalBytesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetSignalBytesResponse.ChannelData channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes bias_voltages = 5;
  if (!this->_internal_bias_voltages().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bias_voltages());
  }

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_since_start());
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 skipped_channels = 3;
  if (this->_internal_skipped_channels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_skipped_channels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalBytesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalBytesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalBytesResponse::GetClassData() const { return &_class_data_; }

void GetSignalBytesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalBytesResponse *>(to)->MergeFrom(
      static_cast<const GetSignalBytesResponse &>(from));
}


void GetSignalBytesResponse::MergeFrom(const GetSignalBytesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalBytesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (!from._internal_bias_voltages().empty()) {
    _internal_set_bias_voltages(from._internal_bias_voltages());
  }
  if (from._internal_samples_since_start() != 0) {
    _internal_set_samples_since_start(from._internal_samples_since_start());
  }
  if (!(from._internal_seconds_since_start() <= 0 && from._internal_seconds_since_start() >= 0)) {
    _internal_set_seconds_since_start(from._internal_seconds_since_start());
  }
  if (from._internal_skipped_channels() != 0) {
    _internal_set_skipped_channels(from._internal_skipped_channels());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalBytesResponse::CopyFrom(const GetSignalBytesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalBytesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalBytesResponse::IsInitialized() const {
  return true;
}

void GetSignalBytesResponse::InternalSwap(GetSignalBytesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bias_voltages_, lhs_arena,
      &other->bias_voltages_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalBytesResponse, skipped_channels_)
      + sizeof(GetSignalBytesResponse::skipped_channels_)
      - PROTOBUF_FIELD_OFFSET(GetSignalBytesResponse, samples_since_start_)>(
          reinterpret_cast<char*>(&samples_since_start_),
          reinterpret_cast<char*>(&other->samples_since_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalBytesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[9]);
}

// ===================================================================

class GetSignalMinMaxRequest::_Internal {
 public:
};

GetSignalMinMaxRequest::GetSignalMinMaxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalMinMaxRequest)
}
GetSignalMinMaxRequest::GetSignalMinMaxRequest(const GetSignalMinMaxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&calibrated_data_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(calibrated_data_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalMinMaxRequest)
}

void GetSignalMinMaxRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calibrated_data_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(calibrated_data_));
}

GetSignalMinMaxRequest::~GetSignalMinMaxRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalMinMaxRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalMinMaxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSignalMinMaxRequest::ArenaDtor(void* object) {
  GetSignalMinMaxRequest* _this = reinterpret_cast< GetSignalMinMaxRequest* >(object);
  (void)_this;
}
void GetSignalMinMaxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalMinMaxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalMinMaxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalMinMaxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calibrated_data_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(calibrated_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalMinMaxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 window_size = 5 [(.minknow_api.rpc_required) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool calibrated_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          calibrated_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalMinMaxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalMinMaxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_channel(), target);
  }

  // uint32 window_size = 5 [(.minknow_api.rpc_required) = true];
  if (this->_internal_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_window_size(), target);
  }

  // bool calibrated_data = 7;
  if (this->_internal_calibrated_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_calibrated_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalMinMaxRequest)
  return target;
}

size_t GetSignalMinMaxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalMinMaxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_channel = 3 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  // uint32 window_size = 5 [(.minknow_api.rpc_required) = true];
  if (this->_internal_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_size());
  }

  // bool calibrated_data = 7;
  if (this->_internal_calibrated_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalMinMaxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalMinMaxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalMinMaxRequest::GetClassData() const { return &_class_data_; }

void GetSignalMinMaxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalMinMaxRequest *>(to)->MergeFrom(
      static_cast<const GetSignalMinMaxRequest &>(from));
}


void GetSignalMinMaxRequest::MergeFrom(const GetSignalMinMaxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalMinMaxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  if (from._internal_window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
  if (from._internal_calibrated_data() != 0) {
    _internal_set_calibrated_data(from._internal_calibrated_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalMinMaxRequest::CopyFrom(const GetSignalMinMaxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalMinMaxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalMinMaxRequest::IsInitialized() const {
  return true;
}

void GetSignalMinMaxRequest::InternalSwap(GetSignalMinMaxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalMinMaxRequest, calibrated_data_)
      + sizeof(GetSignalMinMaxRequest::calibrated_data_)
      - PROTOBUF_FIELD_OFFSET(GetSignalMinMaxRequest, first_channel_)>(
          reinterpret_cast<char*>(&first_channel_),
          reinterpret_cast<char*>(&other->first_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalMinMaxRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[10]);
}

// ===================================================================

class GetSignalMinMaxResponse_ChannelData::_Internal {
 public:
};

GetSignalMinMaxResponse_ChannelData::GetSignalMinMaxResponse_ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  calibrated_minima_(arena),
  raw_minima_(arena),
  calibrated_maxima_(arena),
  raw_maxima_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
}
GetSignalMinMaxResponse_ChannelData::GetSignalMinMaxResponse_ChannelData(const GetSignalMinMaxResponse_ChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calibrated_minima_(from.calibrated_minima_),
      raw_minima_(from.raw_minima_),
      calibrated_maxima_(from.calibrated_maxima_),
      raw_maxima_(from.raw_maxima_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
}

void GetSignalMinMaxResponse_ChannelData::SharedCtor() {
}

GetSignalMinMaxResponse_ChannelData::~GetSignalMinMaxResponse_ChannelData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalMinMaxResponse_ChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSignalMinMaxResponse_ChannelData::ArenaDtor(void* object) {
  GetSignalMinMaxResponse_ChannelData* _this = reinterpret_cast< GetSignalMinMaxResponse_ChannelData* >(object);
  (void)_this;
}
void GetSignalMinMaxResponse_ChannelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalMinMaxResponse_ChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalMinMaxResponse_ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calibrated_minima_.Clear();
  raw_minima_.Clear();
  calibrated_maxima_.Clear();
  raw_maxima_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalMinMaxResponse_ChannelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float calibrated_minima = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_calibrated_minima(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_calibrated_minima(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 raw_minima = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_minima(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_raw_minima(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float calibrated_maxima = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_calibrated_maxima(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_calibrated_maxima(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 raw_maxima = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_maxima(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_raw_maxima(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalMinMaxResponse_ChannelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float calibrated_minima = 1;
  if (this->_internal_calibrated_minima_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_calibrated_minima(), target);
  }

  // repeated int32 raw_minima = 2;
  {
    int byte_size = _raw_minima_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_raw_minima(), byte_size, target);
    }
  }

  // repeated float calibrated_maxima = 3;
  if (this->_internal_calibrated_maxima_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_calibrated_maxima(), target);
  }

  // repeated int32 raw_maxima = 4;
  {
    int byte_size = _raw_maxima_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_raw_maxima(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  return target;
}

size_t GetSignalMinMaxResponse_ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float calibrated_minima = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_calibrated_minima_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 raw_minima = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->raw_minima_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _raw_minima_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float calibrated_maxima = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_calibrated_maxima_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 raw_maxima = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->raw_maxima_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _raw_maxima_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalMinMaxResponse_ChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalMinMaxResponse_ChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalMinMaxResponse_ChannelData::GetClassData() const { return &_class_data_; }

void GetSignalMinMaxResponse_ChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalMinMaxResponse_ChannelData *>(to)->MergeFrom(
      static_cast<const GetSignalMinMaxResponse_ChannelData &>(from));
}


void GetSignalMinMaxResponse_ChannelData::MergeFrom(const GetSignalMinMaxResponse_ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calibrated_minima_.MergeFrom(from.calibrated_minima_);
  raw_minima_.MergeFrom(from.raw_minima_);
  calibrated_maxima_.MergeFrom(from.calibrated_maxima_);
  raw_maxima_.MergeFrom(from.raw_maxima_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalMinMaxResponse_ChannelData::CopyFrom(const GetSignalMinMaxResponse_ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalMinMaxResponse.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalMinMaxResponse_ChannelData::IsInitialized() const {
  return true;
}

void GetSignalMinMaxResponse_ChannelData::InternalSwap(GetSignalMinMaxResponse_ChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  calibrated_minima_.InternalSwap(&other->calibrated_minima_);
  raw_minima_.InternalSwap(&other->raw_minima_);
  calibrated_maxima_.InternalSwap(&other->calibrated_maxima_);
  raw_maxima_.InternalSwap(&other->raw_maxima_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalMinMaxResponse_ChannelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[11]);
}

// ===================================================================

class GetSignalMinMaxResponse::_Internal {
 public:
};

GetSignalMinMaxResponse::GetSignalMinMaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetSignalMinMaxResponse)
}
GetSignalMinMaxResponse::GetSignalMinMaxResponse(const GetSignalMinMaxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&samples_since_start_, &from.samples_since_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&skipped_channels_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetSignalMinMaxResponse)
}

void GetSignalMinMaxResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_since_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skipped_channels_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
}

GetSignalMinMaxResponse::~GetSignalMinMaxResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetSignalMinMaxResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSignalMinMaxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSignalMinMaxResponse::ArenaDtor(void* object) {
  GetSignalMinMaxResponse* _this = reinterpret_cast< GetSignalMinMaxResponse* >(object);
  (void)_this;
}
void GetSignalMinMaxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignalMinMaxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignalMinMaxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetSignalMinMaxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&samples_since_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skipped_channels_) -
      reinterpret_cast<char*>(&samples_since_start_)) + sizeof(skipped_channels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignalMinMaxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 samples_since_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          samples_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_since_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          seconds_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 skipped_channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skipped_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.data.GetSignalMinMaxResponse.ChannelData channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignalMinMaxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetSignalMinMaxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_samples_since_start(), target);
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_since_start(), target);
  }

  // uint32 skipped_channels = 3;
  if (this->_internal_skipped_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skipped_channels(), target);
  }

  // repeated .minknow_api.data.GetSignalMinMaxResponse.ChannelData channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetSignalMinMaxResponse)
  return target;
}

size_t GetSignalMinMaxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetSignalMinMaxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetSignalMinMaxResponse.ChannelData channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_since_start());
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 skipped_channels = 3;
  if (this->_internal_skipped_channels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_skipped_channels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSignalMinMaxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSignalMinMaxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSignalMinMaxResponse::GetClassData() const { return &_class_data_; }

void GetSignalMinMaxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSignalMinMaxResponse *>(to)->MergeFrom(
      static_cast<const GetSignalMinMaxResponse &>(from));
}


void GetSignalMinMaxResponse::MergeFrom(const GetSignalMinMaxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetSignalMinMaxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_samples_since_start() != 0) {
    _internal_set_samples_since_start(from._internal_samples_since_start());
  }
  if (!(from._internal_seconds_since_start() <= 0 && from._internal_seconds_since_start() >= 0)) {
    _internal_set_seconds_since_start(from._internal_seconds_since_start());
  }
  if (from._internal_skipped_channels() != 0) {
    _internal_set_skipped_channels(from._internal_skipped_channels());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSignalMinMaxResponse::CopyFrom(const GetSignalMinMaxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetSignalMinMaxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignalMinMaxResponse::IsInitialized() const {
  return true;
}

void GetSignalMinMaxResponse::InternalSwap(GetSignalMinMaxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSignalMinMaxResponse, skipped_channels_)
      + sizeof(GetSignalMinMaxResponse::skipped_channels_)
      - PROTOBUF_FIELD_OFFSET(GetSignalMinMaxResponse, samples_since_start_)>(
          reinterpret_cast<char*>(&samples_since_start_),
          reinterpret_cast<char*>(&other->samples_since_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignalMinMaxResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[12]);
}

// ===================================================================

class GetLiveReadsRequest_UnblockAction::_Internal {
 public:
};

GetLiveReadsRequest_UnblockAction::GetLiveReadsRequest_UnblockAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest.UnblockAction)
}
GetLiveReadsRequest_UnblockAction::GetLiveReadsRequest_UnblockAction(const GetLiveReadsRequest_UnblockAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest.UnblockAction)
}

void GetLiveReadsRequest_UnblockAction::SharedCtor() {
duration_ = 0;
}

GetLiveReadsRequest_UnblockAction::~GetLiveReadsRequest_UnblockAction() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsRequest_UnblockAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLiveReadsRequest_UnblockAction::ArenaDtor(void* object) {
  GetLiveReadsRequest_UnblockAction* _this = reinterpret_cast< GetLiveReadsRequest_UnblockAction* >(object);
  (void)_this;
}
void GetLiveReadsRequest_UnblockAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsRequest_UnblockAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsRequest_UnblockAction::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsRequest_UnblockAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsRequest_UnblockAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double duration = 1;
  if (!(this->_internal_duration() <= 0 && this->_internal_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  return target;
}

size_t GetLiveReadsRequest_UnblockAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double duration = 1;
  if (!(this->_internal_duration() <= 0 && this->_internal_duration() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest_UnblockAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsRequest_UnblockAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest_UnblockAction::GetClassData() const { return &_class_data_; }

void GetLiveReadsRequest_UnblockAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsRequest_UnblockAction *>(to)->MergeFrom(
      static_cast<const GetLiveReadsRequest_UnblockAction &>(from));
}


void GetLiveReadsRequest_UnblockAction::MergeFrom(const GetLiveReadsRequest_UnblockAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_duration() <= 0 && from._internal_duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsRequest_UnblockAction::CopyFrom(const GetLiveReadsRequest_UnblockAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsRequest.UnblockAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsRequest_UnblockAction::IsInitialized() const {
  return true;
}

void GetLiveReadsRequest_UnblockAction::InternalSwap(GetLiveReadsRequest_UnblockAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest_UnblockAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[13]);
}

// ===================================================================

class GetLiveReadsRequest_StopFurtherData::_Internal {
 public:
};

GetLiveReadsRequest_StopFurtherData::GetLiveReadsRequest_StopFurtherData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest.StopFurtherData)
}
GetLiveReadsRequest_StopFurtherData::GetLiveReadsRequest_StopFurtherData(const GetLiveReadsRequest_StopFurtherData& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest.StopFurtherData)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest_StopFurtherData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest_StopFurtherData::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest_StopFurtherData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[14]);
}

// ===================================================================

class GetLiveReadsRequest_Action::_Internal {
 public:
  static const ::minknow_api::data::GetLiveReadsRequest_UnblockAction& unblock(const GetLiveReadsRequest_Action* msg);
  static const ::minknow_api::data::GetLiveReadsRequest_StopFurtherData& stop_further_data(const GetLiveReadsRequest_Action* msg);
};

const ::minknow_api::data::GetLiveReadsRequest_UnblockAction&
GetLiveReadsRequest_Action::_Internal::unblock(const GetLiveReadsRequest_Action* msg) {
  return *msg->action_.unblock_;
}
const ::minknow_api::data::GetLiveReadsRequest_StopFurtherData&
GetLiveReadsRequest_Action::_Internal::stop_further_data(const GetLiveReadsRequest_Action* msg) {
  return *msg->action_.stop_further_data_;
}
void GetLiveReadsRequest_Action::set_allocated_unblock(::minknow_api::data::GetLiveReadsRequest_UnblockAction* unblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (unblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::data::GetLiveReadsRequest_UnblockAction>::GetOwningArena(unblock);
    if (message_arena != submessage_arena) {
      unblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unblock, submessage_arena);
    }
    set_has_unblock();
    action_.unblock_ = unblock;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.data.GetLiveReadsRequest.Action.unblock)
}
void GetLiveReadsRequest_Action::set_allocated_stop_further_data(::minknow_api::data::GetLiveReadsRequest_StopFurtherData* stop_further_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (stop_further_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::data::GetLiveReadsRequest_StopFurtherData>::GetOwningArena(stop_further_data);
    if (message_arena != submessage_arena) {
      stop_further_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_further_data, submessage_arena);
    }
    set_has_stop_further_data();
    action_.stop_further_data_ = stop_further_data;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.data.GetLiveReadsRequest.Action.stop_further_data)
}
GetLiveReadsRequest_Action::GetLiveReadsRequest_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest.Action)
}
GetLiveReadsRequest_Action::GetLiveReadsRequest_Action(const GetLiveReadsRequest_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_id().empty()) {
    action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_id(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  clear_has_read();
  switch (from.read_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case READ_NOT_SET: {
      break;
    }
  }
  clear_has_action();
  switch (from.action_case()) {
    case kUnblock: {
      _internal_mutable_unblock()->::minknow_api::data::GetLiveReadsRequest_UnblockAction::MergeFrom(from._internal_unblock());
      break;
    }
    case kStopFurtherData: {
      _internal_mutable_stop_further_data()->::minknow_api::data::GetLiveReadsRequest_StopFurtherData::MergeFrom(from._internal_stop_further_data());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest.Action)
}

void GetLiveReadsRequest_Action::SharedCtor() {
action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_ = 0u;
clear_has_read();
clear_has_action();
}

GetLiveReadsRequest_Action::~GetLiveReadsRequest_Action() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsRequest.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsRequest_Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_read()) {
    clear_read();
  }
  if (has_action()) {
    clear_action();
  }
}

void GetLiveReadsRequest_Action::ArenaDtor(void* object) {
  GetLiveReadsRequest_Action* _this = reinterpret_cast< GetLiveReadsRequest_Action* >(object);
  (void)_this;
}
void GetLiveReadsRequest_Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsRequest_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsRequest_Action::clear_read() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetLiveReadsRequest.Action)
  switch (read_case()) {
    case kId: {
      read_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kNumber: {
      // No need to clear
      break;
    }
    case READ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = READ_NOT_SET;
}

void GetLiveReadsRequest_Action::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetLiveReadsRequest.Action)
  switch (action_case()) {
    case kUnblock: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.unblock_;
      }
      break;
    }
    case kStopFurtherData: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.stop_further_data_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACTION_NOT_SET;
}


void GetLiveReadsRequest_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsRequest.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_.ClearToEmpty();
  channel_ = 0u;
  clear_read();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsRequest_Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetLiveReadsRequest.Action.action_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetLiveReadsRequest.Action.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetLiveReadsRequest.UnblockAction unblock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unblock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetLiveReadsRequest.StopFurtherData stop_further_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_further_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsRequest_Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsRequest.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_id = 1;
  if (!this->_internal_action_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_id().data(), static_cast<int>(this->_internal_action_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetLiveReadsRequest.Action.action_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_id(), target);
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel(), target);
  }

  // string id = 3;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetLiveReadsRequest.Action.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // uint32 number = 4;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number(), target);
  }

  // .minknow_api.data.GetLiveReadsRequest.UnblockAction unblock = 5;
  if (_internal_has_unblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::unblock(this), target, stream);
  }

  // .minknow_api.data.GetLiveReadsRequest.StopFurtherData stop_further_data = 6;
  if (_internal_has_stop_further_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stop_further_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsRequest.Action)
  return target;
}

size_t GetLiveReadsRequest_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsRequest.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_id = 1;
  if (!this->_internal_action_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_id());
  }

  // uint32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  switch (read_case()) {
    // string id = 3;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
      break;
    }
    // uint32 number = 4;
    case kNumber: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
      break;
    }
    case READ_NOT_SET: {
      break;
    }
  }
  switch (action_case()) {
    // .minknow_api.data.GetLiveReadsRequest.UnblockAction unblock = 5;
    case kUnblock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.unblock_);
      break;
    }
    // .minknow_api.data.GetLiveReadsRequest.StopFurtherData stop_further_data = 6;
    case kStopFurtherData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.stop_further_data_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest_Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsRequest_Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest_Action::GetClassData() const { return &_class_data_; }

void GetLiveReadsRequest_Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsRequest_Action *>(to)->MergeFrom(
      static_cast<const GetLiveReadsRequest_Action &>(from));
}


void GetLiveReadsRequest_Action::MergeFrom(const GetLiveReadsRequest_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsRequest.Action)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_id().empty()) {
    _internal_set_action_id(from._internal_action_id());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  switch (from.read_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case READ_NOT_SET: {
      break;
    }
  }
  switch (from.action_case()) {
    case kUnblock: {
      _internal_mutable_unblock()->::minknow_api::data::GetLiveReadsRequest_UnblockAction::MergeFrom(from._internal_unblock());
      break;
    }
    case kStopFurtherData: {
      _internal_mutable_stop_further_data()->::minknow_api::data::GetLiveReadsRequest_StopFurtherData::MergeFrom(from._internal_stop_further_data());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsRequest_Action::CopyFrom(const GetLiveReadsRequest_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsRequest.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsRequest_Action::IsInitialized() const {
  return true;
}

void GetLiveReadsRequest_Action::InternalSwap(GetLiveReadsRequest_Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_id_, lhs_arena,
      &other->action_id_, rhs_arena
  );
  swap(channel_, other->channel_);
  swap(read_, other->read_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest_Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[15]);
}

// ===================================================================

class GetLiveReadsRequest_StreamSetup::_Internal {
 public:
};

GetLiveReadsRequest_StreamSetup::GetLiveReadsRequest_StreamSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest.StreamSetup)
}
GetLiveReadsRequest_StreamSetup::GetLiveReadsRequest_StreamSetup(const GetLiveReadsRequest_StreamSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_data_type_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(raw_data_type_));
  clear_has_max_unblock_read_length();
  switch (from.max_unblock_read_length_case()) {
    case kMaxUnblockReadLengthSamples: {
      _internal_set_max_unblock_read_length_samples(from._internal_max_unblock_read_length_samples());
      break;
    }
    case kMaxUnblockReadLengthSeconds: {
      _internal_set_max_unblock_read_length_seconds(from._internal_max_unblock_read_length_seconds());
      break;
    }
    case MAX_UNBLOCK_READ_LENGTH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest.StreamSetup)
}

void GetLiveReadsRequest_StreamSetup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_data_type_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(raw_data_type_));
clear_has_max_unblock_read_length();
}

GetLiveReadsRequest_StreamSetup::~GetLiveReadsRequest_StreamSetup() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsRequest_StreamSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_max_unblock_read_length()) {
    clear_max_unblock_read_length();
  }
}

void GetLiveReadsRequest_StreamSetup::ArenaDtor(void* object) {
  GetLiveReadsRequest_StreamSetup* _this = reinterpret_cast< GetLiveReadsRequest_StreamSetup* >(object);
  (void)_this;
}
void GetLiveReadsRequest_StreamSetup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsRequest_StreamSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsRequest_StreamSetup::clear_max_unblock_read_length() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  switch (max_unblock_read_length_case()) {
    case kMaxUnblockReadLengthSamples: {
      // No need to clear
      break;
    }
    case kMaxUnblockReadLengthSeconds: {
      // No need to clear
      break;
    }
    case MAX_UNBLOCK_READ_LENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAX_UNBLOCK_READ_LENGTH_NOT_SET;
}


void GetLiveReadsRequest_StreamSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_data_type_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(raw_data_type_));
  clear_max_unblock_read_length();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsRequest_StreamSetup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetLiveReadsRequest.RawDataType raw_data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_raw_data_type(static_cast<::minknow_api::data::GetLiveReadsRequest_RawDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 sample_minimum_chunk_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sample_minimum_chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_unblock_read_length_samples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_max_unblock_read_length_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_unblock_read_length_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_max_unblock_read_length_seconds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsRequest_StreamSetup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_channel = 1;
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 2;
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_channel(), target);
  }

  // .minknow_api.data.GetLiveReadsRequest.RawDataType raw_data_type = 3;
  if (this->_internal_raw_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_raw_data_type(), target);
  }

  // uint64 sample_minimum_chunk_size = 4;
  if (this->_internal_sample_minimum_chunk_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sample_minimum_chunk_size(), target);
  }

  // uint64 max_unblock_read_length_samples = 5;
  if (_internal_has_max_unblock_read_length_samples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_unblock_read_length_samples(), target);
  }

  // double max_unblock_read_length_seconds = 6;
  if (_internal_has_max_unblock_read_length_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_unblock_read_length_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  return target;
}

size_t GetLiveReadsRequest_StreamSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_channel = 1;
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 2;
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  // uint64 sample_minimum_chunk_size = 4;
  if (this->_internal_sample_minimum_chunk_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_minimum_chunk_size());
  }

  // .minknow_api.data.GetLiveReadsRequest.RawDataType raw_data_type = 3;
  if (this->_internal_raw_data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_raw_data_type());
  }

  switch (max_unblock_read_length_case()) {
    // uint64 max_unblock_read_length_samples = 5;
    case kMaxUnblockReadLengthSamples: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_unblock_read_length_samples());
      break;
    }
    // double max_unblock_read_length_seconds = 6;
    case kMaxUnblockReadLengthSeconds: {
      total_size += 1 + 8;
      break;
    }
    case MAX_UNBLOCK_READ_LENGTH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest_StreamSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsRequest_StreamSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest_StreamSetup::GetClassData() const { return &_class_data_; }

void GetLiveReadsRequest_StreamSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsRequest_StreamSetup *>(to)->MergeFrom(
      static_cast<const GetLiveReadsRequest_StreamSetup &>(from));
}


void GetLiveReadsRequest_StreamSetup::MergeFrom(const GetLiveReadsRequest_StreamSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  if (from._internal_sample_minimum_chunk_size() != 0) {
    _internal_set_sample_minimum_chunk_size(from._internal_sample_minimum_chunk_size());
  }
  if (from._internal_raw_data_type() != 0) {
    _internal_set_raw_data_type(from._internal_raw_data_type());
  }
  switch (from.max_unblock_read_length_case()) {
    case kMaxUnblockReadLengthSamples: {
      _internal_set_max_unblock_read_length_samples(from._internal_max_unblock_read_length_samples());
      break;
    }
    case kMaxUnblockReadLengthSeconds: {
      _internal_set_max_unblock_read_length_seconds(from._internal_max_unblock_read_length_seconds());
      break;
    }
    case MAX_UNBLOCK_READ_LENGTH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsRequest_StreamSetup::CopyFrom(const GetLiveReadsRequest_StreamSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsRequest.StreamSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsRequest_StreamSetup::IsInitialized() const {
  return true;
}

void GetLiveReadsRequest_StreamSetup::InternalSwap(GetLiveReadsRequest_StreamSetup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLiveReadsRequest_StreamSetup, raw_data_type_)
      + sizeof(GetLiveReadsRequest_StreamSetup::raw_data_type_)
      - PROTOBUF_FIELD_OFFSET(GetLiveReadsRequest_StreamSetup, first_channel_)>(
          reinterpret_cast<char*>(&first_channel_),
          reinterpret_cast<char*>(&other->first_channel_));
  swap(max_unblock_read_length_, other->max_unblock_read_length_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest_StreamSetup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[16]);
}

// ===================================================================

class GetLiveReadsRequest_Actions::_Internal {
 public:
};

GetLiveReadsRequest_Actions::GetLiveReadsRequest_Actions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest.Actions)
}
GetLiveReadsRequest_Actions::GetLiveReadsRequest_Actions(const GetLiveReadsRequest_Actions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest.Actions)
}

void GetLiveReadsRequest_Actions::SharedCtor() {
}

GetLiveReadsRequest_Actions::~GetLiveReadsRequest_Actions() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsRequest.Actions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsRequest_Actions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLiveReadsRequest_Actions::ArenaDtor(void* object) {
  GetLiveReadsRequest_Actions* _this = reinterpret_cast< GetLiveReadsRequest_Actions* >(object);
  (void)_this;
}
void GetLiveReadsRequest_Actions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsRequest_Actions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsRequest_Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsRequest.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsRequest_Actions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.data.GetLiveReadsRequest.Action actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsRequest_Actions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsRequest.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetLiveReadsRequest.Action actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsRequest.Actions)
  return target;
}

size_t GetLiveReadsRequest_Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsRequest.Actions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetLiveReadsRequest.Action actions = 2;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest_Actions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsRequest_Actions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest_Actions::GetClassData() const { return &_class_data_; }

void GetLiveReadsRequest_Actions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsRequest_Actions *>(to)->MergeFrom(
      static_cast<const GetLiveReadsRequest_Actions &>(from));
}


void GetLiveReadsRequest_Actions::MergeFrom(const GetLiveReadsRequest_Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsRequest.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsRequest_Actions::CopyFrom(const GetLiveReadsRequest_Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsRequest.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsRequest_Actions::IsInitialized() const {
  return true;
}

void GetLiveReadsRequest_Actions::InternalSwap(GetLiveReadsRequest_Actions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest_Actions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[17]);
}

// ===================================================================

class GetLiveReadsRequest::_Internal {
 public:
  static const ::minknow_api::data::GetLiveReadsRequest_StreamSetup& setup(const GetLiveReadsRequest* msg);
  static const ::minknow_api::data::GetLiveReadsRequest_Actions& actions(const GetLiveReadsRequest* msg);
};

const ::minknow_api::data::GetLiveReadsRequest_StreamSetup&
GetLiveReadsRequest::_Internal::setup(const GetLiveReadsRequest* msg) {
  return *msg->request_.setup_;
}
const ::minknow_api::data::GetLiveReadsRequest_Actions&
GetLiveReadsRequest::_Internal::actions(const GetLiveReadsRequest* msg) {
  return *msg->request_.actions_;
}
void GetLiveReadsRequest::set_allocated_setup(::minknow_api::data::GetLiveReadsRequest_StreamSetup* setup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (setup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::data::GetLiveReadsRequest_StreamSetup>::GetOwningArena(setup);
    if (message_arena != submessage_arena) {
      setup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup, submessage_arena);
    }
    set_has_setup();
    request_.setup_ = setup;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.data.GetLiveReadsRequest.setup)
}
void GetLiveReadsRequest::set_allocated_actions(::minknow_api::data::GetLiveReadsRequest_Actions* actions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (actions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::data::GetLiveReadsRequest_Actions>::GetOwningArena(actions);
    if (message_arena != submessage_arena) {
      actions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actions, submessage_arena);
    }
    set_has_actions();
    request_.actions_ = actions;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.data.GetLiveReadsRequest.actions)
}
GetLiveReadsRequest::GetLiveReadsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsRequest)
}
GetLiveReadsRequest::GetLiveReadsRequest(const GetLiveReadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSetup: {
      _internal_mutable_setup()->::minknow_api::data::GetLiveReadsRequest_StreamSetup::MergeFrom(from._internal_setup());
      break;
    }
    case kActions: {
      _internal_mutable_actions()->::minknow_api::data::GetLiveReadsRequest_Actions::MergeFrom(from._internal_actions());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsRequest)
}

void GetLiveReadsRequest::SharedCtor() {
clear_has_request();
}

GetLiveReadsRequest::~GetLiveReadsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void GetLiveReadsRequest::ArenaDtor(void* object) {
  GetLiveReadsRequest* _this = reinterpret_cast< GetLiveReadsRequest* >(object);
  (void)_this;
}
void GetLiveReadsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetLiveReadsRequest)
  switch (request_case()) {
    case kSetup: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.setup_;
      }
      break;
    }
    case kActions: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.actions_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void GetLiveReadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.data.GetLiveReadsRequest.StreamSetup setup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetLiveReadsRequest.Actions actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.data.GetLiveReadsRequest.StreamSetup setup = 1;
  if (_internal_has_setup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::setup(this), target, stream);
  }

  // .minknow_api.data.GetLiveReadsRequest.Actions actions = 2;
  if (_internal_has_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsRequest)
  return target;
}

size_t GetLiveReadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .minknow_api.data.GetLiveReadsRequest.StreamSetup setup = 1;
    case kSetup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.setup_);
      break;
    }
    // .minknow_api.data.GetLiveReadsRequest.Actions actions = 2;
    case kActions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.actions_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsRequest::GetClassData() const { return &_class_data_; }

void GetLiveReadsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsRequest *>(to)->MergeFrom(
      static_cast<const GetLiveReadsRequest &>(from));
}


void GetLiveReadsRequest::MergeFrom(const GetLiveReadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSetup: {
      _internal_mutable_setup()->::minknow_api::data::GetLiveReadsRequest_StreamSetup::MergeFrom(from._internal_setup());
      break;
    }
    case kActions: {
      _internal_mutable_actions()->::minknow_api::data::GetLiveReadsRequest_Actions::MergeFrom(from._internal_actions());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsRequest::CopyFrom(const GetLiveReadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsRequest::IsInitialized() const {
  return true;
}

void GetLiveReadsRequest::InternalSwap(GetLiveReadsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[18]);
}

// ===================================================================

class GetLiveReadsResponse_ReadData::_Internal {
 public:
};

GetLiveReadsResponse_ReadData::GetLiveReadsResponse_ReadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunk_classifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsResponse.ReadData)
}
GetLiveReadsResponse_ReadData::GetLiveReadsResponse_ReadData(const GetLiveReadsResponse_ReadData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_classifications_(from.chunk_classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_data().empty()) {
    raw_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_sample_, &from.start_sample_,
    static_cast<size_t>(reinterpret_cast<char*>(&median_) -
    reinterpret_cast<char*>(&start_sample_)) + sizeof(median_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsResponse.ReadData)
}

void GetLiveReadsResponse_ReadData::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
raw_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_sample_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&median_) -
    reinterpret_cast<char*>(&start_sample_)) + sizeof(median_));
}

GetLiveReadsResponse_ReadData::~GetLiveReadsResponse_ReadData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsResponse.ReadData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsResponse_ReadData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLiveReadsResponse_ReadData::ArenaDtor(void* object) {
  GetLiveReadsResponse_ReadData* _this = reinterpret_cast< GetLiveReadsResponse_ReadData* >(object);
  (void)_this;
}
void GetLiveReadsResponse_ReadData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsResponse_ReadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsResponse_ReadData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsResponse.ReadData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_classifications_.Clear();
  id_.ClearToEmpty();
  raw_data_.ClearToEmpty();
  ::memset(&start_sample_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&median_) -
      reinterpret_cast<char*>(&start_sample_)) + sizeof(median_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsResponse_ReadData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetLiveReadsResponse.ReadData.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_sample = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chunk_start_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chunk_start_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chunk_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chunk_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 chunk_classifications = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chunk_classifications(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_chunk_classifications(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes raw_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_raw_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float median_before = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          median_before_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float median = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          median_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsResponse_ReadData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsResponse.ReadData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetLiveReadsResponse.ReadData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  // uint64 start_sample = 3;
  if (this->_internal_start_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_sample(), target);
  }

  // uint64 chunk_start_sample = 4;
  if (this->_internal_chunk_start_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chunk_start_sample(), target);
  }

  // uint64 chunk_length = 5;
  if (this->_internal_chunk_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_chunk_length(), target);
  }

  // repeated int32 chunk_classifications = 6;
  {
    int byte_size = _chunk_classifications_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_chunk_classifications(), byte_size, target);
    }
  }

  // bytes raw_data = 7;
  if (!this->_internal_raw_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_raw_data(), target);
  }

  // float median_before = 8;
  if (!(this->_internal_median_before() <= 0 && this->_internal_median_before() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_median_before(), target);
  }

  // float median = 9;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_median(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsResponse.ReadData)
  return target;
}

size_t GetLiveReadsResponse_ReadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsResponse.ReadData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chunk_classifications = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->chunk_classifications_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunk_classifications_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes raw_data = 7;
  if (!this->_internal_raw_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_data());
  }

  // uint64 start_sample = 3;
  if (this->_internal_start_sample() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start_sample());
  }

  // uint64 chunk_start_sample = 4;
  if (this->_internal_chunk_start_sample() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_start_sample());
  }

  // uint64 chunk_length = 5;
  if (this->_internal_chunk_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_length());
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }

  // float median_before = 8;
  if (!(this->_internal_median_before() <= 0 && this->_internal_median_before() >= 0)) {
    total_size += 1 + 4;
  }

  // float median = 9;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsResponse_ReadData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsResponse_ReadData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsResponse_ReadData::GetClassData() const { return &_class_data_; }

void GetLiveReadsResponse_ReadData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsResponse_ReadData *>(to)->MergeFrom(
      static_cast<const GetLiveReadsResponse_ReadData &>(from));
}


void GetLiveReadsResponse_ReadData::MergeFrom(const GetLiveReadsResponse_ReadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsResponse.ReadData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_classifications_.MergeFrom(from.chunk_classifications_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_raw_data().empty()) {
    _internal_set_raw_data(from._internal_raw_data());
  }
  if (from._internal_start_sample() != 0) {
    _internal_set_start_sample(from._internal_start_sample());
  }
  if (from._internal_chunk_start_sample() != 0) {
    _internal_set_chunk_start_sample(from._internal_chunk_start_sample());
  }
  if (from._internal_chunk_length() != 0) {
    _internal_set_chunk_length(from._internal_chunk_length());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (!(from._internal_median_before() <= 0 && from._internal_median_before() >= 0)) {
    _internal_set_median_before(from._internal_median_before());
  }
  if (!(from._internal_median() <= 0 && from._internal_median() >= 0)) {
    _internal_set_median(from._internal_median());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsResponse_ReadData::CopyFrom(const GetLiveReadsResponse_ReadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsResponse.ReadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsResponse_ReadData::IsInitialized() const {
  return true;
}

void GetLiveReadsResponse_ReadData::InternalSwap(GetLiveReadsResponse_ReadData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunk_classifications_.InternalSwap(&other->chunk_classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_data_, lhs_arena,
      &other->raw_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLiveReadsResponse_ReadData, median_)
      + sizeof(GetLiveReadsResponse_ReadData::median_)
      - PROTOBUF_FIELD_OFFSET(GetLiveReadsResponse_ReadData, start_sample_)>(
          reinterpret_cast<char*>(&start_sample_),
          reinterpret_cast<char*>(&other->start_sample_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsResponse_ReadData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[19]);
}

// ===================================================================

class GetLiveReadsResponse_ActionResponse::_Internal {
 public:
};

GetLiveReadsResponse_ActionResponse::GetLiveReadsResponse_ActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsResponse.ActionResponse)
}
GetLiveReadsResponse_ActionResponse::GetLiveReadsResponse_ActionResponse(const GetLiveReadsResponse_ActionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_id().empty()) {
    action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_id(), 
      GetArenaForAllocation());
  }
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsResponse.ActionResponse)
}

void GetLiveReadsResponse_ActionResponse::SharedCtor() {
action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
response_ = 0;
}

GetLiveReadsResponse_ActionResponse::~GetLiveReadsResponse_ActionResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsResponse_ActionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLiveReadsResponse_ActionResponse::ArenaDtor(void* object) {
  GetLiveReadsResponse_ActionResponse* _this = reinterpret_cast< GetLiveReadsResponse_ActionResponse* >(object);
  (void)_this;
}
void GetLiveReadsResponse_ActionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLiveReadsResponse_ActionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsResponse_ActionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_.ClearToEmpty();
  response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsResponse_ActionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetLiveReadsResponse.ActionResponse.action_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetLiveReadsResponse.ActionResponse.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::minknow_api::data::GetLiveReadsResponse_ActionResponse_Response>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsResponse_ActionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_id = 1;
  if (!this->_internal_action_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_id().data(), static_cast<int>(this->_internal_action_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetLiveReadsResponse.ActionResponse.action_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_id(), target);
  }

  // .minknow_api.data.GetLiveReadsResponse.ActionResponse.Response response = 2;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  return target;
}

size_t GetLiveReadsResponse_ActionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_id = 1;
  if (!this->_internal_action_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_id());
  }

  // .minknow_api.data.GetLiveReadsResponse.ActionResponse.Response response = 2;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsResponse_ActionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsResponse_ActionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsResponse_ActionResponse::GetClassData() const { return &_class_data_; }

void GetLiveReadsResponse_ActionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsResponse_ActionResponse *>(to)->MergeFrom(
      static_cast<const GetLiveReadsResponse_ActionResponse &>(from));
}


void GetLiveReadsResponse_ActionResponse::MergeFrom(const GetLiveReadsResponse_ActionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_id().empty()) {
    _internal_set_action_id(from._internal_action_id());
  }
  if (from._internal_response() != 0) {
    _internal_set_response(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsResponse_ActionResponse::CopyFrom(const GetLiveReadsResponse_ActionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsResponse.ActionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsResponse_ActionResponse::IsInitialized() const {
  return true;
}

void GetLiveReadsResponse_ActionResponse::InternalSwap(GetLiveReadsResponse_ActionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_id_, lhs_arena,
      &other->action_id_, rhs_arena
  );
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsResponse_ActionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[20]);
}

// ===================================================================

GetLiveReadsResponse_ChannelsEntry_DoNotUse::GetLiveReadsResponse_ChannelsEntry_DoNotUse() {}
GetLiveReadsResponse_ChannelsEntry_DoNotUse::GetLiveReadsResponse_ChannelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetLiveReadsResponse_ChannelsEntry_DoNotUse::MergeFrom(const GetLiveReadsResponse_ChannelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsResponse_ChannelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[21]);
}

// ===================================================================

class GetLiveReadsResponse::_Internal {
 public:
};

GetLiveReadsResponse::GetLiveReadsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena),
  action_responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetLiveReadsResponse)
}
GetLiveReadsResponse::GetLiveReadsResponse(const GetLiveReadsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      action_responses_(from.action_responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channels_.MergeFrom(from.channels_);
  ::memcpy(&samples_since_start_, &from.samples_since_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_since_start_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetLiveReadsResponse)
}

void GetLiveReadsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_since_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_since_start_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
}

GetLiveReadsResponse::~GetLiveReadsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetLiveReadsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLiveReadsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLiveReadsResponse::ArenaDtor(void* object) {
  GetLiveReadsResponse* _this = reinterpret_cast< GetLiveReadsResponse* >(object);
  (void)_this;
  _this->channels_. ~MapField();
}
inline void GetLiveReadsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetLiveReadsResponse::ArenaDtor);
  }
}
void GetLiveReadsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLiveReadsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetLiveReadsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  action_responses_.Clear();
  ::memset(&samples_since_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_since_start_) -
      reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveReadsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 samples_since_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          samples_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_since_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          seconds_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .minknow_api.data.GetLiveReadsResponse.ReadData> channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&channels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.data.GetLiveReadsResponse.ActionResponse action_responses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLiveReadsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetLiveReadsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_samples_since_start(), target);
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_seconds_since_start(), target);
  }

  // map<uint32, .minknow_api.data.GetLiveReadsResponse.ReadData> channels = 4;
  if (!this->_internal_channels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::data::GetLiveReadsResponse_ReadData >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_channels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_channels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::data::GetLiveReadsResponse_ReadData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::data::GetLiveReadsResponse_ReadData >::const_iterator
          it = this->_internal_channels().begin();
          it != this->_internal_channels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetLiveReadsResponse_ChannelsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::data::GetLiveReadsResponse_ReadData >::const_iterator
          it = this->_internal_channels().begin();
          it != this->_internal_channels().end(); ++it) {
        target = GetLiveReadsResponse_ChannelsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .minknow_api.data.GetLiveReadsResponse.ActionResponse action_responses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_action_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetLiveReadsResponse)
  return target;
}

size_t GetLiveReadsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetLiveReadsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .minknow_api.data.GetLiveReadsResponse.ReadData> channels = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::data::GetLiveReadsResponse_ReadData >::const_iterator
      it = this->_internal_channels().begin();
      it != this->_internal_channels().end(); ++it) {
    total_size += GetLiveReadsResponse_ChannelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .minknow_api.data.GetLiveReadsResponse.ActionResponse action_responses = 5;
  total_size += 1UL * this->_internal_action_responses_size();
  for (const auto& msg : this->action_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 samples_since_start = 1;
  if (this->_internal_samples_since_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_since_start());
  }

  // double seconds_since_start = 2;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveReadsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLiveReadsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveReadsResponse::GetClassData() const { return &_class_data_; }

void GetLiveReadsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLiveReadsResponse *>(to)->MergeFrom(
      static_cast<const GetLiveReadsResponse &>(from));
}


void GetLiveReadsResponse::MergeFrom(const GetLiveReadsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetLiveReadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  action_responses_.MergeFrom(from.action_responses_);
  if (from._internal_samples_since_start() != 0) {
    _internal_set_samples_since_start(from._internal_samples_since_start());
  }
  if (!(from._internal_seconds_since_start() <= 0 && from._internal_seconds_since_start() >= 0)) {
    _internal_set_seconds_since_start(from._internal_seconds_since_start());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveReadsResponse::CopyFrom(const GetLiveReadsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetLiveReadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveReadsResponse::IsInitialized() const {
  return true;
}

void GetLiveReadsResponse::InternalSwap(GetLiveReadsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  action_responses_.InternalSwap(&other->action_responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLiveReadsResponse, seconds_since_start_)
      + sizeof(GetLiveReadsResponse::seconds_since_start_)
      - PROTOBUF_FIELD_OFFSET(GetLiveReadsResponse, samples_since_start_)>(
          reinterpret_cast<char*>(&samples_since_start_),
          reinterpret_cast<char*>(&other->samples_since_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveReadsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[22]);
}

// ===================================================================

class ResetChannelStatesRequest::_Internal {
 public:
};

ResetChannelStatesRequest::ResetChannelStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.ResetChannelStatesRequest)
}
ResetChannelStatesRequest::ResetChannelStatesRequest(const ResetChannelStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.ResetChannelStatesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetChannelStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetChannelStatesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetChannelStatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[23]);
}

// ===================================================================

class ResetChannelStatesResponse::_Internal {
 public:
};

ResetChannelStatesResponse::ResetChannelStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.ResetChannelStatesResponse)
}
ResetChannelStatesResponse::ResetChannelStatesResponse(const ResetChannelStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.ResetChannelStatesResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetChannelStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetChannelStatesResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetChannelStatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[24]);
}

// ===================================================================

class GetReadStatisticsRequest::_Internal {
 public:
};

GetReadStatisticsRequest::GetReadStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena),
  required_classifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsRequest)
}
GetReadStatisticsRequest::GetReadStatisticsRequest(const GetReadStatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_),
      required_classifications_(from.required_classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&read_split_, &from.read_split_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_chunk_statistics_) -
    reinterpret_cast<char*>(&read_split_)) + sizeof(no_chunk_statistics_));
  clear_has_duration();
  switch (from.duration_case()) {
    case kSeconds: {
      _internal_set_seconds(from._internal_seconds());
      break;
    }
    case kSamples: {
      _internal_set_samples(from._internal_samples());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsRequest)
}

void GetReadStatisticsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_split_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_chunk_statistics_) -
    reinterpret_cast<char*>(&read_split_)) + sizeof(no_chunk_statistics_));
clear_has_duration();
}

GetReadStatisticsRequest::~GetReadStatisticsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_duration()) {
    clear_duration();
  }
}

void GetReadStatisticsRequest::ArenaDtor(void* object) {
  GetReadStatisticsRequest* _this = reinterpret_cast< GetReadStatisticsRequest* >(object);
  (void)_this;
}
void GetReadStatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsRequest::clear_duration() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.data.GetReadStatisticsRequest)
  switch (duration_case()) {
    case kSeconds: {
      // No need to clear
      break;
    }
    case kSamples: {
      // No need to clear
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DURATION_NOT_SET;
}


void GetReadStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  required_classifications_.Clear();
  ::memset(&read_split_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_chunk_statistics_) -
      reinterpret_cast<char*>(&read_split_)) + sizeof(no_chunk_statistics_));
  clear_duration();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetReadStatisticsRequest.ReadSplit read_split = 4 [(.minknow_api.rpc_required) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_read_split(static_cast<::minknow_api::data::GetReadStatisticsRequest_ReadSplit>(val));
        } else
          goto handle_unusual;
        continue;
      // bool no_current_statistics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          no_current_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_chunk_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          no_chunk_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_classifications = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_classifications();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.GetReadStatisticsRequest.required_classifications"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  // float seconds = 2;
  if (_internal_has_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_seconds(), target);
  }

  // uint64 samples = 3;
  if (_internal_has_samples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_samples(), target);
  }

  // .minknow_api.data.GetReadStatisticsRequest.ReadSplit read_split = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_read_split() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_read_split(), target);
  }

  // bool no_current_statistics = 5;
  if (this->_internal_no_current_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_no_current_statistics(), target);
  }

  // bool no_chunk_statistics = 6;
  if (this->_internal_no_chunk_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_no_chunk_statistics(), target);
  }

  // repeated string required_classifications = 7;
  for (int i = 0, n = this->_internal_required_classifications_size(); i < n; i++) {
    const auto& s = this->_internal_required_classifications(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.GetReadStatisticsRequest.required_classifications");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsRequest)
  return target;
}

size_t GetReadStatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string required_classifications = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_classifications_.size());
  for (int i = 0, n = required_classifications_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_classifications_.Get(i));
  }

  // .minknow_api.data.GetReadStatisticsRequest.ReadSplit read_split = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_read_split() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_read_split());
  }

  // bool no_current_statistics = 5;
  if (this->_internal_no_current_statistics() != 0) {
    total_size += 1 + 1;
  }

  // bool no_chunk_statistics = 6;
  if (this->_internal_no_chunk_statistics() != 0) {
    total_size += 1 + 1;
  }

  switch (duration_case()) {
    // float seconds = 2;
    case kSeconds: {
      total_size += 1 + 4;
      break;
    }
    // uint64 samples = 3;
    case kSamples: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsRequest::GetClassData() const { return &_class_data_; }

void GetReadStatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsRequest *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsRequest &>(from));
}


void GetReadStatisticsRequest::MergeFrom(const GetReadStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  required_classifications_.MergeFrom(from.required_classifications_);
  if (from._internal_read_split() != 0) {
    _internal_set_read_split(from._internal_read_split());
  }
  if (from._internal_no_current_statistics() != 0) {
    _internal_set_no_current_statistics(from._internal_no_current_statistics());
  }
  if (from._internal_no_chunk_statistics() != 0) {
    _internal_set_no_chunk_statistics(from._internal_no_chunk_statistics());
  }
  switch (from.duration_case()) {
    case kSeconds: {
      _internal_set_seconds(from._internal_seconds());
      break;
    }
    case kSamples: {
      _internal_set_samples(from._internal_samples());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsRequest::CopyFrom(const GetReadStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsRequest::IsInitialized() const {
  return true;
}

void GetReadStatisticsRequest::InternalSwap(GetReadStatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  required_classifications_.InternalSwap(&other->required_classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsRequest, no_chunk_statistics_)
      + sizeof(GetReadStatisticsRequest::no_chunk_statistics_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsRequest, read_split_)>(
          reinterpret_cast<char*>(&read_split_),
          reinterpret_cast<char*>(&other->read_split_));
  swap(duration_, other->duration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[25]);
}

// ===================================================================

class GetReadStatisticsResponse_Statistics::_Internal {
 public:
};

GetReadStatisticsResponse_Statistics::GetReadStatisticsResponse_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse.Statistics)
}
GetReadStatisticsResponse_Statistics::GetReadStatisticsResponse_Statistics(const GetReadStatisticsResponse_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&q_95_) -
    reinterpret_cast<char*>(&min_)) + sizeof(q_95_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse.Statistics)
}

void GetReadStatisticsResponse_Statistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&q_95_) -
    reinterpret_cast<char*>(&min_)) + sizeof(q_95_));
}

GetReadStatisticsResponse_Statistics::~GetReadStatisticsResponse_Statistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse.Statistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse_Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadStatisticsResponse_Statistics::ArenaDtor(void* object) {
  GetReadStatisticsResponse_Statistics* _this = reinterpret_cast< GetReadStatisticsResponse_Statistics* >(object);
  (void)_this;
}
void GetReadStatisticsResponse_Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsResponse_Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&q_95_) -
      reinterpret_cast<char*>(&min_)) + sizeof(q_95_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse_Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double s_d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double median = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          median_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          q_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          q_10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_25 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          q_25_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_75 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          q_75_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_90 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          q_90_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double q_95 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          q_95_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse_Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->_internal_min() <= 0 && this->_internal_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min(), target);
  }

  // double max = 2;
  if (!(this->_internal_max() <= 0 && this->_internal_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  // double mean = 3;
  if (!(this->_internal_mean() <= 0 && this->_internal_mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mean(), target);
  }

  // double s_d = 4;
  if (!(this->_internal_s_d() <= 0 && this->_internal_s_d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s_d(), target);
  }

  // double median = 6;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_median(), target);
  }

  // double q_5 = 7;
  if (!(this->_internal_q_5() <= 0 && this->_internal_q_5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_q_5(), target);
  }

  // double q_10 = 8;
  if (!(this->_internal_q_10() <= 0 && this->_internal_q_10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_q_10(), target);
  }

  // double q_25 = 9;
  if (!(this->_internal_q_25() <= 0 && this->_internal_q_25() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_q_25(), target);
  }

  // double q_75 = 10;
  if (!(this->_internal_q_75() <= 0 && this->_internal_q_75() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_q_75(), target);
  }

  // double q_90 = 11;
  if (!(this->_internal_q_90() <= 0 && this->_internal_q_90() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_q_90(), target);
  }

  // double q_95 = 12;
  if (!(this->_internal_q_95() <= 0 && this->_internal_q_95() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_q_95(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse.Statistics)
  return target;
}

size_t GetReadStatisticsResponse_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->_internal_min() <= 0 && this->_internal_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double max = 2;
  if (!(this->_internal_max() <= 0 && this->_internal_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean = 3;
  if (!(this->_internal_mean() <= 0 && this->_internal_mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double s_d = 4;
  if (!(this->_internal_s_d() <= 0 && this->_internal_s_d() >= 0)) {
    total_size += 1 + 8;
  }

  // double median = 6;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_5 = 7;
  if (!(this->_internal_q_5() <= 0 && this->_internal_q_5() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_10 = 8;
  if (!(this->_internal_q_10() <= 0 && this->_internal_q_10() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_25 = 9;
  if (!(this->_internal_q_25() <= 0 && this->_internal_q_25() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_75 = 10;
  if (!(this->_internal_q_75() <= 0 && this->_internal_q_75() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_90 = 11;
  if (!(this->_internal_q_90() <= 0 && this->_internal_q_90() >= 0)) {
    total_size += 1 + 8;
  }

  // double q_95 = 12;
  if (!(this->_internal_q_95() <= 0 && this->_internal_q_95() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse_Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse_Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse_Statistics::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse_Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse_Statistics *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse_Statistics &>(from));
}


void GetReadStatisticsResponse_Statistics::MergeFrom(const GetReadStatisticsResponse_Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_min() <= 0 && from._internal_min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from._internal_max() <= 0 && from._internal_max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from._internal_mean() <= 0 && from._internal_mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from._internal_s_d() <= 0 && from._internal_s_d() >= 0)) {
    _internal_set_s_d(from._internal_s_d());
  }
  if (!(from._internal_median() <= 0 && from._internal_median() >= 0)) {
    _internal_set_median(from._internal_median());
  }
  if (!(from._internal_q_5() <= 0 && from._internal_q_5() >= 0)) {
    _internal_set_q_5(from._internal_q_5());
  }
  if (!(from._internal_q_10() <= 0 && from._internal_q_10() >= 0)) {
    _internal_set_q_10(from._internal_q_10());
  }
  if (!(from._internal_q_25() <= 0 && from._internal_q_25() >= 0)) {
    _internal_set_q_25(from._internal_q_25());
  }
  if (!(from._internal_q_75() <= 0 && from._internal_q_75() >= 0)) {
    _internal_set_q_75(from._internal_q_75());
  }
  if (!(from._internal_q_90() <= 0 && from._internal_q_90() >= 0)) {
    _internal_set_q_90(from._internal_q_90());
  }
  if (!(from._internal_q_95() <= 0 && from._internal_q_95() >= 0)) {
    _internal_set_q_95(from._internal_q_95());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse_Statistics::CopyFrom(const GetReadStatisticsResponse_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse_Statistics::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse_Statistics::InternalSwap(GetReadStatisticsResponse_Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_Statistics, q_95_)
      + sizeof(GetReadStatisticsResponse_Statistics::q_95_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_Statistics, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_Statistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[26]);
}

// ===================================================================

class GetReadStatisticsResponse_ChunkStatistics::_Internal {
 public:
};

GetReadStatisticsResponse_ChunkStatistics::GetReadStatisticsResponse_ChunkStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
}
GetReadStatisticsResponse_ChunkStatistics::GetReadStatisticsResponse_ChunkStatistics(const GetReadStatisticsResponse_ChunkStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&median_sd_, &from.median_sd_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&median_sd_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
}

void GetReadStatisticsResponse_ChunkStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&median_sd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&median_sd_)) + sizeof(range_));
}

GetReadStatisticsResponse_ChunkStatistics::~GetReadStatisticsResponse_ChunkStatistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse_ChunkStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadStatisticsResponse_ChunkStatistics::ArenaDtor(void* object) {
  GetReadStatisticsResponse_ChunkStatistics* _this = reinterpret_cast< GetReadStatisticsResponse_ChunkStatistics* >(object);
  (void)_this;
}
void GetReadStatisticsResponse_ChunkStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsResponse_ChunkStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse_ChunkStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&median_sd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&median_sd_)) + sizeof(range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse_ChunkStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double median_sd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          median_sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double median = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          median_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse_ChunkStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double median_sd = 1;
  if (!(this->_internal_median_sd() <= 0 && this->_internal_median_sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_median_sd(), target);
  }

  // double median = 2;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_median(), target);
  }

  // double range = 3;
  if (!(this->_internal_range() <= 0 && this->_internal_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  return target;
}

size_t GetReadStatisticsResponse_ChunkStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double median_sd = 1;
  if (!(this->_internal_median_sd() <= 0 && this->_internal_median_sd() >= 0)) {
    total_size += 1 + 8;
  }

  // double median = 2;
  if (!(this->_internal_median() <= 0 && this->_internal_median() >= 0)) {
    total_size += 1 + 8;
  }

  // double range = 3;
  if (!(this->_internal_range() <= 0 && this->_internal_range() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse_ChunkStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse_ChunkStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse_ChunkStatistics::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse_ChunkStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse_ChunkStatistics *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse_ChunkStatistics &>(from));
}


void GetReadStatisticsResponse_ChunkStatistics::MergeFrom(const GetReadStatisticsResponse_ChunkStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_median_sd() <= 0 && from._internal_median_sd() >= 0)) {
    _internal_set_median_sd(from._internal_median_sd());
  }
  if (!(from._internal_median() <= 0 && from._internal_median() >= 0)) {
    _internal_set_median(from._internal_median());
  }
  if (!(from._internal_range() <= 0 && from._internal_range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse_ChunkStatistics::CopyFrom(const GetReadStatisticsResponse_ChunkStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse.ChunkStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse_ChunkStatistics::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse_ChunkStatistics::InternalSwap(GetReadStatisticsResponse_ChunkStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_ChunkStatistics, range_)
      + sizeof(GetReadStatisticsResponse_ChunkStatistics::range_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_ChunkStatistics, median_sd_)>(
          reinterpret_cast<char*>(&median_sd_),
          reinterpret_cast<char*>(&other->median_sd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_ChunkStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[27]);
}

// ===================================================================

class GetReadStatisticsResponse_PerClassificationData::_Internal {
 public:
  static const ::minknow_api::data::GetReadStatisticsResponse_Statistics& duration_statistics(const GetReadStatisticsResponse_PerClassificationData* msg);
  static const ::minknow_api::data::GetReadStatisticsResponse_Statistics& current_statistics(const GetReadStatisticsResponse_PerClassificationData* msg);
  static const ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics& chunk_statistics(const GetReadStatisticsResponse_PerClassificationData* msg);
};

const ::minknow_api::data::GetReadStatisticsResponse_Statistics&
GetReadStatisticsResponse_PerClassificationData::_Internal::duration_statistics(const GetReadStatisticsResponse_PerClassificationData* msg) {
  return *msg->duration_statistics_;
}
const ::minknow_api::data::GetReadStatisticsResponse_Statistics&
GetReadStatisticsResponse_PerClassificationData::_Internal::current_statistics(const GetReadStatisticsResponse_PerClassificationData* msg) {
  return *msg->current_statistics_;
}
const ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics&
GetReadStatisticsResponse_PerClassificationData::_Internal::chunk_statistics(const GetReadStatisticsResponse_PerClassificationData* msg) {
  return *msg->chunk_statistics_;
}
GetReadStatisticsResponse_PerClassificationData::GetReadStatisticsResponse_PerClassificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
}
GetReadStatisticsResponse_PerClassificationData::GetReadStatisticsResponse_PerClassificationData(const GetReadStatisticsResponse_PerClassificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration_statistics()) {
    duration_statistics_ = new ::minknow_api::data::GetReadStatisticsResponse_Statistics(*from.duration_statistics_);
  } else {
    duration_statistics_ = nullptr;
  }
  if (from._internal_has_current_statistics()) {
    current_statistics_ = new ::minknow_api::data::GetReadStatisticsResponse_Statistics(*from.current_statistics_);
  } else {
    current_statistics_ = nullptr;
  }
  if (from._internal_has_chunk_statistics()) {
    chunk_statistics_ = new ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics(*from.chunk_statistics_);
  } else {
    chunk_statistics_ = nullptr;
  }
  ::memcpy(&samples_duration_, &from.samples_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_duration_) -
    reinterpret_cast<char*>(&samples_duration_)) + sizeof(seconds_duration_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
}

void GetReadStatisticsResponse_PerClassificationData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_statistics_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_duration_) -
    reinterpret_cast<char*>(&duration_statistics_)) + sizeof(seconds_duration_));
}

GetReadStatisticsResponse_PerClassificationData::~GetReadStatisticsResponse_PerClassificationData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse_PerClassificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete duration_statistics_;
  if (this != internal_default_instance()) delete current_statistics_;
  if (this != internal_default_instance()) delete chunk_statistics_;
}

void GetReadStatisticsResponse_PerClassificationData::ArenaDtor(void* object) {
  GetReadStatisticsResponse_PerClassificationData* _this = reinterpret_cast< GetReadStatisticsResponse_PerClassificationData* >(object);
  (void)_this;
}
void GetReadStatisticsResponse_PerClassificationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsResponse_PerClassificationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse_PerClassificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && duration_statistics_ != nullptr) {
    delete duration_statistics_;
  }
  duration_statistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && current_statistics_ != nullptr) {
    delete current_statistics_;
  }
  current_statistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chunk_statistics_ != nullptr) {
    delete chunk_statistics_;
  }
  chunk_statistics_ = nullptr;
  ::memset(&samples_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_duration_) -
      reinterpret_cast<char*>(&samples_duration_)) + sizeof(seconds_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse_PerClassificationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.data.GetReadStatisticsResponse.Statistics duration_statistics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetReadStatisticsResponse.Statistics current_statistics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 samples_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          seconds_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetReadStatisticsResponse.ChunkStatistics chunk_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse_PerClassificationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.data.GetReadStatisticsResponse.Statistics duration_statistics = 1;
  if (this->_internal_has_duration_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::duration_statistics(this), target, stream);
  }

  // .minknow_api.data.GetReadStatisticsResponse.Statistics current_statistics = 2;
  if (this->_internal_has_current_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::current_statistics(this), target, stream);
  }

  // uint64 samples_duration = 4;
  if (this->_internal_samples_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_samples_duration(), target);
  }

  // double seconds_duration = 5;
  if (!(this->_internal_seconds_duration() <= 0 && this->_internal_seconds_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_duration(), target);
  }

  // .minknow_api.data.GetReadStatisticsResponse.ChunkStatistics chunk_statistics = 6;
  if (this->_internal_has_chunk_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::chunk_statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  return target;
}

size_t GetReadStatisticsResponse_PerClassificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.data.GetReadStatisticsResponse.Statistics duration_statistics = 1;
  if (this->_internal_has_duration_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_statistics_);
  }

  // .minknow_api.data.GetReadStatisticsResponse.Statistics current_statistics = 2;
  if (this->_internal_has_current_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_statistics_);
  }

  // .minknow_api.data.GetReadStatisticsResponse.ChunkStatistics chunk_statistics = 6;
  if (this->_internal_has_chunk_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_statistics_);
  }

  // uint64 samples_duration = 4;
  if (this->_internal_samples_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_duration());
  }

  // double seconds_duration = 5;
  if (!(this->_internal_seconds_duration() <= 0 && this->_internal_seconds_duration() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse_PerClassificationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse_PerClassificationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse_PerClassificationData::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse_PerClassificationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse_PerClassificationData *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse_PerClassificationData &>(from));
}


void GetReadStatisticsResponse_PerClassificationData::MergeFrom(const GetReadStatisticsResponse_PerClassificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration_statistics()) {
    _internal_mutable_duration_statistics()->::minknow_api::data::GetReadStatisticsResponse_Statistics::MergeFrom(from._internal_duration_statistics());
  }
  if (from._internal_has_current_statistics()) {
    _internal_mutable_current_statistics()->::minknow_api::data::GetReadStatisticsResponse_Statistics::MergeFrom(from._internal_current_statistics());
  }
  if (from._internal_has_chunk_statistics()) {
    _internal_mutable_chunk_statistics()->::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics::MergeFrom(from._internal_chunk_statistics());
  }
  if (from._internal_samples_duration() != 0) {
    _internal_set_samples_duration(from._internal_samples_duration());
  }
  if (!(from._internal_seconds_duration() <= 0 && from._internal_seconds_duration() >= 0)) {
    _internal_set_seconds_duration(from._internal_seconds_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse_PerClassificationData::CopyFrom(const GetReadStatisticsResponse_PerClassificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse.PerClassificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse_PerClassificationData::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse_PerClassificationData::InternalSwap(GetReadStatisticsResponse_PerClassificationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerClassificationData, seconds_duration_)
      + sizeof(GetReadStatisticsResponse_PerClassificationData::seconds_duration_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerClassificationData, duration_statistics_)>(
          reinterpret_cast<char*>(&duration_statistics_),
          reinterpret_cast<char*>(&other->duration_statistics_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_PerClassificationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[28]);
}

// ===================================================================

GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse() {}
GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::MergeFrom(const GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[29]);
}

// ===================================================================

class GetReadStatisticsResponse_PerConfigurationData::_Internal {
 public:
  static const ::minknow_api::device::ReturnedChannelConfiguration& channel_configuration(const GetReadStatisticsResponse_PerConfigurationData* msg);
  static const ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData& incomplete(const GetReadStatisticsResponse_PerConfigurationData* msg);
};

const ::minknow_api::device::ReturnedChannelConfiguration&
GetReadStatisticsResponse_PerConfigurationData::_Internal::channel_configuration(const GetReadStatisticsResponse_PerConfigurationData* msg) {
  return *msg->channel_configuration_;
}
const ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData&
GetReadStatisticsResponse_PerConfigurationData::_Internal::incomplete(const GetReadStatisticsResponse_PerConfigurationData* msg) {
  return *msg->incomplete_;
}
void GetReadStatisticsResponse_PerConfigurationData::clear_channel_configuration() {
  if (GetArenaForAllocation() == nullptr && channel_configuration_ != nullptr) {
    delete channel_configuration_;
  }
  channel_configuration_ = nullptr;
}
GetReadStatisticsResponse_PerConfigurationData::GetReadStatisticsResponse_PerConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
}
GetReadStatisticsResponse_PerConfigurationData::GetReadStatisticsResponse_PerConfigurationData(const GetReadStatisticsResponse_PerConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  classifications_.MergeFrom(from.classifications_);
  if (from._internal_has_channel_configuration()) {
    channel_configuration_ = new ::minknow_api::device::ReturnedChannelConfiguration(*from.channel_configuration_);
  } else {
    channel_configuration_ = nullptr;
  }
  if (from._internal_has_incomplete()) {
    incomplete_ = new ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData(*from.incomplete_);
  } else {
    incomplete_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
}

void GetReadStatisticsResponse_PerConfigurationData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&incomplete_) -
    reinterpret_cast<char*>(&channel_configuration_)) + sizeof(incomplete_));
}

GetReadStatisticsResponse_PerConfigurationData::~GetReadStatisticsResponse_PerConfigurationData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse_PerConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_configuration_;
  if (this != internal_default_instance()) delete incomplete_;
}

void GetReadStatisticsResponse_PerConfigurationData::ArenaDtor(void* object) {
  GetReadStatisticsResponse_PerConfigurationData* _this = reinterpret_cast< GetReadStatisticsResponse_PerConfigurationData* >(object);
  (void)_this;
  _this->classifications_. ~MapField();
}
inline void GetReadStatisticsResponse_PerConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetReadStatisticsResponse_PerConfigurationData::ArenaDtor);
  }
}
void GetReadStatisticsResponse_PerConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse_PerConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  if (GetArenaForAllocation() == nullptr && channel_configuration_ != nullptr) {
    delete channel_configuration_;
  }
  channel_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && incomplete_ != nullptr) {
    delete incomplete_;
  }
  incomplete_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse_PerConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.ReturnedChannelConfiguration channel_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .minknow_api.data.GetReadStatisticsResponse.PerClassificationData> classifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&classifications_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetReadStatisticsResponse.PerClassificationData incomplete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_incomplete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse_PerConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.ReturnedChannelConfiguration channel_configuration = 1;
  if (this->_internal_has_channel_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_configuration(this), target, stream);
  }

  // map<string, .minknow_api.data.GetReadStatisticsResponse.PerClassificationData> classifications = 2;
  if (!this->_internal_classifications().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.data.GetReadStatisticsResponse.PerConfigurationData.ClassificationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_classifications().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_classifications().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >::const_iterator
          it = this->_internal_classifications().begin();
          it != this->_internal_classifications().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >::const_iterator
          it = this->_internal_classifications().begin();
          it != this->_internal_classifications().end(); ++it) {
        target = GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .minknow_api.data.GetReadStatisticsResponse.PerClassificationData incomplete = 3;
  if (this->_internal_has_incomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::incomplete(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  return target;
}

size_t GetReadStatisticsResponse_PerConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .minknow_api.data.GetReadStatisticsResponse.PerClassificationData> classifications = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_classifications_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >::const_iterator
      it = this->_internal_classifications().begin();
      it != this->_internal_classifications().end(); ++it) {
    total_size += GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .minknow_api.device.ReturnedChannelConfiguration channel_configuration = 1;
  if (this->_internal_has_channel_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_configuration_);
  }

  // .minknow_api.data.GetReadStatisticsResponse.PerClassificationData incomplete = 3;
  if (this->_internal_has_incomplete()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incomplete_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse_PerConfigurationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse_PerConfigurationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse_PerConfigurationData::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse_PerConfigurationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse_PerConfigurationData *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse_PerConfigurationData &>(from));
}


void GetReadStatisticsResponse_PerConfigurationData::MergeFrom(const GetReadStatisticsResponse_PerConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  if (from._internal_has_channel_configuration()) {
    _internal_mutable_channel_configuration()->::minknow_api::device::ReturnedChannelConfiguration::MergeFrom(from._internal_channel_configuration());
  }
  if (from._internal_has_incomplete()) {
    _internal_mutable_incomplete()->::minknow_api::data::GetReadStatisticsResponse_PerClassificationData::MergeFrom(from._internal_incomplete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse_PerConfigurationData::CopyFrom(const GetReadStatisticsResponse_PerConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse.PerConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse_PerConfigurationData::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse_PerConfigurationData::InternalSwap(GetReadStatisticsResponse_PerConfigurationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerConfigurationData, incomplete_)
      + sizeof(GetReadStatisticsResponse_PerConfigurationData::incomplete_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerConfigurationData, channel_configuration_)>(
          reinterpret_cast<char*>(&channel_configuration_),
          reinterpret_cast<char*>(&other->channel_configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_PerConfigurationData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[30]);
}

// ===================================================================

class GetReadStatisticsResponse_PerChannelData::_Internal {
 public:
};

GetReadStatisticsResponse_PerChannelData::GetReadStatisticsResponse_PerChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  configurations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
}
GetReadStatisticsResponse_PerChannelData::GetReadStatisticsResponse_PerChannelData(const GetReadStatisticsResponse_PerChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&samples_since_start_, &from.samples_since_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_duration_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_duration_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
}

void GetReadStatisticsResponse_PerChannelData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_since_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_duration_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_duration_));
}

GetReadStatisticsResponse_PerChannelData::~GetReadStatisticsResponse_PerChannelData() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse_PerChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadStatisticsResponse_PerChannelData::ArenaDtor(void* object) {
  GetReadStatisticsResponse_PerChannelData* _this = reinterpret_cast< GetReadStatisticsResponse_PerChannelData* >(object);
  (void)_this;
}
void GetReadStatisticsResponse_PerChannelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsResponse_PerChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse_PerChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configurations_.Clear();
  ::memset(&samples_since_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_duration_) -
      reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse_PerChannelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 samples_since_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          samples_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_since_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          seconds_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 samples_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          samples_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          seconds_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.data.GetReadStatisticsResponse.PerConfigurationData configurations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse_PerChannelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 samples_since_start = 2;
  if (this->_internal_samples_since_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_samples_since_start(), target);
  }

  // double seconds_since_start = 3;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_seconds_since_start(), target);
  }

  // uint64 samples_duration = 4;
  if (this->_internal_samples_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_samples_duration(), target);
  }

  // double seconds_duration = 5;
  if (!(this->_internal_seconds_duration() <= 0 && this->_internal_seconds_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_seconds_duration(), target);
  }

  // repeated .minknow_api.data.GetReadStatisticsResponse.PerConfigurationData configurations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configurations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_configurations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  return target;
}

size_t GetReadStatisticsResponse_PerChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetReadStatisticsResponse.PerConfigurationData configurations = 6;
  total_size += 1UL * this->_internal_configurations_size();
  for (const auto& msg : this->configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 samples_since_start = 2;
  if (this->_internal_samples_since_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_since_start());
  }

  // double seconds_since_start = 3;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 samples_duration = 4;
  if (this->_internal_samples_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_duration());
  }

  // double seconds_duration = 5;
  if (!(this->_internal_seconds_duration() <= 0 && this->_internal_seconds_duration() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse_PerChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse_PerChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse_PerChannelData::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse_PerChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse_PerChannelData *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse_PerChannelData &>(from));
}


void GetReadStatisticsResponse_PerChannelData::MergeFrom(const GetReadStatisticsResponse_PerChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configurations_.MergeFrom(from.configurations_);
  if (from._internal_samples_since_start() != 0) {
    _internal_set_samples_since_start(from._internal_samples_since_start());
  }
  if (!(from._internal_seconds_since_start() <= 0 && from._internal_seconds_since_start() >= 0)) {
    _internal_set_seconds_since_start(from._internal_seconds_since_start());
  }
  if (from._internal_samples_duration() != 0) {
    _internal_set_samples_duration(from._internal_samples_duration());
  }
  if (!(from._internal_seconds_duration() <= 0 && from._internal_seconds_duration() >= 0)) {
    _internal_set_seconds_duration(from._internal_seconds_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse_PerChannelData::CopyFrom(const GetReadStatisticsResponse_PerChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse.PerChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse_PerChannelData::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse_PerChannelData::InternalSwap(GetReadStatisticsResponse_PerChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  configurations_.InternalSwap(&other->configurations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerChannelData, seconds_duration_)
      + sizeof(GetReadStatisticsResponse_PerChannelData::seconds_duration_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse_PerChannelData, samples_since_start_)>(
          reinterpret_cast<char*>(&samples_since_start_),
          reinterpret_cast<char*>(&other->samples_since_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse_PerChannelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[31]);
}

// ===================================================================

class GetReadStatisticsResponse::_Internal {
 public:
};

GetReadStatisticsResponse::GetReadStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetReadStatisticsResponse)
}
GetReadStatisticsResponse::GetReadStatisticsResponse(const GetReadStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&samples_since_start_, &from.samples_since_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_since_start_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetReadStatisticsResponse)
}

void GetReadStatisticsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&samples_since_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_since_start_) -
    reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
}

GetReadStatisticsResponse::~GetReadStatisticsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetReadStatisticsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadStatisticsResponse::ArenaDtor(void* object) {
  GetReadStatisticsResponse* _this = reinterpret_cast< GetReadStatisticsResponse* >(object);
  (void)_this;
}
void GetReadStatisticsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReadStatisticsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetReadStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  ::memset(&samples_since_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_since_start_) -
      reinterpret_cast<char*>(&samples_since_start_)) + sizeof(seconds_since_start_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadStatisticsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.data.GetReadStatisticsResponse.PerChannelData channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 samples_since_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          samples_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double seconds_since_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          seconds_since_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadStatisticsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetReadStatisticsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetReadStatisticsResponse.PerChannelData channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  // uint64 samples_since_start = 2;
  if (this->_internal_samples_since_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_samples_since_start(), target);
  }

  // double seconds_since_start = 3;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_seconds_since_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetReadStatisticsResponse)
  return target;
}

size_t GetReadStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetReadStatisticsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.data.GetReadStatisticsResponse.PerChannelData channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 samples_since_start = 2;
  if (this->_internal_samples_since_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_since_start());
  }

  // double seconds_since_start = 3;
  if (!(this->_internal_seconds_since_start() <= 0 && this->_internal_seconds_since_start() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadStatisticsResponse::GetClassData() const { return &_class_data_; }

void GetReadStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadStatisticsResponse *>(to)->MergeFrom(
      static_cast<const GetReadStatisticsResponse &>(from));
}


void GetReadStatisticsResponse::MergeFrom(const GetReadStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetReadStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_samples_since_start() != 0) {
    _internal_set_samples_since_start(from._internal_samples_since_start());
  }
  if (!(from._internal_seconds_since_start() <= 0 && from._internal_seconds_since_start() >= 0)) {
    _internal_set_seconds_since_start(from._internal_seconds_since_start());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadStatisticsResponse::CopyFrom(const GetReadStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetReadStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadStatisticsResponse::IsInitialized() const {
  return true;
}

void GetReadStatisticsResponse::InternalSwap(GetReadStatisticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse, seconds_since_start_)
      + sizeof(GetReadStatisticsResponse::seconds_since_start_)
      - PROTOBUF_FIELD_OFFSET(GetReadStatisticsResponse, samples_since_start_)>(
          reinterpret_cast<char*>(&samples_since_start_),
          reinterpret_cast<char*>(&other->samples_since_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadStatisticsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[32]);
}

// ===================================================================

class LockChannelStatesRequest::_Internal {
 public:
};

LockChannelStatesRequest::LockChannelStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.LockChannelStatesRequest)
}
LockChannelStatesRequest::LockChannelStatesRequest(const LockChannelStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_name().empty()) {
    state_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.LockChannelStatesRequest)
}

void LockChannelStatesRequest::SharedCtor() {
state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LockChannelStatesRequest::~LockChannelStatesRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.LockChannelStatesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LockChannelStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockChannelStatesRequest::ArenaDtor(void* object) {
  LockChannelStatesRequest* _this = reinterpret_cast< LockChannelStatesRequest* >(object);
  (void)_this;
}
void LockChannelStatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockChannelStatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LockChannelStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.LockChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  state_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockChannelStatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string state_name = 2 [(.minknow_api.rpc_required) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.data.LockChannelStatesRequest.state_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockChannelStatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.LockChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  // string state_name = 2 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_state_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.data.LockChannelStatesRequest.state_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.LockChannelStatesRequest)
  return target;
}

size_t LockChannelStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.LockChannelStatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string state_name = 2 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_state_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockChannelStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LockChannelStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockChannelStatesRequest::GetClassData() const { return &_class_data_; }

void LockChannelStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LockChannelStatesRequest *>(to)->MergeFrom(
      static_cast<const LockChannelStatesRequest &>(from));
}


void LockChannelStatesRequest::MergeFrom(const LockChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.LockChannelStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (!from._internal_state_name().empty()) {
    _internal_set_state_name(from._internal_state_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LockChannelStatesRequest::CopyFrom(const LockChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.LockChannelStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockChannelStatesRequest::IsInitialized() const {
  return true;
}

void LockChannelStatesRequest::InternalSwap(LockChannelStatesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_name_, lhs_arena,
      &other->state_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LockChannelStatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[33]);
}

// ===================================================================

class LockChannelStatesResponse::_Internal {
 public:
};

LockChannelStatesResponse::LockChannelStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.LockChannelStatesResponse)
}
LockChannelStatesResponse::LockChannelStatesResponse(const LockChannelStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.LockChannelStatesResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockChannelStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockChannelStatesResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LockChannelStatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[34]);
}

// ===================================================================

class UnlockChannelStatesRequest::_Internal {
 public:
};

UnlockChannelStatesRequest::UnlockChannelStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.UnlockChannelStatesRequest)
}
UnlockChannelStatesRequest::UnlockChannelStatesRequest(const UnlockChannelStatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.UnlockChannelStatesRequest)
}

void UnlockChannelStatesRequest::SharedCtor() {
}

UnlockChannelStatesRequest::~UnlockChannelStatesRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.data.UnlockChannelStatesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnlockChannelStatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnlockChannelStatesRequest::ArenaDtor(void* object) {
  UnlockChannelStatesRequest* _this = reinterpret_cast< UnlockChannelStatesRequest* >(object);
  (void)_this;
}
void UnlockChannelStatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlockChannelStatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnlockChannelStatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.UnlockChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlockChannelStatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlockChannelStatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.UnlockChannelStatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.UnlockChannelStatesRequest)
  return target;
}

size_t UnlockChannelStatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.UnlockChannelStatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 channels = 1 [(.minknow_api.rpc_required) = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockChannelStatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnlockChannelStatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockChannelStatesRequest::GetClassData() const { return &_class_data_; }

void UnlockChannelStatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnlockChannelStatesRequest *>(to)->MergeFrom(
      static_cast<const UnlockChannelStatesRequest &>(from));
}


void UnlockChannelStatesRequest::MergeFrom(const UnlockChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.UnlockChannelStatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnlockChannelStatesRequest::CopyFrom(const UnlockChannelStatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.UnlockChannelStatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockChannelStatesRequest::IsInitialized() const {
  return true;
}

void UnlockChannelStatesRequest::InternalSwap(UnlockChannelStatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlockChannelStatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[35]);
}

// ===================================================================

class UnlockChannelStatesResponse::_Internal {
 public:
};

UnlockChannelStatesResponse::UnlockChannelStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.UnlockChannelStatesResponse)
}
UnlockChannelStatesResponse::UnlockChannelStatesResponse(const UnlockChannelStatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.UnlockChannelStatesResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockChannelStatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockChannelStatesResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnlockChannelStatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[36]);
}

// ===================================================================

class GetExperimentYieldInfoRequest::_Internal {
 public:
};

GetExperimentYieldInfoRequest::GetExperimentYieldInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoRequest)
}
GetExperimentYieldInfoRequest::GetExperimentYieldInfoRequest(const GetExperimentYieldInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[37]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_CompleteReadInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_CompleteReadInfo::GetExperimentYieldInfoResponse_CompleteReadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
}
GetExperimentYieldInfoResponse_CompleteReadInfo::GetExperimentYieldInfoResponse_CompleteReadInfo(const GetExperimentYieldInfoResponse_CompleteReadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pending_chunks_, &from.pending_chunks_,
    static_cast<size_t>(reinterpret_cast<char*>(&stored_read_supporting_bytes_memory_) -
    reinterpret_cast<char*>(&pending_chunks_)) + sizeof(stored_read_supporting_bytes_memory_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
}

void GetExperimentYieldInfoResponse_CompleteReadInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pending_chunks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stored_read_supporting_bytes_memory_) -
    reinterpret_cast<char*>(&pending_chunks_)) + sizeof(stored_read_supporting_bytes_memory_));
}

GetExperimentYieldInfoResponse_CompleteReadInfo::~GetExperimentYieldInfoResponse_CompleteReadInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_CompleteReadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_CompleteReadInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_CompleteReadInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_CompleteReadInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_CompleteReadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_CompleteReadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_CompleteReadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pending_chunks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stored_read_supporting_bytes_memory_) -
      reinterpret_cast<char*>(&pending_chunks_)) + sizeof(stored_read_supporting_bytes_memory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_CompleteReadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pending_chunks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_memory_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_memory_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_multi_disk_reads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pending_multi_disk_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_skipped_reads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pending_skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_force_skipped_reads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pending_force_skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed_memory_reads = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          processed_memory_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed_disk_reads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          processed_disk_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed_skipped_reads = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          processed_skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed_force_skipped_reads = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          processed_force_skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stored_reads_bytes_memory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stored_reads_bytes_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stored_reads_bytes_disk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          stored_reads_bytes_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 discarded_error_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          discarded_error_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 channels_writing_to_disk = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          channels_writing_to_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 channels_writing_to_disk_tmp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          channels_writing_to_disk_tmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_disk_reads = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          pending_disk_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stored_read_supporting_bytes_memory = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          stored_read_supporting_bytes_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_CompleteReadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pending_chunks = 1;
  if (this->_internal_pending_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pending_chunks(), target);
  }

  // uint64 pending_memory_reads = 2;
  if (this->_internal_pending_memory_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pending_memory_reads(), target);
  }

  // uint64 pending_multi_disk_reads = 3;
  if (this->_internal_pending_multi_disk_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pending_multi_disk_reads(), target);
  }

  // uint64 pending_skipped_reads = 4;
  if (this->_internal_pending_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pending_skipped_reads(), target);
  }

  // uint64 pending_force_skipped_reads = 5;
  if (this->_internal_pending_force_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_pending_force_skipped_reads(), target);
  }

  // uint64 processed_memory_reads = 6;
  if (this->_internal_processed_memory_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_processed_memory_reads(), target);
  }

  // uint64 processed_disk_reads = 7;
  if (this->_internal_processed_disk_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_processed_disk_reads(), target);
  }

  // uint64 processed_skipped_reads = 8;
  if (this->_internal_processed_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_processed_skipped_reads(), target);
  }

  // uint64 processed_force_skipped_reads = 9;
  if (this->_internal_processed_force_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_processed_force_skipped_reads(), target);
  }

  // uint64 stored_reads_bytes_memory = 10;
  if (this->_internal_stored_reads_bytes_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_stored_reads_bytes_memory(), target);
  }

  // uint64 stored_reads_bytes_disk = 11;
  if (this->_internal_stored_reads_bytes_disk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_stored_reads_bytes_disk(), target);
  }

  // uint64 discarded_error_bytes = 12;
  if (this->_internal_discarded_error_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_discarded_error_bytes(), target);
  }

  // uint64 channels_writing_to_disk = 13;
  if (this->_internal_channels_writing_to_disk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_channels_writing_to_disk(), target);
  }

  // uint64 channels_writing_to_disk_tmp = 14;
  if (this->_internal_channels_writing_to_disk_tmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_channels_writing_to_disk_tmp(), target);
  }

  // uint64 pending_disk_reads = 15;
  if (this->_internal_pending_disk_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_pending_disk_reads(), target);
  }

  // uint64 stored_read_supporting_bytes_memory = 16;
  if (this->_internal_stored_read_supporting_bytes_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_stored_read_supporting_bytes_memory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_CompleteReadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pending_chunks = 1;
  if (this->_internal_pending_chunks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_chunks());
  }

  // uint64 pending_memory_reads = 2;
  if (this->_internal_pending_memory_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_memory_reads());
  }

  // uint64 pending_multi_disk_reads = 3;
  if (this->_internal_pending_multi_disk_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_multi_disk_reads());
  }

  // uint64 pending_skipped_reads = 4;
  if (this->_internal_pending_skipped_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_skipped_reads());
  }

  // uint64 pending_force_skipped_reads = 5;
  if (this->_internal_pending_force_skipped_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_force_skipped_reads());
  }

  // uint64 processed_memory_reads = 6;
  if (this->_internal_processed_memory_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_processed_memory_reads());
  }

  // uint64 processed_disk_reads = 7;
  if (this->_internal_processed_disk_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_processed_disk_reads());
  }

  // uint64 processed_skipped_reads = 8;
  if (this->_internal_processed_skipped_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_processed_skipped_reads());
  }

  // uint64 processed_force_skipped_reads = 9;
  if (this->_internal_processed_force_skipped_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_processed_force_skipped_reads());
  }

  // uint64 stored_reads_bytes_memory = 10;
  if (this->_internal_stored_reads_bytes_memory() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_stored_reads_bytes_memory());
  }

  // uint64 stored_reads_bytes_disk = 11;
  if (this->_internal_stored_reads_bytes_disk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_stored_reads_bytes_disk());
  }

  // uint64 discarded_error_bytes = 12;
  if (this->_internal_discarded_error_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_discarded_error_bytes());
  }

  // uint64 channels_writing_to_disk = 13;
  if (this->_internal_channels_writing_to_disk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_channels_writing_to_disk());
  }

  // uint64 channels_writing_to_disk_tmp = 14;
  if (this->_internal_channels_writing_to_disk_tmp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_channels_writing_to_disk_tmp());
  }

  // uint64 pending_disk_reads = 15;
  if (this->_internal_pending_disk_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_disk_reads());
  }

  // uint64 stored_read_supporting_bytes_memory = 16;
  if (this->_internal_stored_read_supporting_bytes_memory() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_read_supporting_bytes_memory());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_CompleteReadInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_CompleteReadInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_CompleteReadInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_CompleteReadInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_CompleteReadInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_CompleteReadInfo &>(from));
}


void GetExperimentYieldInfoResponse_CompleteReadInfo::MergeFrom(const GetExperimentYieldInfoResponse_CompleteReadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pending_chunks() != 0) {
    _internal_set_pending_chunks(from._internal_pending_chunks());
  }
  if (from._internal_pending_memory_reads() != 0) {
    _internal_set_pending_memory_reads(from._internal_pending_memory_reads());
  }
  if (from._internal_pending_multi_disk_reads() != 0) {
    _internal_set_pending_multi_disk_reads(from._internal_pending_multi_disk_reads());
  }
  if (from._internal_pending_skipped_reads() != 0) {
    _internal_set_pending_skipped_reads(from._internal_pending_skipped_reads());
  }
  if (from._internal_pending_force_skipped_reads() != 0) {
    _internal_set_pending_force_skipped_reads(from._internal_pending_force_skipped_reads());
  }
  if (from._internal_processed_memory_reads() != 0) {
    _internal_set_processed_memory_reads(from._internal_processed_memory_reads());
  }
  if (from._internal_processed_disk_reads() != 0) {
    _internal_set_processed_disk_reads(from._internal_processed_disk_reads());
  }
  if (from._internal_processed_skipped_reads() != 0) {
    _internal_set_processed_skipped_reads(from._internal_processed_skipped_reads());
  }
  if (from._internal_processed_force_skipped_reads() != 0) {
    _internal_set_processed_force_skipped_reads(from._internal_processed_force_skipped_reads());
  }
  if (from._internal_stored_reads_bytes_memory() != 0) {
    _internal_set_stored_reads_bytes_memory(from._internal_stored_reads_bytes_memory());
  }
  if (from._internal_stored_reads_bytes_disk() != 0) {
    _internal_set_stored_reads_bytes_disk(from._internal_stored_reads_bytes_disk());
  }
  if (from._internal_discarded_error_bytes() != 0) {
    _internal_set_discarded_error_bytes(from._internal_discarded_error_bytes());
  }
  if (from._internal_channels_writing_to_disk() != 0) {
    _internal_set_channels_writing_to_disk(from._internal_channels_writing_to_disk());
  }
  if (from._internal_channels_writing_to_disk_tmp() != 0) {
    _internal_set_channels_writing_to_disk_tmp(from._internal_channels_writing_to_disk_tmp());
  }
  if (from._internal_pending_disk_reads() != 0) {
    _internal_set_pending_disk_reads(from._internal_pending_disk_reads());
  }
  if (from._internal_stored_read_supporting_bytes_memory() != 0) {
    _internal_set_stored_read_supporting_bytes_memory(from._internal_stored_read_supporting_bytes_memory());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_CompleteReadInfo::CopyFrom(const GetExperimentYieldInfoResponse_CompleteReadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_CompleteReadInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_CompleteReadInfo::InternalSwap(GetExperimentYieldInfoResponse_CompleteReadInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_CompleteReadInfo, stored_read_supporting_bytes_memory_)
      + sizeof(GetExperimentYieldInfoResponse_CompleteReadInfo::stored_read_supporting_bytes_memory_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_CompleteReadInfo, pending_chunks_)>(
          reinterpret_cast<char*>(&pending_chunks_),
          reinterpret_cast<char*>(&other->pending_chunks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_CompleteReadInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[38]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_AcquisitionInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_AcquisitionInfo::GetExperimentYieldInfoResponse_AcquisitionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
}
GetExperimentYieldInfoResponse_AcquisitionInfo::GetExperimentYieldInfoResponse_AcquisitionInfo(const GetExperimentYieldInfoResponse_AcquisitionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&raw_per_channel_, &from.raw_per_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_discontinuities_) -
    reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(frame_discontinuities_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
}

void GetExperimentYieldInfoResponse_AcquisitionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raw_per_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_discontinuities_) -
    reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(frame_discontinuities_));
}

GetExperimentYieldInfoResponse_AcquisitionInfo::~GetExperimentYieldInfoResponse_AcquisitionInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_AcquisitionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_AcquisitionInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_AcquisitionInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_AcquisitionInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_AcquisitionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_AcquisitionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_AcquisitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&raw_per_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_discontinuities_) -
      reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(frame_discontinuities_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_AcquisitionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 raw_per_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          raw_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 frame_discontinuities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_discontinuities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_AcquisitionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 raw_per_channel = 1;
  if (this->_internal_raw_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_raw_per_channel(), target);
  }

  // uint64 frame_discontinuities = 2;
  if (this->_internal_frame_discontinuities() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_discontinuities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_AcquisitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 raw_per_channel = 1;
  if (this->_internal_raw_per_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raw_per_channel());
  }

  // uint64 frame_discontinuities = 2;
  if (this->_internal_frame_discontinuities() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_discontinuities());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_AcquisitionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_AcquisitionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_AcquisitionInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_AcquisitionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_AcquisitionInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_AcquisitionInfo &>(from));
}


void GetExperimentYieldInfoResponse_AcquisitionInfo::MergeFrom(const GetExperimentYieldInfoResponse_AcquisitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_raw_per_channel() != 0) {
    _internal_set_raw_per_channel(from._internal_raw_per_channel());
  }
  if (from._internal_frame_discontinuities() != 0) {
    _internal_set_frame_discontinuities(from._internal_frame_discontinuities());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_AcquisitionInfo::CopyFrom(const GetExperimentYieldInfoResponse_AcquisitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_AcquisitionInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_AcquisitionInfo::InternalSwap(GetExperimentYieldInfoResponse_AcquisitionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_AcquisitionInfo, frame_discontinuities_)
      + sizeof(GetExperimentYieldInfoResponse_AcquisitionInfo::frame_discontinuities_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_AcquisitionInfo, raw_per_channel_)>(
          reinterpret_cast<char*>(&raw_per_channel_),
          reinterpret_cast<char*>(&other->raw_per_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_AcquisitionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[39]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_AnalyserInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_AnalyserInfo::GetExperimentYieldInfoResponse_AnalyserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
}
GetExperimentYieldInfoResponse_AnalyserInfo::GetExperimentYieldInfoResponse_AnalyserInfo(const GetExperimentYieldInfoResponse_AnalyserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&raw_per_channel_, &from.raw_per_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_unselected_reads_count_) -
    reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(completed_unselected_reads_count_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
}

void GetExperimentYieldInfoResponse_AnalyserInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raw_per_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_unselected_reads_count_) -
    reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(completed_unselected_reads_count_));
}

GetExperimentYieldInfoResponse_AnalyserInfo::~GetExperimentYieldInfoResponse_AnalyserInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_AnalyserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_AnalyserInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_AnalyserInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_AnalyserInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_AnalyserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_AnalyserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_AnalyserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&raw_per_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completed_unselected_reads_count_) -
      reinterpret_cast<char*>(&raw_per_channel_)) + sizeof(completed_unselected_reads_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_AnalyserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 raw_per_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          raw_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_selected_raw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_selected_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_selected_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_selected_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_read_chunks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_read_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 completed_selected_reads_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          completed_selected_reads_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 completed_unselected_reads_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          completed_unselected_reads_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_AnalyserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 raw_per_channel = 1;
  if (this->_internal_raw_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_raw_per_channel(), target);
  }

  // uint64 total_selected_raw = 2;
  if (this->_internal_total_selected_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_selected_raw(), target);
  }

  // uint64 total_selected_events = 3;
  if (this->_internal_total_selected_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_selected_events(), target);
  }

  // uint64 total_events = 4;
  if (this->_internal_total_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_events(), target);
  }

  // uint64 total_read_chunks = 5;
  if (this->_internal_total_read_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_read_chunks(), target);
  }

  // uint64 completed_selected_reads_count = 6;
  if (this->_internal_completed_selected_reads_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_completed_selected_reads_count(), target);
  }

  // uint64 completed_unselected_reads_count = 7;
  if (this->_internal_completed_unselected_reads_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_completed_unselected_reads_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_AnalyserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 raw_per_channel = 1;
  if (this->_internal_raw_per_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raw_per_channel());
  }

  // uint64 total_selected_raw = 2;
  if (this->_internal_total_selected_raw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_selected_raw());
  }

  // uint64 total_selected_events = 3;
  if (this->_internal_total_selected_events() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_selected_events());
  }

  // uint64 total_events = 4;
  if (this->_internal_total_events() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_events());
  }

  // uint64 total_read_chunks = 5;
  if (this->_internal_total_read_chunks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_read_chunks());
  }

  // uint64 completed_selected_reads_count = 6;
  if (this->_internal_completed_selected_reads_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_completed_selected_reads_count());
  }

  // uint64 completed_unselected_reads_count = 7;
  if (this->_internal_completed_unselected_reads_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_completed_unselected_reads_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_AnalyserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_AnalyserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_AnalyserInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_AnalyserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_AnalyserInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_AnalyserInfo &>(from));
}


void GetExperimentYieldInfoResponse_AnalyserInfo::MergeFrom(const GetExperimentYieldInfoResponse_AnalyserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_raw_per_channel() != 0) {
    _internal_set_raw_per_channel(from._internal_raw_per_channel());
  }
  if (from._internal_total_selected_raw() != 0) {
    _internal_set_total_selected_raw(from._internal_total_selected_raw());
  }
  if (from._internal_total_selected_events() != 0) {
    _internal_set_total_selected_events(from._internal_total_selected_events());
  }
  if (from._internal_total_events() != 0) {
    _internal_set_total_events(from._internal_total_events());
  }
  if (from._internal_total_read_chunks() != 0) {
    _internal_set_total_read_chunks(from._internal_total_read_chunks());
  }
  if (from._internal_completed_selected_reads_count() != 0) {
    _internal_set_completed_selected_reads_count(from._internal_completed_selected_reads_count());
  }
  if (from._internal_completed_unselected_reads_count() != 0) {
    _internal_set_completed_unselected_reads_count(from._internal_completed_unselected_reads_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_AnalyserInfo::CopyFrom(const GetExperimentYieldInfoResponse_AnalyserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_AnalyserInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_AnalyserInfo::InternalSwap(GetExperimentYieldInfoResponse_AnalyserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_AnalyserInfo, completed_unselected_reads_count_)
      + sizeof(GetExperimentYieldInfoResponse_AnalyserInfo::completed_unselected_reads_count_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_AnalyserInfo, raw_per_channel_)>(
          reinterpret_cast<char*>(&raw_per_channel_),
          reinterpret_cast<char*>(&other->raw_per_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_AnalyserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[40]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_BulkInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_BulkInfo::GetExperimentYieldInfoResponse_BulkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
}
GetExperimentYieldInfoResponse_BulkInfo::GetExperimentYieldInfoResponse_BulkInfo(const GetExperimentYieldInfoResponse_BulkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_raw_, &from.total_raw_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_events_) -
    reinterpret_cast<char*>(&total_raw_)) + sizeof(total_events_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
}

void GetExperimentYieldInfoResponse_BulkInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_raw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_events_) -
    reinterpret_cast<char*>(&total_raw_)) + sizeof(total_events_));
}

GetExperimentYieldInfoResponse_BulkInfo::~GetExperimentYieldInfoResponse_BulkInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_BulkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_BulkInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_BulkInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_BulkInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_BulkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_BulkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_BulkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_events_) -
      reinterpret_cast<char*>(&total_raw_)) + sizeof(total_events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_BulkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 total_raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_BulkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_raw = 1;
  if (this->_internal_total_raw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total_raw(), target);
  }

  // uint64 total_events = 2;
  if (this->_internal_total_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_BulkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 total_raw = 1;
  if (this->_internal_total_raw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_raw());
  }

  // uint64 total_events = 2;
  if (this->_internal_total_events() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_events());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_BulkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_BulkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_BulkInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_BulkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_BulkInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_BulkInfo &>(from));
}


void GetExperimentYieldInfoResponse_BulkInfo::MergeFrom(const GetExperimentYieldInfoResponse_BulkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_raw() != 0) {
    _internal_set_total_raw(from._internal_total_raw());
  }
  if (from._internal_total_events() != 0) {
    _internal_set_total_events(from._internal_total_events());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_BulkInfo::CopyFrom(const GetExperimentYieldInfoResponse_BulkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_BulkInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_BulkInfo::InternalSwap(GetExperimentYieldInfoResponse_BulkInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_BulkInfo, total_events_)
      + sizeof(GetExperimentYieldInfoResponse_BulkInfo::total_events_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_BulkInfo, total_raw_)>(
          reinterpret_cast<char*>(&total_raw_),
          reinterpret_cast<char*>(&other->total_raw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_BulkInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[41]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_HdfWriterInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_HdfWriterInfo::GetExperimentYieldInfoResponse_HdfWriterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
}
GetExperimentYieldInfoResponse_HdfWriterInfo::GetExperimentYieldInfoResponse_HdfWriterInfo(const GetExperimentYieldInfoResponse_HdfWriterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pending_compressions_, &from.pending_compressions_,
    static_cast<size_t>(reinterpret_cast<char*>(&dataset_bytes_data_in_flight_) -
    reinterpret_cast<char*>(&pending_compressions_)) + sizeof(dataset_bytes_data_in_flight_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
}

void GetExperimentYieldInfoResponse_HdfWriterInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pending_compressions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataset_bytes_data_in_flight_) -
    reinterpret_cast<char*>(&pending_compressions_)) + sizeof(dataset_bytes_data_in_flight_));
}

GetExperimentYieldInfoResponse_HdfWriterInfo::~GetExperimentYieldInfoResponse_HdfWriterInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_HdfWriterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_HdfWriterInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_HdfWriterInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_HdfWriterInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_HdfWriterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_HdfWriterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_HdfWriterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pending_compressions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dataset_bytes_data_in_flight_) -
      reinterpret_cast<char*>(&pending_compressions_)) + sizeof(dataset_bytes_data_in_flight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_HdfWriterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pending_compressions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_compressions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_writes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_writes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_hdf_tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pending_hdf_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 completed_writes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          completed_writes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dataset_bytes_data_in_flight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dataset_bytes_data_in_flight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_HdfWriterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pending_compressions = 1;
  if (this->_internal_pending_compressions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pending_compressions(), target);
  }

  // uint64 pending_writes = 2;
  if (this->_internal_pending_writes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pending_writes(), target);
  }

  // uint64 pending_hdf_tasks = 3;
  if (this->_internal_pending_hdf_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pending_hdf_tasks(), target);
  }

  // uint64 completed_writes = 4;
  if (this->_internal_completed_writes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_completed_writes(), target);
  }

  // uint64 dataset_bytes_data_in_flight = 5;
  if (this->_internal_dataset_bytes_data_in_flight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_dataset_bytes_data_in_flight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_HdfWriterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pending_compressions = 1;
  if (this->_internal_pending_compressions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_compressions());
  }

  // uint64 pending_writes = 2;
  if (this->_internal_pending_writes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_writes());
  }

  // uint64 pending_hdf_tasks = 3;
  if (this->_internal_pending_hdf_tasks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_hdf_tasks());
  }

  // uint64 completed_writes = 4;
  if (this->_internal_completed_writes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_completed_writes());
  }

  // uint64 dataset_bytes_data_in_flight = 5;
  if (this->_internal_dataset_bytes_data_in_flight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_dataset_bytes_data_in_flight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_HdfWriterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_HdfWriterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_HdfWriterInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_HdfWriterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_HdfWriterInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_HdfWriterInfo &>(from));
}


void GetExperimentYieldInfoResponse_HdfWriterInfo::MergeFrom(const GetExperimentYieldInfoResponse_HdfWriterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pending_compressions() != 0) {
    _internal_set_pending_compressions(from._internal_pending_compressions());
  }
  if (from._internal_pending_writes() != 0) {
    _internal_set_pending_writes(from._internal_pending_writes());
  }
  if (from._internal_pending_hdf_tasks() != 0) {
    _internal_set_pending_hdf_tasks(from._internal_pending_hdf_tasks());
  }
  if (from._internal_completed_writes() != 0) {
    _internal_set_completed_writes(from._internal_completed_writes());
  }
  if (from._internal_dataset_bytes_data_in_flight() != 0) {
    _internal_set_dataset_bytes_data_in_flight(from._internal_dataset_bytes_data_in_flight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_HdfWriterInfo::CopyFrom(const GetExperimentYieldInfoResponse_HdfWriterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_HdfWriterInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_HdfWriterInfo::InternalSwap(GetExperimentYieldInfoResponse_HdfWriterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_HdfWriterInfo, dataset_bytes_data_in_flight_)
      + sizeof(GetExperimentYieldInfoResponse_HdfWriterInfo::dataset_bytes_data_in_flight_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_HdfWriterInfo, pending_compressions_)>(
          reinterpret_cast<char*>(&pending_compressions_),
          reinterpret_cast<char*>(&other->pending_compressions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_HdfWriterInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[42]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_BasecallStatistics::_Internal {
 public:
};

GetExperimentYieldInfoResponse_BasecallStatistics::GetExperimentYieldInfoResponse_BasecallStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
}
GetExperimentYieldInfoResponse_BasecallStatistics::GetExperimentYieldInfoResponse_BasecallStatistics(const GetExperimentYieldInfoResponse_BasecallStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reads_in_progress_, &from.reads_in_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&bases_failed_called_) -
    reinterpret_cast<char*>(&reads_in_progress_)) + sizeof(bases_failed_called_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
}

void GetExperimentYieldInfoResponse_BasecallStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reads_in_progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bases_failed_called_) -
    reinterpret_cast<char*>(&reads_in_progress_)) + sizeof(bases_failed_called_));
}

GetExperimentYieldInfoResponse_BasecallStatistics::~GetExperimentYieldInfoResponse_BasecallStatistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_BasecallStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_BasecallStatistics::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_BasecallStatistics* _this = reinterpret_cast< GetExperimentYieldInfoResponse_BasecallStatistics* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_BasecallStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_BasecallStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_BasecallStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reads_in_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bases_failed_called_) -
      reinterpret_cast<char*>(&reads_in_progress_)) + sizeof(bases_failed_called_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_BasecallStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 reads_in_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reads_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reads_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_skipped = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reads_skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_force_skipped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reads_force_skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_failed_calling_filtered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reads_failed_calling_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_failed_calling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reads_failed_calling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_called = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          reads_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 samples_called = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          samples_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 samples_skipped = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          samples_skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bases_passed_called = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bases_passed_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 events_called = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          events_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bases_failed_called = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          bases_failed_called_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_BasecallStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reads_in_progress = 1;
  if (this->_internal_reads_in_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reads_in_progress(), target);
  }

  // uint64 reads_processed = 2;
  if (this->_internal_reads_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_reads_processed(), target);
  }

  // uint64 reads_skipped = 3;
  if (this->_internal_reads_skipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reads_skipped(), target);
  }

  // uint64 reads_force_skipped = 4;
  if (this->_internal_reads_force_skipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reads_force_skipped(), target);
  }

  // uint64 reads_failed_calling_filtered = 5;
  if (this->_internal_reads_failed_calling_filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_reads_failed_calling_filtered(), target);
  }

  // uint64 reads_failed_calling = 6;
  if (this->_internal_reads_failed_calling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_reads_failed_calling(), target);
  }

  // uint64 reads_called = 7;
  if (this->_internal_reads_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_reads_called(), target);
  }

  // uint64 samples_called = 8;
  if (this->_internal_samples_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_samples_called(), target);
  }

  // uint64 samples_skipped = 9;
  if (this->_internal_samples_skipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_samples_skipped(), target);
  }

  // uint64 bases_passed_called = 10;
  if (this->_internal_bases_passed_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_bases_passed_called(), target);
  }

  // uint64 events_called = 11;
  if (this->_internal_events_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_events_called(), target);
  }

  // uint64 bases_failed_called = 12;
  if (this->_internal_bases_failed_called() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_bases_failed_called(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  return target;
}

size_t GetExperimentYieldInfoResponse_BasecallStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 reads_in_progress = 1;
  if (this->_internal_reads_in_progress() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_in_progress());
  }

  // uint64 reads_processed = 2;
  if (this->_internal_reads_processed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_processed());
  }

  // uint64 reads_skipped = 3;
  if (this->_internal_reads_skipped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_skipped());
  }

  // uint64 reads_force_skipped = 4;
  if (this->_internal_reads_force_skipped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_force_skipped());
  }

  // uint64 reads_failed_calling_filtered = 5;
  if (this->_internal_reads_failed_calling_filtered() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_failed_calling_filtered());
  }

  // uint64 reads_failed_calling = 6;
  if (this->_internal_reads_failed_calling() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_failed_calling());
  }

  // uint64 reads_called = 7;
  if (this->_internal_reads_called() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_called());
  }

  // uint64 samples_called = 8;
  if (this->_internal_samples_called() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_called());
  }

  // uint64 samples_skipped = 9;
  if (this->_internal_samples_skipped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_samples_skipped());
  }

  // uint64 bases_passed_called = 10;
  if (this->_internal_bases_passed_called() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bases_passed_called());
  }

  // uint64 events_called = 11;
  if (this->_internal_events_called() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_events_called());
  }

  // uint64 bases_failed_called = 12;
  if (this->_internal_bases_failed_called() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bases_failed_called());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_BasecallStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_BasecallStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_BasecallStatistics::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_BasecallStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_BasecallStatistics *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_BasecallStatistics &>(from));
}


void GetExperimentYieldInfoResponse_BasecallStatistics::MergeFrom(const GetExperimentYieldInfoResponse_BasecallStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reads_in_progress() != 0) {
    _internal_set_reads_in_progress(from._internal_reads_in_progress());
  }
  if (from._internal_reads_processed() != 0) {
    _internal_set_reads_processed(from._internal_reads_processed());
  }
  if (from._internal_reads_skipped() != 0) {
    _internal_set_reads_skipped(from._internal_reads_skipped());
  }
  if (from._internal_reads_force_skipped() != 0) {
    _internal_set_reads_force_skipped(from._internal_reads_force_skipped());
  }
  if (from._internal_reads_failed_calling_filtered() != 0) {
    _internal_set_reads_failed_calling_filtered(from._internal_reads_failed_calling_filtered());
  }
  if (from._internal_reads_failed_calling() != 0) {
    _internal_set_reads_failed_calling(from._internal_reads_failed_calling());
  }
  if (from._internal_reads_called() != 0) {
    _internal_set_reads_called(from._internal_reads_called());
  }
  if (from._internal_samples_called() != 0) {
    _internal_set_samples_called(from._internal_samples_called());
  }
  if (from._internal_samples_skipped() != 0) {
    _internal_set_samples_skipped(from._internal_samples_skipped());
  }
  if (from._internal_bases_passed_called() != 0) {
    _internal_set_bases_passed_called(from._internal_bases_passed_called());
  }
  if (from._internal_events_called() != 0) {
    _internal_set_events_called(from._internal_events_called());
  }
  if (from._internal_bases_failed_called() != 0) {
    _internal_set_bases_failed_called(from._internal_bases_failed_called());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_BasecallStatistics::CopyFrom(const GetExperimentYieldInfoResponse_BasecallStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_BasecallStatistics::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_BasecallStatistics::InternalSwap(GetExperimentYieldInfoResponse_BasecallStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_BasecallStatistics, bases_failed_called_)
      + sizeof(GetExperimentYieldInfoResponse_BasecallStatistics::bases_failed_called_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_BasecallStatistics, reads_in_progress_)>(
          reinterpret_cast<char*>(&reads_in_progress_),
          reinterpret_cast<char*>(&other->reads_in_progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_BasecallStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[43]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::_Internal {
 public:
};

GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
}
GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics(const GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reads_written_, &from.reads_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&basecall_events_bytes_written_) -
    reinterpret_cast<char*>(&reads_written_)) + sizeof(basecall_events_bytes_written_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
}

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reads_written_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&basecall_events_bytes_written_) -
    reinterpret_cast<char*>(&reads_written_)) + sizeof(basecall_events_bytes_written_));
}

GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::~GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics* _this = reinterpret_cast< GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reads_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basecall_events_bytes_written_) -
      reinterpret_cast<char*>(&reads_written_)) + sizeof(basecall_events_bytes_written_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 reads_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 passed_reads_written = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          passed_reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 failed_reads_written = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          failed_reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 force_skipped_reads_written = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          force_skipped_reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 raw_bytes_written = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          raw_bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fastq_bytes_written = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fastq_bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 basecall_events_bytes_written = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          basecall_events_bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reads_written = 1;
  if (this->_internal_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reads_written(), target);
  }

  // uint64 passed_reads_written = 2;
  if (this->_internal_passed_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_passed_reads_written(), target);
  }

  // uint64 failed_reads_written = 3;
  if (this->_internal_failed_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_failed_reads_written(), target);
  }

  // uint64 force_skipped_reads_written = 4;
  if (this->_internal_force_skipped_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_force_skipped_reads_written(), target);
  }

  // uint64 raw_bytes_written = 5;
  if (this->_internal_raw_bytes_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_raw_bytes_written(), target);
  }

  // uint64 fastq_bytes_written = 6;
  if (this->_internal_fastq_bytes_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_fastq_bytes_written(), target);
  }

  // uint64 basecall_events_bytes_written = 7;
  if (this->_internal_basecall_events_bytes_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_basecall_events_bytes_written(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  return target;
}

size_t GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 reads_written = 1;
  if (this->_internal_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_written());
  }

  // uint64 passed_reads_written = 2;
  if (this->_internal_passed_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_passed_reads_written());
  }

  // uint64 failed_reads_written = 3;
  if (this->_internal_failed_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_failed_reads_written());
  }

  // uint64 force_skipped_reads_written = 4;
  if (this->_internal_force_skipped_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_force_skipped_reads_written());
  }

  // uint64 raw_bytes_written = 5;
  if (this->_internal_raw_bytes_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_raw_bytes_written());
  }

  // uint64 fastq_bytes_written = 6;
  if (this->_internal_fastq_bytes_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_fastq_bytes_written());
  }

  // uint64 basecall_events_bytes_written = 7;
  if (this->_internal_basecall_events_bytes_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_basecall_events_bytes_written());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics &>(from));
}


void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::MergeFrom(const GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reads_written() != 0) {
    _internal_set_reads_written(from._internal_reads_written());
  }
  if (from._internal_passed_reads_written() != 0) {
    _internal_set_passed_reads_written(from._internal_passed_reads_written());
  }
  if (from._internal_failed_reads_written() != 0) {
    _internal_set_failed_reads_written(from._internal_failed_reads_written());
  }
  if (from._internal_force_skipped_reads_written() != 0) {
    _internal_set_force_skipped_reads_written(from._internal_force_skipped_reads_written());
  }
  if (from._internal_raw_bytes_written() != 0) {
    _internal_set_raw_bytes_written(from._internal_raw_bytes_written());
  }
  if (from._internal_fastq_bytes_written() != 0) {
    _internal_set_fastq_bytes_written(from._internal_fastq_bytes_written());
  }
  if (from._internal_basecall_events_bytes_written() != 0) {
    _internal_set_basecall_events_bytes_written(from._internal_basecall_events_bytes_written());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::CopyFrom(const GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::InternalSwap(GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, basecall_events_bytes_written_)
      + sizeof(GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::basecall_events_bytes_written_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics, reads_written_)>(
          reinterpret_cast<char*>(&reads_written_),
          reinterpret_cast<char*>(&other->reads_written_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[44]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_FastqReadWritingStatistics::_Internal {
 public:
};

GetExperimentYieldInfoResponse_FastqReadWritingStatistics::GetExperimentYieldInfoResponse_FastqReadWritingStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
}
GetExperimentYieldInfoResponse_FastqReadWritingStatistics::GetExperimentYieldInfoResponse_FastqReadWritingStatistics(const GetExperimentYieldInfoResponse_FastqReadWritingStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&passed_reads_written_, &from.passed_reads_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_reads_discarded_) -
    reinterpret_cast<char*>(&passed_reads_written_)) + sizeof(failed_reads_discarded_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
}

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&passed_reads_written_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failed_reads_discarded_) -
    reinterpret_cast<char*>(&passed_reads_written_)) + sizeof(failed_reads_discarded_));
}

GetExperimentYieldInfoResponse_FastqReadWritingStatistics::~GetExperimentYieldInfoResponse_FastqReadWritingStatistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_FastqReadWritingStatistics* _this = reinterpret_cast< GetExperimentYieldInfoResponse_FastqReadWritingStatistics* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&passed_reads_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_reads_discarded_) -
      reinterpret_cast<char*>(&passed_reads_written_)) + sizeof(failed_reads_discarded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_FastqReadWritingStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 passed_reads_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          passed_reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 skipped_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 forced_skipped = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          forced_skipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 failed_reads_written = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          failed_reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 failed_reads_discarded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          failed_reads_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_FastqReadWritingStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 passed_reads_written = 1;
  if (this->_internal_passed_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_passed_reads_written(), target);
  }

  // uint64 skipped_reads = 2;
  if (this->_internal_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_skipped_reads(), target);
  }

  // uint64 forced_skipped = 3;
  if (this->_internal_forced_skipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_forced_skipped(), target);
  }

  // uint64 failed_reads_written = 4;
  if (this->_internal_failed_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_failed_reads_written(), target);
  }

  // uint64 failed_reads_discarded = 5;
  if (this->_internal_failed_reads_discarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_failed_reads_discarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  return target;
}

size_t GetExperimentYieldInfoResponse_FastqReadWritingStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 passed_reads_written = 1;
  if (this->_internal_passed_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_passed_reads_written());
  }

  // uint64 skipped_reads = 2;
  if (this->_internal_skipped_reads() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_skipped_reads());
  }

  // uint64 forced_skipped = 3;
  if (this->_internal_forced_skipped() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_forced_skipped());
  }

  // uint64 failed_reads_written = 4;
  if (this->_internal_failed_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_failed_reads_written());
  }

  // uint64 failed_reads_discarded = 5;
  if (this->_internal_failed_reads_discarded() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_failed_reads_discarded());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_FastqReadWritingStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_FastqReadWritingStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_FastqReadWritingStatistics::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_FastqReadWritingStatistics *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_FastqReadWritingStatistics &>(from));
}


void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::MergeFrom(const GetExperimentYieldInfoResponse_FastqReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_passed_reads_written() != 0) {
    _internal_set_passed_reads_written(from._internal_passed_reads_written());
  }
  if (from._internal_skipped_reads() != 0) {
    _internal_set_skipped_reads(from._internal_skipped_reads());
  }
  if (from._internal_forced_skipped() != 0) {
    _internal_set_forced_skipped(from._internal_forced_skipped());
  }
  if (from._internal_failed_reads_written() != 0) {
    _internal_set_failed_reads_written(from._internal_failed_reads_written());
  }
  if (from._internal_failed_reads_discarded() != 0) {
    _internal_set_failed_reads_discarded(from._internal_failed_reads_discarded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::CopyFrom(const GetExperimentYieldInfoResponse_FastqReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_FastqReadWritingStatistics::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_FastqReadWritingStatistics::InternalSwap(GetExperimentYieldInfoResponse_FastqReadWritingStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FastqReadWritingStatistics, failed_reads_discarded_)
      + sizeof(GetExperimentYieldInfoResponse_FastqReadWritingStatistics::failed_reads_discarded_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FastqReadWritingStatistics, passed_reads_written_)>(
          reinterpret_cast<char*>(&passed_reads_written_),
          reinterpret_cast<char*>(&other->passed_reads_written_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_FastqReadWritingStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[45]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::_Internal {
 public:
};

GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
}
GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics(const GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&read_chunks_written_, &from.read_chunks_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&reads_discarded_) -
    reinterpret_cast<char*>(&read_chunks_written_)) + sizeof(reads_discarded_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
}

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_chunks_written_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reads_discarded_) -
    reinterpret_cast<char*>(&read_chunks_written_)) + sizeof(reads_discarded_));
}

GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::~GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics* _this = reinterpret_cast< GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&read_chunks_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reads_discarded_) -
      reinterpret_cast<char*>(&read_chunks_written_)) + sizeof(reads_discarded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 read_chunks_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          read_chunks_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 read_chunks_discarded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          read_chunks_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_written = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reads_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 reads_discarded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reads_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 read_chunks_written = 1;
  if (this->_internal_read_chunks_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_read_chunks_written(), target);
  }

  // uint64 read_chunks_discarded = 2;
  if (this->_internal_read_chunks_discarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_read_chunks_discarded(), target);
  }

  // uint64 reads_written = 3;
  if (this->_internal_reads_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reads_written(), target);
  }

  // uint64 reads_discarded = 4;
  if (this->_internal_reads_discarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reads_discarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  return target;
}

size_t GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 read_chunks_written = 1;
  if (this->_internal_read_chunks_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_read_chunks_written());
  }

  // uint64 read_chunks_discarded = 2;
  if (this->_internal_read_chunks_discarded() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_read_chunks_discarded());
  }

  // uint64 reads_written = 3;
  if (this->_internal_reads_written() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_written());
  }

  // uint64 reads_discarded = 4;
  if (this->_internal_reads_discarded() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_reads_discarded());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics &>(from));
}


void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::MergeFrom(const GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_read_chunks_written() != 0) {
    _internal_set_read_chunks_written(from._internal_read_chunks_written());
  }
  if (from._internal_read_chunks_discarded() != 0) {
    _internal_set_read_chunks_discarded(from._internal_read_chunks_discarded());
  }
  if (from._internal_reads_written() != 0) {
    _internal_set_reads_written(from._internal_reads_written());
  }
  if (from._internal_reads_discarded() != 0) {
    _internal_set_reads_discarded(from._internal_reads_discarded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::CopyFrom(const GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::InternalSwap(GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, reads_discarded_)
      + sizeof(GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::reads_discarded_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics, read_chunks_written_)>(
          reinterpret_cast<char*>(&read_chunks_written_),
          reinterpret_cast<char*>(&other->read_chunks_written_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[46]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::_Internal {
 public:
};

GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
}
GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo(const GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&files_moved_successfully_, &from.files_moved_successfully_,
    static_cast<size_t>(reinterpret_cast<char*>(&files_failed_to_move_) -
    reinterpret_cast<char*>(&files_moved_successfully_)) + sizeof(files_failed_to_move_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&files_moved_successfully_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&files_failed_to_move_) -
    reinterpret_cast<char*>(&files_moved_successfully_)) + sizeof(files_failed_to_move_));
}

GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::~GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo* _this = reinterpret_cast< GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&files_moved_successfully_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&files_failed_to_move_) -
      reinterpret_cast<char*>(&files_moved_successfully_)) + sizeof(files_failed_to_move_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 files_moved_successfully = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          files_moved_successfully_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 files_moved_to_fallback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          files_moved_to_fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 files_failed_to_move = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          files_failed_to_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 files_moved_successfully = 1;
  if (this->_internal_files_moved_successfully() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_files_moved_successfully(), target);
  }

  // uint64 files_moved_to_fallback = 2;
  if (this->_internal_files_moved_to_fallback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_files_moved_to_fallback(), target);
  }

  // uint64 files_failed_to_move = 3;
  if (this->_internal_files_failed_to_move() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_files_failed_to_move(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  return target;
}

size_t GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 files_moved_successfully = 1;
  if (this->_internal_files_moved_successfully() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_files_moved_successfully());
  }

  // uint64 files_moved_to_fallback = 2;
  if (this->_internal_files_moved_to_fallback() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_files_moved_to_fallback());
  }

  // uint64 files_failed_to_move = 3;
  if (this->_internal_files_failed_to_move() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_files_failed_to_move());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo &>(from));
}


void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::MergeFrom(const GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_files_moved_successfully() != 0) {
    _internal_set_files_moved_successfully(from._internal_files_moved_successfully());
  }
  if (from._internal_files_moved_to_fallback() != 0) {
    _internal_set_files_moved_to_fallback(from._internal_files_moved_to_fallback());
  }
  if (from._internal_files_failed_to_move() != 0) {
    _internal_set_files_failed_to_move(from._internal_files_failed_to_move());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::CopyFrom(const GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::InternalSwap(GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, files_failed_to_move_)
      + sizeof(GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::files_failed_to_move_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo, files_moved_successfully_)>(
          reinterpret_cast<char*>(&files_moved_successfully_),
          reinterpret_cast<char*>(&other->files_moved_successfully_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[47]);
}

// ===================================================================

class GetExperimentYieldInfoResponse_FileOperationQueueProgress::_Internal {
 public:
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo& fast5(const GetExperimentYieldInfoResponse_FileOperationQueueProgress* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo& fastq(const GetExperimentYieldInfoResponse_FileOperationQueueProgress* msg);
};

const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo&
GetExperimentYieldInfoResponse_FileOperationQueueProgress::_Internal::fast5(const GetExperimentYieldInfoResponse_FileOperationQueueProgress* msg) {
  return *msg->fast5_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo&
GetExperimentYieldInfoResponse_FileOperationQueueProgress::_Internal::fastq(const GetExperimentYieldInfoResponse_FileOperationQueueProgress* msg) {
  return *msg->fastq_;
}
GetExperimentYieldInfoResponse_FileOperationQueueProgress::GetExperimentYieldInfoResponse_FileOperationQueueProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
}
GetExperimentYieldInfoResponse_FileOperationQueueProgress::GetExperimentYieldInfoResponse_FileOperationQueueProgress(const GetExperimentYieldInfoResponse_FileOperationQueueProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fast5()) {
    fast5_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo(*from.fast5_);
  } else {
    fast5_ = nullptr;
  }
  if (from._internal_has_fastq()) {
    fastq_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo(*from.fastq_);
  } else {
    fastq_ = nullptr;
  }
  ::memcpy(&pending_operations_, &from.pending_operations_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_to_move_completed_) -
    reinterpret_cast<char*>(&pending_operations_)) + sizeof(bytes_to_move_completed_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fast5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_to_move_completed_) -
    reinterpret_cast<char*>(&fast5_)) + sizeof(bytes_to_move_completed_));
}

GetExperimentYieldInfoResponse_FileOperationQueueProgress::~GetExperimentYieldInfoResponse_FileOperationQueueProgress() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse_FileOperationQueueProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fast5_;
  if (this != internal_default_instance()) delete fastq_;
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse_FileOperationQueueProgress* _this = reinterpret_cast< GetExperimentYieldInfoResponse_FileOperationQueueProgress* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse_FileOperationQueueProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse_FileOperationQueueProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fast5_ != nullptr) {
    delete fast5_;
  }
  fast5_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fastq_ != nullptr) {
    delete fastq_;
  }
  fastq_ = nullptr;
  ::memset(&pending_operations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_to_move_completed_) -
      reinterpret_cast<char*>(&pending_operations_)) + sizeof(bytes_to_move_completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse_FileOperationQueueProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pending_operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 complete_successful_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          complete_successful_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 complete_failed_operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          complete_failed_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_to_move_posted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bytes_to_move_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_to_move_failed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_to_move_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_to_move_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bytes_to_move_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fast5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fastq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse_FileOperationQueueProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pending_operations = 1;
  if (this->_internal_pending_operations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pending_operations(), target);
  }

  // uint64 complete_successful_operations = 2;
  if (this->_internal_complete_successful_operations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_complete_successful_operations(), target);
  }

  // uint64 complete_failed_operations = 3;
  if (this->_internal_complete_failed_operations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_complete_failed_operations(), target);
  }

  // uint64 bytes_to_move_posted = 4;
  if (this->_internal_bytes_to_move_posted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bytes_to_move_posted(), target);
  }

  // uint64 bytes_to_move_failed = 5;
  if (this->_internal_bytes_to_move_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_to_move_failed(), target);
  }

  // uint64 bytes_to_move_completed = 6;
  if (this->_internal_bytes_to_move_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_to_move_completed(), target);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fast5 = 7;
  if (this->_internal_has_fast5()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fast5(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fastq = 8;
  if (this->_internal_has_fastq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fastq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  return target;
}

size_t GetExperimentYieldInfoResponse_FileOperationQueueProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fast5 = 7;
  if (this->_internal_has_fast5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast5_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress.FileTypeInfo fastq = 8;
  if (this->_internal_has_fastq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fastq_);
  }

  // uint64 pending_operations = 1;
  if (this->_internal_pending_operations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_operations());
  }

  // uint64 complete_successful_operations = 2;
  if (this->_internal_complete_successful_operations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_complete_successful_operations());
  }

  // uint64 complete_failed_operations = 3;
  if (this->_internal_complete_failed_operations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_complete_failed_operations());
  }

  // uint64 bytes_to_move_posted = 4;
  if (this->_internal_bytes_to_move_posted() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_move_posted());
  }

  // uint64 bytes_to_move_failed = 5;
  if (this->_internal_bytes_to_move_failed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_move_failed());
  }

  // uint64 bytes_to_move_completed = 6;
  if (this->_internal_bytes_to_move_completed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_move_completed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse_FileOperationQueueProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse_FileOperationQueueProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse_FileOperationQueueProgress::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse_FileOperationQueueProgress *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse_FileOperationQueueProgress &>(from));
}


void GetExperimentYieldInfoResponse_FileOperationQueueProgress::MergeFrom(const GetExperimentYieldInfoResponse_FileOperationQueueProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fast5()) {
    _internal_mutable_fast5()->::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::MergeFrom(from._internal_fast5());
  }
  if (from._internal_has_fastq()) {
    _internal_mutable_fastq()->::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo::MergeFrom(from._internal_fastq());
  }
  if (from._internal_pending_operations() != 0) {
    _internal_set_pending_operations(from._internal_pending_operations());
  }
  if (from._internal_complete_successful_operations() != 0) {
    _internal_set_complete_successful_operations(from._internal_complete_successful_operations());
  }
  if (from._internal_complete_failed_operations() != 0) {
    _internal_set_complete_failed_operations(from._internal_complete_failed_operations());
  }
  if (from._internal_bytes_to_move_posted() != 0) {
    _internal_set_bytes_to_move_posted(from._internal_bytes_to_move_posted());
  }
  if (from._internal_bytes_to_move_failed() != 0) {
    _internal_set_bytes_to_move_failed(from._internal_bytes_to_move_failed());
  }
  if (from._internal_bytes_to_move_completed() != 0) {
    _internal_set_bytes_to_move_completed(from._internal_bytes_to_move_completed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::CopyFrom(const GetExperimentYieldInfoResponse_FileOperationQueueProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse_FileOperationQueueProgress::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse_FileOperationQueueProgress::InternalSwap(GetExperimentYieldInfoResponse_FileOperationQueueProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FileOperationQueueProgress, bytes_to_move_completed_)
      + sizeof(GetExperimentYieldInfoResponse_FileOperationQueueProgress::bytes_to_move_completed_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse_FileOperationQueueProgress, fast5_)>(
          reinterpret_cast<char*>(&fast5_),
          reinterpret_cast<char*>(&other->fast5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse_FileOperationQueueProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[48]);
}

// ===================================================================

class GetExperimentYieldInfoResponse::_Internal {
 public:
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo& complete_read_info(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo& acquisition_info(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo& analyser_info(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo& bulk_info(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo& hdf_writer_info(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics& basecaller_statistics(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics& hdf_multi_read_writing_statisitics(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics& fastq_read_writing_statistics(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics& protobuf_read_writing_statistics(const GetExperimentYieldInfoResponse* msg);
  static const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress& file_operation_queue_progress(const GetExperimentYieldInfoResponse* msg);
};

const ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo&
GetExperimentYieldInfoResponse::_Internal::complete_read_info(const GetExperimentYieldInfoResponse* msg) {
  return *msg->complete_read_info_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo&
GetExperimentYieldInfoResponse::_Internal::acquisition_info(const GetExperimentYieldInfoResponse* msg) {
  return *msg->acquisition_info_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo&
GetExperimentYieldInfoResponse::_Internal::analyser_info(const GetExperimentYieldInfoResponse* msg) {
  return *msg->analyser_info_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo&
GetExperimentYieldInfoResponse::_Internal::bulk_info(const GetExperimentYieldInfoResponse* msg) {
  return *msg->bulk_info_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo&
GetExperimentYieldInfoResponse::_Internal::hdf_writer_info(const GetExperimentYieldInfoResponse* msg) {
  return *msg->hdf_writer_info_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics&
GetExperimentYieldInfoResponse::_Internal::basecaller_statistics(const GetExperimentYieldInfoResponse* msg) {
  return *msg->basecaller_statistics_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics&
GetExperimentYieldInfoResponse::_Internal::hdf_multi_read_writing_statisitics(const GetExperimentYieldInfoResponse* msg) {
  return *msg->hdf_multi_read_writing_statisitics_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics&
GetExperimentYieldInfoResponse::_Internal::fastq_read_writing_statistics(const GetExperimentYieldInfoResponse* msg) {
  return *msg->fastq_read_writing_statistics_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics&
GetExperimentYieldInfoResponse::_Internal::protobuf_read_writing_statistics(const GetExperimentYieldInfoResponse* msg) {
  return *msg->protobuf_read_writing_statistics_;
}
const ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress&
GetExperimentYieldInfoResponse::_Internal::file_operation_queue_progress(const GetExperimentYieldInfoResponse* msg) {
  return *msg->file_operation_queue_progress_;
}
GetExperimentYieldInfoResponse::GetExperimentYieldInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.data.GetExperimentYieldInfoResponse)
}
GetExperimentYieldInfoResponse::GetExperimentYieldInfoResponse(const GetExperimentYieldInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_complete_read_info()) {
    complete_read_info_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo(*from.complete_read_info_);
  } else {
    complete_read_info_ = nullptr;
  }
  if (from._internal_has_acquisition_info()) {
    acquisition_info_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo(*from.acquisition_info_);
  } else {
    acquisition_info_ = nullptr;
  }
  if (from._internal_has_analyser_info()) {
    analyser_info_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo(*from.analyser_info_);
  } else {
    analyser_info_ = nullptr;
  }
  if (from._internal_has_bulk_info()) {
    bulk_info_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo(*from.bulk_info_);
  } else {
    bulk_info_ = nullptr;
  }
  if (from._internal_has_hdf_writer_info()) {
    hdf_writer_info_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo(*from.hdf_writer_info_);
  } else {
    hdf_writer_info_ = nullptr;
  }
  if (from._internal_has_basecaller_statistics()) {
    basecaller_statistics_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics(*from.basecaller_statistics_);
  } else {
    basecaller_statistics_ = nullptr;
  }
  if (from._internal_has_hdf_multi_read_writing_statisitics()) {
    hdf_multi_read_writing_statisitics_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics(*from.hdf_multi_read_writing_statisitics_);
  } else {
    hdf_multi_read_writing_statisitics_ = nullptr;
  }
  if (from._internal_has_fastq_read_writing_statistics()) {
    fastq_read_writing_statistics_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics(*from.fastq_read_writing_statistics_);
  } else {
    fastq_read_writing_statistics_ = nullptr;
  }
  if (from._internal_has_protobuf_read_writing_statistics()) {
    protobuf_read_writing_statistics_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics(*from.protobuf_read_writing_statistics_);
  } else {
    protobuf_read_writing_statistics_ = nullptr;
  }
  if (from._internal_has_file_operation_queue_progress()) {
    file_operation_queue_progress_ = new ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress(*from.file_operation_queue_progress_);
  } else {
    file_operation_queue_progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.data.GetExperimentYieldInfoResponse)
}

void GetExperimentYieldInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&complete_read_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_operation_queue_progress_) -
    reinterpret_cast<char*>(&complete_read_info_)) + sizeof(file_operation_queue_progress_));
}

GetExperimentYieldInfoResponse::~GetExperimentYieldInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.data.GetExperimentYieldInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExperimentYieldInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete complete_read_info_;
  if (this != internal_default_instance()) delete acquisition_info_;
  if (this != internal_default_instance()) delete analyser_info_;
  if (this != internal_default_instance()) delete bulk_info_;
  if (this != internal_default_instance()) delete hdf_writer_info_;
  if (this != internal_default_instance()) delete basecaller_statistics_;
  if (this != internal_default_instance()) delete hdf_multi_read_writing_statisitics_;
  if (this != internal_default_instance()) delete fastq_read_writing_statistics_;
  if (this != internal_default_instance()) delete protobuf_read_writing_statistics_;
  if (this != internal_default_instance()) delete file_operation_queue_progress_;
}

void GetExperimentYieldInfoResponse::ArenaDtor(void* object) {
  GetExperimentYieldInfoResponse* _this = reinterpret_cast< GetExperimentYieldInfoResponse* >(object);
  (void)_this;
}
void GetExperimentYieldInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExperimentYieldInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExperimentYieldInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.data.GetExperimentYieldInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && complete_read_info_ != nullptr) {
    delete complete_read_info_;
  }
  complete_read_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acquisition_info_ != nullptr) {
    delete acquisition_info_;
  }
  acquisition_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && analyser_info_ != nullptr) {
    delete analyser_info_;
  }
  analyser_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_info_ != nullptr) {
    delete bulk_info_;
  }
  bulk_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hdf_writer_info_ != nullptr) {
    delete hdf_writer_info_;
  }
  hdf_writer_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && basecaller_statistics_ != nullptr) {
    delete basecaller_statistics_;
  }
  basecaller_statistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hdf_multi_read_writing_statisitics_ != nullptr) {
    delete hdf_multi_read_writing_statisitics_;
  }
  hdf_multi_read_writing_statisitics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fastq_read_writing_statistics_ != nullptr) {
    delete fastq_read_writing_statistics_;
  }
  fastq_read_writing_statistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protobuf_read_writing_statistics_ != nullptr) {
    delete protobuf_read_writing_statistics_;
  }
  protobuf_read_writing_statistics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && file_operation_queue_progress_ != nullptr) {
    delete file_operation_queue_progress_;
  }
  file_operation_queue_progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExperimentYieldInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo complete_read_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_complete_read_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo acquisition_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo analyser_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_analyser_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo bulk_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo hdf_writer_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf_writer_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics basecaller_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecaller_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics hdf_multi_read_writing_statisitics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf_multi_read_writing_statisitics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics fastq_read_writing_statistics = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastq_read_writing_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics protobuf_read_writing_statistics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_protobuf_read_writing_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress file_operation_queue_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_operation_queue_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExperimentYieldInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.data.GetExperimentYieldInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo complete_read_info = 1;
  if (this->_internal_has_complete_read_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::complete_read_info(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo acquisition_info = 2;
  if (this->_internal_has_acquisition_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::acquisition_info(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo analyser_info = 3;
  if (this->_internal_has_analyser_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::analyser_info(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo bulk_info = 4;
  if (this->_internal_has_bulk_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bulk_info(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo hdf_writer_info = 5;
  if (this->_internal_has_hdf_writer_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hdf_writer_info(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics basecaller_statistics = 6;
  if (this->_internal_has_basecaller_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::basecaller_statistics(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics hdf_multi_read_writing_statisitics = 7;
  if (this->_internal_has_hdf_multi_read_writing_statisitics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hdf_multi_read_writing_statisitics(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics fastq_read_writing_statistics = 8;
  if (this->_internal_has_fastq_read_writing_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fastq_read_writing_statistics(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics protobuf_read_writing_statistics = 9;
  if (this->_internal_has_protobuf_read_writing_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::protobuf_read_writing_statistics(this), target, stream);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress file_operation_queue_progress = 10;
  if (this->_internal_has_file_operation_queue_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::file_operation_queue_progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.data.GetExperimentYieldInfoResponse)
  return target;
}

size_t GetExperimentYieldInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.data.GetExperimentYieldInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.data.GetExperimentYieldInfoResponse.CompleteReadInfo complete_read_info = 1;
  if (this->_internal_has_complete_read_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *complete_read_info_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.AcquisitionInfo acquisition_info = 2;
  if (this->_internal_has_acquisition_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acquisition_info_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.AnalyserInfo analyser_info = 3;
  if (this->_internal_has_analyser_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *analyser_info_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.BulkInfo bulk_info = 4;
  if (this->_internal_has_bulk_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_info_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.HdfWriterInfo hdf_writer_info = 5;
  if (this->_internal_has_hdf_writer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdf_writer_info_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.BasecallStatistics basecaller_statistics = 6;
  if (this->_internal_has_basecaller_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basecaller_statistics_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.HdfMultiReadWritingStatistics hdf_multi_read_writing_statisitics = 7;
  if (this->_internal_has_hdf_multi_read_writing_statisitics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdf_multi_read_writing_statisitics_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FastqReadWritingStatistics fastq_read_writing_statistics = 8;
  if (this->_internal_has_fastq_read_writing_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fastq_read_writing_statistics_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.ProtobufReadWritingStatistics protobuf_read_writing_statistics = 9;
  if (this->_internal_has_protobuf_read_writing_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protobuf_read_writing_statistics_);
  }

  // .minknow_api.data.GetExperimentYieldInfoResponse.FileOperationQueueProgress file_operation_queue_progress = 10;
  if (this->_internal_has_file_operation_queue_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_operation_queue_progress_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExperimentYieldInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExperimentYieldInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExperimentYieldInfoResponse::GetClassData() const { return &_class_data_; }

void GetExperimentYieldInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExperimentYieldInfoResponse *>(to)->MergeFrom(
      static_cast<const GetExperimentYieldInfoResponse &>(from));
}


void GetExperimentYieldInfoResponse::MergeFrom(const GetExperimentYieldInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.data.GetExperimentYieldInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_complete_read_info()) {
    _internal_mutable_complete_read_info()->::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo::MergeFrom(from._internal_complete_read_info());
  }
  if (from._internal_has_acquisition_info()) {
    _internal_mutable_acquisition_info()->::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo::MergeFrom(from._internal_acquisition_info());
  }
  if (from._internal_has_analyser_info()) {
    _internal_mutable_analyser_info()->::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo::MergeFrom(from._internal_analyser_info());
  }
  if (from._internal_has_bulk_info()) {
    _internal_mutable_bulk_info()->::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo::MergeFrom(from._internal_bulk_info());
  }
  if (from._internal_has_hdf_writer_info()) {
    _internal_mutable_hdf_writer_info()->::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo::MergeFrom(from._internal_hdf_writer_info());
  }
  if (from._internal_has_basecaller_statistics()) {
    _internal_mutable_basecaller_statistics()->::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics::MergeFrom(from._internal_basecaller_statistics());
  }
  if (from._internal_has_hdf_multi_read_writing_statisitics()) {
    _internal_mutable_hdf_multi_read_writing_statisitics()->::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics::MergeFrom(from._internal_hdf_multi_read_writing_statisitics());
  }
  if (from._internal_has_fastq_read_writing_statistics()) {
    _internal_mutable_fastq_read_writing_statistics()->::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics::MergeFrom(from._internal_fastq_read_writing_statistics());
  }
  if (from._internal_has_protobuf_read_writing_statistics()) {
    _internal_mutable_protobuf_read_writing_statistics()->::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics::MergeFrom(from._internal_protobuf_read_writing_statistics());
  }
  if (from._internal_has_file_operation_queue_progress()) {
    _internal_mutable_file_operation_queue_progress()->::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress::MergeFrom(from._internal_file_operation_queue_progress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExperimentYieldInfoResponse::CopyFrom(const GetExperimentYieldInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.data.GetExperimentYieldInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExperimentYieldInfoResponse::IsInitialized() const {
  return true;
}

void GetExperimentYieldInfoResponse::InternalSwap(GetExperimentYieldInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse, file_operation_queue_progress_)
      + sizeof(GetExperimentYieldInfoResponse::file_operation_queue_progress_)
      - PROTOBUF_FIELD_OFFSET(GetExperimentYieldInfoResponse, complete_read_info_)>(
          reinterpret_cast<char*>(&complete_read_info_),
          reinterpret_cast<char*>(&other->complete_read_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExperimentYieldInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdata_2eproto_getter, &descriptor_table_minknow_5fapi_2fdata_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdata_2eproto[49]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetChannelStatesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetChannelStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetChannelStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetChannelStatesResponse_ChannelStateData* Arena::CreateMaybeMessage< ::minknow_api::data::GetChannelStatesResponse_ChannelStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetChannelStatesResponse_ChannelStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetChannelStatesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetChannelStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetChannelStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetDataTypesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetDataTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetDataTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetDataTypesResponse_DataType* Arena::CreateMaybeMessage< ::minknow_api::data::GetDataTypesResponse_DataType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetDataTypesResponse_DataType >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetDataTypesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetDataTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetDataTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalBytesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalBytesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalBytesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalBytesResponse_ChannelConfigChange >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalBytesResponse_ChannelData* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalBytesResponse_ChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalBytesResponse_ChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalBytesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalBytesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalBytesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalMinMaxRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalMinMaxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalMinMaxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalMinMaxResponse_ChannelData* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalMinMaxResponse_ChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalMinMaxResponse_ChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetSignalMinMaxResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetSignalMinMaxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetSignalMinMaxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest_UnblockAction* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest_UnblockAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest_UnblockAction >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest_StopFurtherData* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest_StopFurtherData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest_StopFurtherData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest_Action* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest_StreamSetup* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest_StreamSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest_StreamSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest_Actions* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest_Actions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest_Actions >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsResponse_ReadData* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsResponse_ReadData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsResponse_ReadData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsResponse_ActionResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsResponse_ActionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsResponse_ActionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsResponse_ChannelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetLiveReadsResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetLiveReadsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetLiveReadsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::ResetChannelStatesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::ResetChannelStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::ResetChannelStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::ResetChannelStatesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::ResetChannelStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::ResetChannelStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_Statistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_ChunkStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_PerClassificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData_ClassificationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_PerConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse_PerChannelData* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse_PerChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse_PerChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetReadStatisticsResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetReadStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetReadStatisticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::LockChannelStatesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::LockChannelStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::LockChannelStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::LockChannelStatesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::LockChannelStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::LockChannelStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::UnlockChannelStatesRequest* Arena::CreateMaybeMessage< ::minknow_api::data::UnlockChannelStatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::UnlockChannelStatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::UnlockChannelStatesResponse* Arena::CreateMaybeMessage< ::minknow_api::data::UnlockChannelStatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::UnlockChannelStatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_CompleteReadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_AcquisitionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_AnalyserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_BulkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_HdfWriterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_BasecallStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_HdfMultiReadWritingStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_FastqReadWritingStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_ProtobufReadWritingStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress_FileTypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse_FileOperationQueueProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::data::GetExperimentYieldInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::data::GetExperimentYieldInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::data::GetExperimentYieldInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
