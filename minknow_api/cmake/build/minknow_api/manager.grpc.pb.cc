// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/manager.proto

#include "minknow_api/manager.pb.h"
#include "minknow_api/manager.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace manager {

static const char* ManagerService_method_names[] = {
  "/minknow_api.manager.ManagerService/describe_host",
  "/minknow_api.manager.ManagerService/flow_cell_positions",
  "/minknow_api.manager.ManagerService/watch_flow_cell_positions",
  "/minknow_api.manager.ManagerService/reset_position",
  "/minknow_api.manager.ManagerService/basecaller_api",
  "/minknow_api.manager.ManagerService/get_guppy_info",
  "/minknow_api.manager.ManagerService/get_version_info",
  "/minknow_api.manager.ManagerService/list_protocol_output_dir_files",
  "/minknow_api.manager.ManagerService/create_directory",
  "/minknow_api.manager.ManagerService/get_disk_space_info",
  "/minknow_api.manager.ManagerService/get_default_output_directories",
  "/minknow_api.manager.ManagerService/stream_disk_space_info",
  "/minknow_api.manager.ManagerService/get_barcode_kit_info",
  "/minknow_api.manager.ManagerService/get_lamp_kit_info",
  "/minknow_api.manager.ManagerService/get_barcode_keys",
  "/minknow_api.manager.ManagerService/get_flow_cell_types",
  "/minknow_api.manager.ManagerService/get_sequencing_kits",
  "/minknow_api.manager.ManagerService/add_simulated_device",
  "/minknow_api.manager.ManagerService/remove_simulated_device",
  "/minknow_api.manager.ManagerService/local_authentication_token_path",
  "/minknow_api.manager.ManagerService/get_alignment_reference_information",
  "/minknow_api.manager.ManagerService/association_device_code",
  "/minknow_api.manager.ManagerService/apply_offline_association_unlock_code",
  "/minknow_api.manager.ManagerService/list_developer_api_tokens",
  "/minknow_api.manager.ManagerService/create_developer_api_token",
  "/minknow_api.manager.ManagerService/revoke_developer_api_token",
  "/minknow_api.manager.ManagerService/find_protocols",
};

std::unique_ptr< ManagerService::Stub> ManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ManagerService::Stub> stub(new ManagerService::Stub(channel, options));
  return stub;
}

ManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_describe_host_(ManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_flow_cell_positions_(ManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_watch_flow_cell_positions_(ManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_reset_position_(ManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_basecaller_api_(ManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_guppy_info_(ManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_version_info_(ManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_protocol_output_dir_files_(ManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_create_directory_(ManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_disk_space_info_(ManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_default_output_directories_(ManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_disk_space_info_(ManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_get_barcode_kit_info_(ManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_lamp_kit_info_(ManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_barcode_keys_(ManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_flow_cell_types_(ManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_sequencing_kits_(ManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_simulated_device_(ManagerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_simulated_device_(ManagerService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_local_authentication_token_path_(ManagerService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_alignment_reference_information_(ManagerService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_association_device_code_(ManagerService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_apply_offline_association_unlock_code_(ManagerService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_developer_api_tokens_(ManagerService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_developer_api_token_(ManagerService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_revoke_developer_api_token_(ManagerService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_find_protocols_(ManagerService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ManagerService::Stub::describe_host(::grpc::ClientContext* context, const ::minknow_api::manager::DescribeHostRequest& request, ::minknow_api::manager::DescribeHostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::DescribeHostRequest, ::minknow_api::manager::DescribeHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_describe_host_, context, request, response);
}

void ManagerService::Stub::async::describe_host(::grpc::ClientContext* context, const ::minknow_api::manager::DescribeHostRequest* request, ::minknow_api::manager::DescribeHostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::DescribeHostRequest, ::minknow_api::manager::DescribeHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_describe_host_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::describe_host(::grpc::ClientContext* context, const ::minknow_api::manager::DescribeHostRequest* request, ::minknow_api::manager::DescribeHostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_describe_host_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::DescribeHostResponse>* ManagerService::Stub::PrepareAsyncdescribe_hostRaw(::grpc::ClientContext* context, const ::minknow_api::manager::DescribeHostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::DescribeHostResponse, ::minknow_api::manager::DescribeHostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_describe_host_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::DescribeHostResponse>* ManagerService::Stub::Asyncdescribe_hostRaw(::grpc::ClientContext* context, const ::minknow_api::manager::DescribeHostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdescribe_hostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::manager::FlowCellPositionsResponse>* ManagerService::Stub::flow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::FlowCellPositionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::manager::FlowCellPositionsResponse>::Create(channel_.get(), rpcmethod_flow_cell_positions_, context, request);
}

void ManagerService::Stub::async::flow_cell_positions(::grpc::ClientContext* context, const ::minknow_api::manager::FlowCellPositionsRequest* request, ::grpc::ClientReadReactor< ::minknow_api::manager::FlowCellPositionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::manager::FlowCellPositionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_flow_cell_positions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::FlowCellPositionsResponse>* ManagerService::Stub::Asyncflow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::FlowCellPositionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::FlowCellPositionsResponse>::Create(channel_.get(), cq, rpcmethod_flow_cell_positions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::FlowCellPositionsResponse>* ManagerService::Stub::PrepareAsyncflow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::FlowCellPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::FlowCellPositionsResponse>::Create(channel_.get(), cq, rpcmethod_flow_cell_positions_, context, request, false, nullptr);
}

::grpc::ClientReader< ::minknow_api::manager::WatchFlowCellPositionsResponse>* ManagerService::Stub::watch_flow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::WatchFlowCellPositionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::manager::WatchFlowCellPositionsResponse>::Create(channel_.get(), rpcmethod_watch_flow_cell_positions_, context, request);
}

void ManagerService::Stub::async::watch_flow_cell_positions(::grpc::ClientContext* context, const ::minknow_api::manager::WatchFlowCellPositionsRequest* request, ::grpc::ClientReadReactor< ::minknow_api::manager::WatchFlowCellPositionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::manager::WatchFlowCellPositionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_watch_flow_cell_positions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::WatchFlowCellPositionsResponse>* ManagerService::Stub::Asyncwatch_flow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::WatchFlowCellPositionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::WatchFlowCellPositionsResponse>::Create(channel_.get(), cq, rpcmethod_watch_flow_cell_positions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::WatchFlowCellPositionsResponse>* ManagerService::Stub::PrepareAsyncwatch_flow_cell_positionsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::WatchFlowCellPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::WatchFlowCellPositionsResponse>::Create(channel_.get(), cq, rpcmethod_watch_flow_cell_positions_, context, request, false, nullptr);
}

::grpc::Status ManagerService::Stub::reset_position(::grpc::ClientContext* context, const ::minknow_api::manager::ResetPositionRequest& request, ::minknow_api::manager::ResetPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::ResetPositionRequest, ::minknow_api::manager::ResetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reset_position_, context, request, response);
}

void ManagerService::Stub::async::reset_position(::grpc::ClientContext* context, const ::minknow_api::manager::ResetPositionRequest* request, ::minknow_api::manager::ResetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::ResetPositionRequest, ::minknow_api::manager::ResetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_position_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::reset_position(::grpc::ClientContext* context, const ::minknow_api::manager::ResetPositionRequest* request, ::minknow_api::manager::ResetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_position_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ResetPositionResponse>* ManagerService::Stub::PrepareAsyncreset_positionRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ResetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::ResetPositionResponse, ::minknow_api::manager::ResetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reset_position_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ResetPositionResponse>* ManagerService::Stub::Asyncreset_positionRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ResetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreset_positionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::basecaller_api(::grpc::ClientContext* context, const ::minknow_api::manager::BasecallerApiRequest& request, ::minknow_api::manager::BasecallerApiResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::BasecallerApiRequest, ::minknow_api::manager::BasecallerApiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_basecaller_api_, context, request, response);
}

void ManagerService::Stub::async::basecaller_api(::grpc::ClientContext* context, const ::minknow_api::manager::BasecallerApiRequest* request, ::minknow_api::manager::BasecallerApiResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::BasecallerApiRequest, ::minknow_api::manager::BasecallerApiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_basecaller_api_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::basecaller_api(::grpc::ClientContext* context, const ::minknow_api::manager::BasecallerApiRequest* request, ::minknow_api::manager::BasecallerApiResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_basecaller_api_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::BasecallerApiResponse>* ManagerService::Stub::PrepareAsyncbasecaller_apiRaw(::grpc::ClientContext* context, const ::minknow_api::manager::BasecallerApiRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::BasecallerApiResponse, ::minknow_api::manager::BasecallerApiRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_basecaller_api_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::BasecallerApiResponse>* ManagerService::Stub::Asyncbasecaller_apiRaw(::grpc::ClientContext* context, const ::minknow_api::manager::BasecallerApiRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbasecaller_apiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_guppy_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetGuppyInfoRequest& request, ::minknow_api::manager::GetGuppyInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetGuppyInfoRequest, ::minknow_api::manager::GetGuppyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_guppy_info_, context, request, response);
}

void ManagerService::Stub::async::get_guppy_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetGuppyInfoRequest* request, ::minknow_api::manager::GetGuppyInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetGuppyInfoRequest, ::minknow_api::manager::GetGuppyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_guppy_info_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_guppy_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetGuppyInfoRequest* request, ::minknow_api::manager::GetGuppyInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_guppy_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetGuppyInfoResponse>* ManagerService::Stub::PrepareAsyncget_guppy_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetGuppyInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetGuppyInfoResponse, ::minknow_api::manager::GetGuppyInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_guppy_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetGuppyInfoResponse>* ManagerService::Stub::Asyncget_guppy_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetGuppyInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_guppy_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_version_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetVersionInfoRequest& request, ::minknow_api::manager::GetVersionInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetVersionInfoRequest, ::minknow_api::manager::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_version_info_, context, request, response);
}

void ManagerService::Stub::async::get_version_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetVersionInfoRequest* request, ::minknow_api::manager::GetVersionInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetVersionInfoRequest, ::minknow_api::manager::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_info_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_version_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetVersionInfoRequest* request, ::minknow_api::manager::GetVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetVersionInfoResponse>* ManagerService::Stub::PrepareAsyncget_version_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetVersionInfoResponse, ::minknow_api::manager::GetVersionInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_version_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetVersionInfoResponse>* ManagerService::Stub::Asyncget_version_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_version_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>* ManagerService::Stub::list_protocol_output_dir_filesRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ListProtocolOutputDirFilesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>::Create(channel_.get(), rpcmethod_list_protocol_output_dir_files_, context, request);
}

void ManagerService::Stub::async::list_protocol_output_dir_files(::grpc::ClientContext* context, const ::minknow_api::manager::ListProtocolOutputDirFilesRequest* request, ::grpc::ClientReadReactor< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_list_protocol_output_dir_files_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>* ManagerService::Stub::Asynclist_protocol_output_dir_filesRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ListProtocolOutputDirFilesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>::Create(channel_.get(), cq, rpcmethod_list_protocol_output_dir_files_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>* ManagerService::Stub::PrepareAsynclist_protocol_output_dir_filesRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ListProtocolOutputDirFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>::Create(channel_.get(), cq, rpcmethod_list_protocol_output_dir_files_, context, request, false, nullptr);
}

::grpc::Status ManagerService::Stub::create_directory(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDirectoryRequest& request, ::minknow_api::manager::CreateDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::CreateDirectoryRequest, ::minknow_api::manager::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_directory_, context, request, response);
}

void ManagerService::Stub::async::create_directory(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDirectoryRequest* request, ::minknow_api::manager::CreateDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::CreateDirectoryRequest, ::minknow_api::manager::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_directory_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::create_directory(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDirectoryRequest* request, ::minknow_api::manager::CreateDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_directory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::CreateDirectoryResponse>* ManagerService::Stub::PrepareAsynccreate_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::CreateDirectoryResponse, ::minknow_api::manager::CreateDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_directory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::CreateDirectoryResponse>* ManagerService::Stub::Asynccreate_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate_directoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest& request, ::minknow_api::manager::GetDiskSpaceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetDiskSpaceInfoRequest, ::minknow_api::manager::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_disk_space_info_, context, request, response);
}

void ManagerService::Stub::async::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest* request, ::minknow_api::manager::GetDiskSpaceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetDiskSpaceInfoRequest, ::minknow_api::manager::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_disk_space_info_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest* request, ::minknow_api::manager::GetDiskSpaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_disk_space_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetDiskSpaceInfoResponse>* ManagerService::Stub::PrepareAsyncget_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetDiskSpaceInfoResponse, ::minknow_api::manager::GetDiskSpaceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_disk_space_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetDiskSpaceInfoResponse>* ManagerService::Stub::Asyncget_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_disk_space_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::minknow_api::instance::OutputDirectories* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_default_output_directories_, context, request, response);
}

void ManagerService::Stub::async::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_default_output_directories_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_default_output_directories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* ManagerService::Stub::PrepareAsyncget_default_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::OutputDirectories, ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_default_output_directories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* ManagerService::Stub::Asyncget_default_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_default_output_directoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::manager::GetDiskSpaceInfoResponse>* ManagerService::Stub::stream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::StreamDiskSpaceInfoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::manager::GetDiskSpaceInfoResponse>::Create(channel_.get(), rpcmethod_stream_disk_space_info_, context, request);
}

void ManagerService::Stub::async::stream_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::manager::StreamDiskSpaceInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::manager::GetDiskSpaceInfoResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::manager::GetDiskSpaceInfoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_disk_space_info_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::GetDiskSpaceInfoResponse>* ManagerService::Stub::Asyncstream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::StreamDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::GetDiskSpaceInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_disk_space_info_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::manager::GetDiskSpaceInfoResponse>* ManagerService::Stub::PrepareAsyncstream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::StreamDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::manager::GetDiskSpaceInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_disk_space_info_, context, request, false, nullptr);
}

::grpc::Status ManagerService::Stub::get_barcode_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest& request, ::minknow_api::manager::GetBarcodeKitInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetBarcodeKitInfoRequest, ::minknow_api::manager::GetBarcodeKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_barcode_kit_info_, context, request, response);
}

void ManagerService::Stub::async::get_barcode_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest* request, ::minknow_api::manager::GetBarcodeKitInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetBarcodeKitInfoRequest, ::minknow_api::manager::GetBarcodeKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_barcode_kit_info_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_barcode_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest* request, ::minknow_api::manager::GetBarcodeKitInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_barcode_kit_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetBarcodeKitInfoResponse>* ManagerService::Stub::PrepareAsyncget_barcode_kit_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetBarcodeKitInfoResponse, ::minknow_api::manager::GetBarcodeKitInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_barcode_kit_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetBarcodeKitInfoResponse>* ManagerService::Stub::Asyncget_barcode_kit_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_barcode_kit_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_lamp_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetLampKitInfoRequest& request, ::minknow_api::manager::GetLampKitInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetLampKitInfoRequest, ::minknow_api::manager::GetLampKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_lamp_kit_info_, context, request, response);
}

void ManagerService::Stub::async::get_lamp_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetLampKitInfoRequest* request, ::minknow_api::manager::GetLampKitInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetLampKitInfoRequest, ::minknow_api::manager::GetLampKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_lamp_kit_info_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_lamp_kit_info(::grpc::ClientContext* context, const ::minknow_api::manager::GetLampKitInfoRequest* request, ::minknow_api::manager::GetLampKitInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_lamp_kit_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetLampKitInfoResponse>* ManagerService::Stub::PrepareAsyncget_lamp_kit_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetLampKitInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetLampKitInfoResponse, ::minknow_api::manager::GetLampKitInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_lamp_kit_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetLampKitInfoResponse>* ManagerService::Stub::Asyncget_lamp_kit_infoRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetLampKitInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_lamp_kit_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_barcode_keys(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest& request, ::minknow_api::manager::GetBarcodeKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetBarcodeKeysRequest, ::minknow_api::manager::GetBarcodeKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_barcode_keys_, context, request, response);
}

void ManagerService::Stub::async::get_barcode_keys(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest* request, ::minknow_api::manager::GetBarcodeKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetBarcodeKeysRequest, ::minknow_api::manager::GetBarcodeKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_barcode_keys_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_barcode_keys(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest* request, ::minknow_api::manager::GetBarcodeKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_barcode_keys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetBarcodeKeysResponse>* ManagerService::Stub::PrepareAsyncget_barcode_keysRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetBarcodeKeysResponse, ::minknow_api::manager::GetBarcodeKeysRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_barcode_keys_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetBarcodeKeysResponse>* ManagerService::Stub::Asyncget_barcode_keysRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_barcode_keysRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_flow_cell_types(::grpc::ClientContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest& request, ::minknow_api::manager::GetFlowCellTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetFlowCellTypesRequest, ::minknow_api::manager::GetFlowCellTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_flow_cell_types_, context, request, response);
}

void ManagerService::Stub::async::get_flow_cell_types(::grpc::ClientContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest* request, ::minknow_api::manager::GetFlowCellTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetFlowCellTypesRequest, ::minknow_api::manager::GetFlowCellTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_flow_cell_types_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_flow_cell_types(::grpc::ClientContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest* request, ::minknow_api::manager::GetFlowCellTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_flow_cell_types_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetFlowCellTypesResponse>* ManagerService::Stub::PrepareAsyncget_flow_cell_typesRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetFlowCellTypesResponse, ::minknow_api::manager::GetFlowCellTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_flow_cell_types_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetFlowCellTypesResponse>* ManagerService::Stub::Asyncget_flow_cell_typesRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_flow_cell_typesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_sequencing_kits(::grpc::ClientContext* context, const ::minknow_api::manager::GetSequencingKitsRequest& request, ::minknow_api::manager::GetSequencingKitsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetSequencingKitsRequest, ::minknow_api::manager::GetSequencingKitsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_sequencing_kits_, context, request, response);
}

void ManagerService::Stub::async::get_sequencing_kits(::grpc::ClientContext* context, const ::minknow_api::manager::GetSequencingKitsRequest* request, ::minknow_api::manager::GetSequencingKitsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetSequencingKitsRequest, ::minknow_api::manager::GetSequencingKitsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_sequencing_kits_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_sequencing_kits(::grpc::ClientContext* context, const ::minknow_api::manager::GetSequencingKitsRequest* request, ::minknow_api::manager::GetSequencingKitsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_sequencing_kits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetSequencingKitsResponse>* ManagerService::Stub::PrepareAsyncget_sequencing_kitsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetSequencingKitsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetSequencingKitsResponse, ::minknow_api::manager::GetSequencingKitsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_sequencing_kits_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetSequencingKitsResponse>* ManagerService::Stub::Asyncget_sequencing_kitsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetSequencingKitsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_sequencing_kitsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::add_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest& request, ::minknow_api::manager::AddSimulatedDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::AddSimulatedDeviceRequest, ::minknow_api::manager::AddSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_simulated_device_, context, request, response);
}

void ManagerService::Stub::async::add_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest* request, ::minknow_api::manager::AddSimulatedDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::AddSimulatedDeviceRequest, ::minknow_api::manager::AddSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_simulated_device_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::add_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest* request, ::minknow_api::manager::AddSimulatedDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_simulated_device_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::AddSimulatedDeviceResponse>* ManagerService::Stub::PrepareAsyncadd_simulated_deviceRaw(::grpc::ClientContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::AddSimulatedDeviceResponse, ::minknow_api::manager::AddSimulatedDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_simulated_device_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::AddSimulatedDeviceResponse>* ManagerService::Stub::Asyncadd_simulated_deviceRaw(::grpc::ClientContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncadd_simulated_deviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::remove_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest& request, ::minknow_api::manager::RemoveSimulatedDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::RemoveSimulatedDeviceRequest, ::minknow_api::manager::RemoveSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remove_simulated_device_, context, request, response);
}

void ManagerService::Stub::async::remove_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest* request, ::minknow_api::manager::RemoveSimulatedDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::RemoveSimulatedDeviceRequest, ::minknow_api::manager::RemoveSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remove_simulated_device_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::remove_simulated_device(::grpc::ClientContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest* request, ::minknow_api::manager::RemoveSimulatedDeviceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remove_simulated_device_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::RemoveSimulatedDeviceResponse>* ManagerService::Stub::PrepareAsyncremove_simulated_deviceRaw(::grpc::ClientContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::RemoveSimulatedDeviceResponse, ::minknow_api::manager::RemoveSimulatedDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remove_simulated_device_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::RemoveSimulatedDeviceResponse>* ManagerService::Stub::Asyncremove_simulated_deviceRaw(::grpc::ClientContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremove_simulated_deviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::local_authentication_token_path(::grpc::ClientContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest& request, ::minknow_api::manager::LocalAuthenticationTokenPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::LocalAuthenticationTokenPathRequest, ::minknow_api::manager::LocalAuthenticationTokenPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_local_authentication_token_path_, context, request, response);
}

void ManagerService::Stub::async::local_authentication_token_path(::grpc::ClientContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest* request, ::minknow_api::manager::LocalAuthenticationTokenPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::LocalAuthenticationTokenPathRequest, ::minknow_api::manager::LocalAuthenticationTokenPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_local_authentication_token_path_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::local_authentication_token_path(::grpc::ClientContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest* request, ::minknow_api::manager::LocalAuthenticationTokenPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_local_authentication_token_path_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::LocalAuthenticationTokenPathResponse>* ManagerService::Stub::PrepareAsynclocal_authentication_token_pathRaw(::grpc::ClientContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::LocalAuthenticationTokenPathResponse, ::minknow_api::manager::LocalAuthenticationTokenPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_local_authentication_token_path_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::LocalAuthenticationTokenPathResponse>* ManagerService::Stub::Asynclocal_authentication_token_pathRaw(::grpc::ClientContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclocal_authentication_token_pathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::get_alignment_reference_information(::grpc::ClientContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest& request, ::minknow_api::manager::GetAlignmentReferenceInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::GetAlignmentReferenceInformationRequest, ::minknow_api::manager::GetAlignmentReferenceInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_alignment_reference_information_, context, request, response);
}

void ManagerService::Stub::async::get_alignment_reference_information(::grpc::ClientContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest* request, ::minknow_api::manager::GetAlignmentReferenceInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::GetAlignmentReferenceInformationRequest, ::minknow_api::manager::GetAlignmentReferenceInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_alignment_reference_information_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::get_alignment_reference_information(::grpc::ClientContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest* request, ::minknow_api::manager::GetAlignmentReferenceInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_alignment_reference_information_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetAlignmentReferenceInformationResponse>* ManagerService::Stub::PrepareAsyncget_alignment_reference_informationRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::GetAlignmentReferenceInformationResponse, ::minknow_api::manager::GetAlignmentReferenceInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_alignment_reference_information_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::GetAlignmentReferenceInformationResponse>* ManagerService::Stub::Asyncget_alignment_reference_informationRaw(::grpc::ClientContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_alignment_reference_informationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::association_device_code(::grpc::ClientContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest& request, ::minknow_api::manager::AssociationDeviceCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::AssociationDeviceCodeRequest, ::minknow_api::manager::AssociationDeviceCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_association_device_code_, context, request, response);
}

void ManagerService::Stub::async::association_device_code(::grpc::ClientContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest* request, ::minknow_api::manager::AssociationDeviceCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::AssociationDeviceCodeRequest, ::minknow_api::manager::AssociationDeviceCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_association_device_code_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::association_device_code(::grpc::ClientContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest* request, ::minknow_api::manager::AssociationDeviceCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_association_device_code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::AssociationDeviceCodeResponse>* ManagerService::Stub::PrepareAsyncassociation_device_codeRaw(::grpc::ClientContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::AssociationDeviceCodeResponse, ::minknow_api::manager::AssociationDeviceCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_association_device_code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::AssociationDeviceCodeResponse>* ManagerService::Stub::Asyncassociation_device_codeRaw(::grpc::ClientContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncassociation_device_codeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::apply_offline_association_unlock_code(::grpc::ClientContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest& request, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_apply_offline_association_unlock_code_, context, request, response);
}

void ManagerService::Stub::async::apply_offline_association_unlock_code(::grpc::ClientContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest* request, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_apply_offline_association_unlock_code_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::apply_offline_association_unlock_code(::grpc::ClientContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest* request, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_apply_offline_association_unlock_code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse>* ManagerService::Stub::PrepareAsyncapply_offline_association_unlock_codeRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_apply_offline_association_unlock_code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse>* ManagerService::Stub::Asyncapply_offline_association_unlock_codeRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapply_offline_association_unlock_codeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::list_developer_api_tokens(::grpc::ClientContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest& request, ::minknow_api::manager::ListDeveloperApiTokensResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::ListDeveloperApiTokensRequest, ::minknow_api::manager::ListDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_developer_api_tokens_, context, request, response);
}

void ManagerService::Stub::async::list_developer_api_tokens(::grpc::ClientContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest* request, ::minknow_api::manager::ListDeveloperApiTokensResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::ListDeveloperApiTokensRequest, ::minknow_api::manager::ListDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_developer_api_tokens_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::list_developer_api_tokens(::grpc::ClientContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest* request, ::minknow_api::manager::ListDeveloperApiTokensResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_developer_api_tokens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ListDeveloperApiTokensResponse>* ManagerService::Stub::PrepareAsynclist_developer_api_tokensRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::ListDeveloperApiTokensResponse, ::minknow_api::manager::ListDeveloperApiTokensRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_developer_api_tokens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::ListDeveloperApiTokensResponse>* ManagerService::Stub::Asynclist_developer_api_tokensRaw(::grpc::ClientContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_developer_api_tokensRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::create_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest& request, ::minknow_api::manager::CreateDeveloperApiTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::CreateDeveloperApiTokenRequest, ::minknow_api::manager::CreateDeveloperApiTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_developer_api_token_, context, request, response);
}

void ManagerService::Stub::async::create_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest* request, ::minknow_api::manager::CreateDeveloperApiTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::CreateDeveloperApiTokenRequest, ::minknow_api::manager::CreateDeveloperApiTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_developer_api_token_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::create_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest* request, ::minknow_api::manager::CreateDeveloperApiTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_developer_api_token_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::CreateDeveloperApiTokenResponse>* ManagerService::Stub::PrepareAsynccreate_developer_api_tokenRaw(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::CreateDeveloperApiTokenResponse, ::minknow_api::manager::CreateDeveloperApiTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_developer_api_token_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::CreateDeveloperApiTokenResponse>* ManagerService::Stub::Asynccreate_developer_api_tokenRaw(::grpc::ClientContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate_developer_api_tokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::revoke_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest& request, ::minknow_api::manager::RevokeDeveloperApiTokensResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::RevokeDeveloperApiTokenRequest, ::minknow_api::manager::RevokeDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_revoke_developer_api_token_, context, request, response);
}

void ManagerService::Stub::async::revoke_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest* request, ::minknow_api::manager::RevokeDeveloperApiTokensResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::RevokeDeveloperApiTokenRequest, ::minknow_api::manager::RevokeDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_revoke_developer_api_token_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::revoke_developer_api_token(::grpc::ClientContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest* request, ::minknow_api::manager::RevokeDeveloperApiTokensResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_revoke_developer_api_token_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::RevokeDeveloperApiTokensResponse>* ManagerService::Stub::PrepareAsyncrevoke_developer_api_tokenRaw(::grpc::ClientContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::RevokeDeveloperApiTokensResponse, ::minknow_api::manager::RevokeDeveloperApiTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_revoke_developer_api_token_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::RevokeDeveloperApiTokensResponse>* ManagerService::Stub::Asyncrevoke_developer_api_tokenRaw(::grpc::ClientContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrevoke_developer_api_tokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::find_protocols(::grpc::ClientContext* context, const ::minknow_api::manager::FindProtocolsRequest& request, ::minknow_api::manager::FindProtocolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::manager::FindProtocolsRequest, ::minknow_api::manager::FindProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_find_protocols_, context, request, response);
}

void ManagerService::Stub::async::find_protocols(::grpc::ClientContext* context, const ::minknow_api::manager::FindProtocolsRequest* request, ::minknow_api::manager::FindProtocolsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::manager::FindProtocolsRequest, ::minknow_api::manager::FindProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_find_protocols_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::find_protocols(::grpc::ClientContext* context, const ::minknow_api::manager::FindProtocolsRequest* request, ::minknow_api::manager::FindProtocolsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_find_protocols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::FindProtocolsResponse>* ManagerService::Stub::PrepareAsyncfind_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::FindProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::manager::FindProtocolsResponse, ::minknow_api::manager::FindProtocolsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_find_protocols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::manager::FindProtocolsResponse>* ManagerService::Stub::Asyncfind_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::manager::FindProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfind_protocolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::DescribeHostRequest, ::minknow_api::manager::DescribeHostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::DescribeHostRequest* req,
             ::minknow_api::manager::DescribeHostResponse* resp) {
               return service->describe_host(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ManagerService::Service, ::minknow_api::manager::FlowCellPositionsRequest, ::minknow_api::manager::FlowCellPositionsResponse>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::FlowCellPositionsRequest* req,
             ::grpc::ServerWriter<::minknow_api::manager::FlowCellPositionsResponse>* writer) {
               return service->flow_cell_positions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ManagerService::Service, ::minknow_api::manager::WatchFlowCellPositionsRequest, ::minknow_api::manager::WatchFlowCellPositionsResponse>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::WatchFlowCellPositionsRequest* req,
             ::grpc::ServerWriter<::minknow_api::manager::WatchFlowCellPositionsResponse>* writer) {
               return service->watch_flow_cell_positions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::ResetPositionRequest, ::minknow_api::manager::ResetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::ResetPositionRequest* req,
             ::minknow_api::manager::ResetPositionResponse* resp) {
               return service->reset_position(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::BasecallerApiRequest, ::minknow_api::manager::BasecallerApiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::BasecallerApiRequest* req,
             ::minknow_api::manager::BasecallerApiResponse* resp) {
               return service->basecaller_api(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetGuppyInfoRequest, ::minknow_api::manager::GetGuppyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetGuppyInfoRequest* req,
             ::minknow_api::manager::GetGuppyInfoResponse* resp) {
               return service->get_guppy_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetVersionInfoRequest, ::minknow_api::manager::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetVersionInfoRequest* req,
             ::minknow_api::manager::GetVersionInfoResponse* resp) {
               return service->get_version_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ManagerService::Service, ::minknow_api::manager::ListProtocolOutputDirFilesRequest, ::minknow_api::manager::ListProtocolOutputDirFilesResponse>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::ListProtocolOutputDirFilesRequest* req,
             ::grpc::ServerWriter<::minknow_api::manager::ListProtocolOutputDirFilesResponse>* writer) {
               return service->list_protocol_output_dir_files(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::CreateDirectoryRequest, ::minknow_api::manager::CreateDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::CreateDirectoryRequest* req,
             ::minknow_api::manager::CreateDirectoryResponse* resp) {
               return service->create_directory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetDiskSpaceInfoRequest, ::minknow_api::manager::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetDiskSpaceInfoRequest* req,
             ::minknow_api::manager::GetDiskSpaceInfoResponse* resp) {
               return service->get_disk_space_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* req,
             ::minknow_api::instance::OutputDirectories* resp) {
               return service->get_default_output_directories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ManagerService::Service, ::minknow_api::manager::StreamDiskSpaceInfoRequest, ::minknow_api::manager::GetDiskSpaceInfoResponse>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::StreamDiskSpaceInfoRequest* req,
             ::grpc::ServerWriter<::minknow_api::manager::GetDiskSpaceInfoResponse>* writer) {
               return service->stream_disk_space_info(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetBarcodeKitInfoRequest, ::minknow_api::manager::GetBarcodeKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetBarcodeKitInfoRequest* req,
             ::minknow_api::manager::GetBarcodeKitInfoResponse* resp) {
               return service->get_barcode_kit_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetLampKitInfoRequest, ::minknow_api::manager::GetLampKitInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetLampKitInfoRequest* req,
             ::minknow_api::manager::GetLampKitInfoResponse* resp) {
               return service->get_lamp_kit_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetBarcodeKeysRequest, ::minknow_api::manager::GetBarcodeKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetBarcodeKeysRequest* req,
             ::minknow_api::manager::GetBarcodeKeysResponse* resp) {
               return service->get_barcode_keys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetFlowCellTypesRequest, ::minknow_api::manager::GetFlowCellTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetFlowCellTypesRequest* req,
             ::minknow_api::manager::GetFlowCellTypesResponse* resp) {
               return service->get_flow_cell_types(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetSequencingKitsRequest, ::minknow_api::manager::GetSequencingKitsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetSequencingKitsRequest* req,
             ::minknow_api::manager::GetSequencingKitsResponse* resp) {
               return service->get_sequencing_kits(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::AddSimulatedDeviceRequest, ::minknow_api::manager::AddSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::AddSimulatedDeviceRequest* req,
             ::minknow_api::manager::AddSimulatedDeviceResponse* resp) {
               return service->add_simulated_device(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::RemoveSimulatedDeviceRequest, ::minknow_api::manager::RemoveSimulatedDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::RemoveSimulatedDeviceRequest* req,
             ::minknow_api::manager::RemoveSimulatedDeviceResponse* resp) {
               return service->remove_simulated_device(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::LocalAuthenticationTokenPathRequest, ::minknow_api::manager::LocalAuthenticationTokenPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::LocalAuthenticationTokenPathRequest* req,
             ::minknow_api::manager::LocalAuthenticationTokenPathResponse* resp) {
               return service->local_authentication_token_path(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::GetAlignmentReferenceInformationRequest, ::minknow_api::manager::GetAlignmentReferenceInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::GetAlignmentReferenceInformationRequest* req,
             ::minknow_api::manager::GetAlignmentReferenceInformationResponse* resp) {
               return service->get_alignment_reference_information(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::AssociationDeviceCodeRequest, ::minknow_api::manager::AssociationDeviceCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::AssociationDeviceCodeRequest* req,
             ::minknow_api::manager::AssociationDeviceCodeResponse* resp) {
               return service->association_device_code(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest* req,
             ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* resp) {
               return service->apply_offline_association_unlock_code(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::ListDeveloperApiTokensRequest, ::minknow_api::manager::ListDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::ListDeveloperApiTokensRequest* req,
             ::minknow_api::manager::ListDeveloperApiTokensResponse* resp) {
               return service->list_developer_api_tokens(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::CreateDeveloperApiTokenRequest, ::minknow_api::manager::CreateDeveloperApiTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::CreateDeveloperApiTokenRequest* req,
             ::minknow_api::manager::CreateDeveloperApiTokenResponse* resp) {
               return service->create_developer_api_token(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::RevokeDeveloperApiTokenRequest, ::minknow_api::manager::RevokeDeveloperApiTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::RevokeDeveloperApiTokenRequest* req,
             ::minknow_api::manager::RevokeDeveloperApiTokensResponse* resp) {
               return service->revoke_developer_api_token(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::minknow_api::manager::FindProtocolsRequest, ::minknow_api::manager::FindProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::manager::FindProtocolsRequest* req,
             ::minknow_api::manager::FindProtocolsResponse* resp) {
               return service->find_protocols(ctx, req, resp);
             }, this)));
}

ManagerService::Service::~Service() {
}

::grpc::Status ManagerService::Service::describe_host(::grpc::ServerContext* context, const ::minknow_api::manager::DescribeHostRequest* request, ::minknow_api::manager::DescribeHostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::flow_cell_positions(::grpc::ServerContext* context, const ::minknow_api::manager::FlowCellPositionsRequest* request, ::grpc::ServerWriter< ::minknow_api::manager::FlowCellPositionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::watch_flow_cell_positions(::grpc::ServerContext* context, const ::minknow_api::manager::WatchFlowCellPositionsRequest* request, ::grpc::ServerWriter< ::minknow_api::manager::WatchFlowCellPositionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::reset_position(::grpc::ServerContext* context, const ::minknow_api::manager::ResetPositionRequest* request, ::minknow_api::manager::ResetPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::basecaller_api(::grpc::ServerContext* context, const ::minknow_api::manager::BasecallerApiRequest* request, ::minknow_api::manager::BasecallerApiResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_guppy_info(::grpc::ServerContext* context, const ::minknow_api::manager::GetGuppyInfoRequest* request, ::minknow_api::manager::GetGuppyInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_version_info(::grpc::ServerContext* context, const ::minknow_api::manager::GetVersionInfoRequest* request, ::minknow_api::manager::GetVersionInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::list_protocol_output_dir_files(::grpc::ServerContext* context, const ::minknow_api::manager::ListProtocolOutputDirFilesRequest* request, ::grpc::ServerWriter< ::minknow_api::manager::ListProtocolOutputDirFilesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::create_directory(::grpc::ServerContext* context, const ::minknow_api::manager::CreateDirectoryRequest* request, ::minknow_api::manager::CreateDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_disk_space_info(::grpc::ServerContext* context, const ::minknow_api::manager::GetDiskSpaceInfoRequest* request, ::minknow_api::manager::GetDiskSpaceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_default_output_directories(::grpc::ServerContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::stream_disk_space_info(::grpc::ServerContext* context, const ::minknow_api::manager::StreamDiskSpaceInfoRequest* request, ::grpc::ServerWriter< ::minknow_api::manager::GetDiskSpaceInfoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_barcode_kit_info(::grpc::ServerContext* context, const ::minknow_api::manager::GetBarcodeKitInfoRequest* request, ::minknow_api::manager::GetBarcodeKitInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_lamp_kit_info(::grpc::ServerContext* context, const ::minknow_api::manager::GetLampKitInfoRequest* request, ::minknow_api::manager::GetLampKitInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_barcode_keys(::grpc::ServerContext* context, const ::minknow_api::manager::GetBarcodeKeysRequest* request, ::minknow_api::manager::GetBarcodeKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_flow_cell_types(::grpc::ServerContext* context, const ::minknow_api::manager::GetFlowCellTypesRequest* request, ::minknow_api::manager::GetFlowCellTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_sequencing_kits(::grpc::ServerContext* context, const ::minknow_api::manager::GetSequencingKitsRequest* request, ::minknow_api::manager::GetSequencingKitsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::add_simulated_device(::grpc::ServerContext* context, const ::minknow_api::manager::AddSimulatedDeviceRequest* request, ::minknow_api::manager::AddSimulatedDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::remove_simulated_device(::grpc::ServerContext* context, const ::minknow_api::manager::RemoveSimulatedDeviceRequest* request, ::minknow_api::manager::RemoveSimulatedDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::local_authentication_token_path(::grpc::ServerContext* context, const ::minknow_api::manager::LocalAuthenticationTokenPathRequest* request, ::minknow_api::manager::LocalAuthenticationTokenPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::get_alignment_reference_information(::grpc::ServerContext* context, const ::minknow_api::manager::GetAlignmentReferenceInformationRequest* request, ::minknow_api::manager::GetAlignmentReferenceInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::association_device_code(::grpc::ServerContext* context, const ::minknow_api::manager::AssociationDeviceCodeRequest* request, ::minknow_api::manager::AssociationDeviceCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::apply_offline_association_unlock_code(::grpc::ServerContext* context, const ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest* request, ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::list_developer_api_tokens(::grpc::ServerContext* context, const ::minknow_api::manager::ListDeveloperApiTokensRequest* request, ::minknow_api::manager::ListDeveloperApiTokensResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::create_developer_api_token(::grpc::ServerContext* context, const ::minknow_api::manager::CreateDeveloperApiTokenRequest* request, ::minknow_api::manager::CreateDeveloperApiTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::revoke_developer_api_token(::grpc::ServerContext* context, const ::minknow_api::manager::RevokeDeveloperApiTokenRequest* request, ::minknow_api::manager::RevokeDeveloperApiTokensResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::find_protocols(::grpc::ServerContext* context, const ::minknow_api::manager::FindProtocolsRequest* request, ::minknow_api::manager::FindProtocolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace manager

