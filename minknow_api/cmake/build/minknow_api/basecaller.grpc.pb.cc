// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/basecaller.proto

#include "minknow_api/basecaller.pb.h"
#include "minknow_api/basecaller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace basecaller {

static const char* Basecaller_method_names[] = {
  "/minknow_api.basecaller.Basecaller/list_configs_by_kit",
  "/minknow_api.basecaller.Basecaller/start_basecalling",
  "/minknow_api.basecaller.Basecaller/start_barcoding",
  "/minknow_api.basecaller.Basecaller/start_post_processing_protocol",
  "/minknow_api.basecaller.Basecaller/start_alignment",
  "/minknow_api.basecaller.Basecaller/cancel",
  "/minknow_api.basecaller.Basecaller/get_info",
  "/minknow_api.basecaller.Basecaller/watch",
  "/minknow_api.basecaller.Basecaller/make_alignment_index",
  "/minknow_api.basecaller.Basecaller/list_post_processing_protocols",
  "/minknow_api.basecaller.Basecaller/list_settings_for_post_processing_protocol",
  "/minknow_api.basecaller.Basecaller/update_post_processing_protocol_progress",
};

std::unique_ptr< Basecaller::Stub> Basecaller::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Basecaller::Stub> stub(new Basecaller::Stub(channel, options));
  return stub;
}

Basecaller::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_list_configs_by_kit_(Basecaller_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_basecalling_(Basecaller_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_barcoding_(Basecaller_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_post_processing_protocol_(Basecaller_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_alignment_(Basecaller_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cancel_(Basecaller_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_info_(Basecaller_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_watch_(Basecaller_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_make_alignment_index_(Basecaller_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_post_processing_protocols_(Basecaller_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_settings_for_post_processing_protocol_(Basecaller_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_post_processing_protocol_progress_(Basecaller_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Basecaller::Stub::list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::minknow_api::basecaller::ListConfigsByKitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_configs_by_kit_, context, request, response);
}

void Basecaller::Stub::async::list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_configs_by_kit_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_configs_by_kit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>* Basecaller::Stub::PrepareAsynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::ListConfigsByKitResponse, ::minknow_api::basecaller::ListConfigsByKitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_configs_by_kit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>* Basecaller::Stub::Asynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_configs_by_kitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::minknow_api::basecaller::StartBasecallingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_basecalling_, context, request, response);
}

void Basecaller::Stub::async::start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_basecalling_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_basecalling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>* Basecaller::Stub::PrepareAsyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::StartBasecallingResponse, ::minknow_api::basecaller::StartBasecallingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_basecalling_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>* Basecaller::Stub::Asyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_basecallingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::minknow_api::basecaller::StartBarcodingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_barcoding_, context, request, response);
}

void Basecaller::Stub::async::start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_barcoding_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_barcoding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>* Basecaller::Stub::PrepareAsyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::StartBarcodingResponse, ::minknow_api::basecaller::StartBarcodingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_barcoding_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>* Basecaller::Stub::Asyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_barcodingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_post_processing_protocol_, context, request, response);
}

void Basecaller::Stub::async::start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_post_processing_protocol_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_post_processing_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* Basecaller::Stub::PrepareAsyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::StartPostProcessingProtocolResponse, ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_post_processing_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* Basecaller::Stub::Asyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_post_processing_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::minknow_api::basecaller::StartAlignmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_alignment_, context, request, response);
}

void Basecaller::Stub::async::start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_alignment_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_alignment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>* Basecaller::Stub::PrepareAsyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::StartAlignmentResponse, ::minknow_api::basecaller::StartAlignmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_alignment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>* Basecaller::Stub::Asyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_alignmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::minknow_api::basecaller::CancelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cancel_, context, request, response);
}

void Basecaller::Stub::async::cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>* Basecaller::Stub::PrepareAsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::CancelResponse, ::minknow_api::basecaller::CancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>* Basecaller::Stub::AsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::basecaller::GetInfoResponse>* Basecaller::Stub::get_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::basecaller::GetInfoResponse>::Create(channel_.get(), rpcmethod_get_info_, context, request);
}

void Basecaller::Stub::async::get_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::GetInfoResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::basecaller::GetInfoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_get_info_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>* Basecaller::Stub::Asyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::basecaller::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_get_info_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>* Basecaller::Stub::PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::basecaller::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_get_info_, context, request, false, nullptr);
}

::grpc::ClientReader< ::minknow_api::basecaller::WatchResponse>* Basecaller::Stub::watchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::basecaller::WatchResponse>::Create(channel_.get(), rpcmethod_watch_, context, request);
}

void Basecaller::Stub::async::watch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::WatchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::basecaller::WatchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_watch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>* Basecaller::Stub::AsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::basecaller::WatchResponse>::Create(channel_.get(), cq, rpcmethod_watch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>* Basecaller::Stub::PrepareAsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::basecaller::WatchResponse>::Create(channel_.get(), cq, rpcmethod_watch_, context, request, false, nullptr);
}

::grpc::Status Basecaller::Stub::make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_make_alignment_index_, context, request, response);
}

void Basecaller::Stub::async::make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_alignment_index_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_make_alignment_index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* Basecaller::Stub::PrepareAsyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::MakeAlignmentIndexResponse, ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_make_alignment_index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* Basecaller::Stub::Asyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmake_alignment_indexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_post_processing_protocols_, context, request, response);
}

void Basecaller::Stub::async::list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_post_processing_protocols_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_post_processing_protocols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* Basecaller::Stub::PrepareAsynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse, ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_post_processing_protocols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* Basecaller::Stub::Asynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_post_processing_protocolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_settings_for_post_processing_protocol_, context, request, response);
}

void Basecaller::Stub::async::list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_settings_for_post_processing_protocol_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_settings_for_post_processing_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* Basecaller::Stub::PrepareAsynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_settings_for_post_processing_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* Basecaller::Stub::Asynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_settings_for_post_processing_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Basecaller::Stub::update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::minknow_api::basecaller::UpdateProgressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_update_post_processing_protocol_progress_, context, request, response);
}

void Basecaller::Stub::async::update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_post_processing_protocol_progress_, context, request, response, std::move(f));
}

void Basecaller::Stub::async::update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_post_processing_protocol_progress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>* Basecaller::Stub::PrepareAsyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::basecaller::UpdateProgressResponse, ::minknow_api::basecaller::UpdateProgressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_update_post_processing_protocol_progress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>* Basecaller::Stub::Asyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdate_post_processing_protocol_progressRaw(context, request, cq);
  result->StartCall();
  return result;
}

Basecaller::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::ListConfigsByKitRequest* req,
             ::minknow_api::basecaller::ListConfigsByKitResponse* resp) {
               return service->list_configs_by_kit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::StartBasecallingRequest* req,
             ::minknow_api::basecaller::StartBasecallingResponse* resp) {
               return service->start_basecalling(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::StartBarcodingRequest* req,
             ::minknow_api::basecaller::StartBarcodingResponse* resp) {
               return service->start_barcoding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* req,
             ::minknow_api::basecaller::StartPostProcessingProtocolResponse* resp) {
               return service->start_post_processing_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::StartAlignmentRequest* req,
             ::minknow_api::basecaller::StartAlignmentResponse* resp) {
               return service->start_alignment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::CancelRequest* req,
             ::minknow_api::basecaller::CancelResponse* resp) {
               return service->cancel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Basecaller::Service, ::minknow_api::basecaller::GetInfoRequest, ::minknow_api::basecaller::GetInfoResponse>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::GetInfoRequest* req,
             ::grpc::ServerWriter<::minknow_api::basecaller::GetInfoResponse>* writer) {
               return service->get_info(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Basecaller::Service, ::minknow_api::basecaller::WatchRequest, ::minknow_api::basecaller::WatchResponse>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::WatchRequest* req,
             ::grpc::ServerWriter<::minknow_api::basecaller::WatchResponse>* writer) {
               return service->watch(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::MakeAlignmentIndexRequest* req,
             ::minknow_api::basecaller::MakeAlignmentIndexResponse* resp) {
               return service->make_alignment_index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* req,
             ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* resp) {
               return service->list_post_processing_protocols(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* req,
             ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* resp) {
               return service->list_settings_for_post_processing_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Basecaller_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Basecaller::Service, ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Basecaller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::basecaller::UpdateProgressRequest* req,
             ::minknow_api::basecaller::UpdateProgressResponse* resp) {
               return service->update_post_processing_protocol_progress(ctx, req, resp);
             }, this)));
}

Basecaller::Service::~Service() {
}

::grpc::Status Basecaller::Service::list_configs_by_kit(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::start_basecalling(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::start_barcoding(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::start_post_processing_protocol(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::start_alignment(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::cancel(::grpc::ServerContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::get_info(::grpc::ServerContext* context, const ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::watch(::grpc::ServerContext* context, const ::minknow_api::basecaller::WatchRequest* request, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::make_alignment_index(::grpc::ServerContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::list_post_processing_protocols(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::list_settings_for_post_processing_protocol(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Basecaller::Service::update_post_processing_protocol_progress(::grpc::ServerContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace basecaller

