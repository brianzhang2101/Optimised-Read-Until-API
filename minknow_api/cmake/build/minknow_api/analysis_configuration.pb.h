// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/analysis_configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fanalysis_5fconfiguration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fanalysis_5fconfiguration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "minknow_api/rpc_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2fanalysis_5fconfiguration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[59]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
namespace minknow_api {
namespace analysis_configuration {
class AlignmentConfiguration;
struct AlignmentConfigurationDefaultTypeInternal;
extern AlignmentConfigurationDefaultTypeInternal _AlignmentConfiguration_default_instance_;
class AnalysisConfiguration;
struct AnalysisConfigurationDefaultTypeInternal;
extern AnalysisConfigurationDefaultTypeInternal _AnalysisConfiguration_default_instance_;
class AnalysisConfiguration_ChannelStatesEntry_DoNotUse;
struct AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal;
extern AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal _AnalysisConfiguration_ChannelStatesEntry_DoNotUse_default_instance_;
class BarcodingConfiguration;
struct BarcodingConfigurationDefaultTypeInternal;
extern BarcodingConfigurationDefaultTypeInternal _BarcodingConfiguration_default_instance_;
class BasecallerConfiguration;
struct BasecallerConfigurationDefaultTypeInternal;
extern BasecallerConfigurationDefaultTypeInternal _BasecallerConfiguration_default_instance_;
class BasecallerConfiguration_ReadFiltering;
struct BasecallerConfiguration_ReadFilteringDefaultTypeInternal;
extern BasecallerConfiguration_ReadFilteringDefaultTypeInternal _BasecallerConfiguration_ReadFiltering_default_instance_;
class BasecallerConfiguration_TargetFiltering;
struct BasecallerConfiguration_TargetFilteringDefaultTypeInternal;
extern BasecallerConfiguration_TargetFilteringDefaultTypeInternal _BasecallerConfiguration_TargetFiltering_default_instance_;
class ChannelStates;
struct ChannelStatesDefaultTypeInternal;
extern ChannelStatesDefaultTypeInternal _ChannelStates_default_instance_;
class ChannelStates_Group;
struct ChannelStates_GroupDefaultTypeInternal;
extern ChannelStates_GroupDefaultTypeInternal _ChannelStates_Group_default_instance_;
class ChannelStates_Logic;
struct ChannelStates_LogicDefaultTypeInternal;
extern ChannelStates_LogicDefaultTypeInternal _ChannelStates_Logic_default_instance_;
class ChannelStates_Logic_Behaviour;
struct ChannelStates_Logic_BehaviourDefaultTypeInternal;
extern ChannelStates_Logic_BehaviourDefaultTypeInternal _ChannelStates_Logic_Behaviour_default_instance_;
class ChannelStates_Logic_Ranges;
struct ChannelStates_Logic_RangesDefaultTypeInternal;
extern ChannelStates_Logic_RangesDefaultTypeInternal _ChannelStates_Logic_Ranges_default_instance_;
class ChannelStates_Logic_Ranges_Range;
struct ChannelStates_Logic_Ranges_RangeDefaultTypeInternal;
extern ChannelStates_Logic_Ranges_RangeDefaultTypeInternal _ChannelStates_Logic_Ranges_Range_default_instance_;
class ChannelStates_Style;
struct ChannelStates_StyleDefaultTypeInternal;
extern ChannelStates_StyleDefaultTypeInternal _ChannelStates_Style_default_instance_;
class EventDetection;
struct EventDetectionDefaultTypeInternal;
extern EventDetectionDefaultTypeInternal _EventDetection_default_instance_;
class GetAnalysisConfigurationRequest;
struct GetAnalysisConfigurationRequestDefaultTypeInternal;
extern GetAnalysisConfigurationRequestDefaultTypeInternal _GetAnalysisConfigurationRequest_default_instance_;
class GetBasecallerConfigurationRequest;
struct GetBasecallerConfigurationRequestDefaultTypeInternal;
extern GetBasecallerConfigurationRequestDefaultTypeInternal _GetBasecallerConfigurationRequest_default_instance_;
class GetChannelStatesDescRequest;
struct GetChannelStatesDescRequestDefaultTypeInternal;
extern GetChannelStatesDescRequestDefaultTypeInternal _GetChannelStatesDescRequest_default_instance_;
class GetChannelStatesDescResponse;
struct GetChannelStatesDescResponseDefaultTypeInternal;
extern GetChannelStatesDescResponseDefaultTypeInternal _GetChannelStatesDescResponse_default_instance_;
class GetChannelStatesDescResponse_ChannelState;
struct GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal;
extern GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal _GetChannelStatesDescResponse_ChannelState_default_instance_;
class GetChannelStatesDescResponse_Group;
struct GetChannelStatesDescResponse_GroupDefaultTypeInternal;
extern GetChannelStatesDescResponse_GroupDefaultTypeInternal _GetChannelStatesDescResponse_Group_default_instance_;
class GetChannelStatesDescResponse_Style;
struct GetChannelStatesDescResponse_StyleDefaultTypeInternal;
extern GetChannelStatesDescResponse_StyleDefaultTypeInternal _GetChannelStatesDescResponse_Style_default_instance_;
class GetPoreTypeConfigurationRequest;
struct GetPoreTypeConfigurationRequestDefaultTypeInternal;
extern GetPoreTypeConfigurationRequestDefaultTypeInternal _GetPoreTypeConfigurationRequest_default_instance_;
class GetReadClassificationsRequest;
struct GetReadClassificationsRequestDefaultTypeInternal;
extern GetReadClassificationsRequestDefaultTypeInternal _GetReadClassificationsRequest_default_instance_;
class GetReadClassificationsResponse;
struct GetReadClassificationsResponseDefaultTypeInternal;
extern GetReadClassificationsResponseDefaultTypeInternal _GetReadClassificationsResponse_default_instance_;
class GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse;
struct GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal;
extern GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal _GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse_default_instance_;
class GetSummaryRequest;
struct GetSummaryRequestDefaultTypeInternal;
extern GetSummaryRequestDefaultTypeInternal _GetSummaryRequest_default_instance_;
class GetSummaryResponse;
struct GetSummaryResponseDefaultTypeInternal;
extern GetSummaryResponseDefaultTypeInternal _GetSummaryResponse_default_instance_;
class GetWriterConfigurationRequest;
struct GetWriterConfigurationRequestDefaultTypeInternal;
extern GetWriterConfigurationRequestDefaultTypeInternal _GetWriterConfigurationRequest_default_instance_;
class LampConfiguration;
struct LampConfigurationDefaultTypeInternal;
extern LampConfigurationDefaultTypeInternal _LampConfiguration_default_instance_;
class PoreTypeConfiguration;
struct PoreTypeConfigurationDefaultTypeInternal;
extern PoreTypeConfigurationDefaultTypeInternal _PoreTypeConfiguration_default_instance_;
class PoreTypeConfiguration_ChannelWell;
struct PoreTypeConfiguration_ChannelWellDefaultTypeInternal;
extern PoreTypeConfiguration_ChannelWellDefaultTypeInternal _PoreTypeConfiguration_ChannelWell_default_instance_;
class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations;
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal;
extern PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_default_instance_;
class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList;
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal;
extern PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList_default_instance_;
class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse;
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal;
extern PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse_default_instance_;
class ReadClassificationParams;
struct ReadClassificationParamsDefaultTypeInternal;
extern ReadClassificationParamsDefaultTypeInternal _ReadClassificationParams_default_instance_;
class ReadClassificationParams_Parameters;
struct ReadClassificationParams_ParametersDefaultTypeInternal;
extern ReadClassificationParams_ParametersDefaultTypeInternal _ReadClassificationParams_Parameters_default_instance_;
class ReadDetectionParams;
struct ReadDetectionParamsDefaultTypeInternal;
extern ReadDetectionParamsDefaultTypeInternal _ReadDetectionParams_default_instance_;
class ResetAnalysisConfigurationRequest;
struct ResetAnalysisConfigurationRequestDefaultTypeInternal;
extern ResetAnalysisConfigurationRequestDefaultTypeInternal _ResetAnalysisConfigurationRequest_default_instance_;
class ResetAnalysisConfigurationResponse;
struct ResetAnalysisConfigurationResponseDefaultTypeInternal;
extern ResetAnalysisConfigurationResponseDefaultTypeInternal _ResetAnalysisConfigurationResponse_default_instance_;
class SetAnalysisConfigurationResponse;
struct SetAnalysisConfigurationResponseDefaultTypeInternal;
extern SetAnalysisConfigurationResponseDefaultTypeInternal _SetAnalysisConfigurationResponse_default_instance_;
class SetAnalysisEnabledStateRequest;
struct SetAnalysisEnabledStateRequestDefaultTypeInternal;
extern SetAnalysisEnabledStateRequestDefaultTypeInternal _SetAnalysisEnabledStateRequest_default_instance_;
class SetAnalysisEnabledStateResponse;
struct SetAnalysisEnabledStateResponseDefaultTypeInternal;
extern SetAnalysisEnabledStateResponseDefaultTypeInternal _SetAnalysisEnabledStateResponse_default_instance_;
class SetBasecallerConfigurationRequest;
struct SetBasecallerConfigurationRequestDefaultTypeInternal;
extern SetBasecallerConfigurationRequestDefaultTypeInternal _SetBasecallerConfigurationRequest_default_instance_;
class SetBasecallerConfigurationResponse;
struct SetBasecallerConfigurationResponseDefaultTypeInternal;
extern SetBasecallerConfigurationResponseDefaultTypeInternal _SetBasecallerConfigurationResponse_default_instance_;
class SetPoreTypeConfigurationResponse;
struct SetPoreTypeConfigurationResponseDefaultTypeInternal;
extern SetPoreTypeConfigurationResponseDefaultTypeInternal _SetPoreTypeConfigurationResponse_default_instance_;
class SetWriterConfigurationResponse;
struct SetWriterConfigurationResponseDefaultTypeInternal;
extern SetWriterConfigurationResponseDefaultTypeInternal _SetWriterConfigurationResponse_default_instance_;
class WriterConfiguration;
struct WriterConfigurationDefaultTypeInternal;
extern WriterConfigurationDefaultTypeInternal _WriterConfiguration_default_instance_;
class WriterConfiguration_BulkConfiguration;
struct WriterConfiguration_BulkConfigurationDefaultTypeInternal;
extern WriterConfiguration_BulkConfigurationDefaultTypeInternal _WriterConfiguration_BulkConfiguration_default_instance_;
class WriterConfiguration_ChannelConfiguration;
struct WriterConfiguration_ChannelConfigurationDefaultTypeInternal;
extern WriterConfiguration_ChannelConfigurationDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_default_instance_;
class WriterConfiguration_ChannelConfiguration_ChannelList;
struct WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal;
extern WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelList_default_instance_;
class WriterConfiguration_ChannelConfiguration_ChannelRanges;
struct WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal;
extern WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelRanges_default_instance_;
class WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange;
struct WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal;
extern WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange_default_instance_;
class WriterConfiguration_ReadBamConfiguration;
struct WriterConfiguration_ReadBamConfigurationDefaultTypeInternal;
extern WriterConfiguration_ReadBamConfigurationDefaultTypeInternal _WriterConfiguration_ReadBamConfiguration_default_instance_;
class WriterConfiguration_ReadFast5Configuration;
struct WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal;
extern WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal _WriterConfiguration_ReadFast5Configuration_default_instance_;
class WriterConfiguration_ReadFastqConfiguration;
struct WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal;
extern WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal _WriterConfiguration_ReadFastqConfiguration_default_instance_;
class WriterConfiguration_ReadProtobufConfiguration;
struct WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal;
extern WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal _WriterConfiguration_ReadProtobufConfiguration_default_instance_;
class WriterConfiguration_ReportConfiguration;
struct WriterConfiguration_ReportConfigurationDefaultTypeInternal;
extern WriterConfiguration_ReportConfigurationDefaultTypeInternal _WriterConfiguration_ReportConfiguration_default_instance_;
class WriterConfiguration_SequencingSummaryConfiguration;
struct WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal;
extern WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal _WriterConfiguration_SequencingSummaryConfiguration_default_instance_;
}  // namespace analysis_configuration
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::analysis_configuration::AlignmentConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::AlignmentConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::AnalysisConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::AnalysisConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse>(Arena*);
template<> ::minknow_api::analysis_configuration::BarcodingConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::BarcodingConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::BasecallerConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering>(Arena*);
template<> ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Group* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Group>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Logic* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range>(Arena*);
template<> ::minknow_api::analysis_configuration::ChannelStates_Style* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Style>(Arena*);
template<> ::minknow_api::analysis_configuration::EventDetection* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::EventDetection>(Arena*);
template<> ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState>(Arena*);
template<> ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group>(Arena*);
template<> ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style>(Arena*);
template<> ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetReadClassificationsRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetReadClassificationsRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetReadClassificationsResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetReadClassificationsResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse>(Arena*);
template<> ::minknow_api::analysis_configuration::GetSummaryRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetSummaryRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::GetSummaryResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetSummaryResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::GetWriterConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::LampConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::LampConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::PoreTypeConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::PoreTypeConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell>(Arena*);
template<> ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations>(Arena*);
template<> ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList>(Arena*);
template<> ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse>(Arena*);
template<> ::minknow_api::analysis_configuration::ReadClassificationParams* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ReadClassificationParams>(Arena*);
template<> ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ReadClassificationParams_Parameters>(Arena*);
template<> ::minknow_api::analysis_configuration::ReadDetectionParams* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ReadDetectionParams>(Arena*);
template<> ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest>(Arena*);
template<> ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::SetWriterConfigurationResponse>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration>(Arena*);
template<> ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* Arena::CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace analysis_configuration {

enum ReadDetectionParams_ReadDetectionMode : int {
  ReadDetectionParams_ReadDetectionMode_none = 0,
  ReadDetectionParams_ReadDetectionMode_transition = 1,
  ReadDetectionParams_ReadDetectionMode_lookback = 2,
  ReadDetectionParams_ReadDetectionMode_minmax = 3,
  ReadDetectionParams_ReadDetectionMode_ReadDetectionParams_ReadDetectionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadDetectionParams_ReadDetectionMode_ReadDetectionParams_ReadDetectionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadDetectionParams_ReadDetectionMode_IsValid(int value);
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_MIN = ReadDetectionParams_ReadDetectionMode_none;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_MAX = ReadDetectionParams_ReadDetectionMode_minmax;
constexpr int ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_ARRAYSIZE = ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadDetectionParams_ReadDetectionMode_descriptor();
template<typename T>
inline const std::string& ReadDetectionParams_ReadDetectionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadDetectionParams_ReadDetectionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadDetectionParams_ReadDetectionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadDetectionParams_ReadDetectionMode_descriptor(), enum_t_value);
}
inline bool ReadDetectionParams_ReadDetectionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadDetectionParams_ReadDetectionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadDetectionParams_ReadDetectionMode>(
    ReadDetectionParams_ReadDetectionMode_descriptor(), name, value);
}
enum ReadClassificationParams_Scheme : int {
  ReadClassificationParams_Scheme_none = 0,
  ReadClassificationParams_Scheme_parsed = 1,
  ReadClassificationParams_Scheme_ReadClassificationParams_Scheme_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadClassificationParams_Scheme_ReadClassificationParams_Scheme_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadClassificationParams_Scheme_IsValid(int value);
constexpr ReadClassificationParams_Scheme ReadClassificationParams_Scheme_Scheme_MIN = ReadClassificationParams_Scheme_none;
constexpr ReadClassificationParams_Scheme ReadClassificationParams_Scheme_Scheme_MAX = ReadClassificationParams_Scheme_parsed;
constexpr int ReadClassificationParams_Scheme_Scheme_ARRAYSIZE = ReadClassificationParams_Scheme_Scheme_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadClassificationParams_Scheme_descriptor();
template<typename T>
inline const std::string& ReadClassificationParams_Scheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadClassificationParams_Scheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadClassificationParams_Scheme_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadClassificationParams_Scheme_descriptor(), enum_t_value);
}
inline bool ReadClassificationParams_Scheme_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReadClassificationParams_Scheme* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadClassificationParams_Scheme>(
    ReadClassificationParams_Scheme_descriptor(), name, value);
}
enum WriterConfiguration_CompressionType : int {
  WriterConfiguration_CompressionType_DefaultCompression = 0,
  WriterConfiguration_CompressionType_ZlibCompression = 1,
  WriterConfiguration_CompressionType_VbzCompression = 2,
  WriterConfiguration_CompressionType_WriterConfiguration_CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriterConfiguration_CompressionType_WriterConfiguration_CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriterConfiguration_CompressionType_IsValid(int value);
constexpr WriterConfiguration_CompressionType WriterConfiguration_CompressionType_CompressionType_MIN = WriterConfiguration_CompressionType_DefaultCompression;
constexpr WriterConfiguration_CompressionType WriterConfiguration_CompressionType_CompressionType_MAX = WriterConfiguration_CompressionType_VbzCompression;
constexpr int WriterConfiguration_CompressionType_CompressionType_ARRAYSIZE = WriterConfiguration_CompressionType_CompressionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriterConfiguration_CompressionType_descriptor();
template<typename T>
inline const std::string& WriterConfiguration_CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriterConfiguration_CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriterConfiguration_CompressionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriterConfiguration_CompressionType_descriptor(), enum_t_value);
}
inline bool WriterConfiguration_CompressionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WriterConfiguration_CompressionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriterConfiguration_CompressionType>(
    WriterConfiguration_CompressionType_descriptor(), name, value);
}
// ===================================================================

class EventDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.EventDetection) */ {
 public:
  inline EventDetection() : EventDetection(nullptr) {}
  ~EventDetection() override;
  explicit constexpr EventDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventDetection(const EventDetection& from);
  EventDetection(EventDetection&& from) noexcept
    : EventDetection() {
    *this = ::std::move(from);
  }

  inline EventDetection& operator=(const EventDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDetection& operator=(EventDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventDetection* internal_default_instance() {
    return reinterpret_cast<const EventDetection*>(
               &_EventDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventDetection& a, EventDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDetection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventDetection* New() const final {
    return new EventDetection();
  }

  EventDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventDetection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventDetection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventDetection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.EventDetection";
  }
  protected:
  explicit EventDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsToBaseRatioFieldNumber = 16,
    kThresholdFieldNumber = 5,
    kMaxMuxChangeBackShiftFieldNumber = 18,
    kPeakHeightFieldNumber = 9,
    kWindowSizeFieldNumber = 3,
    kBreakOnMuxChangesFieldNumber = 17,
  };
  // .google.protobuf.DoubleValue events_to_base_ratio = 16;
  bool has_events_to_base_ratio() const;
  private:
  bool _internal_has_events_to_base_ratio() const;
  public:
  void clear_events_to_base_ratio();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& events_to_base_ratio() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_events_to_base_ratio();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_events_to_base_ratio();
  void set_allocated_events_to_base_ratio(::PROTOBUF_NAMESPACE_ID::DoubleValue* events_to_base_ratio);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_events_to_base_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_events_to_base_ratio();
  public:
  void unsafe_arena_set_allocated_events_to_base_ratio(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* events_to_base_ratio);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_events_to_base_ratio();

  // double threshold = 5;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);
  private:
  double _internal_threshold() const;
  void _internal_set_threshold(double value);
  public:

  // uint32 max_mux_change_back_shift = 18;
  void clear_max_mux_change_back_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mux_change_back_shift() const;
  void set_max_mux_change_back_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_mux_change_back_shift() const;
  void _internal_set_max_mux_change_back_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double peak_height = 9;
  void clear_peak_height();
  double peak_height() const;
  void set_peak_height(double value);
  private:
  double _internal_peak_height() const;
  void _internal_set_peak_height(double value);
  public:

  // uint32 window_size = 3;
  void clear_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size() const;
  void set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window_size() const;
  void _internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool break_on_mux_changes = 17;
  void clear_break_on_mux_changes();
  bool break_on_mux_changes() const;
  void set_break_on_mux_changes(bool value);
  private:
  bool _internal_break_on_mux_changes() const;
  void _internal_set_break_on_mux_changes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.EventDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* events_to_base_ratio_;
  double threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mux_change_back_shift_;
  double peak_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_;
  bool break_on_mux_changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ReadDetectionParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ReadDetectionParams) */ {
 public:
  inline ReadDetectionParams() : ReadDetectionParams(nullptr) {}
  ~ReadDetectionParams() override;
  explicit constexpr ReadDetectionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadDetectionParams(const ReadDetectionParams& from);
  ReadDetectionParams(ReadDetectionParams&& from) noexcept
    : ReadDetectionParams() {
    *this = ::std::move(from);
  }

  inline ReadDetectionParams& operator=(const ReadDetectionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDetectionParams& operator=(ReadDetectionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadDetectionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadDetectionParams* internal_default_instance() {
    return reinterpret_cast<const ReadDetectionParams*>(
               &_ReadDetectionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadDetectionParams& a, ReadDetectionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDetectionParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDetectionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDetectionParams* New() const final {
    return new ReadDetectionParams();
  }

  ReadDetectionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDetectionParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadDetectionParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadDetectionParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDetectionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ReadDetectionParams";
  }
  protected:
  explicit ReadDetectionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadDetectionParams_ReadDetectionMode ReadDetectionMode;
  static constexpr ReadDetectionMode none =
    ReadDetectionParams_ReadDetectionMode_none;
  static constexpr ReadDetectionMode transition =
    ReadDetectionParams_ReadDetectionMode_transition;
  static constexpr ReadDetectionMode lookback =
    ReadDetectionParams_ReadDetectionMode_lookback;
  static constexpr ReadDetectionMode minmax =
    ReadDetectionParams_ReadDetectionMode_minmax;
  static inline bool ReadDetectionMode_IsValid(int value) {
    return ReadDetectionParams_ReadDetectionMode_IsValid(value);
  }
  static constexpr ReadDetectionMode ReadDetectionMode_MIN =
    ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_MIN;
  static constexpr ReadDetectionMode ReadDetectionMode_MAX =
    ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_MAX;
  static constexpr int ReadDetectionMode_ARRAYSIZE =
    ReadDetectionParams_ReadDetectionMode_ReadDetectionMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadDetectionMode_descriptor() {
    return ReadDetectionParams_ReadDetectionMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadDetectionMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadDetectionMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadDetectionMode_Name.");
    return ReadDetectionParams_ReadDetectionMode_Name(enum_t_value);
  }
  static inline bool ReadDetectionMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReadDetectionMode* value) {
    return ReadDetectionParams_ReadDetectionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBreakReadsAfterEventsFieldNumber = 4,
    kBreakReadsAfterSecondsFieldNumber = 5,
    kOpenPoreMinFieldNumber = 7,
    kOpenPoreMaxFieldNumber = 8,
    kOpenPoreDefaultFieldNumber = 9,
    kOpenPoreSecondsRequiredFieldNumber = 10,
    kMinimumDeltaMeanFieldNumber = 2,
    kModeFieldNumber = 1,
    kLookBackFieldNumber = 3,
    kBreakReadsOnMuxChangesFieldNumber = 6,
  };
  // .google.protobuf.UInt32Value break_reads_after_events = 4;
  bool has_break_reads_after_events() const;
  private:
  bool _internal_has_break_reads_after_events() const;
  public:
  void clear_break_reads_after_events();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& break_reads_after_events() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_break_reads_after_events();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_break_reads_after_events();
  void set_allocated_break_reads_after_events(::PROTOBUF_NAMESPACE_ID::UInt32Value* break_reads_after_events);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_break_reads_after_events() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_break_reads_after_events();
  public:
  void unsafe_arena_set_allocated_break_reads_after_events(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* break_reads_after_events);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_break_reads_after_events();

  // .google.protobuf.DoubleValue break_reads_after_seconds = 5;
  bool has_break_reads_after_seconds() const;
  private:
  bool _internal_has_break_reads_after_seconds() const;
  public:
  void clear_break_reads_after_seconds();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& break_reads_after_seconds() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_break_reads_after_seconds();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_break_reads_after_seconds();
  void set_allocated_break_reads_after_seconds(::PROTOBUF_NAMESPACE_ID::DoubleValue* break_reads_after_seconds);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_break_reads_after_seconds() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_break_reads_after_seconds();
  public:
  void unsafe_arena_set_allocated_break_reads_after_seconds(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* break_reads_after_seconds);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_break_reads_after_seconds();

  // .google.protobuf.DoubleValue open_pore_min = 7;
  bool has_open_pore_min() const;
  private:
  bool _internal_has_open_pore_min() const;
  public:
  void clear_open_pore_min();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_min() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_open_pore_min();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_open_pore_min();
  void set_allocated_open_pore_min(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_min);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_open_pore_min() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_open_pore_min();
  public:
  void unsafe_arena_set_allocated_open_pore_min(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_min);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_open_pore_min();

  // .google.protobuf.DoubleValue open_pore_max = 8;
  bool has_open_pore_max() const;
  private:
  bool _internal_has_open_pore_max() const;
  public:
  void clear_open_pore_max();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_max() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_open_pore_max();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_open_pore_max();
  void set_allocated_open_pore_max(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_max);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_open_pore_max() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_open_pore_max();
  public:
  void unsafe_arena_set_allocated_open_pore_max(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_max);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_open_pore_max();

  // .google.protobuf.DoubleValue open_pore_default = 9;
  bool has_open_pore_default() const;
  private:
  bool _internal_has_open_pore_default() const;
  public:
  void clear_open_pore_default();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_default() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_open_pore_default();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_open_pore_default();
  void set_allocated_open_pore_default(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_default);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_open_pore_default() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_open_pore_default();
  public:
  void unsafe_arena_set_allocated_open_pore_default(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_default);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_open_pore_default();

  // .google.protobuf.DoubleValue open_pore_seconds_required = 10;
  bool has_open_pore_seconds_required() const;
  private:
  bool _internal_has_open_pore_seconds_required() const;
  public:
  void clear_open_pore_seconds_required();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_seconds_required() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_open_pore_seconds_required();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_open_pore_seconds_required();
  void set_allocated_open_pore_seconds_required(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_seconds_required);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_open_pore_seconds_required() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_open_pore_seconds_required();
  public:
  void unsafe_arena_set_allocated_open_pore_seconds_required(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_seconds_required);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_open_pore_seconds_required();

  // double minimum_delta_mean = 2;
  void clear_minimum_delta_mean();
  double minimum_delta_mean() const;
  void set_minimum_delta_mean(double value);
  private:
  double _internal_minimum_delta_mean() const;
  void _internal_set_minimum_delta_mean(double value);
  public:

  // .minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode mode = 1;
  void clear_mode();
  ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode mode() const;
  void set_mode(::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode value);
  private:
  ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode _internal_mode() const;
  void _internal_set_mode(::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode value);
  public:

  // uint32 look_back = 3;
  void clear_look_back();
  ::PROTOBUF_NAMESPACE_ID::uint32 look_back() const;
  void set_look_back(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_look_back() const;
  void _internal_set_look_back(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool break_reads_on_mux_changes = 6;
  void clear_break_reads_on_mux_changes();
  bool break_reads_on_mux_changes() const;
  void set_break_reads_on_mux_changes(bool value);
  private:
  bool _internal_break_reads_on_mux_changes() const;
  void _internal_set_break_reads_on_mux_changes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadDetectionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* break_reads_after_events_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* break_reads_after_seconds_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_min_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_max_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_default_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_seconds_required_;
  double minimum_delta_mean_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 look_back_;
  bool break_reads_on_mux_changes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ReadClassificationParams_Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ReadClassificationParams.Parameters) */ {
 public:
  inline ReadClassificationParams_Parameters() : ReadClassificationParams_Parameters(nullptr) {}
  ~ReadClassificationParams_Parameters() override;
  explicit constexpr ReadClassificationParams_Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadClassificationParams_Parameters(const ReadClassificationParams_Parameters& from);
  ReadClassificationParams_Parameters(ReadClassificationParams_Parameters&& from) noexcept
    : ReadClassificationParams_Parameters() {
    *this = ::std::move(from);
  }

  inline ReadClassificationParams_Parameters& operator=(const ReadClassificationParams_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadClassificationParams_Parameters& operator=(ReadClassificationParams_Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadClassificationParams_Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadClassificationParams_Parameters* internal_default_instance() {
    return reinterpret_cast<const ReadClassificationParams_Parameters*>(
               &_ReadClassificationParams_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadClassificationParams_Parameters& a, ReadClassificationParams_Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadClassificationParams_Parameters* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadClassificationParams_Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadClassificationParams_Parameters* New() const final {
    return new ReadClassificationParams_Parameters();
  }

  ReadClassificationParams_Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadClassificationParams_Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadClassificationParams_Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadClassificationParams_Parameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadClassificationParams_Parameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ReadClassificationParams.Parameters";
  }
  protected:
  explicit ReadClassificationParams_Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesInExecutionOrderFieldNumber = 2,
  };
  // repeated string rules_in_execution_order = 2;
  int rules_in_execution_order_size() const;
  private:
  int _internal_rules_in_execution_order_size() const;
  public:
  void clear_rules_in_execution_order();
  const std::string& rules_in_execution_order(int index) const;
  std::string* mutable_rules_in_execution_order(int index);
  void set_rules_in_execution_order(int index, const std::string& value);
  void set_rules_in_execution_order(int index, std::string&& value);
  void set_rules_in_execution_order(int index, const char* value);
  void set_rules_in_execution_order(int index, const char* value, size_t size);
  std::string* add_rules_in_execution_order();
  void add_rules_in_execution_order(const std::string& value);
  void add_rules_in_execution_order(std::string&& value);
  void add_rules_in_execution_order(const char* value);
  void add_rules_in_execution_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rules_in_execution_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rules_in_execution_order();
  private:
  const std::string& _internal_rules_in_execution_order(int index) const;
  std::string* _internal_add_rules_in_execution_order();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rules_in_execution_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ReadClassificationParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ReadClassificationParams) */ {
 public:
  inline ReadClassificationParams() : ReadClassificationParams(nullptr) {}
  ~ReadClassificationParams() override;
  explicit constexpr ReadClassificationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadClassificationParams(const ReadClassificationParams& from);
  ReadClassificationParams(ReadClassificationParams&& from) noexcept
    : ReadClassificationParams() {
    *this = ::std::move(from);
  }

  inline ReadClassificationParams& operator=(const ReadClassificationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadClassificationParams& operator=(ReadClassificationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadClassificationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadClassificationParams* internal_default_instance() {
    return reinterpret_cast<const ReadClassificationParams*>(
               &_ReadClassificationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadClassificationParams& a, ReadClassificationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadClassificationParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadClassificationParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadClassificationParams* New() const final {
    return new ReadClassificationParams();
  }

  ReadClassificationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadClassificationParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadClassificationParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadClassificationParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadClassificationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ReadClassificationParams";
  }
  protected:
  explicit ReadClassificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadClassificationParams_Parameters Parameters;

  typedef ReadClassificationParams_Scheme Scheme;
  static constexpr Scheme none =
    ReadClassificationParams_Scheme_none;
  static constexpr Scheme parsed =
    ReadClassificationParams_Scheme_parsed;
  static inline bool Scheme_IsValid(int value) {
    return ReadClassificationParams_Scheme_IsValid(value);
  }
  static constexpr Scheme Scheme_MIN =
    ReadClassificationParams_Scheme_Scheme_MIN;
  static constexpr Scheme Scheme_MAX =
    ReadClassificationParams_Scheme_Scheme_MAX;
  static constexpr int Scheme_ARRAYSIZE =
    ReadClassificationParams_Scheme_Scheme_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scheme_descriptor() {
    return ReadClassificationParams_Scheme_descriptor();
  }
  template<typename T>
  static inline const std::string& Scheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scheme_Name.");
    return ReadClassificationParams_Scheme_Name(enum_t_value);
  }
  static inline bool Scheme_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scheme* value) {
    return ReadClassificationParams_Scheme_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedClassificationsFieldNumber = 3,
    kOpenPoreClassificationsFieldNumber = 6,
    kClassificationStrategyFieldNumber = 4,
    kMaxSampleSizeFieldNumber = 2,
    kParametersFieldNumber = 5,
    kOpenPoreEwmaWeightFieldNumber = 7,
    kSchemeModuleFieldNumber = 1,
  };
  // repeated string selected_classifications = 3;
  int selected_classifications_size() const;
  private:
  int _internal_selected_classifications_size() const;
  public:
  void clear_selected_classifications();
  const std::string& selected_classifications(int index) const;
  std::string* mutable_selected_classifications(int index);
  void set_selected_classifications(int index, const std::string& value);
  void set_selected_classifications(int index, std::string&& value);
  void set_selected_classifications(int index, const char* value);
  void set_selected_classifications(int index, const char* value, size_t size);
  std::string* add_selected_classifications();
  void add_selected_classifications(const std::string& value);
  void add_selected_classifications(std::string&& value);
  void add_selected_classifications(const char* value);
  void add_selected_classifications(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& selected_classifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_selected_classifications();
  private:
  const std::string& _internal_selected_classifications(int index) const;
  std::string* _internal_add_selected_classifications();
  public:

  // repeated string open_pore_classifications = 6;
  int open_pore_classifications_size() const;
  private:
  int _internal_open_pore_classifications_size() const;
  public:
  void clear_open_pore_classifications();
  const std::string& open_pore_classifications(int index) const;
  std::string* mutable_open_pore_classifications(int index);
  void set_open_pore_classifications(int index, const std::string& value);
  void set_open_pore_classifications(int index, std::string&& value);
  void set_open_pore_classifications(int index, const char* value);
  void set_open_pore_classifications(int index, const char* value, size_t size);
  std::string* add_open_pore_classifications();
  void add_open_pore_classifications(const std::string& value);
  void add_open_pore_classifications(std::string&& value);
  void add_open_pore_classifications(const char* value);
  void add_open_pore_classifications(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& open_pore_classifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_open_pore_classifications();
  private:
  const std::string& _internal_open_pore_classifications(int index) const;
  std::string* _internal_add_open_pore_classifications();
  public:

  // string classification_strategy = 4;
  void clear_classification_strategy();
  const std::string& classification_strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classification_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classification_strategy();
  PROTOBUF_MUST_USE_RESULT std::string* release_classification_strategy();
  void set_allocated_classification_strategy(std::string* classification_strategy);
  private:
  const std::string& _internal_classification_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classification_strategy(const std::string& value);
  std::string* _internal_mutable_classification_strategy();
  public:

  // .google.protobuf.UInt64Value max_sample_size = 2;
  bool has_max_sample_size() const;
  private:
  bool _internal_has_max_sample_size() const;
  public:
  void clear_max_sample_size();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_sample_size() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_max_sample_size();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_max_sample_size();
  void set_allocated_max_sample_size(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_sample_size);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_max_sample_size() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_max_sample_size();
  public:
  void unsafe_arena_set_allocated_max_sample_size(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_sample_size);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_max_sample_size();

  // .minknow_api.analysis_configuration.ReadClassificationParams.Parameters parameters = 5;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters& parameters() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* release_parameters();
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* mutable_parameters();
  void set_allocated_parameters(::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* parameters);
  private:
  const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters& _internal_parameters() const;
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* parameters);
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* unsafe_arena_release_parameters();

  // .google.protobuf.DoubleValue open_pore_ewma_weight = 7;
  bool has_open_pore_ewma_weight() const;
  private:
  bool _internal_has_open_pore_ewma_weight() const;
  public:
  void clear_open_pore_ewma_weight();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_ewma_weight() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_open_pore_ewma_weight();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_open_pore_ewma_weight();
  void set_allocated_open_pore_ewma_weight(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_ewma_weight);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_open_pore_ewma_weight() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_open_pore_ewma_weight();
  public:
  void unsafe_arena_set_allocated_open_pore_ewma_weight(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_ewma_weight);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_open_pore_ewma_weight();

  // .minknow_api.analysis_configuration.ReadClassificationParams.Scheme scheme_module = 1;
  void clear_scheme_module();
  ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme scheme_module() const;
  void set_scheme_module(::minknow_api::analysis_configuration::ReadClassificationParams_Scheme value);
  private:
  ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme _internal_scheme_module() const;
  void _internal_set_scheme_module(::minknow_api::analysis_configuration::ReadClassificationParams_Scheme value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ReadClassificationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> selected_classifications_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> open_pore_classifications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classification_strategy_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_sample_size_;
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* parameters_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_ewma_weight_;
  int scheme_module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Logic_Behaviour final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour) */ {
 public:
  inline ChannelStates_Logic_Behaviour() : ChannelStates_Logic_Behaviour(nullptr) {}
  ~ChannelStates_Logic_Behaviour() override;
  explicit constexpr ChannelStates_Logic_Behaviour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Logic_Behaviour(const ChannelStates_Logic_Behaviour& from);
  ChannelStates_Logic_Behaviour(ChannelStates_Logic_Behaviour&& from) noexcept
    : ChannelStates_Logic_Behaviour() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Logic_Behaviour& operator=(const ChannelStates_Logic_Behaviour& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Logic_Behaviour& operator=(ChannelStates_Logic_Behaviour&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Logic_Behaviour& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Logic_Behaviour* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Logic_Behaviour*>(
               &_ChannelStates_Logic_Behaviour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChannelStates_Logic_Behaviour& a, ChannelStates_Logic_Behaviour& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Logic_Behaviour* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Logic_Behaviour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Logic_Behaviour* New() const final {
    return new ChannelStates_Logic_Behaviour();
  }

  ChannelStates_Logic_Behaviour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Logic_Behaviour>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Logic_Behaviour& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Logic_Behaviour& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Logic_Behaviour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour";
  }
  protected:
  explicit ChannelStates_Logic_Behaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResetOnMuxChangeFieldNumber = 1,
    kResetOnWellChangeFieldNumber = 2,
    kLatchFieldNumber = 3,
    kResetOnEffectiveMuxChangeFieldNumber = 4,
    kResetOnEffectiveWellChangeFieldNumber = 5,
  };
  // int32 reset_on_mux_change = 1;
  void clear_reset_on_mux_change();
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_mux_change() const;
  void set_reset_on_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reset_on_mux_change() const;
  void _internal_set_reset_on_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reset_on_well_change = 2;
  void clear_reset_on_well_change();
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_well_change() const;
  void set_reset_on_well_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reset_on_well_change() const;
  void _internal_set_reset_on_well_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 latch = 3;
  void clear_latch();
  ::PROTOBUF_NAMESPACE_ID::int32 latch() const;
  void set_latch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latch() const;
  void _internal_set_latch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reset_on_effective_mux_change = 4;
  void clear_reset_on_effective_mux_change();
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_effective_mux_change() const;
  void set_reset_on_effective_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reset_on_effective_mux_change() const;
  void _internal_set_reset_on_effective_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reset_on_effective_well_change = 5;
  void clear_reset_on_effective_well_change();
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_effective_well_change() const;
  void set_reset_on_effective_well_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reset_on_effective_well_change() const;
  void _internal_set_reset_on_effective_well_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_mux_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_well_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 latch_;
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_effective_mux_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 reset_on_effective_well_change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Logic_Ranges_Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range) */ {
 public:
  inline ChannelStates_Logic_Ranges_Range() : ChannelStates_Logic_Ranges_Range(nullptr) {}
  ~ChannelStates_Logic_Ranges_Range() override;
  explicit constexpr ChannelStates_Logic_Ranges_Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Logic_Ranges_Range(const ChannelStates_Logic_Ranges_Range& from);
  ChannelStates_Logic_Ranges_Range(ChannelStates_Logic_Ranges_Range&& from) noexcept
    : ChannelStates_Logic_Ranges_Range() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Logic_Ranges_Range& operator=(const ChannelStates_Logic_Ranges_Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Logic_Ranges_Range& operator=(ChannelStates_Logic_Ranges_Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Logic_Ranges_Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Logic_Ranges_Range* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Logic_Ranges_Range*>(
               &_ChannelStates_Logic_Ranges_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelStates_Logic_Ranges_Range& a, ChannelStates_Logic_Ranges_Range& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Logic_Ranges_Range* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Logic_Ranges_Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Logic_Ranges_Range* New() const final {
    return new ChannelStates_Logic_Ranges_Range();
  }

  ChannelStates_Logic_Ranges_Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Logic_Ranges_Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Logic_Ranges_Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Logic_Ranges_Range& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Logic_Ranges_Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range";
  }
  protected:
  explicit ChannelStates_Logic_Ranges_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerPaFieldNumber = 1,
    kUpperPaFieldNumber = 2,
  };
  // int32 lower_pa = 1;
  void clear_lower_pa();
  ::PROTOBUF_NAMESPACE_ID::int32 lower_pa() const;
  void set_lower_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lower_pa() const;
  void _internal_set_lower_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upper_pa = 2;
  void clear_upper_pa();
  ::PROTOBUF_NAMESPACE_ID::int32 upper_pa() const;
  void set_upper_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upper_pa() const;
  void _internal_set_upper_pa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lower_pa_;
  ::PROTOBUF_NAMESPACE_ID::int32 upper_pa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Logic_Ranges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges) */ {
 public:
  inline ChannelStates_Logic_Ranges() : ChannelStates_Logic_Ranges(nullptr) {}
  ~ChannelStates_Logic_Ranges() override;
  explicit constexpr ChannelStates_Logic_Ranges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Logic_Ranges(const ChannelStates_Logic_Ranges& from);
  ChannelStates_Logic_Ranges(ChannelStates_Logic_Ranges&& from) noexcept
    : ChannelStates_Logic_Ranges() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Logic_Ranges& operator=(const ChannelStates_Logic_Ranges& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Logic_Ranges& operator=(ChannelStates_Logic_Ranges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Logic_Ranges& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Logic_Ranges* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Logic_Ranges*>(
               &_ChannelStates_Logic_Ranges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChannelStates_Logic_Ranges& a, ChannelStates_Logic_Ranges& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Logic_Ranges* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Logic_Ranges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Logic_Ranges* New() const final {
    return new ChannelStates_Logic_Ranges();
  }

  ChannelStates_Logic_Ranges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Logic_Ranges>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Logic_Ranges& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Logic_Ranges& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Logic_Ranges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Logic.Ranges";
  }
  protected:
  explicit ChannelStates_Logic_Ranges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelStates_Logic_Ranges_Range Range;

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range& range() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* release_range();
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* mutable_range();
  void set_allocated_range(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* range);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range& _internal_range() const;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* range);
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* unsafe_arena_release_range();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Logic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Logic) */ {
 public:
  inline ChannelStates_Logic() : ChannelStates_Logic(nullptr) {}
  ~ChannelStates_Logic() override;
  explicit constexpr ChannelStates_Logic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Logic(const ChannelStates_Logic& from);
  ChannelStates_Logic(ChannelStates_Logic&& from) noexcept
    : ChannelStates_Logic() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Logic& operator=(const ChannelStates_Logic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Logic& operator=(ChannelStates_Logic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Logic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Logic* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Logic*>(
               &_ChannelStates_Logic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChannelStates_Logic& a, ChannelStates_Logic& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Logic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Logic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Logic* New() const final {
    return new ChannelStates_Logic();
  }

  ChannelStates_Logic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Logic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Logic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Logic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Logic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Logic";
  }
  protected:
  explicit ChannelStates_Logic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelStates_Logic_Behaviour Behaviour;
  typedef ChannelStates_Logic_Ranges Ranges;

  // accessors -------------------------------------------------------

  enum : int {
    kCriteriaFieldNumber = 1,
    kPatternFieldNumber = 4,
    kClassificationFieldNumber = 5,
    kRangesFieldNumber = 6,
    kBehaviourFieldNumber = 7,
    kRankFieldNumber = 3,
  };
  // string criteria = 1;
  void clear_criteria();
  const std::string& criteria() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_criteria(ArgT0&& arg0, ArgT... args);
  std::string* mutable_criteria();
  PROTOBUF_MUST_USE_RESULT std::string* release_criteria();
  void set_allocated_criteria(std::string* criteria);
  private:
  const std::string& _internal_criteria() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_criteria(const std::string& value);
  std::string* _internal_mutable_criteria();
  public:

  // string pattern = 4;
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // string classification = 5;
  void clear_classification();
  const std::string& classification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classification();
  PROTOBUF_MUST_USE_RESULT std::string* release_classification();
  void set_allocated_classification(std::string* classification);
  private:
  const std::string& _internal_classification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classification(const std::string& value);
  std::string* _internal_mutable_classification();
  public:

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges ranges = 6;
  bool has_ranges() const;
  private:
  bool _internal_has_ranges() const;
  public:
  void clear_ranges();
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges& ranges() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* release_ranges();
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* mutable_ranges();
  void set_allocated_ranges(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ranges);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges& _internal_ranges() const;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* _internal_mutable_ranges();
  public:
  void unsafe_arena_set_allocated_ranges(
      ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ranges);
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* unsafe_arena_release_ranges();

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour behaviour = 7;
  bool has_behaviour() const;
  private:
  bool _internal_has_behaviour() const;
  public:
  void clear_behaviour();
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour& behaviour() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* release_behaviour();
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* mutable_behaviour();
  void set_allocated_behaviour(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* behaviour);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour& _internal_behaviour() const;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* _internal_mutable_behaviour();
  public:
  void unsafe_arena_set_allocated_behaviour(
      ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* behaviour);
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* unsafe_arena_release_behaviour();

  // int32 rank = 3;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Logic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr criteria_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classification_;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ranges_;
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* behaviour_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Style final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Style) */ {
 public:
  inline ChannelStates_Style() : ChannelStates_Style(nullptr) {}
  ~ChannelStates_Style() override;
  explicit constexpr ChannelStates_Style(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Style(const ChannelStates_Style& from);
  ChannelStates_Style(ChannelStates_Style&& from) noexcept
    : ChannelStates_Style() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Style& operator=(const ChannelStates_Style& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Style& operator=(ChannelStates_Style&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Style& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Style* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Style*>(
               &_ChannelStates_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChannelStates_Style& a, ChannelStates_Style& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Style* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Style* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Style* New() const final {
    return new ChannelStates_Style();
  }

  ChannelStates_Style* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Style>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Style& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Style& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Style* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Style";
  }
  protected:
  explicit ChannelStates_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kColourFieldNumber = 3,
    kOrderFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string colour = 3;
  void clear_colour();
  const std::string& colour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colour();
  PROTOBUF_MUST_USE_RESULT std::string* release_colour();
  void set_allocated_colour(std::string* colour);
  private:
  const std::string& _internal_colour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colour(const std::string& value);
  std::string* _internal_mutable_colour();
  public:

  // .google.protobuf.UInt32Value order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& order() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_order();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_order();
  void set_allocated_order(::PROTOBUF_NAMESPACE_ID::UInt32Value* order);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_order() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* order);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Style)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colour_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates_Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates.Group) */ {
 public:
  inline ChannelStates_Group() : ChannelStates_Group(nullptr) {}
  ~ChannelStates_Group() override;
  explicit constexpr ChannelStates_Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates_Group(const ChannelStates_Group& from);
  ChannelStates_Group(ChannelStates_Group&& from) noexcept
    : ChannelStates_Group() {
    *this = ::std::move(from);
  }

  inline ChannelStates_Group& operator=(const ChannelStates_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates_Group& operator=(ChannelStates_Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates_Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates_Group* internal_default_instance() {
    return reinterpret_cast<const ChannelStates_Group*>(
               &_ChannelStates_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChannelStates_Group& a, ChannelStates_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates_Group* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates_Group* New() const final {
    return new ChannelStates_Group();
  }

  ChannelStates_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates_Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates_Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates_Group& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates.Group";
  }
  protected:
  explicit ChannelStates_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::analysis_configuration::ChannelStates_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Style* release_style();
  ::minknow_api::analysis_configuration::ChannelStates_Style* mutable_style();
  void set_allocated_style(::minknow_api::analysis_configuration::ChannelStates_Style* style);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Style& _internal_style() const;
  ::minknow_api::analysis_configuration::ChannelStates_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::analysis_configuration::ChannelStates_Style* style);
  ::minknow_api::analysis_configuration::ChannelStates_Style* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::ChannelStates_Style* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ChannelStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ChannelStates) */ {
 public:
  inline ChannelStates() : ChannelStates(nullptr) {}
  ~ChannelStates() override;
  explicit constexpr ChannelStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStates(const ChannelStates& from);
  ChannelStates(ChannelStates&& from) noexcept
    : ChannelStates() {
    *this = ::std::move(from);
  }

  inline ChannelStates& operator=(const ChannelStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStates& operator=(ChannelStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStates* internal_default_instance() {
    return reinterpret_cast<const ChannelStates*>(
               &_ChannelStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChannelStates& a, ChannelStates& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStates* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStates* New() const final {
    return new ChannelStates();
  }

  ChannelStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ChannelStates";
  }
  protected:
  explicit ChannelStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelStates_Logic Logic;
  typedef ChannelStates_Style Style;
  typedef ChannelStates_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 5,
    kGroupFieldNumber = 2,
    kLogicFieldNumber = 3,
    kStyleFieldNumber = 4,
  };
  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .minknow_api.analysis_configuration.ChannelStates.Group group = 2;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::minknow_api::analysis_configuration::ChannelStates_Group& group() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Group* release_group();
  ::minknow_api::analysis_configuration::ChannelStates_Group* mutable_group();
  void set_allocated_group(::minknow_api::analysis_configuration::ChannelStates_Group* group);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Group& _internal_group() const;
  ::minknow_api::analysis_configuration::ChannelStates_Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::minknow_api::analysis_configuration::ChannelStates_Group* group);
  ::minknow_api::analysis_configuration::ChannelStates_Group* unsafe_arena_release_group();

  // .minknow_api.analysis_configuration.ChannelStates.Logic logic = 3;
  bool has_logic() const;
  private:
  bool _internal_has_logic() const;
  public:
  void clear_logic();
  const ::minknow_api::analysis_configuration::ChannelStates_Logic& logic() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Logic* release_logic();
  ::minknow_api::analysis_configuration::ChannelStates_Logic* mutable_logic();
  void set_allocated_logic(::minknow_api::analysis_configuration::ChannelStates_Logic* logic);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Logic& _internal_logic() const;
  ::minknow_api::analysis_configuration::ChannelStates_Logic* _internal_mutable_logic();
  public:
  void unsafe_arena_set_allocated_logic(
      ::minknow_api::analysis_configuration::ChannelStates_Logic* logic);
  ::minknow_api::analysis_configuration::ChannelStates_Logic* unsafe_arena_release_logic();

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 4;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::analysis_configuration::ChannelStates_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ChannelStates_Style* release_style();
  ::minknow_api::analysis_configuration::ChannelStates_Style* mutable_style();
  void set_allocated_style(::minknow_api::analysis_configuration::ChannelStates_Style* style);
  private:
  const ::minknow_api::analysis_configuration::ChannelStates_Style& _internal_style() const;
  ::minknow_api::analysis_configuration::ChannelStates_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::analysis_configuration::ChannelStates_Style* style);
  ::minknow_api::analysis_configuration::ChannelStates_Style* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ChannelStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::minknow_api::analysis_configuration::ChannelStates_Group* group_;
  ::minknow_api::analysis_configuration::ChannelStates_Logic* logic_;
  ::minknow_api::analysis_configuration::ChannelStates_Style* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetAnalysisConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetAnalysisConfigurationRequest) */ {
 public:
  inline GetAnalysisConfigurationRequest() : GetAnalysisConfigurationRequest(nullptr) {}
  explicit constexpr GetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAnalysisConfigurationRequest(const GetAnalysisConfigurationRequest& from);
  GetAnalysisConfigurationRequest(GetAnalysisConfigurationRequest&& from) noexcept
    : GetAnalysisConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetAnalysisConfigurationRequest& operator=(const GetAnalysisConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAnalysisConfigurationRequest& operator=(GetAnalysisConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAnalysisConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAnalysisConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAnalysisConfigurationRequest*>(
               &_GetAnalysisConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAnalysisConfigurationRequest& a, GetAnalysisConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAnalysisConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAnalysisConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAnalysisConfigurationRequest* New() const final {
    return new GetAnalysisConfigurationRequest();
  }

  GetAnalysisConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAnalysisConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAnalysisConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAnalysisConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetAnalysisConfigurationRequest";
  }
  protected:
  explicit GetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetAnalysisConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class AnalysisConfiguration_ChannelStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnalysisConfiguration_ChannelStatesEntry_DoNotUse, 
    std::string, ::minknow_api::analysis_configuration::ChannelStates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnalysisConfiguration_ChannelStatesEntry_DoNotUse, 
    std::string, ::minknow_api::analysis_configuration::ChannelStates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AnalysisConfiguration_ChannelStatesEntry_DoNotUse();
  explicit constexpr AnalysisConfiguration_ChannelStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AnalysisConfiguration_ChannelStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnalysisConfiguration_ChannelStatesEntry_DoNotUse& other);
  static const AnalysisConfiguration_ChannelStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnalysisConfiguration_ChannelStatesEntry_DoNotUse*>(&_AnalysisConfiguration_ChannelStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AnalysisConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.AnalysisConfiguration) */ {
 public:
  inline AnalysisConfiguration() : AnalysisConfiguration(nullptr) {}
  ~AnalysisConfiguration() override;
  explicit constexpr AnalysisConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalysisConfiguration(const AnalysisConfiguration& from);
  AnalysisConfiguration(AnalysisConfiguration&& from) noexcept
    : AnalysisConfiguration() {
    *this = ::std::move(from);
  }

  inline AnalysisConfiguration& operator=(const AnalysisConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalysisConfiguration& operator=(AnalysisConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalysisConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalysisConfiguration* internal_default_instance() {
    return reinterpret_cast<const AnalysisConfiguration*>(
               &_AnalysisConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AnalysisConfiguration& a, AnalysisConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalysisConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalysisConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalysisConfiguration* New() const final {
    return new AnalysisConfiguration();
  }

  AnalysisConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalysisConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalysisConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalysisConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalysisConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.AnalysisConfiguration";
  }
  protected:
  explicit AnalysisConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChannelStatesFieldNumber = 7,
    kEventDetectionFieldNumber = 1,
    kReadDetectionFieldNumber = 2,
    kReadClassificationFieldNumber = 4,
  };
  // map<string, .minknow_api.analysis_configuration.ChannelStates> channel_states = 7;
  int channel_states_size() const;
  private:
  int _internal_channel_states_size() const;
  public:
  void clear_channel_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >&
      _internal_channel_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >*
      _internal_mutable_channel_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >&
      channel_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >*
      mutable_channel_states();

  // .minknow_api.analysis_configuration.EventDetection event_detection = 1;
  bool has_event_detection() const;
  private:
  bool _internal_has_event_detection() const;
  public:
  void clear_event_detection();
  const ::minknow_api::analysis_configuration::EventDetection& event_detection() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::EventDetection* release_event_detection();
  ::minknow_api::analysis_configuration::EventDetection* mutable_event_detection();
  void set_allocated_event_detection(::minknow_api::analysis_configuration::EventDetection* event_detection);
  private:
  const ::minknow_api::analysis_configuration::EventDetection& _internal_event_detection() const;
  ::minknow_api::analysis_configuration::EventDetection* _internal_mutable_event_detection();
  public:
  void unsafe_arena_set_allocated_event_detection(
      ::minknow_api::analysis_configuration::EventDetection* event_detection);
  ::minknow_api::analysis_configuration::EventDetection* unsafe_arena_release_event_detection();

  // .minknow_api.analysis_configuration.ReadDetectionParams read_detection = 2;
  bool has_read_detection() const;
  private:
  bool _internal_has_read_detection() const;
  public:
  void clear_read_detection();
  const ::minknow_api::analysis_configuration::ReadDetectionParams& read_detection() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ReadDetectionParams* release_read_detection();
  ::minknow_api::analysis_configuration::ReadDetectionParams* mutable_read_detection();
  void set_allocated_read_detection(::minknow_api::analysis_configuration::ReadDetectionParams* read_detection);
  private:
  const ::minknow_api::analysis_configuration::ReadDetectionParams& _internal_read_detection() const;
  ::minknow_api::analysis_configuration::ReadDetectionParams* _internal_mutable_read_detection();
  public:
  void unsafe_arena_set_allocated_read_detection(
      ::minknow_api::analysis_configuration::ReadDetectionParams* read_detection);
  ::minknow_api::analysis_configuration::ReadDetectionParams* unsafe_arena_release_read_detection();

  // .minknow_api.analysis_configuration.ReadClassificationParams read_classification = 4;
  bool has_read_classification() const;
  private:
  bool _internal_has_read_classification() const;
  public:
  void clear_read_classification();
  const ::minknow_api::analysis_configuration::ReadClassificationParams& read_classification() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::ReadClassificationParams* release_read_classification();
  ::minknow_api::analysis_configuration::ReadClassificationParams* mutable_read_classification();
  void set_allocated_read_classification(::minknow_api::analysis_configuration::ReadClassificationParams* read_classification);
  private:
  const ::minknow_api::analysis_configuration::ReadClassificationParams& _internal_read_classification() const;
  ::minknow_api::analysis_configuration::ReadClassificationParams* _internal_mutable_read_classification();
  public:
  void unsafe_arena_set_allocated_read_classification(
      ::minknow_api::analysis_configuration::ReadClassificationParams* read_classification);
  ::minknow_api::analysis_configuration::ReadClassificationParams* unsafe_arena_release_read_classification();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.AnalysisConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnalysisConfiguration_ChannelStatesEntry_DoNotUse,
      std::string, ::minknow_api::analysis_configuration::ChannelStates,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> channel_states_;
  ::minknow_api::analysis_configuration::EventDetection* event_detection_;
  ::minknow_api::analysis_configuration::ReadDetectionParams* read_detection_;
  ::minknow_api::analysis_configuration::ReadClassificationParams* read_classification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetAnalysisConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetAnalysisConfigurationResponse) */ {
 public:
  inline SetAnalysisConfigurationResponse() : SetAnalysisConfigurationResponse(nullptr) {}
  explicit constexpr SetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnalysisConfigurationResponse(const SetAnalysisConfigurationResponse& from);
  SetAnalysisConfigurationResponse(SetAnalysisConfigurationResponse&& from) noexcept
    : SetAnalysisConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetAnalysisConfigurationResponse& operator=(const SetAnalysisConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnalysisConfigurationResponse& operator=(SetAnalysisConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnalysisConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnalysisConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetAnalysisConfigurationResponse*>(
               &_SetAnalysisConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetAnalysisConfigurationResponse& a, SetAnalysisConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnalysisConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnalysisConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAnalysisConfigurationResponse* New() const final {
    return new SetAnalysisConfigurationResponse();
  }

  SetAnalysisConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnalysisConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetAnalysisConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetAnalysisConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetAnalysisConfigurationResponse";
  }
  protected:
  explicit SetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ResetAnalysisConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest) */ {
 public:
  inline ResetAnalysisConfigurationRequest() : ResetAnalysisConfigurationRequest(nullptr) {}
  explicit constexpr ResetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetAnalysisConfigurationRequest(const ResetAnalysisConfigurationRequest& from);
  ResetAnalysisConfigurationRequest(ResetAnalysisConfigurationRequest&& from) noexcept
    : ResetAnalysisConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline ResetAnalysisConfigurationRequest& operator=(const ResetAnalysisConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetAnalysisConfigurationRequest& operator=(ResetAnalysisConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetAnalysisConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetAnalysisConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const ResetAnalysisConfigurationRequest*>(
               &_ResetAnalysisConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResetAnalysisConfigurationRequest& a, ResetAnalysisConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetAnalysisConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetAnalysisConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetAnalysisConfigurationRequest* New() const final {
    return new ResetAnalysisConfigurationRequest();
  }

  ResetAnalysisConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetAnalysisConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetAnalysisConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetAnalysisConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest";
  }
  protected:
  explicit ResetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ResetAnalysisConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse) */ {
 public:
  inline ResetAnalysisConfigurationResponse() : ResetAnalysisConfigurationResponse(nullptr) {}
  explicit constexpr ResetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetAnalysisConfigurationResponse(const ResetAnalysisConfigurationResponse& from);
  ResetAnalysisConfigurationResponse(ResetAnalysisConfigurationResponse&& from) noexcept
    : ResetAnalysisConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline ResetAnalysisConfigurationResponse& operator=(const ResetAnalysisConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetAnalysisConfigurationResponse& operator=(ResetAnalysisConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetAnalysisConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetAnalysisConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const ResetAnalysisConfigurationResponse*>(
               &_ResetAnalysisConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResetAnalysisConfigurationResponse& a, ResetAnalysisConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetAnalysisConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetAnalysisConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetAnalysisConfigurationResponse* New() const final {
    return new ResetAnalysisConfigurationResponse();
  }

  ResetAnalysisConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetAnalysisConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetAnalysisConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetAnalysisConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse";
  }
  protected:
  explicit ResetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetAnalysisEnabledStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest) */ {
 public:
  inline SetAnalysisEnabledStateRequest() : SetAnalysisEnabledStateRequest(nullptr) {}
  ~SetAnalysisEnabledStateRequest() override;
  explicit constexpr SetAnalysisEnabledStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnalysisEnabledStateRequest(const SetAnalysisEnabledStateRequest& from);
  SetAnalysisEnabledStateRequest(SetAnalysisEnabledStateRequest&& from) noexcept
    : SetAnalysisEnabledStateRequest() {
    *this = ::std::move(from);
  }

  inline SetAnalysisEnabledStateRequest& operator=(const SetAnalysisEnabledStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnalysisEnabledStateRequest& operator=(SetAnalysisEnabledStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnalysisEnabledStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnalysisEnabledStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetAnalysisEnabledStateRequest*>(
               &_SetAnalysisEnabledStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetAnalysisEnabledStateRequest& a, SetAnalysisEnabledStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnalysisEnabledStateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnalysisEnabledStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAnalysisEnabledStateRequest* New() const final {
    return new SetAnalysisEnabledStateRequest();
  }

  SetAnalysisEnabledStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnalysisEnabledStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetAnalysisEnabledStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetAnalysisEnabledStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnalysisEnabledStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest";
  }
  protected:
  explicit SetAnalysisEnabledStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1 [(.minknow_api.rpc_required) = true];
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetAnalysisEnabledStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse) */ {
 public:
  inline SetAnalysisEnabledStateResponse() : SetAnalysisEnabledStateResponse(nullptr) {}
  explicit constexpr SetAnalysisEnabledStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnalysisEnabledStateResponse(const SetAnalysisEnabledStateResponse& from);
  SetAnalysisEnabledStateResponse(SetAnalysisEnabledStateResponse&& from) noexcept
    : SetAnalysisEnabledStateResponse() {
    *this = ::std::move(from);
  }

  inline SetAnalysisEnabledStateResponse& operator=(const SetAnalysisEnabledStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnalysisEnabledStateResponse& operator=(SetAnalysisEnabledStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnalysisEnabledStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnalysisEnabledStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetAnalysisEnabledStateResponse*>(
               &_SetAnalysisEnabledStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetAnalysisEnabledStateResponse& a, SetAnalysisEnabledStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnalysisEnabledStateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnalysisEnabledStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAnalysisEnabledStateResponse* New() const final {
    return new SetAnalysisEnabledStateResponse();
  }

  SetAnalysisEnabledStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnalysisEnabledStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetAnalysisEnabledStateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetAnalysisEnabledStateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse";
  }
  protected:
  explicit SetAnalysisEnabledStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatesDescRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetChannelStatesDescRequest) */ {
 public:
  inline GetChannelStatesDescRequest() : GetChannelStatesDescRequest(nullptr) {}
  explicit constexpr GetChannelStatesDescRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelStatesDescRequest(const GetChannelStatesDescRequest& from);
  GetChannelStatesDescRequest(GetChannelStatesDescRequest&& from) noexcept
    : GetChannelStatesDescRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelStatesDescRequest& operator=(const GetChannelStatesDescRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatesDescRequest& operator=(GetChannelStatesDescRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelStatesDescRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelStatesDescRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatesDescRequest*>(
               &_GetChannelStatesDescRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetChannelStatesDescRequest& a, GetChannelStatesDescRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatesDescRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelStatesDescRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatesDescRequest* New() const final {
    return new GetChannelStatesDescRequest();
  }

  GetChannelStatesDescRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatesDescRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetChannelStatesDescRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetChannelStatesDescRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetChannelStatesDescRequest";
  }
  protected:
  explicit GetChannelStatesDescRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatesDescResponse_Style final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style) */ {
 public:
  inline GetChannelStatesDescResponse_Style() : GetChannelStatesDescResponse_Style(nullptr) {}
  ~GetChannelStatesDescResponse_Style() override;
  explicit constexpr GetChannelStatesDescResponse_Style(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelStatesDescResponse_Style(const GetChannelStatesDescResponse_Style& from);
  GetChannelStatesDescResponse_Style(GetChannelStatesDescResponse_Style&& from) noexcept
    : GetChannelStatesDescResponse_Style() {
    *this = ::std::move(from);
  }

  inline GetChannelStatesDescResponse_Style& operator=(const GetChannelStatesDescResponse_Style& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatesDescResponse_Style& operator=(GetChannelStatesDescResponse_Style&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelStatesDescResponse_Style& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelStatesDescResponse_Style* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatesDescResponse_Style*>(
               &_GetChannelStatesDescResponse_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetChannelStatesDescResponse_Style& a, GetChannelStatesDescResponse_Style& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatesDescResponse_Style* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelStatesDescResponse_Style* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatesDescResponse_Style* New() const final {
    return new GetChannelStatesDescResponse_Style();
  }

  GetChannelStatesDescResponse_Style* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatesDescResponse_Style>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelStatesDescResponse_Style& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelStatesDescResponse_Style& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatesDescResponse_Style* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style";
  }
  protected:
  explicit GetChannelStatesDescResponse_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kColourFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string colour = 3;
  void clear_colour();
  const std::string& colour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colour();
  PROTOBUF_MUST_USE_RESULT std::string* release_colour();
  void set_allocated_colour(std::string* colour);
  private:
  const std::string& _internal_colour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colour(const std::string& value);
  std::string* _internal_mutable_colour();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colour_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatesDescResponse_ChannelState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState) */ {
 public:
  inline GetChannelStatesDescResponse_ChannelState() : GetChannelStatesDescResponse_ChannelState(nullptr) {}
  ~GetChannelStatesDescResponse_ChannelState() override;
  explicit constexpr GetChannelStatesDescResponse_ChannelState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelStatesDescResponse_ChannelState(const GetChannelStatesDescResponse_ChannelState& from);
  GetChannelStatesDescResponse_ChannelState(GetChannelStatesDescResponse_ChannelState&& from) noexcept
    : GetChannelStatesDescResponse_ChannelState() {
    *this = ::std::move(from);
  }

  inline GetChannelStatesDescResponse_ChannelState& operator=(const GetChannelStatesDescResponse_ChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatesDescResponse_ChannelState& operator=(GetChannelStatesDescResponse_ChannelState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelStatesDescResponse_ChannelState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelStatesDescResponse_ChannelState* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatesDescResponse_ChannelState*>(
               &_GetChannelStatesDescResponse_ChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetChannelStatesDescResponse_ChannelState& a, GetChannelStatesDescResponse_ChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatesDescResponse_ChannelState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelStatesDescResponse_ChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatesDescResponse_ChannelState* New() const final {
    return new GetChannelStatesDescResponse_ChannelState();
  }

  GetChannelStatesDescResponse_ChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatesDescResponse_ChannelState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelStatesDescResponse_ChannelState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelStatesDescResponse_ChannelState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatesDescResponse_ChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState";
  }
  protected:
  explicit GetChannelStatesDescResponse_ChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStyleFieldNumber = 3,
    kIdFieldNumber = 1,
    kGlobalOrderFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* release_style();
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* mutable_style();
  void set_allocated_style(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style);
  private:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& _internal_style() const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style);
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* unsafe_arena_release_style();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 global_order = 4;
  void clear_global_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_order() const;
  void set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_order() const;
  void _internal_set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatesDescResponse_Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group) */ {
 public:
  inline GetChannelStatesDescResponse_Group() : GetChannelStatesDescResponse_Group(nullptr) {}
  ~GetChannelStatesDescResponse_Group() override;
  explicit constexpr GetChannelStatesDescResponse_Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelStatesDescResponse_Group(const GetChannelStatesDescResponse_Group& from);
  GetChannelStatesDescResponse_Group(GetChannelStatesDescResponse_Group&& from) noexcept
    : GetChannelStatesDescResponse_Group() {
    *this = ::std::move(from);
  }

  inline GetChannelStatesDescResponse_Group& operator=(const GetChannelStatesDescResponse_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatesDescResponse_Group& operator=(GetChannelStatesDescResponse_Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelStatesDescResponse_Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelStatesDescResponse_Group* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatesDescResponse_Group*>(
               &_GetChannelStatesDescResponse_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetChannelStatesDescResponse_Group& a, GetChannelStatesDescResponse_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatesDescResponse_Group* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelStatesDescResponse_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatesDescResponse_Group* New() const final {
    return new GetChannelStatesDescResponse_Group();
  }

  GetChannelStatesDescResponse_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatesDescResponse_Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelStatesDescResponse_Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelStatesDescResponse_Group& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatesDescResponse_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group";
  }
  protected:
  explicit GetChannelStatesDescResponse_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 3,
    kNameFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState states = 3;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >*
      mutable_states();
  private:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState& _internal_states(int index) const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* _internal_add_states();
  public:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState& states(int index) const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >&
      states() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* release_style();
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* mutable_style();
  void set_allocated_style(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style);
  private:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& _internal_style() const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style);
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatesDescResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetChannelStatesDescResponse) */ {
 public:
  inline GetChannelStatesDescResponse() : GetChannelStatesDescResponse(nullptr) {}
  ~GetChannelStatesDescResponse() override;
  explicit constexpr GetChannelStatesDescResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelStatesDescResponse(const GetChannelStatesDescResponse& from);
  GetChannelStatesDescResponse(GetChannelStatesDescResponse&& from) noexcept
    : GetChannelStatesDescResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelStatesDescResponse& operator=(const GetChannelStatesDescResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatesDescResponse& operator=(GetChannelStatesDescResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelStatesDescResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelStatesDescResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatesDescResponse*>(
               &_GetChannelStatesDescResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetChannelStatesDescResponse& a, GetChannelStatesDescResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatesDescResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelStatesDescResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatesDescResponse* New() const final {
    return new GetChannelStatesDescResponse();
  }

  GetChannelStatesDescResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatesDescResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelStatesDescResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelStatesDescResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatesDescResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetChannelStatesDescResponse";
  }
  protected:
  explicit GetChannelStatesDescResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetChannelStatesDescResponse_Style Style;
  typedef GetChannelStatesDescResponse_ChannelState ChannelState;
  typedef GetChannelStatesDescResponse_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >*
      mutable_groups();
  private:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group& _internal_groups(int index) const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* _internal_add_groups();
  public:
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group& groups(int index) const;
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetSummaryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetSummaryRequest) */ {
 public:
  inline GetSummaryRequest() : GetSummaryRequest(nullptr) {}
  explicit constexpr GetSummaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSummaryRequest(const GetSummaryRequest& from);
  GetSummaryRequest(GetSummaryRequest&& from) noexcept
    : GetSummaryRequest() {
    *this = ::std::move(from);
  }

  inline GetSummaryRequest& operator=(const GetSummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSummaryRequest& operator=(GetSummaryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSummaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSummaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetSummaryRequest*>(
               &_GetSummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetSummaryRequest& a, GetSummaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSummaryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSummaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSummaryRequest* New() const final {
    return new GetSummaryRequest();
  }

  GetSummaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSummaryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSummaryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSummaryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetSummaryRequest";
  }
  protected:
  explicit GetSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetSummaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetSummaryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetSummaryResponse) */ {
 public:
  inline GetSummaryResponse() : GetSummaryResponse(nullptr) {}
  ~GetSummaryResponse() override;
  explicit constexpr GetSummaryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSummaryResponse(const GetSummaryResponse& from);
  GetSummaryResponse(GetSummaryResponse&& from) noexcept
    : GetSummaryResponse() {
    *this = ::std::move(from);
  }

  inline GetSummaryResponse& operator=(const GetSummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSummaryResponse& operator=(GetSummaryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSummaryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSummaryResponse* internal_default_instance() {
    return reinterpret_cast<const GetSummaryResponse*>(
               &_GetSummaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetSummaryResponse& a, GetSummaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSummaryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSummaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSummaryResponse* New() const final {
    return new GetSummaryResponse();
  }

  GetSummaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSummaryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSummaryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSummaryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSummaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetSummaryResponse";
  }
  protected:
  explicit GetSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalysisEnabledFieldNumber = 1,
    kBasecallingEnabledFieldNumber = 2,
  };
  // bool analysis_enabled = 1;
  void clear_analysis_enabled();
  bool analysis_enabled() const;
  void set_analysis_enabled(bool value);
  private:
  bool _internal_analysis_enabled() const;
  void _internal_set_analysis_enabled(bool value);
  public:

  // bool basecalling_enabled = 2;
  void clear_basecalling_enabled();
  bool basecalling_enabled() const;
  void set_basecalling_enabled(bool value);
  private:
  bool _internal_basecalling_enabled() const;
  void _internal_set_basecalling_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetSummaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool analysis_enabled_;
  bool basecalling_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class BarcodingConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.BarcodingConfiguration) */ {
 public:
  inline BarcodingConfiguration() : BarcodingConfiguration(nullptr) {}
  ~BarcodingConfiguration() override;
  explicit constexpr BarcodingConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarcodingConfiguration(const BarcodingConfiguration& from);
  BarcodingConfiguration(BarcodingConfiguration&& from) noexcept
    : BarcodingConfiguration() {
    *this = ::std::move(from);
  }

  inline BarcodingConfiguration& operator=(const BarcodingConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarcodingConfiguration& operator=(BarcodingConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BarcodingConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarcodingConfiguration* internal_default_instance() {
    return reinterpret_cast<const BarcodingConfiguration*>(
               &_BarcodingConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BarcodingConfiguration& a, BarcodingConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(BarcodingConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarcodingConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarcodingConfiguration* New() const final {
    return new BarcodingConfiguration();
  }

  BarcodingConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarcodingConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BarcodingConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BarcodingConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarcodingConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.BarcodingConfiguration";
  }
  protected:
  explicit BarcodingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarcodingKitsFieldNumber = 1,
    kMinScoreFieldNumber = 5,
    kMinScoreRearFieldNumber = 6,
    kMinScoreMidFieldNumber = 7,
    kMinScoreMaskFieldNumber = 8,
    kTrimBarcodesFieldNumber = 2,
    kRequireBarcodesBothEndsFieldNumber = 3,
    kDetectMidStrandBarcodesFieldNumber = 4,
  };
  // repeated string barcoding_kits = 1;
  int barcoding_kits_size() const;
  private:
  int _internal_barcoding_kits_size() const;
  public:
  void clear_barcoding_kits();
  const std::string& barcoding_kits(int index) const;
  std::string* mutable_barcoding_kits(int index);
  void set_barcoding_kits(int index, const std::string& value);
  void set_barcoding_kits(int index, std::string&& value);
  void set_barcoding_kits(int index, const char* value);
  void set_barcoding_kits(int index, const char* value, size_t size);
  std::string* add_barcoding_kits();
  void add_barcoding_kits(const std::string& value);
  void add_barcoding_kits(std::string&& value);
  void add_barcoding_kits(const char* value);
  void add_barcoding_kits(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& barcoding_kits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_barcoding_kits();
  private:
  const std::string& _internal_barcoding_kits(int index) const;
  std::string* _internal_add_barcoding_kits();
  public:

  // .google.protobuf.FloatValue min_score = 5;
  bool has_min_score() const;
  private:
  bool _internal_has_min_score() const;
  public:
  void clear_min_score();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score();
  void set_allocated_min_score(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score();
  public:
  void unsafe_arena_set_allocated_min_score(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score();

  // .google.protobuf.FloatValue min_score_rear = 6;
  bool has_min_score_rear() const;
  private:
  bool _internal_has_min_score_rear() const;
  public:
  void clear_min_score_rear();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_rear() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_rear();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_rear();
  void set_allocated_min_score_rear(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_rear);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_rear() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_rear();
  public:
  void unsafe_arena_set_allocated_min_score_rear(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_rear);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_rear();

  // .google.protobuf.FloatValue min_score_mid = 7;
  bool has_min_score_mid() const;
  private:
  bool _internal_has_min_score_mid() const;
  public:
  void clear_min_score_mid();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_mid() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_mid();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_mid();
  void set_allocated_min_score_mid(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mid);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_mid() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_mid();
  public:
  void unsafe_arena_set_allocated_min_score_mid(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mid);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_mid();

  // .google.protobuf.FloatValue min_score_mask = 8;
  bool has_min_score_mask() const;
  private:
  bool _internal_has_min_score_mask() const;
  public:
  void clear_min_score_mask();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_mask() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_mask();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_mask();
  void set_allocated_min_score_mask(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_mask();
  public:
  void unsafe_arena_set_allocated_min_score_mask(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mask);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_mask();

  // bool trim_barcodes = 2;
  void clear_trim_barcodes();
  bool trim_barcodes() const;
  void set_trim_barcodes(bool value);
  private:
  bool _internal_trim_barcodes() const;
  void _internal_set_trim_barcodes(bool value);
  public:

  // bool require_barcodes_both_ends = 3;
  void clear_require_barcodes_both_ends();
  bool require_barcodes_both_ends() const;
  void set_require_barcodes_both_ends(bool value);
  private:
  bool _internal_require_barcodes_both_ends() const;
  void _internal_set_require_barcodes_both_ends(bool value);
  public:

  // bool detect_mid_strand_barcodes = 4;
  void clear_detect_mid_strand_barcodes();
  bool detect_mid_strand_barcodes() const;
  void set_detect_mid_strand_barcodes(bool value);
  private:
  bool _internal_detect_mid_strand_barcodes() const;
  void _internal_set_detect_mid_strand_barcodes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BarcodingConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> barcoding_kits_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_rear_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mid_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mask_;
  bool trim_barcodes_;
  bool require_barcodes_both_ends_;
  bool detect_mid_strand_barcodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class AlignmentConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.AlignmentConfiguration) */ {
 public:
  inline AlignmentConfiguration() : AlignmentConfiguration(nullptr) {}
  ~AlignmentConfiguration() override;
  explicit constexpr AlignmentConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlignmentConfiguration(const AlignmentConfiguration& from);
  AlignmentConfiguration(AlignmentConfiguration&& from) noexcept
    : AlignmentConfiguration() {
    *this = ::std::move(from);
  }

  inline AlignmentConfiguration& operator=(const AlignmentConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlignmentConfiguration& operator=(AlignmentConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlignmentConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlignmentConfiguration* internal_default_instance() {
    return reinterpret_cast<const AlignmentConfiguration*>(
               &_AlignmentConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AlignmentConfiguration& a, AlignmentConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(AlignmentConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlignmentConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlignmentConfiguration* New() const final {
    return new AlignmentConfiguration();
  }

  AlignmentConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlignmentConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlignmentConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlignmentConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlignmentConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.AlignmentConfiguration";
  }
  protected:
  explicit AlignmentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFilesFieldNumber = 1,
    kBedFileFieldNumber = 2,
    kMinimumCoverageFieldNumber = 3,
    kAggregateStatisticsForMultipleBedHitsFieldNumber = 4,
  };
  // repeated string reference_files = 1;
  int reference_files_size() const;
  private:
  int _internal_reference_files_size() const;
  public:
  void clear_reference_files();
  const std::string& reference_files(int index) const;
  std::string* mutable_reference_files(int index);
  void set_reference_files(int index, const std::string& value);
  void set_reference_files(int index, std::string&& value);
  void set_reference_files(int index, const char* value);
  void set_reference_files(int index, const char* value, size_t size);
  std::string* add_reference_files();
  void add_reference_files(const std::string& value);
  void add_reference_files(std::string&& value);
  void add_reference_files(const char* value);
  void add_reference_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reference_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reference_files();
  private:
  const std::string& _internal_reference_files(int index) const;
  std::string* _internal_add_reference_files();
  public:

  // string bed_file = 2;
  void clear_bed_file();
  const std::string& bed_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bed_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bed_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_bed_file();
  void set_allocated_bed_file(std::string* bed_file);
  private:
  const std::string& _internal_bed_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bed_file(const std::string& value);
  std::string* _internal_mutable_bed_file();
  public:

  // .google.protobuf.FloatValue minimum_coverage = 3;
  bool has_minimum_coverage() const;
  private:
  bool _internal_has_minimum_coverage() const;
  public:
  void clear_minimum_coverage();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& minimum_coverage() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_minimum_coverage();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_minimum_coverage();
  void set_allocated_minimum_coverage(::PROTOBUF_NAMESPACE_ID::FloatValue* minimum_coverage);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_minimum_coverage() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_minimum_coverage();
  public:
  void unsafe_arena_set_allocated_minimum_coverage(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* minimum_coverage);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_minimum_coverage();

  // bool aggregate_statistics_for_multiple_bed_hits = 4;
  void clear_aggregate_statistics_for_multiple_bed_hits();
  bool aggregate_statistics_for_multiple_bed_hits() const;
  void set_aggregate_statistics_for_multiple_bed_hits(bool value);
  private:
  bool _internal_aggregate_statistics_for_multiple_bed_hits() const;
  void _internal_set_aggregate_statistics_for_multiple_bed_hits(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.AlignmentConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reference_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bed_file_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* minimum_coverage_;
  bool aggregate_statistics_for_multiple_bed_hits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class LampConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.LampConfiguration) */ {
 public:
  inline LampConfiguration() : LampConfiguration(nullptr) {}
  ~LampConfiguration() override;
  explicit constexpr LampConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LampConfiguration(const LampConfiguration& from);
  LampConfiguration(LampConfiguration&& from) noexcept
    : LampConfiguration() {
    *this = ::std::move(from);
  }

  inline LampConfiguration& operator=(const LampConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LampConfiguration& operator=(LampConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LampConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const LampConfiguration* internal_default_instance() {
    return reinterpret_cast<const LampConfiguration*>(
               &_LampConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LampConfiguration& a, LampConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(LampConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LampConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LampConfiguration* New() const final {
    return new LampConfiguration();
  }

  LampConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LampConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LampConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LampConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LampConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.LampConfiguration";
  }
  protected:
  explicit LampConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLampKitFieldNumber = 1,
    kMinScoreBarcodesFieldNumber = 2,
    kMinScoreMasksFieldNumber = 3,
    kMinScoreTargetsFieldNumber = 4,
  };
  // string lamp_kit = 1;
  void clear_lamp_kit();
  const std::string& lamp_kit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lamp_kit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lamp_kit();
  PROTOBUF_MUST_USE_RESULT std::string* release_lamp_kit();
  void set_allocated_lamp_kit(std::string* lamp_kit);
  private:
  const std::string& _internal_lamp_kit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lamp_kit(const std::string& value);
  std::string* _internal_mutable_lamp_kit();
  public:

  // .google.protobuf.FloatValue min_score_barcodes = 2;
  bool has_min_score_barcodes() const;
  private:
  bool _internal_has_min_score_barcodes() const;
  public:
  void clear_min_score_barcodes();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_barcodes() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_barcodes();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_barcodes();
  void set_allocated_min_score_barcodes(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_barcodes);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_barcodes() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_barcodes();
  public:
  void unsafe_arena_set_allocated_min_score_barcodes(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_barcodes);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_barcodes();

  // .google.protobuf.FloatValue min_score_masks = 3;
  bool has_min_score_masks() const;
  private:
  bool _internal_has_min_score_masks() const;
  public:
  void clear_min_score_masks();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_masks() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_masks();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_masks();
  void set_allocated_min_score_masks(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_masks);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_masks() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_masks();
  public:
  void unsafe_arena_set_allocated_min_score_masks(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_masks);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_masks();

  // .google.protobuf.FloatValue min_score_targets = 4;
  bool has_min_score_targets() const;
  private:
  bool _internal_has_min_score_targets() const;
  public:
  void clear_min_score_targets();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_targets() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_min_score_targets();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_min_score_targets();
  void set_allocated_min_score_targets(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_targets);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_min_score_targets() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_min_score_targets();
  public:
  void unsafe_arena_set_allocated_min_score_targets(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_targets);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_min_score_targets();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.LampConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lamp_kit_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_barcodes_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_masks_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class BasecallerConfiguration_ReadFiltering final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering) */ {
 public:
  inline BasecallerConfiguration_ReadFiltering() : BasecallerConfiguration_ReadFiltering(nullptr) {}
  ~BasecallerConfiguration_ReadFiltering() override;
  explicit constexpr BasecallerConfiguration_ReadFiltering(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasecallerConfiguration_ReadFiltering(const BasecallerConfiguration_ReadFiltering& from);
  BasecallerConfiguration_ReadFiltering(BasecallerConfiguration_ReadFiltering&& from) noexcept
    : BasecallerConfiguration_ReadFiltering() {
    *this = ::std::move(from);
  }

  inline BasecallerConfiguration_ReadFiltering& operator=(const BasecallerConfiguration_ReadFiltering& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasecallerConfiguration_ReadFiltering& operator=(BasecallerConfiguration_ReadFiltering&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasecallerConfiguration_ReadFiltering& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasecallerConfiguration_ReadFiltering* internal_default_instance() {
    return reinterpret_cast<const BasecallerConfiguration_ReadFiltering*>(
               &_BasecallerConfiguration_ReadFiltering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BasecallerConfiguration_ReadFiltering& a, BasecallerConfiguration_ReadFiltering& b) {
    a.Swap(&b);
  }
  inline void Swap(BasecallerConfiguration_ReadFiltering* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasecallerConfiguration_ReadFiltering* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasecallerConfiguration_ReadFiltering* New() const final {
    return new BasecallerConfiguration_ReadFiltering();
  }

  BasecallerConfiguration_ReadFiltering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasecallerConfiguration_ReadFiltering>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasecallerConfiguration_ReadFiltering& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasecallerConfiguration_ReadFiltering& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasecallerConfiguration_ReadFiltering* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering";
  }
  protected:
  explicit BasecallerConfiguration_ReadFiltering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinQscoreFieldNumber = 1,
    kMinSamplesFieldNumber = 2,
    kMaxSamplesFieldNumber = 3,
    kMinBasesFieldNumber = 4,
    kMaxBasesFieldNumber = 5,
    kMaxFailedChunksFieldNumber = 6,
  };
  // .google.protobuf.DoubleValue min_qscore = 1;
  bool has_min_qscore() const;
  private:
  bool _internal_has_min_qscore() const;
  public:
  void clear_min_qscore();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_qscore() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_qscore();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_qscore();
  void set_allocated_min_qscore(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_qscore() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_qscore();
  public:
  void unsafe_arena_set_allocated_min_qscore(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_qscore();

  // .google.protobuf.UInt64Value min_samples = 2;
  bool has_min_samples() const;
  private:
  bool _internal_has_min_samples() const;
  public:
  void clear_min_samples();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_samples() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_min_samples();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_min_samples();
  void set_allocated_min_samples(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_samples);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_min_samples() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_min_samples();
  public:
  void unsafe_arena_set_allocated_min_samples(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_samples);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_min_samples();

  // .google.protobuf.UInt64Value max_samples = 3;
  bool has_max_samples() const;
  private:
  bool _internal_has_max_samples() const;
  public:
  void clear_max_samples();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_samples() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_max_samples();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_max_samples();
  void set_allocated_max_samples(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_samples);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_max_samples() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_max_samples();
  public:
  void unsafe_arena_set_allocated_max_samples(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_samples);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_max_samples();

  // .google.protobuf.UInt64Value min_bases = 4;
  bool has_min_bases() const;
  private:
  bool _internal_has_min_bases() const;
  public:
  void clear_min_bases();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_bases() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_min_bases();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_min_bases();
  void set_allocated_min_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_min_bases() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_min_bases();
  public:
  void unsafe_arena_set_allocated_min_bases(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_min_bases();

  // .google.protobuf.UInt64Value max_bases = 5;
  bool has_max_bases() const;
  private:
  bool _internal_has_max_bases() const;
  public:
  void clear_max_bases();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_bases() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_max_bases();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_max_bases();
  void set_allocated_max_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_max_bases() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_max_bases();
  public:
  void unsafe_arena_set_allocated_max_bases(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_max_bases();

  // .google.protobuf.UInt64Value max_failed_chunks = 6;
  bool has_max_failed_chunks() const;
  private:
  bool _internal_has_max_failed_chunks() const;
  public:
  void clear_max_failed_chunks();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_failed_chunks() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_max_failed_chunks();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_max_failed_chunks();
  void set_allocated_max_failed_chunks(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_failed_chunks);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_max_failed_chunks() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_max_failed_chunks();
  public:
  void unsafe_arena_set_allocated_max_failed_chunks(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_failed_chunks);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_max_failed_chunks();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_samples_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_samples_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_failed_chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class BasecallerConfiguration_TargetFiltering final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering) */ {
 public:
  inline BasecallerConfiguration_TargetFiltering() : BasecallerConfiguration_TargetFiltering(nullptr) {}
  ~BasecallerConfiguration_TargetFiltering() override;
  explicit constexpr BasecallerConfiguration_TargetFiltering(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasecallerConfiguration_TargetFiltering(const BasecallerConfiguration_TargetFiltering& from);
  BasecallerConfiguration_TargetFiltering(BasecallerConfiguration_TargetFiltering&& from) noexcept
    : BasecallerConfiguration_TargetFiltering() {
    *this = ::std::move(from);
  }

  inline BasecallerConfiguration_TargetFiltering& operator=(const BasecallerConfiguration_TargetFiltering& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasecallerConfiguration_TargetFiltering& operator=(BasecallerConfiguration_TargetFiltering&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasecallerConfiguration_TargetFiltering& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasecallerConfiguration_TargetFiltering* internal_default_instance() {
    return reinterpret_cast<const BasecallerConfiguration_TargetFiltering*>(
               &_BasecallerConfiguration_TargetFiltering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BasecallerConfiguration_TargetFiltering& a, BasecallerConfiguration_TargetFiltering& b) {
    a.Swap(&b);
  }
  inline void Swap(BasecallerConfiguration_TargetFiltering* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasecallerConfiguration_TargetFiltering* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasecallerConfiguration_TargetFiltering* New() const final {
    return new BasecallerConfiguration_TargetFiltering();
  }

  BasecallerConfiguration_TargetFiltering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasecallerConfiguration_TargetFiltering>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasecallerConfiguration_TargetFiltering& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasecallerConfiguration_TargetFiltering& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasecallerConfiguration_TargetFiltering* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering";
  }
  protected:
  explicit BasecallerConfiguration_TargetFiltering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinQscoreFieldNumber = 1,
    kMinBasesFieldNumber = 2,
    kMaxBasesFieldNumber = 3,
  };
  // .google.protobuf.DoubleValue min_qscore = 1;
  bool has_min_qscore() const;
  private:
  bool _internal_has_min_qscore() const;
  public:
  void clear_min_qscore();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_qscore() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_qscore();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_qscore();
  void set_allocated_min_qscore(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_qscore() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_qscore();
  public:
  void unsafe_arena_set_allocated_min_qscore(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_qscore();

  // .google.protobuf.UInt64Value min_bases = 2;
  bool has_min_bases() const;
  private:
  bool _internal_has_min_bases() const;
  public:
  void clear_min_bases();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_bases() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_min_bases();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_min_bases();
  void set_allocated_min_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_min_bases() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_min_bases();
  public:
  void unsafe_arena_set_allocated_min_bases(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_min_bases();

  // .google.protobuf.UInt64Value max_bases = 3;
  bool has_max_bases() const;
  private:
  bool _internal_has_max_bases() const;
  public:
  void clear_max_bases();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_bases() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_max_bases();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_max_bases();
  void set_allocated_max_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_max_bases() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_max_bases();
  public:
  void unsafe_arena_set_allocated_max_bases(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_max_bases();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class BasecallerConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.BasecallerConfiguration) */ {
 public:
  inline BasecallerConfiguration() : BasecallerConfiguration(nullptr) {}
  ~BasecallerConfiguration() override;
  explicit constexpr BasecallerConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasecallerConfiguration(const BasecallerConfiguration& from);
  BasecallerConfiguration(BasecallerConfiguration&& from) noexcept
    : BasecallerConfiguration() {
    *this = ::std::move(from);
  }

  inline BasecallerConfiguration& operator=(const BasecallerConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasecallerConfiguration& operator=(BasecallerConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasecallerConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasecallerConfiguration* internal_default_instance() {
    return reinterpret_cast<const BasecallerConfiguration*>(
               &_BasecallerConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BasecallerConfiguration& a, BasecallerConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(BasecallerConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasecallerConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasecallerConfiguration* New() const final {
    return new BasecallerConfiguration();
  }

  BasecallerConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasecallerConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasecallerConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasecallerConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasecallerConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.BasecallerConfiguration";
  }
  protected:
  explicit BasecallerConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BasecallerConfiguration_ReadFiltering ReadFiltering;
  typedef BasecallerConfiguration_TargetFiltering TargetFiltering;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFilenameFieldNumber = 1,
    kReadFilteringFieldNumber = 3,
    kBarcodingConfigurationFieldNumber = 4,
    kTargetFilteringFieldNumber = 5,
    kAlignmentConfigurationFieldNumber = 6,
    kLampConfigurationFieldNumber = 7,
    kEnableFieldNumber = 2,
  };
  // string config_filename = 1;
  void clear_config_filename();
  const std::string& config_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_config_filename();
  void set_allocated_config_filename(std::string* config_filename);
  private:
  const std::string& _internal_config_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_filename(const std::string& value);
  std::string* _internal_mutable_config_filename();
  public:

  // .minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering read_filtering = 3;
  bool has_read_filtering() const;
  private:
  bool _internal_has_read_filtering() const;
  public:
  void clear_read_filtering();
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering& read_filtering() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* release_read_filtering();
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* mutable_read_filtering();
  void set_allocated_read_filtering(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* read_filtering);
  private:
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering& _internal_read_filtering() const;
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* _internal_mutable_read_filtering();
  public:
  void unsafe_arena_set_allocated_read_filtering(
      ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* read_filtering);
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* unsafe_arena_release_read_filtering();

  // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 4;
  bool has_barcoding_configuration() const;
  private:
  bool _internal_has_barcoding_configuration() const;
  public:
  void clear_barcoding_configuration();
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& barcoding_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BarcodingConfiguration* release_barcoding_configuration();
  ::minknow_api::analysis_configuration::BarcodingConfiguration* mutable_barcoding_configuration();
  void set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  private:
  const ::minknow_api::analysis_configuration::BarcodingConfiguration& _internal_barcoding_configuration() const;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _internal_mutable_barcoding_configuration();
  public:
  void unsafe_arena_set_allocated_barcoding_configuration(
      ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration);
  ::minknow_api::analysis_configuration::BarcodingConfiguration* unsafe_arena_release_barcoding_configuration();

  // .minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering target_filtering = 5;
  bool has_target_filtering() const;
  private:
  bool _internal_has_target_filtering() const;
  public:
  void clear_target_filtering();
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering& target_filtering() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* release_target_filtering();
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* mutable_target_filtering();
  void set_allocated_target_filtering(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* target_filtering);
  private:
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering& _internal_target_filtering() const;
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* _internal_mutable_target_filtering();
  public:
  void unsafe_arena_set_allocated_target_filtering(
      ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* target_filtering);
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* unsafe_arena_release_target_filtering();

  // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
  bool has_alignment_configuration() const;
  private:
  bool _internal_has_alignment_configuration() const;
  public:
  void clear_alignment_configuration();
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& alignment_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::AlignmentConfiguration* release_alignment_configuration();
  ::minknow_api::analysis_configuration::AlignmentConfiguration* mutable_alignment_configuration();
  void set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  private:
  const ::minknow_api::analysis_configuration::AlignmentConfiguration& _internal_alignment_configuration() const;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _internal_mutable_alignment_configuration();
  public:
  void unsafe_arena_set_allocated_alignment_configuration(
      ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration);
  ::minknow_api::analysis_configuration::AlignmentConfiguration* unsafe_arena_release_alignment_configuration();

  // .minknow_api.analysis_configuration.LampConfiguration lamp_configuration = 7;
  bool has_lamp_configuration() const;
  private:
  bool _internal_has_lamp_configuration() const;
  public:
  void clear_lamp_configuration();
  const ::minknow_api::analysis_configuration::LampConfiguration& lamp_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::LampConfiguration* release_lamp_configuration();
  ::minknow_api::analysis_configuration::LampConfiguration* mutable_lamp_configuration();
  void set_allocated_lamp_configuration(::minknow_api::analysis_configuration::LampConfiguration* lamp_configuration);
  private:
  const ::minknow_api::analysis_configuration::LampConfiguration& _internal_lamp_configuration() const;
  ::minknow_api::analysis_configuration::LampConfiguration* _internal_mutable_lamp_configuration();
  public:
  void unsafe_arena_set_allocated_lamp_configuration(
      ::minknow_api::analysis_configuration::LampConfiguration* lamp_configuration);
  ::minknow_api::analysis_configuration::LampConfiguration* unsafe_arena_release_lamp_configuration();

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.BasecallerConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_filename_;
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* read_filtering_;
  ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration_;
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* target_filtering_;
  ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration_;
  ::minknow_api::analysis_configuration::LampConfiguration* lamp_configuration_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetBasecallerConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest) */ {
 public:
  inline SetBasecallerConfigurationRequest() : SetBasecallerConfigurationRequest(nullptr) {}
  ~SetBasecallerConfigurationRequest() override;
  explicit constexpr SetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBasecallerConfigurationRequest(const SetBasecallerConfigurationRequest& from);
  SetBasecallerConfigurationRequest(SetBasecallerConfigurationRequest&& from) noexcept
    : SetBasecallerConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SetBasecallerConfigurationRequest& operator=(const SetBasecallerConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBasecallerConfigurationRequest& operator=(SetBasecallerConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBasecallerConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBasecallerConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SetBasecallerConfigurationRequest*>(
               &_SetBasecallerConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SetBasecallerConfigurationRequest& a, SetBasecallerConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBasecallerConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBasecallerConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBasecallerConfigurationRequest* New() const final {
    return new SetBasecallerConfigurationRequest();
  }

  SetBasecallerConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBasecallerConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBasecallerConfigurationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBasecallerConfigurationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBasecallerConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetBasecallerConfigurationRequest";
  }
  protected:
  explicit SetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // .minknow_api.analysis_configuration.BasecallerConfiguration configs = 1 [(.minknow_api.rpc_unwrap) = true];
  bool has_configs() const;
  private:
  bool _internal_has_configs() const;
  public:
  void clear_configs();
  const ::minknow_api::analysis_configuration::BasecallerConfiguration& configs() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::BasecallerConfiguration* release_configs();
  ::minknow_api::analysis_configuration::BasecallerConfiguration* mutable_configs();
  void set_allocated_configs(::minknow_api::analysis_configuration::BasecallerConfiguration* configs);
  private:
  const ::minknow_api::analysis_configuration::BasecallerConfiguration& _internal_configs() const;
  ::minknow_api::analysis_configuration::BasecallerConfiguration* _internal_mutable_configs();
  public:
  void unsafe_arena_set_allocated_configs(
      ::minknow_api::analysis_configuration::BasecallerConfiguration* configs);
  ::minknow_api::analysis_configuration::BasecallerConfiguration* unsafe_arena_release_configs();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::analysis_configuration::BasecallerConfiguration* configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetBasecallerConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetBasecallerConfigurationResponse) */ {
 public:
  inline SetBasecallerConfigurationResponse() : SetBasecallerConfigurationResponse(nullptr) {}
  explicit constexpr SetBasecallerConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBasecallerConfigurationResponse(const SetBasecallerConfigurationResponse& from);
  SetBasecallerConfigurationResponse(SetBasecallerConfigurationResponse&& from) noexcept
    : SetBasecallerConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetBasecallerConfigurationResponse& operator=(const SetBasecallerConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBasecallerConfigurationResponse& operator=(SetBasecallerConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBasecallerConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBasecallerConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetBasecallerConfigurationResponse*>(
               &_SetBasecallerConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetBasecallerConfigurationResponse& a, SetBasecallerConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBasecallerConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBasecallerConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBasecallerConfigurationResponse* New() const final {
    return new SetBasecallerConfigurationResponse();
  }

  SetBasecallerConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBasecallerConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetBasecallerConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetBasecallerConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetBasecallerConfigurationResponse";
  }
  protected:
  explicit SetBasecallerConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetBasecallerConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetBasecallerConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetBasecallerConfigurationRequest) */ {
 public:
  inline GetBasecallerConfigurationRequest() : GetBasecallerConfigurationRequest(nullptr) {}
  explicit constexpr GetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBasecallerConfigurationRequest(const GetBasecallerConfigurationRequest& from);
  GetBasecallerConfigurationRequest(GetBasecallerConfigurationRequest&& from) noexcept
    : GetBasecallerConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetBasecallerConfigurationRequest& operator=(const GetBasecallerConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBasecallerConfigurationRequest& operator=(GetBasecallerConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBasecallerConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBasecallerConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetBasecallerConfigurationRequest*>(
               &_GetBasecallerConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetBasecallerConfigurationRequest& a, GetBasecallerConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBasecallerConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBasecallerConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBasecallerConfigurationRequest* New() const final {
    return new GetBasecallerConfigurationRequest();
  }

  GetBasecallerConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBasecallerConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBasecallerConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBasecallerConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetBasecallerConfigurationRequest";
  }
  protected:
  explicit GetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetBasecallerConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetPoreTypeConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest) */ {
 public:
  inline GetPoreTypeConfigurationRequest() : GetPoreTypeConfigurationRequest(nullptr) {}
  explicit constexpr GetPoreTypeConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPoreTypeConfigurationRequest(const GetPoreTypeConfigurationRequest& from);
  GetPoreTypeConfigurationRequest(GetPoreTypeConfigurationRequest&& from) noexcept
    : GetPoreTypeConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetPoreTypeConfigurationRequest& operator=(const GetPoreTypeConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPoreTypeConfigurationRequest& operator=(GetPoreTypeConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPoreTypeConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPoreTypeConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetPoreTypeConfigurationRequest*>(
               &_GetPoreTypeConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetPoreTypeConfigurationRequest& a, GetPoreTypeConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPoreTypeConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPoreTypeConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPoreTypeConfigurationRequest* New() const final {
    return new GetPoreTypeConfigurationRequest();
  }

  GetPoreTypeConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPoreTypeConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetPoreTypeConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetPoreTypeConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest";
  }
  protected:
  explicit GetPoreTypeConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class PoreTypeConfiguration_ChannelWell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell) */ {
 public:
  inline PoreTypeConfiguration_ChannelWell() : PoreTypeConfiguration_ChannelWell(nullptr) {}
  ~PoreTypeConfiguration_ChannelWell() override;
  explicit constexpr PoreTypeConfiguration_ChannelWell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoreTypeConfiguration_ChannelWell(const PoreTypeConfiguration_ChannelWell& from);
  PoreTypeConfiguration_ChannelWell(PoreTypeConfiguration_ChannelWell&& from) noexcept
    : PoreTypeConfiguration_ChannelWell() {
    *this = ::std::move(from);
  }

  inline PoreTypeConfiguration_ChannelWell& operator=(const PoreTypeConfiguration_ChannelWell& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoreTypeConfiguration_ChannelWell& operator=(PoreTypeConfiguration_ChannelWell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoreTypeConfiguration_ChannelWell& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoreTypeConfiguration_ChannelWell* internal_default_instance() {
    return reinterpret_cast<const PoreTypeConfiguration_ChannelWell*>(
               &_PoreTypeConfiguration_ChannelWell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PoreTypeConfiguration_ChannelWell& a, PoreTypeConfiguration_ChannelWell& b) {
    a.Swap(&b);
  }
  inline void Swap(PoreTypeConfiguration_ChannelWell* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoreTypeConfiguration_ChannelWell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoreTypeConfiguration_ChannelWell* New() const final {
    return new PoreTypeConfiguration_ChannelWell();
  }

  PoreTypeConfiguration_ChannelWell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoreTypeConfiguration_ChannelWell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoreTypeConfiguration_ChannelWell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoreTypeConfiguration_ChannelWell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoreTypeConfiguration_ChannelWell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell";
  }
  protected:
  explicit PoreTypeConfiguration_ChannelWell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kWellFieldNumber = 2,
  };
  // uint32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 well = 2;
  void clear_well();
  ::PROTOBUF_NAMESPACE_ID::uint32 well() const;
  void set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_well() const;
  void _internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 well_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList) */ {
 public:
  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList() : PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(nullptr) {}
  ~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList() override;
  explicit constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from);
  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList&& from) noexcept
    : PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList() {
    *this = ::std::move(from);
  }

  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& operator=(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& operator=(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* internal_default_instance() {
    return reinterpret_cast<const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList*>(
               &_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& a, PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& b) {
    a.Swap(&b);
  }
  inline void Swap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* New() const final {
    return new PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList();
  }

  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList";
  }
  protected:
  explicit PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelWellFieldNumber = 1,
  };
  // repeated .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell channel_well = 1;
  int channel_well_size() const;
  private:
  int _internal_channel_well_size() const;
  public:
  void clear_channel_well();
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* mutable_channel_well(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >*
      mutable_channel_well();
  private:
  const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell& _internal_channel_well(int index) const;
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* _internal_add_channel_well();
  public:
  const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell& channel_well(int index) const;
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* add_channel_well();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >&
      channel_well() const;

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell > channel_well_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, 
    std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, 
    std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse();
  explicit constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse& other);
  static const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse*>(&_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations) */ {
 public:
  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations() : PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(nullptr) {}
  ~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations() override;
  explicit constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from);
  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations&& from) noexcept
    : PoreTypeConfiguration_ChannelWellPoreTypeConfigurations() {
    *this = ::std::move(from);
  }

  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& operator=(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& operator=(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* internal_default_instance() {
    return reinterpret_cast<const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations*>(
               &_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& a, PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& b) {
    a.Swap(&b);
  }
  inline void Swap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* New() const final {
    return new PoreTypeConfiguration_ChannelWellPoreTypeConfigurations();
  }

  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations";
  }
  protected:
  explicit PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList ChannelWellList;

  // accessors -------------------------------------------------------

  enum : int {
    kPoreTypesFieldNumber = 1,
  };
  // map<string, .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList> pore_types = 1;
  int pore_types_size() const;
  private:
  int _internal_pore_types_size() const;
  public:
  void clear_pore_types();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >&
      _internal_pore_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >*
      _internal_mutable_pore_types();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >&
      pore_types() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >*
      mutable_pore_types();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse,
      std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pore_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class PoreTypeConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.PoreTypeConfiguration) */ {
 public:
  inline PoreTypeConfiguration() : PoreTypeConfiguration(nullptr) {}
  ~PoreTypeConfiguration() override;
  explicit constexpr PoreTypeConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoreTypeConfiguration(const PoreTypeConfiguration& from);
  PoreTypeConfiguration(PoreTypeConfiguration&& from) noexcept
    : PoreTypeConfiguration() {
    *this = ::std::move(from);
  }

  inline PoreTypeConfiguration& operator=(const PoreTypeConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoreTypeConfiguration& operator=(PoreTypeConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoreTypeConfiguration& default_instance() {
    return *internal_default_instance();
  }
  enum PoreTypeConfigCase {
    kGlobalPoreType = 1,
    kChannelWellPoreTypes = 2,
    PORE_TYPE_CONFIG_NOT_SET = 0,
  };

  static inline const PoreTypeConfiguration* internal_default_instance() {
    return reinterpret_cast<const PoreTypeConfiguration*>(
               &_PoreTypeConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PoreTypeConfiguration& a, PoreTypeConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(PoreTypeConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoreTypeConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoreTypeConfiguration* New() const final {
    return new PoreTypeConfiguration();
  }

  PoreTypeConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoreTypeConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoreTypeConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoreTypeConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoreTypeConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.PoreTypeConfiguration";
  }
  protected:
  explicit PoreTypeConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PoreTypeConfiguration_ChannelWell ChannelWell;
  typedef PoreTypeConfiguration_ChannelWellPoreTypeConfigurations ChannelWellPoreTypeConfigurations;

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalPoreTypeFieldNumber = 1,
    kChannelWellPoreTypesFieldNumber = 2,
  };
  // string global_pore_type = 1;
  bool has_global_pore_type() const;
  private:
  bool _internal_has_global_pore_type() const;
  public:
  void clear_global_pore_type();
  const std::string& global_pore_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_global_pore_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_global_pore_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_global_pore_type();
  void set_allocated_global_pore_type(std::string* global_pore_type);
  private:
  const std::string& _internal_global_pore_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_global_pore_type(const std::string& value);
  std::string* _internal_mutable_global_pore_type();
  public:

  // .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations channel_well_pore_types = 2;
  bool has_channel_well_pore_types() const;
  private:
  bool _internal_has_channel_well_pore_types() const;
  public:
  void clear_channel_well_pore_types();
  const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& channel_well_pore_types() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* release_channel_well_pore_types();
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* mutable_channel_well_pore_types();
  void set_allocated_channel_well_pore_types(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* channel_well_pore_types);
  private:
  const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& _internal_channel_well_pore_types() const;
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* _internal_mutable_channel_well_pore_types();
  public:
  void unsafe_arena_set_allocated_channel_well_pore_types(
      ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* channel_well_pore_types);
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* unsafe_arena_release_channel_well_pore_types();

  void clear_pore_type_config();
  PoreTypeConfigCase pore_type_config_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.PoreTypeConfiguration)
 private:
  class _Internal;
  void set_has_global_pore_type();
  void set_has_channel_well_pore_types();

  inline bool has_pore_type_config() const;
  inline void clear_has_pore_type_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PoreTypeConfigUnion {
    constexpr PoreTypeConfigUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_pore_type_;
    ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* channel_well_pore_types_;
  } pore_type_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetPoreTypeConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse) */ {
 public:
  inline SetPoreTypeConfigurationResponse() : SetPoreTypeConfigurationResponse(nullptr) {}
  explicit constexpr SetPoreTypeConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPoreTypeConfigurationResponse(const SetPoreTypeConfigurationResponse& from);
  SetPoreTypeConfigurationResponse(SetPoreTypeConfigurationResponse&& from) noexcept
    : SetPoreTypeConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetPoreTypeConfigurationResponse& operator=(const SetPoreTypeConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPoreTypeConfigurationResponse& operator=(SetPoreTypeConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPoreTypeConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPoreTypeConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetPoreTypeConfigurationResponse*>(
               &_SetPoreTypeConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SetPoreTypeConfigurationResponse& a, SetPoreTypeConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPoreTypeConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPoreTypeConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPoreTypeConfigurationResponse* New() const final {
    return new SetPoreTypeConfigurationResponse();
  }

  SetPoreTypeConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPoreTypeConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPoreTypeConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPoreTypeConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse";
  }
  protected:
  explicit SetPoreTypeConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ChannelConfiguration_ChannelList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList) */ {
 public:
  inline WriterConfiguration_ChannelConfiguration_ChannelList() : WriterConfiguration_ChannelConfiguration_ChannelList(nullptr) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelList() override;
  explicit constexpr WriterConfiguration_ChannelConfiguration_ChannelList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ChannelConfiguration_ChannelList(const WriterConfiguration_ChannelConfiguration_ChannelList& from);
  WriterConfiguration_ChannelConfiguration_ChannelList(WriterConfiguration_ChannelConfiguration_ChannelList&& from) noexcept
    : WriterConfiguration_ChannelConfiguration_ChannelList() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ChannelConfiguration_ChannelList& operator=(const WriterConfiguration_ChannelConfiguration_ChannelList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ChannelConfiguration_ChannelList& operator=(WriterConfiguration_ChannelConfiguration_ChannelList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ChannelConfiguration_ChannelList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ChannelConfiguration_ChannelList* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ChannelConfiguration_ChannelList*>(
               &_WriterConfiguration_ChannelConfiguration_ChannelList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(WriterConfiguration_ChannelConfiguration_ChannelList& a, WriterConfiguration_ChannelConfiguration_ChannelList& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ChannelConfiguration_ChannelList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ChannelConfiguration_ChannelList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ChannelConfiguration_ChannelList* New() const final {
    return new WriterConfiguration_ChannelConfiguration_ChannelList();
  }

  WriterConfiguration_ChannelConfiguration_ChannelList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ChannelConfiguration_ChannelList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList";
  }
  protected:
  explicit WriterConfiguration_ChannelConfiguration_ChannelList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated int32 channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange) */ {
 public:
  inline WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange() : WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(nullptr) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange() override;
  explicit constexpr WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from);
  WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange&& from) noexcept
    : WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& operator=(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& operator=(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange*>(
               &_WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& a, WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* New() const final {
    return new WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange();
  }

  WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange";
  }
  protected:
  explicit WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ChannelConfiguration_ChannelRanges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges) */ {
 public:
  inline WriterConfiguration_ChannelConfiguration_ChannelRanges() : WriterConfiguration_ChannelConfiguration_ChannelRanges(nullptr) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelRanges() override;
  explicit constexpr WriterConfiguration_ChannelConfiguration_ChannelRanges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ChannelConfiguration_ChannelRanges(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from);
  WriterConfiguration_ChannelConfiguration_ChannelRanges(WriterConfiguration_ChannelConfiguration_ChannelRanges&& from) noexcept
    : WriterConfiguration_ChannelConfiguration_ChannelRanges() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ChannelConfiguration_ChannelRanges& operator=(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ChannelConfiguration_ChannelRanges& operator=(WriterConfiguration_ChannelConfiguration_ChannelRanges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ChannelConfiguration_ChannelRanges& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ChannelConfiguration_ChannelRanges* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ChannelConfiguration_ChannelRanges*>(
               &_WriterConfiguration_ChannelConfiguration_ChannelRanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(WriterConfiguration_ChannelConfiguration_ChannelRanges& a, WriterConfiguration_ChannelConfiguration_ChannelRanges& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ChannelConfiguration_ChannelRanges* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ChannelConfiguration_ChannelRanges* New() const final {
    return new WriterConfiguration_ChannelConfiguration_ChannelRanges();
  }

  WriterConfiguration_ChannelConfiguration_ChannelRanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ChannelConfiguration_ChannelRanges>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges";
  }
  protected:
  explicit WriterConfiguration_ChannelConfiguration_ChannelRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange ChannelRange;

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >*
      mutable_ranges();
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& _internal_ranges(int index) const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* _internal_add_ranges();
  public:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& ranges(int index) const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >&
      ranges() const;

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange > ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration) */ {
 public:
  inline WriterConfiguration_ChannelConfiguration() : WriterConfiguration_ChannelConfiguration(nullptr) {}
  ~WriterConfiguration_ChannelConfiguration() override;
  explicit constexpr WriterConfiguration_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ChannelConfiguration(const WriterConfiguration_ChannelConfiguration& from);
  WriterConfiguration_ChannelConfiguration(WriterConfiguration_ChannelConfiguration&& from) noexcept
    : WriterConfiguration_ChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ChannelConfiguration& operator=(const WriterConfiguration_ChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ChannelConfiguration& operator=(WriterConfiguration_ChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  enum ChannelsCase {
    kAllChannels = 1,
    kSpecificChannels = 2,
    kChannelRanges = 3,
    CHANNELS_NOT_SET = 0,
  };

  static inline const WriterConfiguration_ChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ChannelConfiguration*>(
               &_WriterConfiguration_ChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(WriterConfiguration_ChannelConfiguration& a, WriterConfiguration_ChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ChannelConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ChannelConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ChannelConfiguration* New() const final {
    return new WriterConfiguration_ChannelConfiguration();
  }

  WriterConfiguration_ChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ChannelConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ChannelConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ChannelConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ChannelConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration";
  }
  protected:
  explicit WriterConfiguration_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriterConfiguration_ChannelConfiguration_ChannelList ChannelList;
  typedef WriterConfiguration_ChannelConfiguration_ChannelRanges ChannelRanges;

  // accessors -------------------------------------------------------

  enum : int {
    kAllChannelsFieldNumber = 1,
    kSpecificChannelsFieldNumber = 2,
    kChannelRangesFieldNumber = 3,
  };
  // bool all_channels = 1;
  bool has_all_channels() const;
  private:
  bool _internal_has_all_channels() const;
  public:
  void clear_all_channels();
  bool all_channels() const;
  void set_all_channels(bool value);
  private:
  bool _internal_all_channels() const;
  void _internal_set_all_channels(bool value);
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList specific_channels = 2;
  bool has_specific_channels() const;
  private:
  bool _internal_has_specific_channels() const;
  public:
  void clear_specific_channels();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList& specific_channels() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* release_specific_channels();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* mutable_specific_channels();
  void set_allocated_specific_channels(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* specific_channels);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList& _internal_specific_channels() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* _internal_mutable_specific_channels();
  public:
  void unsafe_arena_set_allocated_specific_channels(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* specific_channels);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* unsafe_arena_release_specific_channels();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges channel_ranges = 3;
  bool has_channel_ranges() const;
  private:
  bool _internal_has_channel_ranges() const;
  public:
  void clear_channel_ranges();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges& channel_ranges() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* release_channel_ranges();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* mutable_channel_ranges();
  void set_allocated_channel_ranges(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* channel_ranges);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges& _internal_channel_ranges() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* _internal_mutable_channel_ranges();
  public:
  void unsafe_arena_set_allocated_channel_ranges(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* channel_ranges);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* unsafe_arena_release_channel_ranges();

  void clear_channels();
  ChannelsCase channels_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
 private:
  class _Internal;
  void set_has_all_channels();
  void set_has_specific_channels();
  void set_has_channel_ranges();

  inline bool has_channels() const;
  inline void clear_has_channels();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ChannelsUnion {
    constexpr ChannelsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool all_channels_;
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* specific_channels_;
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* channel_ranges_;
  } channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ReadFast5Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration) */ {
 public:
  inline WriterConfiguration_ReadFast5Configuration() : WriterConfiguration_ReadFast5Configuration(nullptr) {}
  ~WriterConfiguration_ReadFast5Configuration() override;
  explicit constexpr WriterConfiguration_ReadFast5Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ReadFast5Configuration(const WriterConfiguration_ReadFast5Configuration& from);
  WriterConfiguration_ReadFast5Configuration(WriterConfiguration_ReadFast5Configuration&& from) noexcept
    : WriterConfiguration_ReadFast5Configuration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ReadFast5Configuration& operator=(const WriterConfiguration_ReadFast5Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ReadFast5Configuration& operator=(WriterConfiguration_ReadFast5Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ReadFast5Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ReadFast5Configuration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ReadFast5Configuration*>(
               &_WriterConfiguration_ReadFast5Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(WriterConfiguration_ReadFast5Configuration& a, WriterConfiguration_ReadFast5Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ReadFast5Configuration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ReadFast5Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ReadFast5Configuration* New() const final {
    return new WriterConfiguration_ReadFast5Configuration();
  }

  WriterConfiguration_ReadFast5Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ReadFast5Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ReadFast5Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ReadFast5Configuration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ReadFast5Configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration";
  }
  protected:
  explicit WriterConfiguration_ReadFast5Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 8,
    kFastqHeaderPatternFieldNumber = 9,
    kRawFieldNumber = 2,
    kFastqFieldNumber = 3,
    kTraceTableFieldNumber = 11,
    kMoveTableFieldNumber = 12,
    kModificationsTableFieldNumber = 13,
    kCompressionLevelFieldNumber = 1,
    kDisableWritingPassedReadsFieldNumber = 5,
    kDisableWritingFailedReadsFieldNumber = 6,
    kDisableWritingForceSkippedReadsFieldNumber = 7,
    kBatchCountFieldNumber = 10,
    kCompressionTypeFieldNumber = 14,
  };
  // string file_pattern = 8;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // string fastq_header_pattern = 9;
  void clear_fastq_header_pattern();
  const std::string& fastq_header_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fastq_header_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fastq_header_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_fastq_header_pattern();
  void set_allocated_fastq_header_pattern(std::string* fastq_header_pattern);
  private:
  const std::string& _internal_fastq_header_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fastq_header_pattern(const std::string& value);
  std::string* _internal_mutable_fastq_header_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 2;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& raw() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_raw();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_raw();
  void set_allocated_raw(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_raw() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_raw();
  public:
  void unsafe_arena_set_allocated_raw(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_raw();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration fastq = 3;
  bool has_fastq() const;
  private:
  bool _internal_has_fastq() const;
  public:
  void clear_fastq();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& fastq() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_fastq();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_fastq();
  void set_allocated_fastq(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* fastq);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_fastq() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_fastq();
  public:
  void unsafe_arena_set_allocated_fastq(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* fastq);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_fastq();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration trace_table = 11;
  bool has_trace_table() const;
  private:
  bool _internal_has_trace_table() const;
  public:
  void clear_trace_table();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& trace_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_trace_table();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_trace_table();
  void set_allocated_trace_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* trace_table);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_trace_table() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_trace_table();
  public:
  void unsafe_arena_set_allocated_trace_table(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* trace_table);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_trace_table();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration move_table = 12;
  bool has_move_table() const;
  private:
  bool _internal_has_move_table() const;
  public:
  void clear_move_table();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& move_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_move_table();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_move_table();
  void set_allocated_move_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* move_table);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_move_table() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_move_table();
  public:
  void unsafe_arena_set_allocated_move_table(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* move_table);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_move_table();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration modifications_table = 13;
  bool has_modifications_table() const;
  private:
  bool _internal_has_modifications_table() const;
  public:
  void clear_modifications_table();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& modifications_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_modifications_table();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_modifications_table();
  void set_allocated_modifications_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* modifications_table);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_modifications_table() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_modifications_table();
  public:
  void unsafe_arena_set_allocated_modifications_table(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* modifications_table);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_modifications_table();

  // int32 compression_level = 1;
  void clear_compression_level();
  ::PROTOBUF_NAMESPACE_ID::int32 compression_level() const;
  void set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compression_level() const;
  void _internal_set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool disable_writing_passed_reads = 5;
  void clear_disable_writing_passed_reads();
  bool disable_writing_passed_reads() const;
  void set_disable_writing_passed_reads(bool value);
  private:
  bool _internal_disable_writing_passed_reads() const;
  void _internal_set_disable_writing_passed_reads(bool value);
  public:

  // bool disable_writing_failed_reads = 6;
  void clear_disable_writing_failed_reads();
  bool disable_writing_failed_reads() const;
  void set_disable_writing_failed_reads(bool value);
  private:
  bool _internal_disable_writing_failed_reads() const;
  void _internal_set_disable_writing_failed_reads(bool value);
  public:

  // bool disable_writing_force_skipped_reads = 7;
  void clear_disable_writing_force_skipped_reads();
  bool disable_writing_force_skipped_reads() const;
  void set_disable_writing_force_skipped_reads(bool value);
  private:
  bool _internal_disable_writing_force_skipped_reads() const;
  void _internal_set_disable_writing_force_skipped_reads(bool value);
  public:

  // uint32 batch_count = 10;
  void clear_batch_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count() const;
  void set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_count() const;
  void _internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 14;
  void clear_compression_type();
  ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType compression_type() const;
  void set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value);
  private:
  ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType _internal_compression_type() const;
  void _internal_set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fastq_header_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* fastq_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* trace_table_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* move_table_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* modifications_table_;
  ::PROTOBUF_NAMESPACE_ID::int32 compression_level_;
  bool disable_writing_passed_reads_;
  bool disable_writing_failed_reads_;
  bool disable_writing_force_skipped_reads_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count_;
  int compression_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ReadFastqConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration) */ {
 public:
  inline WriterConfiguration_ReadFastqConfiguration() : WriterConfiguration_ReadFastqConfiguration(nullptr) {}
  ~WriterConfiguration_ReadFastqConfiguration() override;
  explicit constexpr WriterConfiguration_ReadFastqConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ReadFastqConfiguration(const WriterConfiguration_ReadFastqConfiguration& from);
  WriterConfiguration_ReadFastqConfiguration(WriterConfiguration_ReadFastqConfiguration&& from) noexcept
    : WriterConfiguration_ReadFastqConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ReadFastqConfiguration& operator=(const WriterConfiguration_ReadFastqConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ReadFastqConfiguration& operator=(WriterConfiguration_ReadFastqConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ReadFastqConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ReadFastqConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ReadFastqConfiguration*>(
               &_WriterConfiguration_ReadFastqConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(WriterConfiguration_ReadFastqConfiguration& a, WriterConfiguration_ReadFastqConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ReadFastqConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ReadFastqConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ReadFastqConfiguration* New() const final {
    return new WriterConfiguration_ReadFastqConfiguration();
  }

  WriterConfiguration_ReadFastqConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ReadFastqConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ReadFastqConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ReadFastqConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ReadFastqConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration";
  }
  protected:
  explicit WriterConfiguration_ReadFastqConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 2,
    kHeaderPatternFieldNumber = 3,
    kEnableFieldNumber = 1,
    kBatchCountFieldNumber = 4,
    kCompressionFieldNumber = 5,
  };
  // string file_pattern = 2;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // string header_pattern = 3;
  void clear_header_pattern();
  const std::string& header_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_header_pattern();
  void set_allocated_header_pattern(std::string* header_pattern);
  private:
  const std::string& _internal_header_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_pattern(const std::string& value);
  std::string* _internal_mutable_header_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_enable();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_enable();
  void set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_enable() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_enable();

  // uint32 batch_count = 4;
  void clear_batch_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count() const;
  void set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_count() const;
  void _internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool compression = 5;
  void clear_compression();
  bool compression() const;
  void set_compression(bool value);
  private:
  bool _internal_compression() const;
  void _internal_set_compression(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count_;
  bool compression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ReadBamConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration) */ {
 public:
  inline WriterConfiguration_ReadBamConfiguration() : WriterConfiguration_ReadBamConfiguration(nullptr) {}
  ~WriterConfiguration_ReadBamConfiguration() override;
  explicit constexpr WriterConfiguration_ReadBamConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ReadBamConfiguration(const WriterConfiguration_ReadBamConfiguration& from);
  WriterConfiguration_ReadBamConfiguration(WriterConfiguration_ReadBamConfiguration&& from) noexcept
    : WriterConfiguration_ReadBamConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ReadBamConfiguration& operator=(const WriterConfiguration_ReadBamConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ReadBamConfiguration& operator=(WriterConfiguration_ReadBamConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ReadBamConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ReadBamConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ReadBamConfiguration*>(
               &_WriterConfiguration_ReadBamConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(WriterConfiguration_ReadBamConfiguration& a, WriterConfiguration_ReadBamConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ReadBamConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ReadBamConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ReadBamConfiguration* New() const final {
    return new WriterConfiguration_ReadBamConfiguration();
  }

  WriterConfiguration_ReadBamConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ReadBamConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ReadBamConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ReadBamConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ReadBamConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration";
  }
  protected:
  explicit WriterConfiguration_ReadBamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 2,
    kEnableFieldNumber = 1,
    kBatchCountFieldNumber = 3,
  };
  // string file_pattern = 2;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_enable();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_enable();
  void set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_enable() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_enable();

  // uint32 batch_count = 3;
  void clear_batch_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count() const;
  void set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_count() const;
  void _internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ReadProtobufConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration) */ {
 public:
  inline WriterConfiguration_ReadProtobufConfiguration() : WriterConfiguration_ReadProtobufConfiguration(nullptr) {}
  ~WriterConfiguration_ReadProtobufConfiguration() override;
  explicit constexpr WriterConfiguration_ReadProtobufConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ReadProtobufConfiguration(const WriterConfiguration_ReadProtobufConfiguration& from);
  WriterConfiguration_ReadProtobufConfiguration(WriterConfiguration_ReadProtobufConfiguration&& from) noexcept
    : WriterConfiguration_ReadProtobufConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ReadProtobufConfiguration& operator=(const WriterConfiguration_ReadProtobufConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ReadProtobufConfiguration& operator=(WriterConfiguration_ReadProtobufConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ReadProtobufConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ReadProtobufConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ReadProtobufConfiguration*>(
               &_WriterConfiguration_ReadProtobufConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(WriterConfiguration_ReadProtobufConfiguration& a, WriterConfiguration_ReadProtobufConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ReadProtobufConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ReadProtobufConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ReadProtobufConfiguration* New() const final {
    return new WriterConfiguration_ReadProtobufConfiguration();
  }

  WriterConfiguration_ReadProtobufConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ReadProtobufConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ReadProtobufConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ReadProtobufConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ReadProtobufConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration";
  }
  protected:
  explicit WriterConfiguration_ReadProtobufConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 2,
    kEnableFieldNumber = 1,
    kBatchCountFieldNumber = 3,
  };
  // string file_pattern = 2;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_enable();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_enable();
  void set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_enable() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_enable();

  // uint32 batch_count = 3;
  void clear_batch_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count() const;
  void set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_count() const;
  void _internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_SequencingSummaryConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration) */ {
 public:
  inline WriterConfiguration_SequencingSummaryConfiguration() : WriterConfiguration_SequencingSummaryConfiguration(nullptr) {}
  ~WriterConfiguration_SequencingSummaryConfiguration() override;
  explicit constexpr WriterConfiguration_SequencingSummaryConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_SequencingSummaryConfiguration(const WriterConfiguration_SequencingSummaryConfiguration& from);
  WriterConfiguration_SequencingSummaryConfiguration(WriterConfiguration_SequencingSummaryConfiguration&& from) noexcept
    : WriterConfiguration_SequencingSummaryConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_SequencingSummaryConfiguration& operator=(const WriterConfiguration_SequencingSummaryConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_SequencingSummaryConfiguration& operator=(WriterConfiguration_SequencingSummaryConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_SequencingSummaryConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_SequencingSummaryConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_SequencingSummaryConfiguration*>(
               &_WriterConfiguration_SequencingSummaryConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(WriterConfiguration_SequencingSummaryConfiguration& a, WriterConfiguration_SequencingSummaryConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_SequencingSummaryConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_SequencingSummaryConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_SequencingSummaryConfiguration* New() const final {
    return new WriterConfiguration_SequencingSummaryConfiguration();
  }

  WriterConfiguration_SequencingSummaryConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_SequencingSummaryConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_SequencingSummaryConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_SequencingSummaryConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_SequencingSummaryConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration";
  }
  protected:
  explicit WriterConfiguration_SequencingSummaryConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 2,
    kEnableFieldNumber = 1,
  };
  // string file_pattern = 2;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_enable();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_enable();
  void set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_enable() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_enable();
  public:
  void unsafe_arena_set_allocated_enable(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_enable();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_BulkConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration) */ {
 public:
  inline WriterConfiguration_BulkConfiguration() : WriterConfiguration_BulkConfiguration(nullptr) {}
  ~WriterConfiguration_BulkConfiguration() override;
  explicit constexpr WriterConfiguration_BulkConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_BulkConfiguration(const WriterConfiguration_BulkConfiguration& from);
  WriterConfiguration_BulkConfiguration(WriterConfiguration_BulkConfiguration&& from) noexcept
    : WriterConfiguration_BulkConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_BulkConfiguration& operator=(const WriterConfiguration_BulkConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_BulkConfiguration& operator=(WriterConfiguration_BulkConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_BulkConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_BulkConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_BulkConfiguration*>(
               &_WriterConfiguration_BulkConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(WriterConfiguration_BulkConfiguration& a, WriterConfiguration_BulkConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_BulkConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_BulkConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_BulkConfiguration* New() const final {
    return new WriterConfiguration_BulkConfiguration();
  }

  WriterConfiguration_BulkConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_BulkConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_BulkConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_BulkConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_BulkConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration";
  }
  protected:
  explicit WriterConfiguration_BulkConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePatternFieldNumber = 14,
    kRawFieldNumber = 3,
    kEventsFieldNumber = 4,
    kReadsFieldNumber = 5,
    kMultiplexFieldNumber = 6,
    kChannelStatesFieldNumber = 7,
    kCompressionLevelFieldNumber = 2,
    kDeviceMetadataFieldNumber = 11,
    kDeviceCommandsFieldNumber = 12,
    kCompressionTypeFieldNumber = 13,
  };
  // string file_pattern = 14;
  void clear_file_pattern();
  const std::string& file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_pattern();
  void set_allocated_file_pattern(std::string* file_pattern);
  private:
  const std::string& _internal_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_pattern(const std::string& value);
  std::string* _internal_mutable_file_pattern();
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 3;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& raw() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_raw();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_raw();
  void set_allocated_raw(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_raw() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_raw();
  public:
  void unsafe_arena_set_allocated_raw(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_raw();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration events = 4;
  bool has_events() const;
  private:
  bool _internal_has_events() const;
  public:
  void clear_events();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& events() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_events();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_events();
  void set_allocated_events(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* events);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_events() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_events();
  public:
  void unsafe_arena_set_allocated_events(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* events);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_events();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration reads = 5;
  bool has_reads() const;
  private:
  bool _internal_has_reads() const;
  public:
  void clear_reads();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& reads() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_reads();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_reads();
  void set_allocated_reads(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* reads);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_reads() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_reads();
  public:
  void unsafe_arena_set_allocated_reads(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* reads);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_reads();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration multiplex = 6;
  bool has_multiplex() const;
  private:
  bool _internal_has_multiplex() const;
  public:
  void clear_multiplex();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& multiplex() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_multiplex();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_multiplex();
  void set_allocated_multiplex(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* multiplex);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_multiplex() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_multiplex();
  public:
  void unsafe_arena_set_allocated_multiplex(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* multiplex);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_multiplex();

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channel_states = 7;
  bool has_channel_states() const;
  private:
  bool _internal_has_channel_states() const;
  public:
  void clear_channel_states();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& channel_states() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_channel_states();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_channel_states();
  void set_allocated_channel_states(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channel_states);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_channel_states() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_channel_states();
  public:
  void unsafe_arena_set_allocated_channel_states(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channel_states);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_channel_states();

  // int32 compression_level = 2;
  void clear_compression_level();
  ::PROTOBUF_NAMESPACE_ID::int32 compression_level() const;
  void set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compression_level() const;
  void _internal_set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool device_metadata = 11;
  void clear_device_metadata();
  bool device_metadata() const;
  void set_device_metadata(bool value);
  private:
  bool _internal_device_metadata() const;
  void _internal_set_device_metadata(bool value);
  public:

  // bool device_commands = 12;
  void clear_device_commands();
  bool device_commands() const;
  void set_device_commands(bool value);
  private:
  bool _internal_device_commands() const;
  void _internal_set_device_commands(bool value);
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 13;
  void clear_compression_type();
  ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType compression_type() const;
  void set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value);
  private:
  ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType _internal_compression_type() const;
  void _internal_set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_pattern_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* events_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* reads_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* multiplex_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channel_states_;
  ::PROTOBUF_NAMESPACE_ID::int32 compression_level_;
  bool device_metadata_;
  bool device_commands_;
  int compression_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration_ReportConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration) */ {
 public:
  inline WriterConfiguration_ReportConfiguration() : WriterConfiguration_ReportConfiguration(nullptr) {}
  ~WriterConfiguration_ReportConfiguration() override;
  explicit constexpr WriterConfiguration_ReportConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration_ReportConfiguration(const WriterConfiguration_ReportConfiguration& from);
  WriterConfiguration_ReportConfiguration(WriterConfiguration_ReportConfiguration&& from) noexcept
    : WriterConfiguration_ReportConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration_ReportConfiguration& operator=(const WriterConfiguration_ReportConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration_ReportConfiguration& operator=(WriterConfiguration_ReportConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration_ReportConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration_ReportConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration_ReportConfiguration*>(
               &_WriterConfiguration_ReportConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(WriterConfiguration_ReportConfiguration& a, WriterConfiguration_ReportConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration_ReportConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration_ReportConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration_ReportConfiguration* New() const final {
    return new WriterConfiguration_ReportConfiguration();
  }

  WriterConfiguration_ReportConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration_ReportConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration_ReportConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration_ReportConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration_ReportConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration";
  }
  protected:
  explicit WriterConfiguration_ReportConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPdfReportFilePatternFieldNumber = 1,
    kMarkdownReportFilePatternFieldNumber = 2,
    kDutyTimeReportFilePatternFieldNumber = 3,
    kThroughputReportFilePatternFieldNumber = 4,
    kFinalSummaryReportFilePatternFieldNumber = 5,
    kBarcodeAlignmentReportFilePatternFieldNumber = 6,
    kCustomReportSuffixPatternFieldNumber = 7,
  };
  // string pdf_report_file_pattern = 1;
  void clear_pdf_report_file_pattern();
  const std::string& pdf_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pdf_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pdf_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_pdf_report_file_pattern();
  void set_allocated_pdf_report_file_pattern(std::string* pdf_report_file_pattern);
  private:
  const std::string& _internal_pdf_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pdf_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_pdf_report_file_pattern();
  public:

  // string markdown_report_file_pattern = 2;
  void clear_markdown_report_file_pattern();
  const std::string& markdown_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_markdown_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_markdown_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_markdown_report_file_pattern();
  void set_allocated_markdown_report_file_pattern(std::string* markdown_report_file_pattern);
  private:
  const std::string& _internal_markdown_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_markdown_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_markdown_report_file_pattern();
  public:

  // string duty_time_report_file_pattern = 3;
  void clear_duty_time_report_file_pattern();
  const std::string& duty_time_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duty_time_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duty_time_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_duty_time_report_file_pattern();
  void set_allocated_duty_time_report_file_pattern(std::string* duty_time_report_file_pattern);
  private:
  const std::string& _internal_duty_time_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duty_time_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_duty_time_report_file_pattern();
  public:

  // string throughput_report_file_pattern = 4;
  void clear_throughput_report_file_pattern();
  const std::string& throughput_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_throughput_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_throughput_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_throughput_report_file_pattern();
  void set_allocated_throughput_report_file_pattern(std::string* throughput_report_file_pattern);
  private:
  const std::string& _internal_throughput_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_throughput_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_throughput_report_file_pattern();
  public:

  // string final_summary_report_file_pattern = 5;
  void clear_final_summary_report_file_pattern();
  const std::string& final_summary_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_final_summary_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_final_summary_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_final_summary_report_file_pattern();
  void set_allocated_final_summary_report_file_pattern(std::string* final_summary_report_file_pattern);
  private:
  const std::string& _internal_final_summary_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_final_summary_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_final_summary_report_file_pattern();
  public:

  // string barcode_alignment_report_file_pattern = 6;
  void clear_barcode_alignment_report_file_pattern();
  const std::string& barcode_alignment_report_file_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_barcode_alignment_report_file_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_barcode_alignment_report_file_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_barcode_alignment_report_file_pattern();
  void set_allocated_barcode_alignment_report_file_pattern(std::string* barcode_alignment_report_file_pattern);
  private:
  const std::string& _internal_barcode_alignment_report_file_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barcode_alignment_report_file_pattern(const std::string& value);
  std::string* _internal_mutable_barcode_alignment_report_file_pattern();
  public:

  // string custom_report_suffix_pattern = 7;
  void clear_custom_report_suffix_pattern();
  const std::string& custom_report_suffix_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_report_suffix_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_report_suffix_pattern();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_report_suffix_pattern();
  void set_allocated_custom_report_suffix_pattern(std::string* custom_report_suffix_pattern);
  private:
  const std::string& _internal_custom_report_suffix_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_report_suffix_pattern(const std::string& value);
  std::string* _internal_mutable_custom_report_suffix_pattern();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdf_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr markdown_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duty_time_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr throughput_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_summary_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr barcode_alignment_report_file_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_report_suffix_pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class WriterConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.WriterConfiguration) */ {
 public:
  inline WriterConfiguration() : WriterConfiguration(nullptr) {}
  ~WriterConfiguration() override;
  explicit constexpr WriterConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriterConfiguration(const WriterConfiguration& from);
  WriterConfiguration(WriterConfiguration&& from) noexcept
    : WriterConfiguration() {
    *this = ::std::move(from);
  }

  inline WriterConfiguration& operator=(const WriterConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriterConfiguration& operator=(WriterConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriterConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriterConfiguration* internal_default_instance() {
    return reinterpret_cast<const WriterConfiguration*>(
               &_WriterConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(WriterConfiguration& a, WriterConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WriterConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriterConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriterConfiguration* New() const final {
    return new WriterConfiguration();
  }

  WriterConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriterConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriterConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriterConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriterConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.WriterConfiguration";
  }
  protected:
  explicit WriterConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WriterConfiguration_ChannelConfiguration ChannelConfiguration;
  typedef WriterConfiguration_ReadFast5Configuration ReadFast5Configuration;
  typedef WriterConfiguration_ReadFastqConfiguration ReadFastqConfiguration;
  typedef WriterConfiguration_ReadBamConfiguration ReadBamConfiguration;
  typedef WriterConfiguration_ReadProtobufConfiguration ReadProtobufConfiguration;
  typedef WriterConfiguration_SequencingSummaryConfiguration SequencingSummaryConfiguration;
  typedef WriterConfiguration_BulkConfiguration BulkConfiguration;
  typedef WriterConfiguration_ReportConfiguration ReportConfiguration;

  typedef WriterConfiguration_CompressionType CompressionType;
  static constexpr CompressionType DefaultCompression =
    WriterConfiguration_CompressionType_DefaultCompression;
  static constexpr CompressionType ZlibCompression =
    WriterConfiguration_CompressionType_ZlibCompression;
  static constexpr CompressionType VbzCompression =
    WriterConfiguration_CompressionType_VbzCompression;
  static inline bool CompressionType_IsValid(int value) {
    return WriterConfiguration_CompressionType_IsValid(value);
  }
  static constexpr CompressionType CompressionType_MIN =
    WriterConfiguration_CompressionType_CompressionType_MIN;
  static constexpr CompressionType CompressionType_MAX =
    WriterConfiguration_CompressionType_CompressionType_MAX;
  static constexpr int CompressionType_ARRAYSIZE =
    WriterConfiguration_CompressionType_CompressionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompressionType_descriptor() {
    return WriterConfiguration_CompressionType_descriptor();
  }
  template<typename T>
  static inline const std::string& CompressionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompressionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompressionType_Name.");
    return WriterConfiguration_CompressionType_Name(enum_t_value);
  }
  static inline bool CompressionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompressionType* value) {
    return WriterConfiguration_CompressionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReadFast5FieldNumber = 2,
    kReadFastqFieldNumber = 3,
    kReadProtobufFieldNumber = 4,
    kSequencingSummaryFieldNumber = 5,
    kBulkFieldNumber = 6,
    kReportFieldNumber = 7,
    kReadBamFieldNumber = 8,
  };
  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration read_fast5 = 2;
  bool has_read_fast5() const;
  private:
  bool _internal_has_read_fast5() const;
  public:
  void clear_read_fast5();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration& read_fast5() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* release_read_fast5();
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* mutable_read_fast5();
  void set_allocated_read_fast5(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* read_fast5);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration& _internal_read_fast5() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* _internal_mutable_read_fast5();
  public:
  void unsafe_arena_set_allocated_read_fast5(
      ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* read_fast5);
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* unsafe_arena_release_read_fast5();

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration read_fastq = 3;
  bool has_read_fastq() const;
  private:
  bool _internal_has_read_fastq() const;
  public:
  void clear_read_fastq();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration& read_fastq() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* release_read_fastq();
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* mutable_read_fastq();
  void set_allocated_read_fastq(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* read_fastq);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration& _internal_read_fastq() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* _internal_mutable_read_fastq();
  public:
  void unsafe_arena_set_allocated_read_fastq(
      ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* read_fastq);
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* unsafe_arena_release_read_fastq();

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration read_protobuf = 4;
  bool has_read_protobuf() const;
  private:
  bool _internal_has_read_protobuf() const;
  public:
  void clear_read_protobuf();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration& read_protobuf() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* release_read_protobuf();
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* mutable_read_protobuf();
  void set_allocated_read_protobuf(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* read_protobuf);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration& _internal_read_protobuf() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* _internal_mutable_read_protobuf();
  public:
  void unsafe_arena_set_allocated_read_protobuf(
      ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* read_protobuf);
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* unsafe_arena_release_read_protobuf();

  // .minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration sequencing_summary = 5;
  bool has_sequencing_summary() const;
  private:
  bool _internal_has_sequencing_summary() const;
  public:
  void clear_sequencing_summary();
  const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration& sequencing_summary() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* release_sequencing_summary();
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* mutable_sequencing_summary();
  void set_allocated_sequencing_summary(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* sequencing_summary);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration& _internal_sequencing_summary() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* _internal_mutable_sequencing_summary();
  public:
  void unsafe_arena_set_allocated_sequencing_summary(
      ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* sequencing_summary);
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* unsafe_arena_release_sequencing_summary();

  // .minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration bulk = 6;
  bool has_bulk() const;
  private:
  bool _internal_has_bulk() const;
  public:
  void clear_bulk();
  const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration& bulk() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* release_bulk();
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* mutable_bulk();
  void set_allocated_bulk(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* bulk);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration& _internal_bulk() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* _internal_mutable_bulk();
  public:
  void unsafe_arena_set_allocated_bulk(
      ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* bulk);
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* unsafe_arena_release_bulk();

  // .minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration report = 7;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration& report() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* release_report();
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* mutable_report();
  void set_allocated_report(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* report);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration& _internal_report() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* report);
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* unsafe_arena_release_report();

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration read_bam = 8;
  bool has_read_bam() const;
  private:
  bool _internal_has_read_bam() const;
  public:
  void clear_read_bam();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration& read_bam() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* release_read_bam();
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* mutable_read_bam();
  void set_allocated_read_bam(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* read_bam);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration& _internal_read_bam() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* _internal_mutable_read_bam();
  public:
  void unsafe_arena_set_allocated_read_bam(
      ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* read_bam);
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* unsafe_arena_release_read_bam();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.WriterConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* read_fast5_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* read_fastq_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* read_protobuf_;
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* sequencing_summary_;
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* bulk_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* report_;
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* read_bam_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class SetWriterConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.SetWriterConfigurationResponse) */ {
 public:
  inline SetWriterConfigurationResponse() : SetWriterConfigurationResponse(nullptr) {}
  explicit constexpr SetWriterConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWriterConfigurationResponse(const SetWriterConfigurationResponse& from);
  SetWriterConfigurationResponse(SetWriterConfigurationResponse&& from) noexcept
    : SetWriterConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetWriterConfigurationResponse& operator=(const SetWriterConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWriterConfigurationResponse& operator=(SetWriterConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWriterConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWriterConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetWriterConfigurationResponse*>(
               &_SetWriterConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SetWriterConfigurationResponse& a, SetWriterConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWriterConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWriterConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetWriterConfigurationResponse* New() const final {
    return new SetWriterConfigurationResponse();
  }

  SetWriterConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetWriterConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetWriterConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetWriterConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.SetWriterConfigurationResponse";
  }
  protected:
  explicit SetWriterConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.SetWriterConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetWriterConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetWriterConfigurationRequest) */ {
 public:
  inline GetWriterConfigurationRequest() : GetWriterConfigurationRequest(nullptr) {}
  explicit constexpr GetWriterConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWriterConfigurationRequest(const GetWriterConfigurationRequest& from);
  GetWriterConfigurationRequest(GetWriterConfigurationRequest&& from) noexcept
    : GetWriterConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetWriterConfigurationRequest& operator=(const GetWriterConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWriterConfigurationRequest& operator=(GetWriterConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWriterConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWriterConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetWriterConfigurationRequest*>(
               &_GetWriterConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetWriterConfigurationRequest& a, GetWriterConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWriterConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWriterConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWriterConfigurationRequest* New() const final {
    return new GetWriterConfigurationRequest();
  }

  GetWriterConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWriterConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetWriterConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetWriterConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetWriterConfigurationRequest";
  }
  protected:
  explicit GetWriterConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetWriterConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetReadClassificationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetReadClassificationsRequest) */ {
 public:
  inline GetReadClassificationsRequest() : GetReadClassificationsRequest(nullptr) {}
  explicit constexpr GetReadClassificationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReadClassificationsRequest(const GetReadClassificationsRequest& from);
  GetReadClassificationsRequest(GetReadClassificationsRequest&& from) noexcept
    : GetReadClassificationsRequest() {
    *this = ::std::move(from);
  }

  inline GetReadClassificationsRequest& operator=(const GetReadClassificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReadClassificationsRequest& operator=(GetReadClassificationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReadClassificationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReadClassificationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetReadClassificationsRequest*>(
               &_GetReadClassificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetReadClassificationsRequest& a, GetReadClassificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReadClassificationsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReadClassificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReadClassificationsRequest* New() const final {
    return new GetReadClassificationsRequest();
  }

  GetReadClassificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReadClassificationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetReadClassificationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetReadClassificationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetReadClassificationsRequest";
  }
  protected:
  explicit GetReadClassificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetReadClassificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse();
  explicit constexpr GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse& other);
  static const GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse*>(&_GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class GetReadClassificationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.analysis_configuration.GetReadClassificationsResponse) */ {
 public:
  inline GetReadClassificationsResponse() : GetReadClassificationsResponse(nullptr) {}
  ~GetReadClassificationsResponse() override;
  explicit constexpr GetReadClassificationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReadClassificationsResponse(const GetReadClassificationsResponse& from);
  GetReadClassificationsResponse(GetReadClassificationsResponse&& from) noexcept
    : GetReadClassificationsResponse() {
    *this = ::std::move(from);
  }

  inline GetReadClassificationsResponse& operator=(const GetReadClassificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReadClassificationsResponse& operator=(GetReadClassificationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReadClassificationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReadClassificationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetReadClassificationsResponse*>(
               &_GetReadClassificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetReadClassificationsResponse& a, GetReadClassificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReadClassificationsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReadClassificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReadClassificationsResponse* New() const final {
    return new GetReadClassificationsResponse();
  }

  GetReadClassificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReadClassificationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReadClassificationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetReadClassificationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReadClassificationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.analysis_configuration.GetReadClassificationsResponse";
  }
  protected:
  explicit GetReadClassificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReadClassificationsFieldNumber = 1,
  };
  // map<int32, string> read_classifications = 1;
  int read_classifications_size() const;
  private:
  int _internal_read_classifications_size() const;
  public:
  void clear_read_classifications();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_read_classifications() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_read_classifications();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      read_classifications() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_read_classifications();

  // @@protoc_insertion_point(class_scope:minknow_api.analysis_configuration.GetReadClassificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> read_classifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventDetection

// uint32 window_size = 3;
inline void EventDetection::clear_window_size() {
  window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventDetection::_internal_window_size() const {
  return window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventDetection::window_size() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.window_size)
  return _internal_window_size();
}
inline void EventDetection::_internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  window_size_ = value;
}
inline void EventDetection::set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.EventDetection.window_size)
}

// double threshold = 5;
inline void EventDetection::clear_threshold() {
  threshold_ = 0;
}
inline double EventDetection::_internal_threshold() const {
  return threshold_;
}
inline double EventDetection::threshold() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.threshold)
  return _internal_threshold();
}
inline void EventDetection::_internal_set_threshold(double value) {
  
  threshold_ = value;
}
inline void EventDetection::set_threshold(double value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.EventDetection.threshold)
}

// double peak_height = 9;
inline void EventDetection::clear_peak_height() {
  peak_height_ = 0;
}
inline double EventDetection::_internal_peak_height() const {
  return peak_height_;
}
inline double EventDetection::peak_height() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.peak_height)
  return _internal_peak_height();
}
inline void EventDetection::_internal_set_peak_height(double value) {
  
  peak_height_ = value;
}
inline void EventDetection::set_peak_height(double value) {
  _internal_set_peak_height(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.EventDetection.peak_height)
}

// .google.protobuf.DoubleValue events_to_base_ratio = 16;
inline bool EventDetection::_internal_has_events_to_base_ratio() const {
  return this != internal_default_instance() && events_to_base_ratio_ != nullptr;
}
inline bool EventDetection::has_events_to_base_ratio() const {
  return _internal_has_events_to_base_ratio();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EventDetection::_internal_events_to_base_ratio() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = events_to_base_ratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& EventDetection::events_to_base_ratio() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.events_to_base_ratio)
  return _internal_events_to_base_ratio();
}
inline void EventDetection::unsafe_arena_set_allocated_events_to_base_ratio(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* events_to_base_ratio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(events_to_base_ratio_);
  }
  events_to_base_ratio_ = events_to_base_ratio;
  if (events_to_base_ratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.EventDetection.events_to_base_ratio)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EventDetection::release_events_to_base_ratio() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = events_to_base_ratio_;
  events_to_base_ratio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EventDetection::unsafe_arena_release_events_to_base_ratio() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.EventDetection.events_to_base_ratio)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = events_to_base_ratio_;
  events_to_base_ratio_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EventDetection::_internal_mutable_events_to_base_ratio() {
  
  if (events_to_base_ratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    events_to_base_ratio_ = p;
  }
  return events_to_base_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* EventDetection::mutable_events_to_base_ratio() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_events_to_base_ratio();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.EventDetection.events_to_base_ratio)
  return _msg;
}
inline void EventDetection::set_allocated_events_to_base_ratio(::PROTOBUF_NAMESPACE_ID::DoubleValue* events_to_base_ratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(events_to_base_ratio_);
  }
  if (events_to_base_ratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(events_to_base_ratio));
    if (message_arena != submessage_arena) {
      events_to_base_ratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, events_to_base_ratio, submessage_arena);
    }
    
  } else {
    
  }
  events_to_base_ratio_ = events_to_base_ratio;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.EventDetection.events_to_base_ratio)
}

// bool break_on_mux_changes = 17;
inline void EventDetection::clear_break_on_mux_changes() {
  break_on_mux_changes_ = false;
}
inline bool EventDetection::_internal_break_on_mux_changes() const {
  return break_on_mux_changes_;
}
inline bool EventDetection::break_on_mux_changes() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.break_on_mux_changes)
  return _internal_break_on_mux_changes();
}
inline void EventDetection::_internal_set_break_on_mux_changes(bool value) {
  
  break_on_mux_changes_ = value;
}
inline void EventDetection::set_break_on_mux_changes(bool value) {
  _internal_set_break_on_mux_changes(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.EventDetection.break_on_mux_changes)
}

// uint32 max_mux_change_back_shift = 18;
inline void EventDetection::clear_max_mux_change_back_shift() {
  max_mux_change_back_shift_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventDetection::_internal_max_mux_change_back_shift() const {
  return max_mux_change_back_shift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventDetection::max_mux_change_back_shift() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.EventDetection.max_mux_change_back_shift)
  return _internal_max_mux_change_back_shift();
}
inline void EventDetection::_internal_set_max_mux_change_back_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_mux_change_back_shift_ = value;
}
inline void EventDetection::set_max_mux_change_back_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_mux_change_back_shift(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.EventDetection.max_mux_change_back_shift)
}

// -------------------------------------------------------------------

// ReadDetectionParams

// .minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode mode = 1;
inline void ReadDetectionParams::clear_mode() {
  mode_ = 0;
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode ReadDetectionParams::_internal_mode() const {
  return static_cast< ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode >(mode_);
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode ReadDetectionParams::mode() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.mode)
  return _internal_mode();
}
inline void ReadDetectionParams::_internal_set_mode(::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode value) {
  
  mode_ = value;
}
inline void ReadDetectionParams::set_mode(::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadDetectionParams.mode)
}

// double minimum_delta_mean = 2;
inline void ReadDetectionParams::clear_minimum_delta_mean() {
  minimum_delta_mean_ = 0;
}
inline double ReadDetectionParams::_internal_minimum_delta_mean() const {
  return minimum_delta_mean_;
}
inline double ReadDetectionParams::minimum_delta_mean() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.minimum_delta_mean)
  return _internal_minimum_delta_mean();
}
inline void ReadDetectionParams::_internal_set_minimum_delta_mean(double value) {
  
  minimum_delta_mean_ = value;
}
inline void ReadDetectionParams::set_minimum_delta_mean(double value) {
  _internal_set_minimum_delta_mean(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadDetectionParams.minimum_delta_mean)
}

// uint32 look_back = 3;
inline void ReadDetectionParams::clear_look_back() {
  look_back_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadDetectionParams::_internal_look_back() const {
  return look_back_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadDetectionParams::look_back() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.look_back)
  return _internal_look_back();
}
inline void ReadDetectionParams::_internal_set_look_back(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  look_back_ = value;
}
inline void ReadDetectionParams::set_look_back(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_look_back(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadDetectionParams.look_back)
}

// .google.protobuf.UInt32Value break_reads_after_events = 4;
inline bool ReadDetectionParams::_internal_has_break_reads_after_events() const {
  return this != internal_default_instance() && break_reads_after_events_ != nullptr;
}
inline bool ReadDetectionParams::has_break_reads_after_events() const {
  return _internal_has_break_reads_after_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ReadDetectionParams::_internal_break_reads_after_events() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = break_reads_after_events_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ReadDetectionParams::break_reads_after_events() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events)
  return _internal_break_reads_after_events();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_break_reads_after_events(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* break_reads_after_events) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_events_);
  }
  break_reads_after_events_ = break_reads_after_events;
  if (break_reads_after_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReadDetectionParams::release_break_reads_after_events() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = break_reads_after_events_;
  break_reads_after_events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReadDetectionParams::unsafe_arena_release_break_reads_after_events() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = break_reads_after_events_;
  break_reads_after_events_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReadDetectionParams::_internal_mutable_break_reads_after_events() {
  
  if (break_reads_after_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    break_reads_after_events_ = p;
  }
  return break_reads_after_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ReadDetectionParams::mutable_break_reads_after_events() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_break_reads_after_events();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_break_reads_after_events(::PROTOBUF_NAMESPACE_ID::UInt32Value* break_reads_after_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_events_);
  }
  if (break_reads_after_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_events));
    if (message_arena != submessage_arena) {
      break_reads_after_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, break_reads_after_events, submessage_arena);
    }
    
  } else {
    
  }
  break_reads_after_events_ = break_reads_after_events;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_events)
}

// .google.protobuf.DoubleValue break_reads_after_seconds = 5;
inline bool ReadDetectionParams::_internal_has_break_reads_after_seconds() const {
  return this != internal_default_instance() && break_reads_after_seconds_ != nullptr;
}
inline bool ReadDetectionParams::has_break_reads_after_seconds() const {
  return _internal_has_break_reads_after_seconds();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::_internal_break_reads_after_seconds() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = break_reads_after_seconds_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::break_reads_after_seconds() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds)
  return _internal_break_reads_after_seconds();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_break_reads_after_seconds(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* break_reads_after_seconds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_seconds_);
  }
  break_reads_after_seconds_ = break_reads_after_seconds;
  if (break_reads_after_seconds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::release_break_reads_after_seconds() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = break_reads_after_seconds_;
  break_reads_after_seconds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::unsafe_arena_release_break_reads_after_seconds() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = break_reads_after_seconds_;
  break_reads_after_seconds_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::_internal_mutable_break_reads_after_seconds() {
  
  if (break_reads_after_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    break_reads_after_seconds_ = p;
  }
  return break_reads_after_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::mutable_break_reads_after_seconds() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_break_reads_after_seconds();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_break_reads_after_seconds(::PROTOBUF_NAMESPACE_ID::DoubleValue* break_reads_after_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_seconds_);
  }
  if (break_reads_after_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(break_reads_after_seconds));
    if (message_arena != submessage_arena) {
      break_reads_after_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, break_reads_after_seconds, submessage_arena);
    }
    
  } else {
    
  }
  break_reads_after_seconds_ = break_reads_after_seconds;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_after_seconds)
}

// bool break_reads_on_mux_changes = 6;
inline void ReadDetectionParams::clear_break_reads_on_mux_changes() {
  break_reads_on_mux_changes_ = false;
}
inline bool ReadDetectionParams::_internal_break_reads_on_mux_changes() const {
  return break_reads_on_mux_changes_;
}
inline bool ReadDetectionParams::break_reads_on_mux_changes() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_on_mux_changes)
  return _internal_break_reads_on_mux_changes();
}
inline void ReadDetectionParams::_internal_set_break_reads_on_mux_changes(bool value) {
  
  break_reads_on_mux_changes_ = value;
}
inline void ReadDetectionParams::set_break_reads_on_mux_changes(bool value) {
  _internal_set_break_reads_on_mux_changes(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadDetectionParams.break_reads_on_mux_changes)
}

// .google.protobuf.DoubleValue open_pore_min = 7;
inline bool ReadDetectionParams::_internal_has_open_pore_min() const {
  return this != internal_default_instance() && open_pore_min_ != nullptr;
}
inline bool ReadDetectionParams::has_open_pore_min() const {
  return _internal_has_open_pore_min();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::_internal_open_pore_min() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = open_pore_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::open_pore_min() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min)
  return _internal_open_pore_min();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_open_pore_min(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_min) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_min_);
  }
  open_pore_min_ = open_pore_min;
  if (open_pore_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::release_open_pore_min() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_min_;
  open_pore_min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::unsafe_arena_release_open_pore_min() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_min_;
  open_pore_min_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::_internal_mutable_open_pore_min() {
  
  if (open_pore_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    open_pore_min_ = p;
  }
  return open_pore_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::mutable_open_pore_min() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_open_pore_min();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_open_pore_min(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_min_);
  }
  if (open_pore_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_min));
    if (message_arena != submessage_arena) {
      open_pore_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_pore_min, submessage_arena);
    }
    
  } else {
    
  }
  open_pore_min_ = open_pore_min;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_min)
}

// .google.protobuf.DoubleValue open_pore_max = 8;
inline bool ReadDetectionParams::_internal_has_open_pore_max() const {
  return this != internal_default_instance() && open_pore_max_ != nullptr;
}
inline bool ReadDetectionParams::has_open_pore_max() const {
  return _internal_has_open_pore_max();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::_internal_open_pore_max() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = open_pore_max_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::open_pore_max() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max)
  return _internal_open_pore_max();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_open_pore_max(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_max_);
  }
  open_pore_max_ = open_pore_max;
  if (open_pore_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::release_open_pore_max() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_max_;
  open_pore_max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::unsafe_arena_release_open_pore_max() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_max_;
  open_pore_max_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::_internal_mutable_open_pore_max() {
  
  if (open_pore_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    open_pore_max_ = p;
  }
  return open_pore_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::mutable_open_pore_max() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_open_pore_max();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_open_pore_max(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_max_);
  }
  if (open_pore_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_max));
    if (message_arena != submessage_arena) {
      open_pore_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_pore_max, submessage_arena);
    }
    
  } else {
    
  }
  open_pore_max_ = open_pore_max;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_max)
}

// .google.protobuf.DoubleValue open_pore_default = 9;
inline bool ReadDetectionParams::_internal_has_open_pore_default() const {
  return this != internal_default_instance() && open_pore_default_ != nullptr;
}
inline bool ReadDetectionParams::has_open_pore_default() const {
  return _internal_has_open_pore_default();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::_internal_open_pore_default() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = open_pore_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::open_pore_default() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default)
  return _internal_open_pore_default();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_open_pore_default(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_default_);
  }
  open_pore_default_ = open_pore_default;
  if (open_pore_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::release_open_pore_default() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_default_;
  open_pore_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::unsafe_arena_release_open_pore_default() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_default_;
  open_pore_default_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::_internal_mutable_open_pore_default() {
  
  if (open_pore_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    open_pore_default_ = p;
  }
  return open_pore_default_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::mutable_open_pore_default() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_open_pore_default();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_open_pore_default(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_default_);
  }
  if (open_pore_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_default));
    if (message_arena != submessage_arena) {
      open_pore_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_pore_default, submessage_arena);
    }
    
  } else {
    
  }
  open_pore_default_ = open_pore_default;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_default)
}

// .google.protobuf.DoubleValue open_pore_seconds_required = 10;
inline bool ReadDetectionParams::_internal_has_open_pore_seconds_required() const {
  return this != internal_default_instance() && open_pore_seconds_required_ != nullptr;
}
inline bool ReadDetectionParams::has_open_pore_seconds_required() const {
  return _internal_has_open_pore_seconds_required();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::_internal_open_pore_seconds_required() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = open_pore_seconds_required_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadDetectionParams::open_pore_seconds_required() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required)
  return _internal_open_pore_seconds_required();
}
inline void ReadDetectionParams::unsafe_arena_set_allocated_open_pore_seconds_required(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_seconds_required) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_seconds_required_);
  }
  open_pore_seconds_required_ = open_pore_seconds_required;
  if (open_pore_seconds_required) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::release_open_pore_seconds_required() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_seconds_required_;
  open_pore_seconds_required_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::unsafe_arena_release_open_pore_seconds_required() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_seconds_required_;
  open_pore_seconds_required_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::_internal_mutable_open_pore_seconds_required() {
  
  if (open_pore_seconds_required_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    open_pore_seconds_required_ = p;
  }
  return open_pore_seconds_required_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadDetectionParams::mutable_open_pore_seconds_required() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_open_pore_seconds_required();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required)
  return _msg;
}
inline void ReadDetectionParams::set_allocated_open_pore_seconds_required(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_seconds_required) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_seconds_required_);
  }
  if (open_pore_seconds_required) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_seconds_required));
    if (message_arena != submessage_arena) {
      open_pore_seconds_required = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_pore_seconds_required, submessage_arena);
    }
    
  } else {
    
  }
  open_pore_seconds_required_ = open_pore_seconds_required;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadDetectionParams.open_pore_seconds_required)
}

// -------------------------------------------------------------------

// ReadClassificationParams_Parameters

// repeated string rules_in_execution_order = 2;
inline int ReadClassificationParams_Parameters::_internal_rules_in_execution_order_size() const {
  return rules_in_execution_order_.size();
}
inline int ReadClassificationParams_Parameters::rules_in_execution_order_size() const {
  return _internal_rules_in_execution_order_size();
}
inline void ReadClassificationParams_Parameters::clear_rules_in_execution_order() {
  rules_in_execution_order_.Clear();
}
inline std::string* ReadClassificationParams_Parameters::add_rules_in_execution_order() {
  std::string* _s = _internal_add_rules_in_execution_order();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
  return _s;
}
inline const std::string& ReadClassificationParams_Parameters::_internal_rules_in_execution_order(int index) const {
  return rules_in_execution_order_.Get(index);
}
inline const std::string& ReadClassificationParams_Parameters::rules_in_execution_order(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
  return _internal_rules_in_execution_order(index);
}
inline std::string* ReadClassificationParams_Parameters::mutable_rules_in_execution_order(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
  return rules_in_execution_order_.Mutable(index);
}
inline void ReadClassificationParams_Parameters::set_rules_in_execution_order(int index, const std::string& value) {
  rules_in_execution_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::set_rules_in_execution_order(int index, std::string&& value) {
  rules_in_execution_order_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::set_rules_in_execution_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rules_in_execution_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::set_rules_in_execution_order(int index, const char* value, size_t size) {
  rules_in_execution_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline std::string* ReadClassificationParams_Parameters::_internal_add_rules_in_execution_order() {
  return rules_in_execution_order_.Add();
}
inline void ReadClassificationParams_Parameters::add_rules_in_execution_order(const std::string& value) {
  rules_in_execution_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::add_rules_in_execution_order(std::string&& value) {
  rules_in_execution_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::add_rules_in_execution_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rules_in_execution_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline void ReadClassificationParams_Parameters::add_rules_in_execution_order(const char* value, size_t size) {
  rules_in_execution_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadClassificationParams_Parameters::rules_in_execution_order() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
  return rules_in_execution_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadClassificationParams_Parameters::mutable_rules_in_execution_order() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order)
  return &rules_in_execution_order_;
}

// -------------------------------------------------------------------

// ReadClassificationParams

// .minknow_api.analysis_configuration.ReadClassificationParams.Scheme scheme_module = 1;
inline void ReadClassificationParams::clear_scheme_module() {
  scheme_module_ = 0;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme ReadClassificationParams::_internal_scheme_module() const {
  return static_cast< ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme >(scheme_module_);
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme ReadClassificationParams::scheme_module() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.scheme_module)
  return _internal_scheme_module();
}
inline void ReadClassificationParams::_internal_set_scheme_module(::minknow_api::analysis_configuration::ReadClassificationParams_Scheme value) {
  
  scheme_module_ = value;
}
inline void ReadClassificationParams::set_scheme_module(::minknow_api::analysis_configuration::ReadClassificationParams_Scheme value) {
  _internal_set_scheme_module(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.scheme_module)
}

// .google.protobuf.UInt64Value max_sample_size = 2;
inline bool ReadClassificationParams::_internal_has_max_sample_size() const {
  return this != internal_default_instance() && max_sample_size_ != nullptr;
}
inline bool ReadClassificationParams::has_max_sample_size() const {
  return _internal_has_max_sample_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& ReadClassificationParams::_internal_max_sample_size() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = max_sample_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& ReadClassificationParams::max_sample_size() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size)
  return _internal_max_sample_size();
}
inline void ReadClassificationParams::unsafe_arena_set_allocated_max_sample_size(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_sample_size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_sample_size_);
  }
  max_sample_size_ = max_sample_size;
  if (max_sample_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* ReadClassificationParams::release_max_sample_size() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_sample_size_;
  max_sample_size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* ReadClassificationParams::unsafe_arena_release_max_sample_size() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_sample_size_;
  max_sample_size_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* ReadClassificationParams::_internal_mutable_max_sample_size() {
  
  if (max_sample_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    max_sample_size_ = p;
  }
  return max_sample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* ReadClassificationParams::mutable_max_sample_size() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_max_sample_size();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size)
  return _msg;
}
inline void ReadClassificationParams::set_allocated_max_sample_size(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_sample_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_sample_size_);
  }
  if (max_sample_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_sample_size));
    if (message_arena != submessage_arena) {
      max_sample_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_sample_size, submessage_arena);
    }
    
  } else {
    
  }
  max_sample_size_ = max_sample_size;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.max_sample_size)
}

// repeated string selected_classifications = 3;
inline int ReadClassificationParams::_internal_selected_classifications_size() const {
  return selected_classifications_.size();
}
inline int ReadClassificationParams::selected_classifications_size() const {
  return _internal_selected_classifications_size();
}
inline void ReadClassificationParams::clear_selected_classifications() {
  selected_classifications_.Clear();
}
inline std::string* ReadClassificationParams::add_selected_classifications() {
  std::string* _s = _internal_add_selected_classifications();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
  return _s;
}
inline const std::string& ReadClassificationParams::_internal_selected_classifications(int index) const {
  return selected_classifications_.Get(index);
}
inline const std::string& ReadClassificationParams::selected_classifications(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
  return _internal_selected_classifications(index);
}
inline std::string* ReadClassificationParams::mutable_selected_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
  return selected_classifications_.Mutable(index);
}
inline void ReadClassificationParams::set_selected_classifications(int index, const std::string& value) {
  selected_classifications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::set_selected_classifications(int index, std::string&& value) {
  selected_classifications_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::set_selected_classifications(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  selected_classifications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::set_selected_classifications(int index, const char* value, size_t size) {
  selected_classifications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline std::string* ReadClassificationParams::_internal_add_selected_classifications() {
  return selected_classifications_.Add();
}
inline void ReadClassificationParams::add_selected_classifications(const std::string& value) {
  selected_classifications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::add_selected_classifications(std::string&& value) {
  selected_classifications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::add_selected_classifications(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  selected_classifications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline void ReadClassificationParams::add_selected_classifications(const char* value, size_t size) {
  selected_classifications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadClassificationParams::selected_classifications() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
  return selected_classifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadClassificationParams::mutable_selected_classifications() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications)
  return &selected_classifications_;
}

// repeated string open_pore_classifications = 6;
inline int ReadClassificationParams::_internal_open_pore_classifications_size() const {
  return open_pore_classifications_.size();
}
inline int ReadClassificationParams::open_pore_classifications_size() const {
  return _internal_open_pore_classifications_size();
}
inline void ReadClassificationParams::clear_open_pore_classifications() {
  open_pore_classifications_.Clear();
}
inline std::string* ReadClassificationParams::add_open_pore_classifications() {
  std::string* _s = _internal_add_open_pore_classifications();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
  return _s;
}
inline const std::string& ReadClassificationParams::_internal_open_pore_classifications(int index) const {
  return open_pore_classifications_.Get(index);
}
inline const std::string& ReadClassificationParams::open_pore_classifications(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
  return _internal_open_pore_classifications(index);
}
inline std::string* ReadClassificationParams::mutable_open_pore_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
  return open_pore_classifications_.Mutable(index);
}
inline void ReadClassificationParams::set_open_pore_classifications(int index, const std::string& value) {
  open_pore_classifications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::set_open_pore_classifications(int index, std::string&& value) {
  open_pore_classifications_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::set_open_pore_classifications(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  open_pore_classifications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::set_open_pore_classifications(int index, const char* value, size_t size) {
  open_pore_classifications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline std::string* ReadClassificationParams::_internal_add_open_pore_classifications() {
  return open_pore_classifications_.Add();
}
inline void ReadClassificationParams::add_open_pore_classifications(const std::string& value) {
  open_pore_classifications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::add_open_pore_classifications(std::string&& value) {
  open_pore_classifications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::add_open_pore_classifications(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  open_pore_classifications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline void ReadClassificationParams::add_open_pore_classifications(const char* value, size_t size) {
  open_pore_classifications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadClassificationParams::open_pore_classifications() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
  return open_pore_classifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadClassificationParams::mutable_open_pore_classifications() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications)
  return &open_pore_classifications_;
}

// .google.protobuf.DoubleValue open_pore_ewma_weight = 7;
inline bool ReadClassificationParams::_internal_has_open_pore_ewma_weight() const {
  return this != internal_default_instance() && open_pore_ewma_weight_ != nullptr;
}
inline bool ReadClassificationParams::has_open_pore_ewma_weight() const {
  return _internal_has_open_pore_ewma_weight();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadClassificationParams::_internal_open_pore_ewma_weight() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = open_pore_ewma_weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& ReadClassificationParams::open_pore_ewma_weight() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight)
  return _internal_open_pore_ewma_weight();
}
inline void ReadClassificationParams::unsafe_arena_set_allocated_open_pore_ewma_weight(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_ewma_weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_ewma_weight_);
  }
  open_pore_ewma_weight_ = open_pore_ewma_weight;
  if (open_pore_ewma_weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadClassificationParams::release_open_pore_ewma_weight() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_ewma_weight_;
  open_pore_ewma_weight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadClassificationParams::unsafe_arena_release_open_pore_ewma_weight() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = open_pore_ewma_weight_;
  open_pore_ewma_weight_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadClassificationParams::_internal_mutable_open_pore_ewma_weight() {
  
  if (open_pore_ewma_weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    open_pore_ewma_weight_ = p;
  }
  return open_pore_ewma_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* ReadClassificationParams::mutable_open_pore_ewma_weight() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_open_pore_ewma_weight();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight)
  return _msg;
}
inline void ReadClassificationParams::set_allocated_open_pore_ewma_weight(::PROTOBUF_NAMESPACE_ID::DoubleValue* open_pore_ewma_weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_ewma_weight_);
  }
  if (open_pore_ewma_weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_pore_ewma_weight));
    if (message_arena != submessage_arena) {
      open_pore_ewma_weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_pore_ewma_weight, submessage_arena);
    }
    
  } else {
    
  }
  open_pore_ewma_weight_ = open_pore_ewma_weight;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.open_pore_ewma_weight)
}

// string classification_strategy = 4;
inline void ReadClassificationParams::clear_classification_strategy() {
  classification_strategy_.ClearToEmpty();
}
inline const std::string& ReadClassificationParams::classification_strategy() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy)
  return _internal_classification_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadClassificationParams::set_classification_strategy(ArgT0&& arg0, ArgT... args) {
 
 classification_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy)
}
inline std::string* ReadClassificationParams::mutable_classification_strategy() {
  std::string* _s = _internal_mutable_classification_strategy();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy)
  return _s;
}
inline const std::string& ReadClassificationParams::_internal_classification_strategy() const {
  return classification_strategy_.Get();
}
inline void ReadClassificationParams::_internal_set_classification_strategy(const std::string& value) {
  
  classification_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadClassificationParams::_internal_mutable_classification_strategy() {
  
  return classification_strategy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadClassificationParams::release_classification_strategy() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy)
  return classification_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadClassificationParams::set_allocated_classification_strategy(std::string* classification_strategy) {
  if (classification_strategy != nullptr) {
    
  } else {
    
  }
  classification_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classification_strategy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy)
}

// .minknow_api.analysis_configuration.ReadClassificationParams.Parameters parameters = 5;
inline bool ReadClassificationParams::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ReadClassificationParams::has_parameters() const {
  return _internal_has_parameters();
}
inline void ReadClassificationParams::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters& ReadClassificationParams::_internal_parameters() const {
  const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters&>(
      ::minknow_api::analysis_configuration::_ReadClassificationParams_Parameters_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters& ReadClassificationParams::parameters() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ReadClassificationParams.parameters)
  return _internal_parameters();
}
inline void ReadClassificationParams::unsafe_arena_set_allocated_parameters(
    ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.parameters)
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* ReadClassificationParams::release_parameters() {
  
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* temp = parameters_;
  parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* ReadClassificationParams::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ReadClassificationParams.parameters)
  
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* ReadClassificationParams::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ReadClassificationParams_Parameters>(GetArenaForAllocation());
    parameters_ = p;
  }
  return parameters_;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* ReadClassificationParams::mutable_parameters() {
  ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* _msg = _internal_mutable_parameters();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ReadClassificationParams.parameters)
  return _msg;
}
inline void ReadClassificationParams::set_allocated_parameters(::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ReadClassificationParams_Parameters>::GetOwningArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ReadClassificationParams.parameters)
}

// -------------------------------------------------------------------

// ChannelStates_Logic_Behaviour

// int32 reset_on_mux_change = 1;
inline void ChannelStates_Logic_Behaviour::clear_reset_on_mux_change() {
  reset_on_mux_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::_internal_reset_on_mux_change() const {
  return reset_on_mux_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::reset_on_mux_change() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_mux_change)
  return _internal_reset_on_mux_change();
}
inline void ChannelStates_Logic_Behaviour::_internal_set_reset_on_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reset_on_mux_change_ = value;
}
inline void ChannelStates_Logic_Behaviour::set_reset_on_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reset_on_mux_change(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_mux_change)
}

// int32 reset_on_well_change = 2;
inline void ChannelStates_Logic_Behaviour::clear_reset_on_well_change() {
  reset_on_well_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::_internal_reset_on_well_change() const {
  return reset_on_well_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::reset_on_well_change() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_well_change)
  return _internal_reset_on_well_change();
}
inline void ChannelStates_Logic_Behaviour::_internal_set_reset_on_well_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reset_on_well_change_ = value;
}
inline void ChannelStates_Logic_Behaviour::set_reset_on_well_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reset_on_well_change(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_well_change)
}

// int32 latch = 3;
inline void ChannelStates_Logic_Behaviour::clear_latch() {
  latch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::_internal_latch() const {
  return latch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::latch() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.latch)
  return _internal_latch();
}
inline void ChannelStates_Logic_Behaviour::_internal_set_latch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latch_ = value;
}
inline void ChannelStates_Logic_Behaviour::set_latch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latch(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.latch)
}

// int32 reset_on_effective_mux_change = 4;
inline void ChannelStates_Logic_Behaviour::clear_reset_on_effective_mux_change() {
  reset_on_effective_mux_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::_internal_reset_on_effective_mux_change() const {
  return reset_on_effective_mux_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::reset_on_effective_mux_change() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_effective_mux_change)
  return _internal_reset_on_effective_mux_change();
}
inline void ChannelStates_Logic_Behaviour::_internal_set_reset_on_effective_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reset_on_effective_mux_change_ = value;
}
inline void ChannelStates_Logic_Behaviour::set_reset_on_effective_mux_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reset_on_effective_mux_change(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_effective_mux_change)
}

// int32 reset_on_effective_well_change = 5;
inline void ChannelStates_Logic_Behaviour::clear_reset_on_effective_well_change() {
  reset_on_effective_well_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::_internal_reset_on_effective_well_change() const {
  return reset_on_effective_well_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Behaviour::reset_on_effective_well_change() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_effective_well_change)
  return _internal_reset_on_effective_well_change();
}
inline void ChannelStates_Logic_Behaviour::_internal_set_reset_on_effective_well_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reset_on_effective_well_change_ = value;
}
inline void ChannelStates_Logic_Behaviour::set_reset_on_effective_well_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reset_on_effective_well_change(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour.reset_on_effective_well_change)
}

// -------------------------------------------------------------------

// ChannelStates_Logic_Ranges_Range

// int32 lower_pa = 1;
inline void ChannelStates_Logic_Ranges_Range::clear_lower_pa() {
  lower_pa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Ranges_Range::_internal_lower_pa() const {
  return lower_pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Ranges_Range::lower_pa() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range.lower_pa)
  return _internal_lower_pa();
}
inline void ChannelStates_Logic_Ranges_Range::_internal_set_lower_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lower_pa_ = value;
}
inline void ChannelStates_Logic_Ranges_Range::set_lower_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lower_pa(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range.lower_pa)
}

// int32 upper_pa = 2;
inline void ChannelStates_Logic_Ranges_Range::clear_upper_pa() {
  upper_pa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Ranges_Range::_internal_upper_pa() const {
  return upper_pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic_Ranges_Range::upper_pa() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range.upper_pa)
  return _internal_upper_pa();
}
inline void ChannelStates_Logic_Ranges_Range::_internal_set_upper_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upper_pa_ = value;
}
inline void ChannelStates_Logic_Ranges_Range::set_upper_pa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upper_pa(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range.upper_pa)
}

// -------------------------------------------------------------------

// ChannelStates_Logic_Ranges

// .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range range = 1;
inline bool ChannelStates_Logic_Ranges::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool ChannelStates_Logic_Ranges::has_range() const {
  return _internal_has_range();
}
inline void ChannelStates_Logic_Ranges::clear_range() {
  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range& ChannelStates_Logic_Ranges::_internal_range() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Logic_Ranges_Range_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range& ChannelStates_Logic_Ranges::range() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range)
  return _internal_range();
}
inline void ChannelStates_Logic_Ranges::unsafe_arena_set_allocated_range(
    ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* ChannelStates_Logic_Ranges::release_range() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* temp = range_;
  range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* ChannelStates_Logic_Ranges::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range)
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* ChannelStates_Logic_Ranges::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range>(GetArenaForAllocation());
    range_ = p;
  }
  return range_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* ChannelStates_Logic_Ranges::mutable_range() {
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range)
  return _msg;
}
inline void ChannelStates_Logic_Ranges::set_allocated_range(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.range)
}

// -------------------------------------------------------------------

// ChannelStates_Logic

// string criteria = 1;
inline void ChannelStates_Logic::clear_criteria() {
  criteria_.ClearToEmpty();
}
inline const std::string& ChannelStates_Logic::criteria() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.criteria)
  return _internal_criteria();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Logic::set_criteria(ArgT0&& arg0, ArgT... args) {
 
 criteria_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.criteria)
}
inline std::string* ChannelStates_Logic::mutable_criteria() {
  std::string* _s = _internal_mutable_criteria();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.criteria)
  return _s;
}
inline const std::string& ChannelStates_Logic::_internal_criteria() const {
  return criteria_.Get();
}
inline void ChannelStates_Logic::_internal_set_criteria(const std::string& value) {
  
  criteria_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::_internal_mutable_criteria() {
  
  return criteria_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::release_criteria() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.criteria)
  return criteria_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Logic::set_allocated_criteria(std::string* criteria) {
  if (criteria != nullptr) {
    
  } else {
    
  }
  criteria_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), criteria,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.criteria)
}

// int32 rank = 3;
inline void ChannelStates_Logic::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelStates_Logic::rank() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.rank)
  return _internal_rank();
}
inline void ChannelStates_Logic::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void ChannelStates_Logic::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.rank)
}

// string pattern = 4;
inline void ChannelStates_Logic::clear_pattern() {
  pattern_.ClearToEmpty();
}
inline const std::string& ChannelStates_Logic::pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Logic::set_pattern(ArgT0&& arg0, ArgT... args) {
 
 pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.pattern)
}
inline std::string* ChannelStates_Logic::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.pattern)
  return _s;
}
inline const std::string& ChannelStates_Logic::_internal_pattern() const {
  return pattern_.Get();
}
inline void ChannelStates_Logic::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::_internal_mutable_pattern() {
  
  return pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::release_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.pattern)
  return pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Logic::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.pattern)
}

// string classification = 5;
inline void ChannelStates_Logic::clear_classification() {
  classification_.ClearToEmpty();
}
inline const std::string& ChannelStates_Logic::classification() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.classification)
  return _internal_classification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Logic::set_classification(ArgT0&& arg0, ArgT... args) {
 
 classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Logic.classification)
}
inline std::string* ChannelStates_Logic::mutable_classification() {
  std::string* _s = _internal_mutable_classification();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.classification)
  return _s;
}
inline const std::string& ChannelStates_Logic::_internal_classification() const {
  return classification_.Get();
}
inline void ChannelStates_Logic::_internal_set_classification(const std::string& value) {
  
  classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::_internal_mutable_classification() {
  
  return classification_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Logic::release_classification() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.classification)
  return classification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Logic::set_allocated_classification(std::string* classification) {
  if (classification != nullptr) {
    
  } else {
    
  }
  classification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classification,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.classification)
}

// .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges ranges = 6;
inline bool ChannelStates_Logic::_internal_has_ranges() const {
  return this != internal_default_instance() && ranges_ != nullptr;
}
inline bool ChannelStates_Logic::has_ranges() const {
  return _internal_has_ranges();
}
inline void ChannelStates_Logic::clear_ranges() {
  if (GetArenaForAllocation() == nullptr && ranges_ != nullptr) {
    delete ranges_;
  }
  ranges_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges& ChannelStates_Logic::_internal_ranges() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* p = ranges_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Logic_Ranges_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges& ChannelStates_Logic::ranges() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.ranges)
  return _internal_ranges();
}
inline void ChannelStates_Logic::unsafe_arena_set_allocated_ranges(
    ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ranges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ranges_);
  }
  ranges_ = ranges;
  if (ranges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.ranges)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ChannelStates_Logic::release_ranges() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* temp = ranges_;
  ranges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ChannelStates_Logic::unsafe_arena_release_ranges() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.ranges)
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* temp = ranges_;
  ranges_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ChannelStates_Logic::_internal_mutable_ranges() {
  
  if (ranges_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges>(GetArenaForAllocation());
    ranges_ = p;
  }
  return ranges_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ChannelStates_Logic::mutable_ranges() {
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* _msg = _internal_mutable_ranges();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.ranges)
  return _msg;
}
inline void ChannelStates_Logic::set_allocated_ranges(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* ranges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ranges_;
  }
  if (ranges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges>::GetOwningArena(ranges);
    if (message_arena != submessage_arena) {
      ranges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranges, submessage_arena);
    }
    
  } else {
    
  }
  ranges_ = ranges;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.ranges)
}

// .minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour behaviour = 7;
inline bool ChannelStates_Logic::_internal_has_behaviour() const {
  return this != internal_default_instance() && behaviour_ != nullptr;
}
inline bool ChannelStates_Logic::has_behaviour() const {
  return _internal_has_behaviour();
}
inline void ChannelStates_Logic::clear_behaviour() {
  if (GetArenaForAllocation() == nullptr && behaviour_ != nullptr) {
    delete behaviour_;
  }
  behaviour_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour& ChannelStates_Logic::_internal_behaviour() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* p = behaviour_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Logic_Behaviour_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour& ChannelStates_Logic::behaviour() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Logic.behaviour)
  return _internal_behaviour();
}
inline void ChannelStates_Logic::unsafe_arena_set_allocated_behaviour(
    ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* behaviour) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(behaviour_);
  }
  behaviour_ = behaviour;
  if (behaviour) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.behaviour)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* ChannelStates_Logic::release_behaviour() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* temp = behaviour_;
  behaviour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* ChannelStates_Logic::unsafe_arena_release_behaviour() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Logic.behaviour)
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* temp = behaviour_;
  behaviour_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* ChannelStates_Logic::_internal_mutable_behaviour() {
  
  if (behaviour_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour>(GetArenaForAllocation());
    behaviour_ = p;
  }
  return behaviour_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* ChannelStates_Logic::mutable_behaviour() {
  ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* _msg = _internal_mutable_behaviour();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Logic.behaviour)
  return _msg;
}
inline void ChannelStates_Logic::set_allocated_behaviour(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* behaviour) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete behaviour_;
  }
  if (behaviour) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour>::GetOwningArena(behaviour);
    if (message_arena != submessage_arena) {
      behaviour = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, behaviour, submessage_arena);
    }
    
  } else {
    
  }
  behaviour_ = behaviour;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Logic.behaviour)
}

// -------------------------------------------------------------------

// ChannelStates_Style

// .google.protobuf.UInt32Value order = 1;
inline bool ChannelStates_Style::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool ChannelStates_Style::has_order() const {
  return _internal_has_order();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ChannelStates_Style::_internal_order() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& ChannelStates_Style::order() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Style.order)
  return _internal_order();
}
inline void ChannelStates_Style::unsafe_arena_set_allocated_order(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.Style.order)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ChannelStates_Style::release_order() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = order_;
  order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ChannelStates_Style::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Style.order)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ChannelStates_Style::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    order_ = p;
  }
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* ChannelStates_Style::mutable_order() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Style.order)
  return _msg;
}
inline void ChannelStates_Style::set_allocated_order(::PROTOBUF_NAMESPACE_ID::UInt32Value* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Style.order)
}

// string label = 2;
inline void ChannelStates_Style::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& ChannelStates_Style::label() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Style.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Style::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Style.label)
}
inline std::string* ChannelStates_Style::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Style.label)
  return _s;
}
inline const std::string& ChannelStates_Style::_internal_label() const {
  return label_.Get();
}
inline void ChannelStates_Style::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Style::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Style::release_label() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Style.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Style::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Style.label)
}

// string colour = 3;
inline void ChannelStates_Style::clear_colour() {
  colour_.ClearToEmpty();
}
inline const std::string& ChannelStates_Style::colour() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Style.colour)
  return _internal_colour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Style::set_colour(ArgT0&& arg0, ArgT... args) {
 
 colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Style.colour)
}
inline std::string* ChannelStates_Style::mutable_colour() {
  std::string* _s = _internal_mutable_colour();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Style.colour)
  return _s;
}
inline const std::string& ChannelStates_Style::_internal_colour() const {
  return colour_.Get();
}
inline void ChannelStates_Style::_internal_set_colour(const std::string& value) {
  
  colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Style::_internal_mutable_colour() {
  
  return colour_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Style::release_colour() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Style.colour)
  return colour_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Style::set_allocated_colour(std::string* colour) {
  if (colour != nullptr) {
    
  } else {
    
  }
  colour_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colour,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Style.colour)
}

// -------------------------------------------------------------------

// ChannelStates_Group

// string name = 1;
inline void ChannelStates_Group::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelStates_Group::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates_Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.Group.name)
}
inline std::string* ChannelStates_Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Group.name)
  return _s;
}
inline const std::string& ChannelStates_Group::_internal_name() const {
  return name_.Get();
}
inline void ChannelStates_Group::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates_Group::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates_Group::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Group.name)
}

// .minknow_api.analysis_configuration.ChannelStates.Style style = 2;
inline bool ChannelStates_Group::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool ChannelStates_Group::has_style() const {
  return _internal_has_style();
}
inline void ChannelStates_Group::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Style& ChannelStates_Group::_internal_style() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Style&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Style_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Style& ChannelStates_Group::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.Group.style)
  return _internal_style();
}
inline void ChannelStates_Group::unsafe_arena_set_allocated_style(
    ::minknow_api::analysis_configuration::ChannelStates_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.Group.style)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates_Group::release_style() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates_Group::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.Group.style)
  
  ::minknow_api::analysis_configuration::ChannelStates_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates_Group::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates_Group::mutable_style() {
  ::minknow_api::analysis_configuration::ChannelStates_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.Group.style)
  return _msg;
}
inline void ChannelStates_Group::set_allocated_style(::minknow_api::analysis_configuration::ChannelStates_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.Group.style)
}

// -------------------------------------------------------------------

// ChannelStates

// .minknow_api.analysis_configuration.ChannelStates.Group group = 2;
inline bool ChannelStates::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool ChannelStates::has_group() const {
  return _internal_has_group();
}
inline void ChannelStates::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Group& ChannelStates::_internal_group() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Group* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Group&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Group_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Group& ChannelStates::group() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.group)
  return _internal_group();
}
inline void ChannelStates::unsafe_arena_set_allocated_group(
    ::minknow_api::analysis_configuration::ChannelStates_Group* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.group)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Group* ChannelStates::release_group() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Group* temp = group_;
  group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Group* ChannelStates::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.group)
  
  ::minknow_api::analysis_configuration::ChannelStates_Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Group* ChannelStates::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Group>(GetArenaForAllocation());
    group_ = p;
  }
  return group_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Group* ChannelStates::mutable_group() {
  ::minknow_api::analysis_configuration::ChannelStates_Group* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.group)
  return _msg;
}
inline void ChannelStates::set_allocated_group(::minknow_api::analysis_configuration::ChannelStates_Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Group>::GetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.group)
}

// string description = 5;
inline void ChannelStates::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ChannelStates::description() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStates::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.ChannelStates.description)
}
inline std::string* ChannelStates::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.description)
  return _s;
}
inline const std::string& ChannelStates::_internal_description() const {
  return description_.Get();
}
inline void ChannelStates::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStates::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStates::release_description() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStates::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.description)
}

// .minknow_api.analysis_configuration.ChannelStates.Logic logic = 3;
inline bool ChannelStates::_internal_has_logic() const {
  return this != internal_default_instance() && logic_ != nullptr;
}
inline bool ChannelStates::has_logic() const {
  return _internal_has_logic();
}
inline void ChannelStates::clear_logic() {
  if (GetArenaForAllocation() == nullptr && logic_ != nullptr) {
    delete logic_;
  }
  logic_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic& ChannelStates::_internal_logic() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Logic* p = logic_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Logic&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Logic_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Logic& ChannelStates::logic() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.logic)
  return _internal_logic();
}
inline void ChannelStates::unsafe_arena_set_allocated_logic(
    ::minknow_api::analysis_configuration::ChannelStates_Logic* logic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logic_);
  }
  logic_ = logic;
  if (logic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.logic)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic* ChannelStates::release_logic() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic* temp = logic_;
  logic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic* ChannelStates::unsafe_arena_release_logic() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.logic)
  
  ::minknow_api::analysis_configuration::ChannelStates_Logic* temp = logic_;
  logic_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic* ChannelStates::_internal_mutable_logic() {
  
  if (logic_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Logic>(GetArenaForAllocation());
    logic_ = p;
  }
  return logic_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Logic* ChannelStates::mutable_logic() {
  ::minknow_api::analysis_configuration::ChannelStates_Logic* _msg = _internal_mutable_logic();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.logic)
  return _msg;
}
inline void ChannelStates::set_allocated_logic(::minknow_api::analysis_configuration::ChannelStates_Logic* logic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logic_;
  }
  if (logic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Logic>::GetOwningArena(logic);
    if (message_arena != submessage_arena) {
      logic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logic, submessage_arena);
    }
    
  } else {
    
  }
  logic_ = logic;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.logic)
}

// .minknow_api.analysis_configuration.ChannelStates.Style style = 4;
inline bool ChannelStates::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool ChannelStates::has_style() const {
  return _internal_has_style();
}
inline void ChannelStates::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Style& ChannelStates::_internal_style() const {
  const ::minknow_api::analysis_configuration::ChannelStates_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ChannelStates_Style&>(
      ::minknow_api::analysis_configuration::_ChannelStates_Style_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ChannelStates_Style& ChannelStates::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.ChannelStates.style)
  return _internal_style();
}
inline void ChannelStates::unsafe_arena_set_allocated_style(
    ::minknow_api::analysis_configuration::ChannelStates_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.ChannelStates.style)
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates::release_style() {
  
  ::minknow_api::analysis_configuration::ChannelStates_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.ChannelStates.style)
  
  ::minknow_api::analysis_configuration::ChannelStates_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ChannelStates_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::analysis_configuration::ChannelStates_Style* ChannelStates::mutable_style() {
  ::minknow_api::analysis_configuration::ChannelStates_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.ChannelStates.style)
  return _msg;
}
inline void ChannelStates::set_allocated_style(::minknow_api::analysis_configuration::ChannelStates_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ChannelStates_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.ChannelStates.style)
}

// -------------------------------------------------------------------

// GetAnalysisConfigurationRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnalysisConfiguration

// .minknow_api.analysis_configuration.EventDetection event_detection = 1;
inline bool AnalysisConfiguration::_internal_has_event_detection() const {
  return this != internal_default_instance() && event_detection_ != nullptr;
}
inline bool AnalysisConfiguration::has_event_detection() const {
  return _internal_has_event_detection();
}
inline void AnalysisConfiguration::clear_event_detection() {
  if (GetArenaForAllocation() == nullptr && event_detection_ != nullptr) {
    delete event_detection_;
  }
  event_detection_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::EventDetection& AnalysisConfiguration::_internal_event_detection() const {
  const ::minknow_api::analysis_configuration::EventDetection* p = event_detection_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::EventDetection&>(
      ::minknow_api::analysis_configuration::_EventDetection_default_instance_);
}
inline const ::minknow_api::analysis_configuration::EventDetection& AnalysisConfiguration::event_detection() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AnalysisConfiguration.event_detection)
  return _internal_event_detection();
}
inline void AnalysisConfiguration::unsafe_arena_set_allocated_event_detection(
    ::minknow_api::analysis_configuration::EventDetection* event_detection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_detection_);
  }
  event_detection_ = event_detection;
  if (event_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.event_detection)
}
inline ::minknow_api::analysis_configuration::EventDetection* AnalysisConfiguration::release_event_detection() {
  
  ::minknow_api::analysis_configuration::EventDetection* temp = event_detection_;
  event_detection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::EventDetection* AnalysisConfiguration::unsafe_arena_release_event_detection() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.AnalysisConfiguration.event_detection)
  
  ::minknow_api::analysis_configuration::EventDetection* temp = event_detection_;
  event_detection_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::EventDetection* AnalysisConfiguration::_internal_mutable_event_detection() {
  
  if (event_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::EventDetection>(GetArenaForAllocation());
    event_detection_ = p;
  }
  return event_detection_;
}
inline ::minknow_api::analysis_configuration::EventDetection* AnalysisConfiguration::mutable_event_detection() {
  ::minknow_api::analysis_configuration::EventDetection* _msg = _internal_mutable_event_detection();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AnalysisConfiguration.event_detection)
  return _msg;
}
inline void AnalysisConfiguration::set_allocated_event_detection(::minknow_api::analysis_configuration::EventDetection* event_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_detection_;
  }
  if (event_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::EventDetection>::GetOwningArena(event_detection);
    if (message_arena != submessage_arena) {
      event_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_detection, submessage_arena);
    }
    
  } else {
    
  }
  event_detection_ = event_detection;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.event_detection)
}

// .minknow_api.analysis_configuration.ReadDetectionParams read_detection = 2;
inline bool AnalysisConfiguration::_internal_has_read_detection() const {
  return this != internal_default_instance() && read_detection_ != nullptr;
}
inline bool AnalysisConfiguration::has_read_detection() const {
  return _internal_has_read_detection();
}
inline void AnalysisConfiguration::clear_read_detection() {
  if (GetArenaForAllocation() == nullptr && read_detection_ != nullptr) {
    delete read_detection_;
  }
  read_detection_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ReadDetectionParams& AnalysisConfiguration::_internal_read_detection() const {
  const ::minknow_api::analysis_configuration::ReadDetectionParams* p = read_detection_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ReadDetectionParams&>(
      ::minknow_api::analysis_configuration::_ReadDetectionParams_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ReadDetectionParams& AnalysisConfiguration::read_detection() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AnalysisConfiguration.read_detection)
  return _internal_read_detection();
}
inline void AnalysisConfiguration::unsafe_arena_set_allocated_read_detection(
    ::minknow_api::analysis_configuration::ReadDetectionParams* read_detection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_detection_);
  }
  read_detection_ = read_detection;
  if (read_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.read_detection)
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams* AnalysisConfiguration::release_read_detection() {
  
  ::minknow_api::analysis_configuration::ReadDetectionParams* temp = read_detection_;
  read_detection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams* AnalysisConfiguration::unsafe_arena_release_read_detection() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.AnalysisConfiguration.read_detection)
  
  ::minknow_api::analysis_configuration::ReadDetectionParams* temp = read_detection_;
  read_detection_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams* AnalysisConfiguration::_internal_mutable_read_detection() {
  
  if (read_detection_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ReadDetectionParams>(GetArenaForAllocation());
    read_detection_ = p;
  }
  return read_detection_;
}
inline ::minknow_api::analysis_configuration::ReadDetectionParams* AnalysisConfiguration::mutable_read_detection() {
  ::minknow_api::analysis_configuration::ReadDetectionParams* _msg = _internal_mutable_read_detection();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AnalysisConfiguration.read_detection)
  return _msg;
}
inline void AnalysisConfiguration::set_allocated_read_detection(::minknow_api::analysis_configuration::ReadDetectionParams* read_detection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_detection_;
  }
  if (read_detection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ReadDetectionParams>::GetOwningArena(read_detection);
    if (message_arena != submessage_arena) {
      read_detection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_detection, submessage_arena);
    }
    
  } else {
    
  }
  read_detection_ = read_detection;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.read_detection)
}

// .minknow_api.analysis_configuration.ReadClassificationParams read_classification = 4;
inline bool AnalysisConfiguration::_internal_has_read_classification() const {
  return this != internal_default_instance() && read_classification_ != nullptr;
}
inline bool AnalysisConfiguration::has_read_classification() const {
  return _internal_has_read_classification();
}
inline void AnalysisConfiguration::clear_read_classification() {
  if (GetArenaForAllocation() == nullptr && read_classification_ != nullptr) {
    delete read_classification_;
  }
  read_classification_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::ReadClassificationParams& AnalysisConfiguration::_internal_read_classification() const {
  const ::minknow_api::analysis_configuration::ReadClassificationParams* p = read_classification_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::ReadClassificationParams&>(
      ::minknow_api::analysis_configuration::_ReadClassificationParams_default_instance_);
}
inline const ::minknow_api::analysis_configuration::ReadClassificationParams& AnalysisConfiguration::read_classification() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AnalysisConfiguration.read_classification)
  return _internal_read_classification();
}
inline void AnalysisConfiguration::unsafe_arena_set_allocated_read_classification(
    ::minknow_api::analysis_configuration::ReadClassificationParams* read_classification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_classification_);
  }
  read_classification_ = read_classification;
  if (read_classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.read_classification)
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams* AnalysisConfiguration::release_read_classification() {
  
  ::minknow_api::analysis_configuration::ReadClassificationParams* temp = read_classification_;
  read_classification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams* AnalysisConfiguration::unsafe_arena_release_read_classification() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.AnalysisConfiguration.read_classification)
  
  ::minknow_api::analysis_configuration::ReadClassificationParams* temp = read_classification_;
  read_classification_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams* AnalysisConfiguration::_internal_mutable_read_classification() {
  
  if (read_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::ReadClassificationParams>(GetArenaForAllocation());
    read_classification_ = p;
  }
  return read_classification_;
}
inline ::minknow_api::analysis_configuration::ReadClassificationParams* AnalysisConfiguration::mutable_read_classification() {
  ::minknow_api::analysis_configuration::ReadClassificationParams* _msg = _internal_mutable_read_classification();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AnalysisConfiguration.read_classification)
  return _msg;
}
inline void AnalysisConfiguration::set_allocated_read_classification(::minknow_api::analysis_configuration::ReadClassificationParams* read_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_classification_;
  }
  if (read_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::ReadClassificationParams>::GetOwningArena(read_classification);
    if (message_arena != submessage_arena) {
      read_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_classification, submessage_arena);
    }
    
  } else {
    
  }
  read_classification_ = read_classification;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.AnalysisConfiguration.read_classification)
}

// map<string, .minknow_api.analysis_configuration.ChannelStates> channel_states = 7;
inline int AnalysisConfiguration::_internal_channel_states_size() const {
  return channel_states_.size();
}
inline int AnalysisConfiguration::channel_states_size() const {
  return _internal_channel_states_size();
}
inline void AnalysisConfiguration::clear_channel_states() {
  channel_states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >&
AnalysisConfiguration::_internal_channel_states() const {
  return channel_states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >&
AnalysisConfiguration::channel_states() const {
  // @@protoc_insertion_point(field_map:minknow_api.analysis_configuration.AnalysisConfiguration.channel_states)
  return _internal_channel_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >*
AnalysisConfiguration::_internal_mutable_channel_states() {
  return channel_states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >*
AnalysisConfiguration::mutable_channel_states() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.analysis_configuration.AnalysisConfiguration.channel_states)
  return _internal_mutable_channel_states();
}

// -------------------------------------------------------------------

// SetAnalysisConfigurationResponse

// -------------------------------------------------------------------

// ResetAnalysisConfigurationRequest

// -------------------------------------------------------------------

// ResetAnalysisConfigurationResponse

// -------------------------------------------------------------------

// SetAnalysisEnabledStateRequest

// bool enable = 1 [(.minknow_api.rpc_required) = true];
inline void SetAnalysisEnabledStateRequest::clear_enable() {
  enable_ = false;
}
inline bool SetAnalysisEnabledStateRequest::_internal_enable() const {
  return enable_;
}
inline bool SetAnalysisEnabledStateRequest::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest.enable)
  return _internal_enable();
}
inline void SetAnalysisEnabledStateRequest::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetAnalysisEnabledStateRequest::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest.enable)
}

// -------------------------------------------------------------------

// SetAnalysisEnabledStateResponse

// -------------------------------------------------------------------

// GetChannelStatesDescRequest

// -------------------------------------------------------------------

// GetChannelStatesDescResponse_Style

// string label = 1;
inline void GetChannelStatesDescResponse_Style::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& GetChannelStatesDescResponse_Style::label() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChannelStatesDescResponse_Style::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label)
}
inline std::string* GetChannelStatesDescResponse_Style::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label)
  return _s;
}
inline const std::string& GetChannelStatesDescResponse_Style::_internal_label() const {
  return label_.Get();
}
inline void GetChannelStatesDescResponse_Style::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::release_label() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChannelStatesDescResponse_Style::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label)
}

// string description = 2;
inline void GetChannelStatesDescResponse_Style::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& GetChannelStatesDescResponse_Style::description() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChannelStatesDescResponse_Style::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description)
}
inline std::string* GetChannelStatesDescResponse_Style::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description)
  return _s;
}
inline const std::string& GetChannelStatesDescResponse_Style::_internal_description() const {
  return description_.Get();
}
inline void GetChannelStatesDescResponse_Style::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::release_description() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChannelStatesDescResponse_Style::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description)
}

// string colour = 3;
inline void GetChannelStatesDescResponse_Style::clear_colour() {
  colour_.ClearToEmpty();
}
inline const std::string& GetChannelStatesDescResponse_Style::colour() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour)
  return _internal_colour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChannelStatesDescResponse_Style::set_colour(ArgT0&& arg0, ArgT... args) {
 
 colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour)
}
inline std::string* GetChannelStatesDescResponse_Style::mutable_colour() {
  std::string* _s = _internal_mutable_colour();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour)
  return _s;
}
inline const std::string& GetChannelStatesDescResponse_Style::_internal_colour() const {
  return colour_.Get();
}
inline void GetChannelStatesDescResponse_Style::_internal_set_colour(const std::string& value) {
  
  colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::_internal_mutable_colour() {
  
  return colour_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Style::release_colour() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour)
  return colour_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChannelStatesDescResponse_Style::set_allocated_colour(std::string* colour) {
  if (colour != nullptr) {
    
  } else {
    
  }
  colour_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colour,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour)
}

// -------------------------------------------------------------------

// GetChannelStatesDescResponse_ChannelState

// uint32 id = 1;
inline void GetChannelStatesDescResponse_ChannelState::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelStatesDescResponse_ChannelState::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelStatesDescResponse_ChannelState::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.id)
  return _internal_id();
}
inline void GetChannelStatesDescResponse_ChannelState::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void GetChannelStatesDescResponse_ChannelState::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.id)
}

// string name = 2;
inline void GetChannelStatesDescResponse_ChannelState::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetChannelStatesDescResponse_ChannelState::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChannelStatesDescResponse_ChannelState::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name)
}
inline std::string* GetChannelStatesDescResponse_ChannelState::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name)
  return _s;
}
inline const std::string& GetChannelStatesDescResponse_ChannelState::_internal_name() const {
  return name_.Get();
}
inline void GetChannelStatesDescResponse_ChannelState::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_ChannelState::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_ChannelState::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChannelStatesDescResponse_ChannelState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name)
}

// .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 3;
inline bool GetChannelStatesDescResponse_ChannelState::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool GetChannelStatesDescResponse_ChannelState::has_style() const {
  return _internal_has_style();
}
inline void GetChannelStatesDescResponse_ChannelState::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& GetChannelStatesDescResponse_ChannelState::_internal_style() const {
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style&>(
      ::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_Style_default_instance_);
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& GetChannelStatesDescResponse_ChannelState::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style)
  return _internal_style();
}
inline void GetChannelStatesDescResponse_ChannelState::unsafe_arena_set_allocated_style(
    ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style)
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_ChannelState::release_style() {
  
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_ChannelState::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style)
  
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_ChannelState::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_ChannelState::mutable_style() {
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style)
  return _msg;
}
inline void GetChannelStatesDescResponse_ChannelState::set_allocated_style(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.style)
}

// uint32 global_order = 4;
inline void GetChannelStatesDescResponse_ChannelState::clear_global_order() {
  global_order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelStatesDescResponse_ChannelState::_internal_global_order() const {
  return global_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelStatesDescResponse_ChannelState::global_order() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.global_order)
  return _internal_global_order();
}
inline void GetChannelStatesDescResponse_ChannelState::_internal_set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_order_ = value;
}
inline void GetChannelStatesDescResponse_ChannelState::set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_order(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.global_order)
}

// -------------------------------------------------------------------

// GetChannelStatesDescResponse_Group

// string name = 1;
inline void GetChannelStatesDescResponse_Group::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetChannelStatesDescResponse_Group::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChannelStatesDescResponse_Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name)
}
inline std::string* GetChannelStatesDescResponse_Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name)
  return _s;
}
inline const std::string& GetChannelStatesDescResponse_Group::_internal_name() const {
  return name_.Get();
}
inline void GetChannelStatesDescResponse_Group::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Group::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetChannelStatesDescResponse_Group::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetChannelStatesDescResponse_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name)
}

// .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 2;
inline bool GetChannelStatesDescResponse_Group::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool GetChannelStatesDescResponse_Group::has_style() const {
  return _internal_has_style();
}
inline void GetChannelStatesDescResponse_Group::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& GetChannelStatesDescResponse_Group::_internal_style() const {
  const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style&>(
      ::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_Style_default_instance_);
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& GetChannelStatesDescResponse_Group::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style)
  return _internal_style();
}
inline void GetChannelStatesDescResponse_Group::unsafe_arena_set_allocated_style(
    ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style)
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_Group::release_style() {
  
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_Group::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style)
  
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_Group::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* GetChannelStatesDescResponse_Group::mutable_style() {
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style)
  return _msg;
}
inline void GetChannelStatesDescResponse_Group::set_allocated_style(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.style)
}

// repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState states = 3;
inline int GetChannelStatesDescResponse_Group::_internal_states_size() const {
  return states_.size();
}
inline int GetChannelStatesDescResponse_Group::states_size() const {
  return _internal_states_size();
}
inline void GetChannelStatesDescResponse_Group::clear_states() {
  states_.Clear();
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* GetChannelStatesDescResponse_Group::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >*
GetChannelStatesDescResponse_Group::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states)
  return &states_;
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState& GetChannelStatesDescResponse_Group::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState& GetChannelStatesDescResponse_Group::states(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states)
  return _internal_states(index);
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* GetChannelStatesDescResponse_Group::_internal_add_states() {
  return states_.Add();
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* GetChannelStatesDescResponse_Group::add_states() {
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >&
GetChannelStatesDescResponse_Group::states() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.states)
  return states_;
}

// -------------------------------------------------------------------

// GetChannelStatesDescResponse

// repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group groups = 1;
inline int GetChannelStatesDescResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int GetChannelStatesDescResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GetChannelStatesDescResponse::clear_groups() {
  groups_.Clear();
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* GetChannelStatesDescResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >*
GetChannelStatesDescResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups)
  return &groups_;
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group& GetChannelStatesDescResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group& GetChannelStatesDescResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups)
  return _internal_groups(index);
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* GetChannelStatesDescResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* GetChannelStatesDescResponse::add_groups() {
  ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >&
GetChannelStatesDescResponse::groups() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.GetChannelStatesDescResponse.groups)
  return groups_;
}

// -------------------------------------------------------------------

// GetSummaryRequest

// -------------------------------------------------------------------

// GetSummaryResponse

// bool analysis_enabled = 1;
inline void GetSummaryResponse::clear_analysis_enabled() {
  analysis_enabled_ = false;
}
inline bool GetSummaryResponse::_internal_analysis_enabled() const {
  return analysis_enabled_;
}
inline bool GetSummaryResponse::analysis_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetSummaryResponse.analysis_enabled)
  return _internal_analysis_enabled();
}
inline void GetSummaryResponse::_internal_set_analysis_enabled(bool value) {
  
  analysis_enabled_ = value;
}
inline void GetSummaryResponse::set_analysis_enabled(bool value) {
  _internal_set_analysis_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetSummaryResponse.analysis_enabled)
}

// bool basecalling_enabled = 2;
inline void GetSummaryResponse::clear_basecalling_enabled() {
  basecalling_enabled_ = false;
}
inline bool GetSummaryResponse::_internal_basecalling_enabled() const {
  return basecalling_enabled_;
}
inline bool GetSummaryResponse::basecalling_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.GetSummaryResponse.basecalling_enabled)
  return _internal_basecalling_enabled();
}
inline void GetSummaryResponse::_internal_set_basecalling_enabled(bool value) {
  
  basecalling_enabled_ = value;
}
inline void GetSummaryResponse::set_basecalling_enabled(bool value) {
  _internal_set_basecalling_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.GetSummaryResponse.basecalling_enabled)
}

// -------------------------------------------------------------------

// BarcodingConfiguration

// repeated string barcoding_kits = 1;
inline int BarcodingConfiguration::_internal_barcoding_kits_size() const {
  return barcoding_kits_.size();
}
inline int BarcodingConfiguration::barcoding_kits_size() const {
  return _internal_barcoding_kits_size();
}
inline void BarcodingConfiguration::clear_barcoding_kits() {
  barcoding_kits_.Clear();
}
inline std::string* BarcodingConfiguration::add_barcoding_kits() {
  std::string* _s = _internal_add_barcoding_kits();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
  return _s;
}
inline const std::string& BarcodingConfiguration::_internal_barcoding_kits(int index) const {
  return barcoding_kits_.Get(index);
}
inline const std::string& BarcodingConfiguration::barcoding_kits(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
  return _internal_barcoding_kits(index);
}
inline std::string* BarcodingConfiguration::mutable_barcoding_kits(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
  return barcoding_kits_.Mutable(index);
}
inline void BarcodingConfiguration::set_barcoding_kits(int index, const std::string& value) {
  barcoding_kits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::set_barcoding_kits(int index, std::string&& value) {
  barcoding_kits_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::set_barcoding_kits(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  barcoding_kits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::set_barcoding_kits(int index, const char* value, size_t size) {
  barcoding_kits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline std::string* BarcodingConfiguration::_internal_add_barcoding_kits() {
  return barcoding_kits_.Add();
}
inline void BarcodingConfiguration::add_barcoding_kits(const std::string& value) {
  barcoding_kits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::add_barcoding_kits(std::string&& value) {
  barcoding_kits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::add_barcoding_kits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  barcoding_kits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline void BarcodingConfiguration::add_barcoding_kits(const char* value, size_t size) {
  barcoding_kits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BarcodingConfiguration::barcoding_kits() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
  return barcoding_kits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BarcodingConfiguration::mutable_barcoding_kits() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits)
  return &barcoding_kits_;
}

// bool trim_barcodes = 2;
inline void BarcodingConfiguration::clear_trim_barcodes() {
  trim_barcodes_ = false;
}
inline bool BarcodingConfiguration::_internal_trim_barcodes() const {
  return trim_barcodes_;
}
inline bool BarcodingConfiguration::trim_barcodes() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.trim_barcodes)
  return _internal_trim_barcodes();
}
inline void BarcodingConfiguration::_internal_set_trim_barcodes(bool value) {
  
  trim_barcodes_ = value;
}
inline void BarcodingConfiguration::set_trim_barcodes(bool value) {
  _internal_set_trim_barcodes(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BarcodingConfiguration.trim_barcodes)
}

// bool require_barcodes_both_ends = 3;
inline void BarcodingConfiguration::clear_require_barcodes_both_ends() {
  require_barcodes_both_ends_ = false;
}
inline bool BarcodingConfiguration::_internal_require_barcodes_both_ends() const {
  return require_barcodes_both_ends_;
}
inline bool BarcodingConfiguration::require_barcodes_both_ends() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.require_barcodes_both_ends)
  return _internal_require_barcodes_both_ends();
}
inline void BarcodingConfiguration::_internal_set_require_barcodes_both_ends(bool value) {
  
  require_barcodes_both_ends_ = value;
}
inline void BarcodingConfiguration::set_require_barcodes_both_ends(bool value) {
  _internal_set_require_barcodes_both_ends(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BarcodingConfiguration.require_barcodes_both_ends)
}

// bool detect_mid_strand_barcodes = 4;
inline void BarcodingConfiguration::clear_detect_mid_strand_barcodes() {
  detect_mid_strand_barcodes_ = false;
}
inline bool BarcodingConfiguration::_internal_detect_mid_strand_barcodes() const {
  return detect_mid_strand_barcodes_;
}
inline bool BarcodingConfiguration::detect_mid_strand_barcodes() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.detect_mid_strand_barcodes)
  return _internal_detect_mid_strand_barcodes();
}
inline void BarcodingConfiguration::_internal_set_detect_mid_strand_barcodes(bool value) {
  
  detect_mid_strand_barcodes_ = value;
}
inline void BarcodingConfiguration::set_detect_mid_strand_barcodes(bool value) {
  _internal_set_detect_mid_strand_barcodes(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BarcodingConfiguration.detect_mid_strand_barcodes)
}

// .google.protobuf.FloatValue min_score = 5;
inline bool BarcodingConfiguration::_internal_has_min_score() const {
  return this != internal_default_instance() && min_score_ != nullptr;
}
inline bool BarcodingConfiguration::has_min_score() const {
  return _internal_has_min_score();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::_internal_min_score() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::min_score() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.min_score)
  return _internal_min_score();
}
inline void BarcodingConfiguration::unsafe_arena_set_allocated_min_score(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_);
  }
  min_score_ = min_score;
  if (min_score) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::release_min_score() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_;
  min_score_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::unsafe_arena_release_min_score() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BarcodingConfiguration.min_score)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_;
  min_score_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::_internal_mutable_min_score() {
  
  if (min_score_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_ = p;
  }
  return min_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::mutable_min_score() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.min_score)
  return _msg;
}
inline void BarcodingConfiguration::set_allocated_min_score(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_);
  }
  if (min_score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score));
    if (message_arena != submessage_arena) {
      min_score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score, submessage_arena);
    }
    
  } else {
    
  }
  min_score_ = min_score;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score)
}

// .google.protobuf.FloatValue min_score_rear = 6;
inline bool BarcodingConfiguration::_internal_has_min_score_rear() const {
  return this != internal_default_instance() && min_score_rear_ != nullptr;
}
inline bool BarcodingConfiguration::has_min_score_rear() const {
  return _internal_has_min_score_rear();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::_internal_min_score_rear() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_rear_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::min_score_rear() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear)
  return _internal_min_score_rear();
}
inline void BarcodingConfiguration::unsafe_arena_set_allocated_min_score_rear(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_rear) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_rear_);
  }
  min_score_rear_ = min_score_rear;
  if (min_score_rear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::release_min_score_rear() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_rear_;
  min_score_rear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::unsafe_arena_release_min_score_rear() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_rear_;
  min_score_rear_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::_internal_mutable_min_score_rear() {
  
  if (min_score_rear_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_rear_ = p;
  }
  return min_score_rear_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::mutable_min_score_rear() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_rear();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear)
  return _msg;
}
inline void BarcodingConfiguration::set_allocated_min_score_rear(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_rear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_rear_);
  }
  if (min_score_rear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_rear));
    if (message_arena != submessage_arena) {
      min_score_rear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_rear, submessage_arena);
    }
    
  } else {
    
  }
  min_score_rear_ = min_score_rear;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_rear)
}

// .google.protobuf.FloatValue min_score_mid = 7;
inline bool BarcodingConfiguration::_internal_has_min_score_mid() const {
  return this != internal_default_instance() && min_score_mid_ != nullptr;
}
inline bool BarcodingConfiguration::has_min_score_mid() const {
  return _internal_has_min_score_mid();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::_internal_min_score_mid() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_mid_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::min_score_mid() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid)
  return _internal_min_score_mid();
}
inline void BarcodingConfiguration::unsafe_arena_set_allocated_min_score_mid(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mid_);
  }
  min_score_mid_ = min_score_mid;
  if (min_score_mid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::release_min_score_mid() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_mid_;
  min_score_mid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::unsafe_arena_release_min_score_mid() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_mid_;
  min_score_mid_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::_internal_mutable_min_score_mid() {
  
  if (min_score_mid_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_mid_ = p;
  }
  return min_score_mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::mutable_min_score_mid() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_mid();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid)
  return _msg;
}
inline void BarcodingConfiguration::set_allocated_min_score_mid(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mid_);
  }
  if (min_score_mid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mid));
    if (message_arena != submessage_arena) {
      min_score_mid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_mid, submessage_arena);
    }
    
  } else {
    
  }
  min_score_mid_ = min_score_mid;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mid)
}

// .google.protobuf.FloatValue min_score_mask = 8;
inline bool BarcodingConfiguration::_internal_has_min_score_mask() const {
  return this != internal_default_instance() && min_score_mask_ != nullptr;
}
inline bool BarcodingConfiguration::has_min_score_mask() const {
  return _internal_has_min_score_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::_internal_min_score_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& BarcodingConfiguration::min_score_mask() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask)
  return _internal_min_score_mask();
}
inline void BarcodingConfiguration::unsafe_arena_set_allocated_min_score_mask(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mask_);
  }
  min_score_mask_ = min_score_mask;
  if (min_score_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::release_min_score_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_mask_;
  min_score_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::unsafe_arena_release_min_score_mask() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_mask_;
  min_score_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::_internal_mutable_min_score_mask() {
  
  if (min_score_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_mask_ = p;
  }
  return min_score_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* BarcodingConfiguration::mutable_min_score_mask() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_mask();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask)
  return _msg;
}
inline void BarcodingConfiguration::set_allocated_min_score_mask(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mask_);
  }
  if (min_score_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_mask));
    if (message_arena != submessage_arena) {
      min_score_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_mask, submessage_arena);
    }
    
  } else {
    
  }
  min_score_mask_ = min_score_mask;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BarcodingConfiguration.min_score_mask)
}

// -------------------------------------------------------------------

// AlignmentConfiguration

// repeated string reference_files = 1;
inline int AlignmentConfiguration::_internal_reference_files_size() const {
  return reference_files_.size();
}
inline int AlignmentConfiguration::reference_files_size() const {
  return _internal_reference_files_size();
}
inline void AlignmentConfiguration::clear_reference_files() {
  reference_files_.Clear();
}
inline std::string* AlignmentConfiguration::add_reference_files() {
  std::string* _s = _internal_add_reference_files();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
  return _s;
}
inline const std::string& AlignmentConfiguration::_internal_reference_files(int index) const {
  return reference_files_.Get(index);
}
inline const std::string& AlignmentConfiguration::reference_files(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
  return _internal_reference_files(index);
}
inline std::string* AlignmentConfiguration::mutable_reference_files(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
  return reference_files_.Mutable(index);
}
inline void AlignmentConfiguration::set_reference_files(int index, const std::string& value) {
  reference_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::set_reference_files(int index, std::string&& value) {
  reference_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::set_reference_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reference_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::set_reference_files(int index, const char* value, size_t size) {
  reference_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline std::string* AlignmentConfiguration::_internal_add_reference_files() {
  return reference_files_.Add();
}
inline void AlignmentConfiguration::add_reference_files(const std::string& value) {
  reference_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::add_reference_files(std::string&& value) {
  reference_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::add_reference_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reference_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline void AlignmentConfiguration::add_reference_files(const char* value, size_t size) {
  reference_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlignmentConfiguration::reference_files() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
  return reference_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlignmentConfiguration::mutable_reference_files() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.AlignmentConfiguration.reference_files)
  return &reference_files_;
}

// string bed_file = 2;
inline void AlignmentConfiguration::clear_bed_file() {
  bed_file_.ClearToEmpty();
}
inline const std::string& AlignmentConfiguration::bed_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AlignmentConfiguration.bed_file)
  return _internal_bed_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlignmentConfiguration::set_bed_file(ArgT0&& arg0, ArgT... args) {
 
 bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.AlignmentConfiguration.bed_file)
}
inline std::string* AlignmentConfiguration::mutable_bed_file() {
  std::string* _s = _internal_mutable_bed_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AlignmentConfiguration.bed_file)
  return _s;
}
inline const std::string& AlignmentConfiguration::_internal_bed_file() const {
  return bed_file_.Get();
}
inline void AlignmentConfiguration::_internal_set_bed_file(const std::string& value) {
  
  bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlignmentConfiguration::_internal_mutable_bed_file() {
  
  return bed_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlignmentConfiguration::release_bed_file() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.AlignmentConfiguration.bed_file)
  return bed_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlignmentConfiguration::set_allocated_bed_file(std::string* bed_file) {
  if (bed_file != nullptr) {
    
  } else {
    
  }
  bed_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bed_file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.AlignmentConfiguration.bed_file)
}

// .google.protobuf.FloatValue minimum_coverage = 3;
inline bool AlignmentConfiguration::_internal_has_minimum_coverage() const {
  return this != internal_default_instance() && minimum_coverage_ != nullptr;
}
inline bool AlignmentConfiguration::has_minimum_coverage() const {
  return _internal_has_minimum_coverage();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& AlignmentConfiguration::_internal_minimum_coverage() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = minimum_coverage_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& AlignmentConfiguration::minimum_coverage() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage)
  return _internal_minimum_coverage();
}
inline void AlignmentConfiguration::unsafe_arena_set_allocated_minimum_coverage(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* minimum_coverage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_coverage_);
  }
  minimum_coverage_ = minimum_coverage;
  if (minimum_coverage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* AlignmentConfiguration::release_minimum_coverage() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = minimum_coverage_;
  minimum_coverage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* AlignmentConfiguration::unsafe_arena_release_minimum_coverage() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = minimum_coverage_;
  minimum_coverage_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* AlignmentConfiguration::_internal_mutable_minimum_coverage() {
  
  if (minimum_coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    minimum_coverage_ = p;
  }
  return minimum_coverage_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* AlignmentConfiguration::mutable_minimum_coverage() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_minimum_coverage();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage)
  return _msg;
}
inline void AlignmentConfiguration::set_allocated_minimum_coverage(::PROTOBUF_NAMESPACE_ID::FloatValue* minimum_coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_coverage_);
  }
  if (minimum_coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_coverage));
    if (message_arena != submessage_arena) {
      minimum_coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum_coverage, submessage_arena);
    }
    
  } else {
    
  }
  minimum_coverage_ = minimum_coverage;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.AlignmentConfiguration.minimum_coverage)
}

// bool aggregate_statistics_for_multiple_bed_hits = 4;
inline void AlignmentConfiguration::clear_aggregate_statistics_for_multiple_bed_hits() {
  aggregate_statistics_for_multiple_bed_hits_ = false;
}
inline bool AlignmentConfiguration::_internal_aggregate_statistics_for_multiple_bed_hits() const {
  return aggregate_statistics_for_multiple_bed_hits_;
}
inline bool AlignmentConfiguration::aggregate_statistics_for_multiple_bed_hits() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.AlignmentConfiguration.aggregate_statistics_for_multiple_bed_hits)
  return _internal_aggregate_statistics_for_multiple_bed_hits();
}
inline void AlignmentConfiguration::_internal_set_aggregate_statistics_for_multiple_bed_hits(bool value) {
  
  aggregate_statistics_for_multiple_bed_hits_ = value;
}
inline void AlignmentConfiguration::set_aggregate_statistics_for_multiple_bed_hits(bool value) {
  _internal_set_aggregate_statistics_for_multiple_bed_hits(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.AlignmentConfiguration.aggregate_statistics_for_multiple_bed_hits)
}

// -------------------------------------------------------------------

// LampConfiguration

// string lamp_kit = 1;
inline void LampConfiguration::clear_lamp_kit() {
  lamp_kit_.ClearToEmpty();
}
inline const std::string& LampConfiguration::lamp_kit() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.LampConfiguration.lamp_kit)
  return _internal_lamp_kit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LampConfiguration::set_lamp_kit(ArgT0&& arg0, ArgT... args) {
 
 lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.LampConfiguration.lamp_kit)
}
inline std::string* LampConfiguration::mutable_lamp_kit() {
  std::string* _s = _internal_mutable_lamp_kit();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.LampConfiguration.lamp_kit)
  return _s;
}
inline const std::string& LampConfiguration::_internal_lamp_kit() const {
  return lamp_kit_.Get();
}
inline void LampConfiguration::_internal_set_lamp_kit(const std::string& value) {
  
  lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LampConfiguration::_internal_mutable_lamp_kit() {
  
  return lamp_kit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LampConfiguration::release_lamp_kit() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.LampConfiguration.lamp_kit)
  return lamp_kit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LampConfiguration::set_allocated_lamp_kit(std::string* lamp_kit) {
  if (lamp_kit != nullptr) {
    
  } else {
    
  }
  lamp_kit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lamp_kit,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.LampConfiguration.lamp_kit)
}

// .google.protobuf.FloatValue min_score_barcodes = 2;
inline bool LampConfiguration::_internal_has_min_score_barcodes() const {
  return this != internal_default_instance() && min_score_barcodes_ != nullptr;
}
inline bool LampConfiguration::has_min_score_barcodes() const {
  return _internal_has_min_score_barcodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::_internal_min_score_barcodes() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_barcodes_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::min_score_barcodes() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes)
  return _internal_min_score_barcodes();
}
inline void LampConfiguration::unsafe_arena_set_allocated_min_score_barcodes(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_barcodes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_barcodes_);
  }
  min_score_barcodes_ = min_score_barcodes;
  if (min_score_barcodes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::release_min_score_barcodes() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_barcodes_;
  min_score_barcodes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::unsafe_arena_release_min_score_barcodes() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_barcodes_;
  min_score_barcodes_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::_internal_mutable_min_score_barcodes() {
  
  if (min_score_barcodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_barcodes_ = p;
  }
  return min_score_barcodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::mutable_min_score_barcodes() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_barcodes();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes)
  return _msg;
}
inline void LampConfiguration::set_allocated_min_score_barcodes(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_barcodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_barcodes_);
  }
  if (min_score_barcodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_barcodes));
    if (message_arena != submessage_arena) {
      min_score_barcodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_barcodes, submessage_arena);
    }
    
  } else {
    
  }
  min_score_barcodes_ = min_score_barcodes;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_barcodes)
}

// .google.protobuf.FloatValue min_score_masks = 3;
inline bool LampConfiguration::_internal_has_min_score_masks() const {
  return this != internal_default_instance() && min_score_masks_ != nullptr;
}
inline bool LampConfiguration::has_min_score_masks() const {
  return _internal_has_min_score_masks();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::_internal_min_score_masks() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_masks_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::min_score_masks() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.LampConfiguration.min_score_masks)
  return _internal_min_score_masks();
}
inline void LampConfiguration::unsafe_arena_set_allocated_min_score_masks(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_masks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_masks_);
  }
  min_score_masks_ = min_score_masks;
  if (min_score_masks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_masks)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::release_min_score_masks() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_masks_;
  min_score_masks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::unsafe_arena_release_min_score_masks() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.LampConfiguration.min_score_masks)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_masks_;
  min_score_masks_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::_internal_mutable_min_score_masks() {
  
  if (min_score_masks_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_masks_ = p;
  }
  return min_score_masks_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::mutable_min_score_masks() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_masks();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.LampConfiguration.min_score_masks)
  return _msg;
}
inline void LampConfiguration::set_allocated_min_score_masks(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_masks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_masks_);
  }
  if (min_score_masks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_masks));
    if (message_arena != submessage_arena) {
      min_score_masks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_masks, submessage_arena);
    }
    
  } else {
    
  }
  min_score_masks_ = min_score_masks;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_masks)
}

// .google.protobuf.FloatValue min_score_targets = 4;
inline bool LampConfiguration::_internal_has_min_score_targets() const {
  return this != internal_default_instance() && min_score_targets_ != nullptr;
}
inline bool LampConfiguration::has_min_score_targets() const {
  return _internal_has_min_score_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::_internal_min_score_targets() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = min_score_targets_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& LampConfiguration::min_score_targets() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.LampConfiguration.min_score_targets)
  return _internal_min_score_targets();
}
inline void LampConfiguration::unsafe_arena_set_allocated_min_score_targets(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_targets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_targets_);
  }
  min_score_targets_ = min_score_targets;
  if (min_score_targets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_targets)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::release_min_score_targets() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_targets_;
  min_score_targets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::unsafe_arena_release_min_score_targets() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.LampConfiguration.min_score_targets)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = min_score_targets_;
  min_score_targets_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::_internal_mutable_min_score_targets() {
  
  if (min_score_targets_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    min_score_targets_ = p;
  }
  return min_score_targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* LampConfiguration::mutable_min_score_targets() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_min_score_targets();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.LampConfiguration.min_score_targets)
  return _msg;
}
inline void LampConfiguration::set_allocated_min_score_targets(::PROTOBUF_NAMESPACE_ID::FloatValue* min_score_targets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_targets_);
  }
  if (min_score_targets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_score_targets));
    if (message_arena != submessage_arena) {
      min_score_targets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_score_targets, submessage_arena);
    }
    
  } else {
    
  }
  min_score_targets_ = min_score_targets;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.LampConfiguration.min_score_targets)
}

// -------------------------------------------------------------------

// BasecallerConfiguration_ReadFiltering

// .google.protobuf.DoubleValue min_qscore = 1;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_min_qscore() const {
  return this != internal_default_instance() && min_qscore_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_min_qscore() const {
  return _internal_has_min_qscore();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BasecallerConfiguration_ReadFiltering::_internal_min_qscore() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_qscore_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BasecallerConfiguration_ReadFiltering::min_qscore() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore)
  return _internal_min_qscore();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_min_qscore(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore_);
  }
  min_qscore_ = min_qscore;
  if (min_qscore) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_ReadFiltering::release_min_qscore() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_qscore_;
  min_qscore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_min_qscore() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_qscore_;
  min_qscore_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_ReadFiltering::_internal_mutable_min_qscore() {
  
  if (min_qscore_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    min_qscore_ = p;
  }
  return min_qscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_ReadFiltering::mutable_min_qscore() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_qscore();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_min_qscore(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore_);
  }
  if (min_qscore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore));
    if (message_arena != submessage_arena) {
      min_qscore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_qscore, submessage_arena);
    }
    
  } else {
    
  }
  min_qscore_ = min_qscore;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_qscore)
}

// .google.protobuf.UInt64Value min_samples = 2;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_min_samples() const {
  return this != internal_default_instance() && min_samples_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_min_samples() const {
  return _internal_has_min_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::_internal_min_samples() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = min_samples_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::min_samples() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples)
  return _internal_min_samples();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_min_samples(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_samples) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_samples_);
  }
  min_samples_ = min_samples;
  if (min_samples) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::release_min_samples() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_samples_;
  min_samples_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_min_samples() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_samples_;
  min_samples_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::_internal_mutable_min_samples() {
  
  if (min_samples_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    min_samples_ = p;
  }
  return min_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::mutable_min_samples() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_min_samples();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_min_samples(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_samples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_samples_);
  }
  if (min_samples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_samples));
    if (message_arena != submessage_arena) {
      min_samples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_samples, submessage_arena);
    }
    
  } else {
    
  }
  min_samples_ = min_samples;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_samples)
}

// .google.protobuf.UInt64Value max_samples = 3;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_max_samples() const {
  return this != internal_default_instance() && max_samples_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_max_samples() const {
  return _internal_has_max_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::_internal_max_samples() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = max_samples_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::max_samples() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples)
  return _internal_max_samples();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_max_samples(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_samples) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_samples_);
  }
  max_samples_ = max_samples;
  if (max_samples) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::release_max_samples() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_samples_;
  max_samples_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_max_samples() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_samples_;
  max_samples_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::_internal_mutable_max_samples() {
  
  if (max_samples_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    max_samples_ = p;
  }
  return max_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::mutable_max_samples() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_max_samples();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_max_samples(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_samples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_samples_);
  }
  if (max_samples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_samples));
    if (message_arena != submessage_arena) {
      max_samples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_samples, submessage_arena);
    }
    
  } else {
    
  }
  max_samples_ = max_samples;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_samples)
}

// .google.protobuf.UInt64Value min_bases = 4;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_min_bases() const {
  return this != internal_default_instance() && min_bases_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_min_bases() const {
  return _internal_has_min_bases();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::_internal_min_bases() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = min_bases_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::min_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases)
  return _internal_min_bases();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_min_bases(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases_);
  }
  min_bases_ = min_bases;
  if (min_bases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::release_min_bases() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_bases_;
  min_bases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_min_bases() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_bases_;
  min_bases_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::_internal_mutable_min_bases() {
  
  if (min_bases_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    min_bases_ = p;
  }
  return min_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::mutable_min_bases() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_min_bases();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_min_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases_);
  }
  if (min_bases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases));
    if (message_arena != submessage_arena) {
      min_bases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_bases, submessage_arena);
    }
    
  } else {
    
  }
  min_bases_ = min_bases;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.min_bases)
}

// .google.protobuf.UInt64Value max_bases = 5;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_max_bases() const {
  return this != internal_default_instance() && max_bases_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_max_bases() const {
  return _internal_has_max_bases();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::_internal_max_bases() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = max_bases_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::max_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases)
  return _internal_max_bases();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_max_bases(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases_);
  }
  max_bases_ = max_bases;
  if (max_bases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::release_max_bases() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_bases_;
  max_bases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_max_bases() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_bases_;
  max_bases_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::_internal_mutable_max_bases() {
  
  if (max_bases_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    max_bases_ = p;
  }
  return max_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::mutable_max_bases() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_max_bases();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_max_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases_);
  }
  if (max_bases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases));
    if (message_arena != submessage_arena) {
      max_bases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_bases, submessage_arena);
    }
    
  } else {
    
  }
  max_bases_ = max_bases;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_bases)
}

// .google.protobuf.UInt64Value max_failed_chunks = 6;
inline bool BasecallerConfiguration_ReadFiltering::_internal_has_max_failed_chunks() const {
  return this != internal_default_instance() && max_failed_chunks_ != nullptr;
}
inline bool BasecallerConfiguration_ReadFiltering::has_max_failed_chunks() const {
  return _internal_has_max_failed_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::_internal_max_failed_chunks() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = max_failed_chunks_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_ReadFiltering::max_failed_chunks() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks)
  return _internal_max_failed_chunks();
}
inline void BasecallerConfiguration_ReadFiltering::unsafe_arena_set_allocated_max_failed_chunks(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_failed_chunks) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_failed_chunks_);
  }
  max_failed_chunks_ = max_failed_chunks;
  if (max_failed_chunks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::release_max_failed_chunks() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_failed_chunks_;
  max_failed_chunks_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::unsafe_arena_release_max_failed_chunks() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_failed_chunks_;
  max_failed_chunks_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::_internal_mutable_max_failed_chunks() {
  
  if (max_failed_chunks_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    max_failed_chunks_ = p;
  }
  return max_failed_chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_ReadFiltering::mutable_max_failed_chunks() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_max_failed_chunks();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks)
  return _msg;
}
inline void BasecallerConfiguration_ReadFiltering::set_allocated_max_failed_chunks(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_failed_chunks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_failed_chunks_);
  }
  if (max_failed_chunks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_failed_chunks));
    if (message_arena != submessage_arena) {
      max_failed_chunks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_failed_chunks, submessage_arena);
    }
    
  } else {
    
  }
  max_failed_chunks_ = max_failed_chunks;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering.max_failed_chunks)
}

// -------------------------------------------------------------------

// BasecallerConfiguration_TargetFiltering

// .google.protobuf.DoubleValue min_qscore = 1;
inline bool BasecallerConfiguration_TargetFiltering::_internal_has_min_qscore() const {
  return this != internal_default_instance() && min_qscore_ != nullptr;
}
inline bool BasecallerConfiguration_TargetFiltering::has_min_qscore() const {
  return _internal_has_min_qscore();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BasecallerConfiguration_TargetFiltering::_internal_min_qscore() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_qscore_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& BasecallerConfiguration_TargetFiltering::min_qscore() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore)
  return _internal_min_qscore();
}
inline void BasecallerConfiguration_TargetFiltering::unsafe_arena_set_allocated_min_qscore(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore_);
  }
  min_qscore_ = min_qscore;
  if (min_qscore) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_TargetFiltering::release_min_qscore() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_qscore_;
  min_qscore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_TargetFiltering::unsafe_arena_release_min_qscore() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_qscore_;
  min_qscore_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_TargetFiltering::_internal_mutable_min_qscore() {
  
  if (min_qscore_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    min_qscore_ = p;
  }
  return min_qscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* BasecallerConfiguration_TargetFiltering::mutable_min_qscore() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_min_qscore();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore)
  return _msg;
}
inline void BasecallerConfiguration_TargetFiltering::set_allocated_min_qscore(::PROTOBUF_NAMESPACE_ID::DoubleValue* min_qscore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore_);
  }
  if (min_qscore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_qscore));
    if (message_arena != submessage_arena) {
      min_qscore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_qscore, submessage_arena);
    }
    
  } else {
    
  }
  min_qscore_ = min_qscore;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_qscore)
}

// .google.protobuf.UInt64Value min_bases = 2;
inline bool BasecallerConfiguration_TargetFiltering::_internal_has_min_bases() const {
  return this != internal_default_instance() && min_bases_ != nullptr;
}
inline bool BasecallerConfiguration_TargetFiltering::has_min_bases() const {
  return _internal_has_min_bases();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_TargetFiltering::_internal_min_bases() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = min_bases_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_TargetFiltering::min_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases)
  return _internal_min_bases();
}
inline void BasecallerConfiguration_TargetFiltering::unsafe_arena_set_allocated_min_bases(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases_);
  }
  min_bases_ = min_bases;
  if (min_bases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::release_min_bases() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_bases_;
  min_bases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::unsafe_arena_release_min_bases() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = min_bases_;
  min_bases_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::_internal_mutable_min_bases() {
  
  if (min_bases_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    min_bases_ = p;
  }
  return min_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::mutable_min_bases() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_min_bases();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases)
  return _msg;
}
inline void BasecallerConfiguration_TargetFiltering::set_allocated_min_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* min_bases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases_);
  }
  if (min_bases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_bases));
    if (message_arena != submessage_arena) {
      min_bases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_bases, submessage_arena);
    }
    
  } else {
    
  }
  min_bases_ = min_bases;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.min_bases)
}

// .google.protobuf.UInt64Value max_bases = 3;
inline bool BasecallerConfiguration_TargetFiltering::_internal_has_max_bases() const {
  return this != internal_default_instance() && max_bases_ != nullptr;
}
inline bool BasecallerConfiguration_TargetFiltering::has_max_bases() const {
  return _internal_has_max_bases();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_TargetFiltering::_internal_max_bases() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = max_bases_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& BasecallerConfiguration_TargetFiltering::max_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases)
  return _internal_max_bases();
}
inline void BasecallerConfiguration_TargetFiltering::unsafe_arena_set_allocated_max_bases(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases_);
  }
  max_bases_ = max_bases;
  if (max_bases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::release_max_bases() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_bases_;
  max_bases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::unsafe_arena_release_max_bases() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = max_bases_;
  max_bases_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::_internal_mutable_max_bases() {
  
  if (max_bases_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    max_bases_ = p;
  }
  return max_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* BasecallerConfiguration_TargetFiltering::mutable_max_bases() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_max_bases();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases)
  return _msg;
}
inline void BasecallerConfiguration_TargetFiltering::set_allocated_max_bases(::PROTOBUF_NAMESPACE_ID::UInt64Value* max_bases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases_);
  }
  if (max_bases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bases));
    if (message_arena != submessage_arena) {
      max_bases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_bases, submessage_arena);
    }
    
  } else {
    
  }
  max_bases_ = max_bases;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering.max_bases)
}

// -------------------------------------------------------------------

// BasecallerConfiguration

// bool enable = 2;
inline void BasecallerConfiguration::clear_enable() {
  enable_ = false;
}
inline bool BasecallerConfiguration::_internal_enable() const {
  return enable_;
}
inline bool BasecallerConfiguration::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.enable)
  return _internal_enable();
}
inline void BasecallerConfiguration::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void BasecallerConfiguration::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BasecallerConfiguration.enable)
}

// string config_filename = 1;
inline void BasecallerConfiguration::clear_config_filename() {
  config_filename_.ClearToEmpty();
}
inline const std::string& BasecallerConfiguration::config_filename() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.config_filename)
  return _internal_config_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BasecallerConfiguration::set_config_filename(ArgT0&& arg0, ArgT... args) {
 
 config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.BasecallerConfiguration.config_filename)
}
inline std::string* BasecallerConfiguration::mutable_config_filename() {
  std::string* _s = _internal_mutable_config_filename();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.config_filename)
  return _s;
}
inline const std::string& BasecallerConfiguration::_internal_config_filename() const {
  return config_filename_.Get();
}
inline void BasecallerConfiguration::_internal_set_config_filename(const std::string& value) {
  
  config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BasecallerConfiguration::_internal_mutable_config_filename() {
  
  return config_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BasecallerConfiguration::release_config_filename() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.config_filename)
  return config_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BasecallerConfiguration::set_allocated_config_filename(std::string* config_filename) {
  if (config_filename != nullptr) {
    
  } else {
    
  }
  config_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.config_filename)
}

// .minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering read_filtering = 3;
inline bool BasecallerConfiguration::_internal_has_read_filtering() const {
  return this != internal_default_instance() && read_filtering_ != nullptr;
}
inline bool BasecallerConfiguration::has_read_filtering() const {
  return _internal_has_read_filtering();
}
inline void BasecallerConfiguration::clear_read_filtering() {
  if (GetArenaForAllocation() == nullptr && read_filtering_ != nullptr) {
    delete read_filtering_;
  }
  read_filtering_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering& BasecallerConfiguration::_internal_read_filtering() const {
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* p = read_filtering_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering&>(
      ::minknow_api::analysis_configuration::_BasecallerConfiguration_ReadFiltering_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering& BasecallerConfiguration::read_filtering() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering)
  return _internal_read_filtering();
}
inline void BasecallerConfiguration::unsafe_arena_set_allocated_read_filtering(
    ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* read_filtering) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_);
  }
  read_filtering_ = read_filtering;
  if (read_filtering) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering)
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* BasecallerConfiguration::release_read_filtering() {
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* temp = read_filtering_;
  read_filtering_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* BasecallerConfiguration::unsafe_arena_release_read_filtering() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering)
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* temp = read_filtering_;
  read_filtering_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* BasecallerConfiguration::_internal_mutable_read_filtering() {
  
  if (read_filtering_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering>(GetArenaForAllocation());
    read_filtering_ = p;
  }
  return read_filtering_;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* BasecallerConfiguration::mutable_read_filtering() {
  ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* _msg = _internal_mutable_read_filtering();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering)
  return _msg;
}
inline void BasecallerConfiguration::set_allocated_read_filtering(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* read_filtering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_filtering_;
  }
  if (read_filtering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering>::GetOwningArena(read_filtering);
    if (message_arena != submessage_arena) {
      read_filtering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_filtering, submessage_arena);
    }
    
  } else {
    
  }
  read_filtering_ = read_filtering;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.read_filtering)
}

// .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 4;
inline bool BasecallerConfiguration::_internal_has_barcoding_configuration() const {
  return this != internal_default_instance() && barcoding_configuration_ != nullptr;
}
inline bool BasecallerConfiguration::has_barcoding_configuration() const {
  return _internal_has_barcoding_configuration();
}
inline void BasecallerConfiguration::clear_barcoding_configuration() {
  if (GetArenaForAllocation() == nullptr && barcoding_configuration_ != nullptr) {
    delete barcoding_configuration_;
  }
  barcoding_configuration_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& BasecallerConfiguration::_internal_barcoding_configuration() const {
  const ::minknow_api::analysis_configuration::BarcodingConfiguration* p = barcoding_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BarcodingConfiguration&>(
      ::minknow_api::analysis_configuration::_BarcodingConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BarcodingConfiguration& BasecallerConfiguration::barcoding_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration)
  return _internal_barcoding_configuration();
}
inline void BasecallerConfiguration::unsafe_arena_set_allocated_barcoding_configuration(
    ::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_configuration_);
  }
  barcoding_configuration_ = barcoding_configuration;
  if (barcoding_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration)
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* BasecallerConfiguration::release_barcoding_configuration() {
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* BasecallerConfiguration::unsafe_arena_release_barcoding_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration)
  
  ::minknow_api::analysis_configuration::BarcodingConfiguration* temp = barcoding_configuration_;
  barcoding_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* BasecallerConfiguration::_internal_mutable_barcoding_configuration() {
  
  if (barcoding_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BarcodingConfiguration>(GetArenaForAllocation());
    barcoding_configuration_ = p;
  }
  return barcoding_configuration_;
}
inline ::minknow_api::analysis_configuration::BarcodingConfiguration* BasecallerConfiguration::mutable_barcoding_configuration() {
  ::minknow_api::analysis_configuration::BarcodingConfiguration* _msg = _internal_mutable_barcoding_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration)
  return _msg;
}
inline void BasecallerConfiguration::set_allocated_barcoding_configuration(::minknow_api::analysis_configuration::BarcodingConfiguration* barcoding_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete barcoding_configuration_;
  }
  if (barcoding_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::BarcodingConfiguration>::GetOwningArena(barcoding_configuration);
    if (message_arena != submessage_arena) {
      barcoding_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barcoding_configuration, submessage_arena);
    }
    
  } else {
    
  }
  barcoding_configuration_ = barcoding_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.barcoding_configuration)
}

// .minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering target_filtering = 5;
inline bool BasecallerConfiguration::_internal_has_target_filtering() const {
  return this != internal_default_instance() && target_filtering_ != nullptr;
}
inline bool BasecallerConfiguration::has_target_filtering() const {
  return _internal_has_target_filtering();
}
inline void BasecallerConfiguration::clear_target_filtering() {
  if (GetArenaForAllocation() == nullptr && target_filtering_ != nullptr) {
    delete target_filtering_;
  }
  target_filtering_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering& BasecallerConfiguration::_internal_target_filtering() const {
  const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* p = target_filtering_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering&>(
      ::minknow_api::analysis_configuration::_BasecallerConfiguration_TargetFiltering_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering& BasecallerConfiguration::target_filtering() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering)
  return _internal_target_filtering();
}
inline void BasecallerConfiguration::unsafe_arena_set_allocated_target_filtering(
    ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* target_filtering) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_filtering_);
  }
  target_filtering_ = target_filtering;
  if (target_filtering) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering)
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* BasecallerConfiguration::release_target_filtering() {
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* temp = target_filtering_;
  target_filtering_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* BasecallerConfiguration::unsafe_arena_release_target_filtering() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering)
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* temp = target_filtering_;
  target_filtering_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* BasecallerConfiguration::_internal_mutable_target_filtering() {
  
  if (target_filtering_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering>(GetArenaForAllocation());
    target_filtering_ = p;
  }
  return target_filtering_;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* BasecallerConfiguration::mutable_target_filtering() {
  ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* _msg = _internal_mutable_target_filtering();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering)
  return _msg;
}
inline void BasecallerConfiguration::set_allocated_target_filtering(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* target_filtering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_filtering_;
  }
  if (target_filtering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering>::GetOwningArena(target_filtering);
    if (message_arena != submessage_arena) {
      target_filtering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_filtering, submessage_arena);
    }
    
  } else {
    
  }
  target_filtering_ = target_filtering;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.target_filtering)
}

// .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
inline bool BasecallerConfiguration::_internal_has_alignment_configuration() const {
  return this != internal_default_instance() && alignment_configuration_ != nullptr;
}
inline bool BasecallerConfiguration::has_alignment_configuration() const {
  return _internal_has_alignment_configuration();
}
inline void BasecallerConfiguration::clear_alignment_configuration() {
  if (GetArenaForAllocation() == nullptr && alignment_configuration_ != nullptr) {
    delete alignment_configuration_;
  }
  alignment_configuration_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& BasecallerConfiguration::_internal_alignment_configuration() const {
  const ::minknow_api::analysis_configuration::AlignmentConfiguration* p = alignment_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::AlignmentConfiguration&>(
      ::minknow_api::analysis_configuration::_AlignmentConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::AlignmentConfiguration& BasecallerConfiguration::alignment_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration)
  return _internal_alignment_configuration();
}
inline void BasecallerConfiguration::unsafe_arena_set_allocated_alignment_configuration(
    ::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_configuration_);
  }
  alignment_configuration_ = alignment_configuration;
  if (alignment_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration)
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* BasecallerConfiguration::release_alignment_configuration() {
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* BasecallerConfiguration::unsafe_arena_release_alignment_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration)
  
  ::minknow_api::analysis_configuration::AlignmentConfiguration* temp = alignment_configuration_;
  alignment_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* BasecallerConfiguration::_internal_mutable_alignment_configuration() {
  
  if (alignment_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::AlignmentConfiguration>(GetArenaForAllocation());
    alignment_configuration_ = p;
  }
  return alignment_configuration_;
}
inline ::minknow_api::analysis_configuration::AlignmentConfiguration* BasecallerConfiguration::mutable_alignment_configuration() {
  ::minknow_api::analysis_configuration::AlignmentConfiguration* _msg = _internal_mutable_alignment_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration)
  return _msg;
}
inline void BasecallerConfiguration::set_allocated_alignment_configuration(::minknow_api::analysis_configuration::AlignmentConfiguration* alignment_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete alignment_configuration_;
  }
  if (alignment_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::AlignmentConfiguration>::GetOwningArena(alignment_configuration);
    if (message_arena != submessage_arena) {
      alignment_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_configuration, submessage_arena);
    }
    
  } else {
    
  }
  alignment_configuration_ = alignment_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.alignment_configuration)
}

// .minknow_api.analysis_configuration.LampConfiguration lamp_configuration = 7;
inline bool BasecallerConfiguration::_internal_has_lamp_configuration() const {
  return this != internal_default_instance() && lamp_configuration_ != nullptr;
}
inline bool BasecallerConfiguration::has_lamp_configuration() const {
  return _internal_has_lamp_configuration();
}
inline void BasecallerConfiguration::clear_lamp_configuration() {
  if (GetArenaForAllocation() == nullptr && lamp_configuration_ != nullptr) {
    delete lamp_configuration_;
  }
  lamp_configuration_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::LampConfiguration& BasecallerConfiguration::_internal_lamp_configuration() const {
  const ::minknow_api::analysis_configuration::LampConfiguration* p = lamp_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::LampConfiguration&>(
      ::minknow_api::analysis_configuration::_LampConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::LampConfiguration& BasecallerConfiguration::lamp_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration)
  return _internal_lamp_configuration();
}
inline void BasecallerConfiguration::unsafe_arena_set_allocated_lamp_configuration(
    ::minknow_api::analysis_configuration::LampConfiguration* lamp_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lamp_configuration_);
  }
  lamp_configuration_ = lamp_configuration;
  if (lamp_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration)
}
inline ::minknow_api::analysis_configuration::LampConfiguration* BasecallerConfiguration::release_lamp_configuration() {
  
  ::minknow_api::analysis_configuration::LampConfiguration* temp = lamp_configuration_;
  lamp_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::LampConfiguration* BasecallerConfiguration::unsafe_arena_release_lamp_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration)
  
  ::minknow_api::analysis_configuration::LampConfiguration* temp = lamp_configuration_;
  lamp_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::LampConfiguration* BasecallerConfiguration::_internal_mutable_lamp_configuration() {
  
  if (lamp_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::LampConfiguration>(GetArenaForAllocation());
    lamp_configuration_ = p;
  }
  return lamp_configuration_;
}
inline ::minknow_api::analysis_configuration::LampConfiguration* BasecallerConfiguration::mutable_lamp_configuration() {
  ::minknow_api::analysis_configuration::LampConfiguration* _msg = _internal_mutable_lamp_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration)
  return _msg;
}
inline void BasecallerConfiguration::set_allocated_lamp_configuration(::minknow_api::analysis_configuration::LampConfiguration* lamp_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lamp_configuration_;
  }
  if (lamp_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::LampConfiguration>::GetOwningArena(lamp_configuration);
    if (message_arena != submessage_arena) {
      lamp_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lamp_configuration, submessage_arena);
    }
    
  } else {
    
  }
  lamp_configuration_ = lamp_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.BasecallerConfiguration.lamp_configuration)
}

// -------------------------------------------------------------------

// SetBasecallerConfigurationRequest

// .minknow_api.analysis_configuration.BasecallerConfiguration configs = 1 [(.minknow_api.rpc_unwrap) = true];
inline bool SetBasecallerConfigurationRequest::_internal_has_configs() const {
  return this != internal_default_instance() && configs_ != nullptr;
}
inline bool SetBasecallerConfigurationRequest::has_configs() const {
  return _internal_has_configs();
}
inline void SetBasecallerConfigurationRequest::clear_configs() {
  if (GetArenaForAllocation() == nullptr && configs_ != nullptr) {
    delete configs_;
  }
  configs_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration& SetBasecallerConfigurationRequest::_internal_configs() const {
  const ::minknow_api::analysis_configuration::BasecallerConfiguration* p = configs_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::BasecallerConfiguration&>(
      ::minknow_api::analysis_configuration::_BasecallerConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::BasecallerConfiguration& SetBasecallerConfigurationRequest::configs() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs)
  return _internal_configs();
}
inline void SetBasecallerConfigurationRequest::unsafe_arena_set_allocated_configs(
    ::minknow_api::analysis_configuration::BasecallerConfiguration* configs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configs_);
  }
  configs_ = configs;
  if (configs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs)
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration* SetBasecallerConfigurationRequest::release_configs() {
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration* temp = configs_;
  configs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration* SetBasecallerConfigurationRequest::unsafe_arena_release_configs() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs)
  
  ::minknow_api::analysis_configuration::BasecallerConfiguration* temp = configs_;
  configs_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration* SetBasecallerConfigurationRequest::_internal_mutable_configs() {
  
  if (configs_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::BasecallerConfiguration>(GetArenaForAllocation());
    configs_ = p;
  }
  return configs_;
}
inline ::minknow_api::analysis_configuration::BasecallerConfiguration* SetBasecallerConfigurationRequest::mutable_configs() {
  ::minknow_api::analysis_configuration::BasecallerConfiguration* _msg = _internal_mutable_configs();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs)
  return _msg;
}
inline void SetBasecallerConfigurationRequest::set_allocated_configs(::minknow_api::analysis_configuration::BasecallerConfiguration* configs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete configs_;
  }
  if (configs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::BasecallerConfiguration>::GetOwningArena(configs);
    if (message_arena != submessage_arena) {
      configs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configs, submessage_arena);
    }
    
  } else {
    
  }
  configs_ = configs;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest.configs)
}

// -------------------------------------------------------------------

// SetBasecallerConfigurationResponse

// -------------------------------------------------------------------

// GetBasecallerConfigurationRequest

// -------------------------------------------------------------------

// GetPoreTypeConfigurationRequest

// -------------------------------------------------------------------

// PoreTypeConfiguration_ChannelWell

// uint32 channel = 1;
inline void PoreTypeConfiguration_ChannelWell::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoreTypeConfiguration_ChannelWell::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoreTypeConfiguration_ChannelWell::channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell.channel)
  return _internal_channel();
}
inline void PoreTypeConfiguration_ChannelWell::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void PoreTypeConfiguration_ChannelWell::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell.channel)
}

// uint32 well = 2;
inline void PoreTypeConfiguration_ChannelWell::clear_well() {
  well_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoreTypeConfiguration_ChannelWell::_internal_well() const {
  return well_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PoreTypeConfiguration_ChannelWell::well() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell.well)
  return _internal_well();
}
inline void PoreTypeConfiguration_ChannelWell::_internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  well_ = value;
}
inline void PoreTypeConfiguration_ChannelWell::set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_well(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell.well)
}

// -------------------------------------------------------------------

// PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList

// repeated .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell channel_well = 1;
inline int PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_internal_channel_well_size() const {
  return channel_well_.size();
}
inline int PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::channel_well_size() const {
  return _internal_channel_well_size();
}
inline void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::clear_channel_well() {
  channel_well_.Clear();
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::mutable_channel_well(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well)
  return channel_well_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >*
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::mutable_channel_well() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well)
  return &channel_well_;
}
inline const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell& PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_internal_channel_well(int index) const {
  return channel_well_.Get(index);
}
inline const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell& PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::channel_well(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well)
  return _internal_channel_well(index);
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_internal_add_channel_well() {
  return channel_well_.Add();
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::add_channel_well() {
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* _add = _internal_add_channel_well();
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >&
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::channel_well() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList.channel_well)
  return channel_well_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PoreTypeConfiguration_ChannelWellPoreTypeConfigurations

// map<string, .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList> pore_types = 1;
inline int PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_internal_pore_types_size() const {
  return pore_types_.size();
}
inline int PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::pore_types_size() const {
  return _internal_pore_types_size();
}
inline void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::clear_pore_types() {
  pore_types_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >&
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_internal_pore_types() const {
  return pore_types_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >&
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::pore_types() const {
  // @@protoc_insertion_point(field_map:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.pore_types)
  return _internal_pore_types();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >*
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_internal_mutable_pore_types() {
  return pore_types_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >*
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::mutable_pore_types() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.pore_types)
  return _internal_mutable_pore_types();
}

// -------------------------------------------------------------------

// PoreTypeConfiguration

// string global_pore_type = 1;
inline bool PoreTypeConfiguration::_internal_has_global_pore_type() const {
  return pore_type_config_case() == kGlobalPoreType;
}
inline bool PoreTypeConfiguration::has_global_pore_type() const {
  return _internal_has_global_pore_type();
}
inline void PoreTypeConfiguration::set_has_global_pore_type() {
  _oneof_case_[0] = kGlobalPoreType;
}
inline void PoreTypeConfiguration::clear_global_pore_type() {
  if (_internal_has_global_pore_type()) {
    pore_type_config_.global_pore_type_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_pore_type_config();
  }
}
inline const std::string& PoreTypeConfiguration::global_pore_type() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type)
  return _internal_global_pore_type();
}
template <typename ArgT0, typename... ArgT>
inline void PoreTypeConfiguration::set_global_pore_type(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_global_pore_type()) {
    clear_pore_type_config();
    set_has_global_pore_type();
    pore_type_config_.global_pore_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pore_type_config_.global_pore_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type)
}
inline std::string* PoreTypeConfiguration::mutable_global_pore_type() {
  std::string* _s = _internal_mutable_global_pore_type();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type)
  return _s;
}
inline const std::string& PoreTypeConfiguration::_internal_global_pore_type() const {
  if (_internal_has_global_pore_type()) {
    return pore_type_config_.global_pore_type_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PoreTypeConfiguration::_internal_set_global_pore_type(const std::string& value) {
  if (!_internal_has_global_pore_type()) {
    clear_pore_type_config();
    set_has_global_pore_type();
    pore_type_config_.global_pore_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pore_type_config_.global_pore_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PoreTypeConfiguration::_internal_mutable_global_pore_type() {
  if (!_internal_has_global_pore_type()) {
    clear_pore_type_config();
    set_has_global_pore_type();
    pore_type_config_.global_pore_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pore_type_config_.global_pore_type_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PoreTypeConfiguration::release_global_pore_type() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type)
  if (_internal_has_global_pore_type()) {
    clear_has_pore_type_config();
    return pore_type_config_.global_pore_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void PoreTypeConfiguration::set_allocated_global_pore_type(std::string* global_pore_type) {
  if (has_pore_type_config()) {
    clear_pore_type_config();
  }
  if (global_pore_type != nullptr) {
    set_has_global_pore_type();
    pore_type_config_.global_pore_type_.UnsafeSetDefault(global_pore_type);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(global_pore_type);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type)
}

// .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations channel_well_pore_types = 2;
inline bool PoreTypeConfiguration::_internal_has_channel_well_pore_types() const {
  return pore_type_config_case() == kChannelWellPoreTypes;
}
inline bool PoreTypeConfiguration::has_channel_well_pore_types() const {
  return _internal_has_channel_well_pore_types();
}
inline void PoreTypeConfiguration::set_has_channel_well_pore_types() {
  _oneof_case_[0] = kChannelWellPoreTypes;
}
inline void PoreTypeConfiguration::clear_channel_well_pore_types() {
  if (_internal_has_channel_well_pore_types()) {
    if (GetArenaForAllocation() == nullptr) {
      delete pore_type_config_.channel_well_pore_types_;
    }
    clear_has_pore_type_config();
  }
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* PoreTypeConfiguration::release_channel_well_pore_types() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
  if (_internal_has_channel_well_pore_types()) {
    clear_has_pore_type_config();
      ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* temp = pore_type_config_.channel_well_pore_types_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    pore_type_config_.channel_well_pore_types_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& PoreTypeConfiguration::_internal_channel_well_pore_types() const {
  return _internal_has_channel_well_pore_types()
      ? *pore_type_config_.channel_well_pore_types_
      : reinterpret_cast< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations&>(::minknow_api::analysis_configuration::_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_default_instance_);
}
inline const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& PoreTypeConfiguration::channel_well_pore_types() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
  return _internal_channel_well_pore_types();
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* PoreTypeConfiguration::unsafe_arena_release_channel_well_pore_types() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
  if (_internal_has_channel_well_pore_types()) {
    clear_has_pore_type_config();
    ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* temp = pore_type_config_.channel_well_pore_types_;
    pore_type_config_.channel_well_pore_types_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PoreTypeConfiguration::unsafe_arena_set_allocated_channel_well_pore_types(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* channel_well_pore_types) {
  clear_pore_type_config();
  if (channel_well_pore_types) {
    set_has_channel_well_pore_types();
    pore_type_config_.channel_well_pore_types_ = channel_well_pore_types;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* PoreTypeConfiguration::_internal_mutable_channel_well_pore_types() {
  if (!_internal_has_channel_well_pore_types()) {
    clear_pore_type_config();
    set_has_channel_well_pore_types();
    pore_type_config_.channel_well_pore_types_ = CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations >(GetArenaForAllocation());
  }
  return pore_type_config_.channel_well_pore_types_;
}
inline ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* PoreTypeConfiguration::mutable_channel_well_pore_types() {
  ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* _msg = _internal_mutable_channel_well_pore_types();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
  return _msg;
}

inline bool PoreTypeConfiguration::has_pore_type_config() const {
  return pore_type_config_case() != PORE_TYPE_CONFIG_NOT_SET;
}
inline void PoreTypeConfiguration::clear_has_pore_type_config() {
  _oneof_case_[0] = PORE_TYPE_CONFIG_NOT_SET;
}
inline PoreTypeConfiguration::PoreTypeConfigCase PoreTypeConfiguration::pore_type_config_case() const {
  return PoreTypeConfiguration::PoreTypeConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetPoreTypeConfigurationResponse

// -------------------------------------------------------------------

// WriterConfiguration_ChannelConfiguration_ChannelList

// repeated int32 channels = 1;
inline int WriterConfiguration_ChannelConfiguration_ChannelList::_internal_channels_size() const {
  return channels_.size();
}
inline int WriterConfiguration_ChannelConfiguration_ChannelList::channels_size() const {
  return _internal_channels_size();
}
inline void WriterConfiguration_ChannelConfiguration_ChannelList::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelList::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelList::channels(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList.channels)
  return _internal_channels(index);
}
inline void WriterConfiguration_ChannelConfiguration_ChannelList::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList.channels)
}
inline void WriterConfiguration_ChannelConfiguration_ChannelList::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  channels_.Add(value);
}
inline void WriterConfiguration_ChannelConfiguration_ChannelList::add_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WriterConfiguration_ChannelConfiguration_ChannelList::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WriterConfiguration_ChannelConfiguration_ChannelList::channels() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WriterConfiguration_ChannelConfiguration_ChannelList::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WriterConfiguration_ChannelConfiguration_ChannelList::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList.channels)
  return _internal_mutable_channels();
}

// -------------------------------------------------------------------

// WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange

// int32 start = 1;
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::start() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange.start)
  return _internal_start();
}
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange.start)
}

// int32 end = 2;
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::end() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange.end)
  return _internal_end();
}
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange.end)
}

// -------------------------------------------------------------------

// WriterConfiguration_ChannelConfiguration_ChannelRanges

// repeated .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange ranges = 1;
inline int WriterConfiguration_ChannelConfiguration_ChannelRanges::_internal_ranges_size() const {
  return ranges_.size();
}
inline int WriterConfiguration_ChannelConfiguration_ChannelRanges::ranges_size() const {
  return _internal_ranges_size();
}
inline void WriterConfiguration_ChannelConfiguration_ChannelRanges::clear_ranges() {
  ranges_.Clear();
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* WriterConfiguration_ChannelConfiguration_ChannelRanges::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >*
WriterConfiguration_ChannelConfiguration_ChannelRanges::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges)
  return &ranges_;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& WriterConfiguration_ChannelConfiguration_ChannelRanges::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& WriterConfiguration_ChannelConfiguration_ChannelRanges::ranges(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges)
  return _internal_ranges(index);
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* WriterConfiguration_ChannelConfiguration_ChannelRanges::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* WriterConfiguration_ChannelConfiguration_ChannelRanges::add_ranges() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* _add = _internal_add_ranges();
  // @@protoc_insertion_point(field_add:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >&
WriterConfiguration_ChannelConfiguration_ChannelRanges::ranges() const {
  // @@protoc_insertion_point(field_list:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// WriterConfiguration_ChannelConfiguration

// bool all_channels = 1;
inline bool WriterConfiguration_ChannelConfiguration::_internal_has_all_channels() const {
  return channels_case() == kAllChannels;
}
inline bool WriterConfiguration_ChannelConfiguration::has_all_channels() const {
  return _internal_has_all_channels();
}
inline void WriterConfiguration_ChannelConfiguration::set_has_all_channels() {
  _oneof_case_[0] = kAllChannels;
}
inline void WriterConfiguration_ChannelConfiguration::clear_all_channels() {
  if (_internal_has_all_channels()) {
    channels_.all_channels_ = false;
    clear_has_channels();
  }
}
inline bool WriterConfiguration_ChannelConfiguration::_internal_all_channels() const {
  if (_internal_has_all_channels()) {
    return channels_.all_channels_;
  }
  return false;
}
inline void WriterConfiguration_ChannelConfiguration::_internal_set_all_channels(bool value) {
  if (!_internal_has_all_channels()) {
    clear_channels();
    set_has_all_channels();
  }
  channels_.all_channels_ = value;
}
inline bool WriterConfiguration_ChannelConfiguration::all_channels() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.all_channels)
  return _internal_all_channels();
}
inline void WriterConfiguration_ChannelConfiguration::set_all_channels(bool value) {
  _internal_set_all_channels(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.all_channels)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList specific_channels = 2;
inline bool WriterConfiguration_ChannelConfiguration::_internal_has_specific_channels() const {
  return channels_case() == kSpecificChannels;
}
inline bool WriterConfiguration_ChannelConfiguration::has_specific_channels() const {
  return _internal_has_specific_channels();
}
inline void WriterConfiguration_ChannelConfiguration::set_has_specific_channels() {
  _oneof_case_[0] = kSpecificChannels;
}
inline void WriterConfiguration_ChannelConfiguration::clear_specific_channels() {
  if (_internal_has_specific_channels()) {
    if (GetArenaForAllocation() == nullptr) {
      delete channels_.specific_channels_;
    }
    clear_has_channels();
  }
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* WriterConfiguration_ChannelConfiguration::release_specific_channels() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
  if (_internal_has_specific_channels()) {
    clear_has_channels();
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* temp = channels_.specific_channels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    channels_.specific_channels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList& WriterConfiguration_ChannelConfiguration::_internal_specific_channels() const {
  return _internal_has_specific_channels()
      ? *channels_.specific_channels_
      : reinterpret_cast< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList&>(::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_ChannelList_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList& WriterConfiguration_ChannelConfiguration::specific_channels() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
  return _internal_specific_channels();
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* WriterConfiguration_ChannelConfiguration::unsafe_arena_release_specific_channels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
  if (_internal_has_specific_channels()) {
    clear_has_channels();
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* temp = channels_.specific_channels_;
    channels_.specific_channels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriterConfiguration_ChannelConfiguration::unsafe_arena_set_allocated_specific_channels(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* specific_channels) {
  clear_channels();
  if (specific_channels) {
    set_has_specific_channels();
    channels_.specific_channels_ = specific_channels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* WriterConfiguration_ChannelConfiguration::_internal_mutable_specific_channels() {
  if (!_internal_has_specific_channels()) {
    clear_channels();
    set_has_specific_channels();
    channels_.specific_channels_ = CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList >(GetArenaForAllocation());
  }
  return channels_.specific_channels_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* WriterConfiguration_ChannelConfiguration::mutable_specific_channels() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* _msg = _internal_mutable_specific_channels();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
  return _msg;
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges channel_ranges = 3;
inline bool WriterConfiguration_ChannelConfiguration::_internal_has_channel_ranges() const {
  return channels_case() == kChannelRanges;
}
inline bool WriterConfiguration_ChannelConfiguration::has_channel_ranges() const {
  return _internal_has_channel_ranges();
}
inline void WriterConfiguration_ChannelConfiguration::set_has_channel_ranges() {
  _oneof_case_[0] = kChannelRanges;
}
inline void WriterConfiguration_ChannelConfiguration::clear_channel_ranges() {
  if (_internal_has_channel_ranges()) {
    if (GetArenaForAllocation() == nullptr) {
      delete channels_.channel_ranges_;
    }
    clear_has_channels();
  }
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* WriterConfiguration_ChannelConfiguration::release_channel_ranges() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
  if (_internal_has_channel_ranges()) {
    clear_has_channels();
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* temp = channels_.channel_ranges_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    channels_.channel_ranges_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges& WriterConfiguration_ChannelConfiguration::_internal_channel_ranges() const {
  return _internal_has_channel_ranges()
      ? *channels_.channel_ranges_
      : reinterpret_cast< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges&>(::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_ChannelRanges_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges& WriterConfiguration_ChannelConfiguration::channel_ranges() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
  return _internal_channel_ranges();
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* WriterConfiguration_ChannelConfiguration::unsafe_arena_release_channel_ranges() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
  if (_internal_has_channel_ranges()) {
    clear_has_channels();
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* temp = channels_.channel_ranges_;
    channels_.channel_ranges_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriterConfiguration_ChannelConfiguration::unsafe_arena_set_allocated_channel_ranges(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* channel_ranges) {
  clear_channels();
  if (channel_ranges) {
    set_has_channel_ranges();
    channels_.channel_ranges_ = channel_ranges;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* WriterConfiguration_ChannelConfiguration::_internal_mutable_channel_ranges() {
  if (!_internal_has_channel_ranges()) {
    clear_channels();
    set_has_channel_ranges();
    channels_.channel_ranges_ = CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges >(GetArenaForAllocation());
  }
  return channels_.channel_ranges_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* WriterConfiguration_ChannelConfiguration::mutable_channel_ranges() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* _msg = _internal_mutable_channel_ranges();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
  return _msg;
}

inline bool WriterConfiguration_ChannelConfiguration::has_channels() const {
  return channels_case() != CHANNELS_NOT_SET;
}
inline void WriterConfiguration_ChannelConfiguration::clear_has_channels() {
  _oneof_case_[0] = CHANNELS_NOT_SET;
}
inline WriterConfiguration_ChannelConfiguration::ChannelsCase WriterConfiguration_ChannelConfiguration::channels_case() const {
  return WriterConfiguration_ChannelConfiguration::ChannelsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WriterConfiguration_ReadFast5Configuration

// int32 compression_level = 1;
inline void WriterConfiguration_ReadFast5Configuration::clear_compression_level() {
  compression_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ReadFast5Configuration::_internal_compression_level() const {
  return compression_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_ReadFast5Configuration::compression_level() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.compression_level)
  return _internal_compression_level();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  compression_level_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compression_level(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.compression_level)
}

// .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 14;
inline void WriterConfiguration_ReadFast5Configuration::clear_compression_type() {
  compression_type_ = 0;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType WriterConfiguration_ReadFast5Configuration::_internal_compression_type() const {
  return static_cast< ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType >(compression_type_);
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType WriterConfiguration_ReadFast5Configuration::compression_type() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.compression_type)
  return _internal_compression_type();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value) {
  
  compression_type_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value) {
  _internal_set_compression_type(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.compression_type)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 2;
inline bool WriterConfiguration_ReadFast5Configuration::_internal_has_raw() const {
  return this != internal_default_instance() && raw_ != nullptr;
}
inline bool WriterConfiguration_ReadFast5Configuration::has_raw() const {
  return _internal_has_raw();
}
inline void WriterConfiguration_ReadFast5Configuration::clear_raw() {
  if (GetArenaForAllocation() == nullptr && raw_ != nullptr) {
    delete raw_;
  }
  raw_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::_internal_raw() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::raw() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw)
  return _internal_raw();
}
inline void WriterConfiguration_ReadFast5Configuration::unsafe_arena_set_allocated_raw(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_);
  }
  raw_ = raw;
  if (raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::release_raw() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = raw_;
  raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::unsafe_arena_release_raw() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = raw_;
  raw_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::_internal_mutable_raw() {
  
  if (raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    raw_ = p;
  }
  return raw_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::mutable_raw() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw)
  return _msg;
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_raw(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete raw_;
  }
  if (raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(raw);
    if (message_arena != submessage_arena) {
      raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw, submessage_arena);
    }
    
  } else {
    
  }
  raw_ = raw;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.raw)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration fastq = 3;
inline bool WriterConfiguration_ReadFast5Configuration::_internal_has_fastq() const {
  return this != internal_default_instance() && fastq_ != nullptr;
}
inline bool WriterConfiguration_ReadFast5Configuration::has_fastq() const {
  return _internal_has_fastq();
}
inline void WriterConfiguration_ReadFast5Configuration::clear_fastq() {
  if (GetArenaForAllocation() == nullptr && fastq_ != nullptr) {
    delete fastq_;
  }
  fastq_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::_internal_fastq() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = fastq_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::fastq() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq)
  return _internal_fastq();
}
inline void WriterConfiguration_ReadFast5Configuration::unsafe_arena_set_allocated_fastq(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* fastq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fastq_);
  }
  fastq_ = fastq;
  if (fastq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::release_fastq() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = fastq_;
  fastq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::unsafe_arena_release_fastq() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = fastq_;
  fastq_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::_internal_mutable_fastq() {
  
  if (fastq_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    fastq_ = p;
  }
  return fastq_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::mutable_fastq() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_fastq();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq)
  return _msg;
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_fastq(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* fastq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fastq_;
  }
  if (fastq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(fastq);
    if (message_arena != submessage_arena) {
      fastq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fastq, submessage_arena);
    }
    
  } else {
    
  }
  fastq_ = fastq;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration trace_table = 11;
inline bool WriterConfiguration_ReadFast5Configuration::_internal_has_trace_table() const {
  return this != internal_default_instance() && trace_table_ != nullptr;
}
inline bool WriterConfiguration_ReadFast5Configuration::has_trace_table() const {
  return _internal_has_trace_table();
}
inline void WriterConfiguration_ReadFast5Configuration::clear_trace_table() {
  if (GetArenaForAllocation() == nullptr && trace_table_ != nullptr) {
    delete trace_table_;
  }
  trace_table_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::_internal_trace_table() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = trace_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::trace_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table)
  return _internal_trace_table();
}
inline void WriterConfiguration_ReadFast5Configuration::unsafe_arena_set_allocated_trace_table(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* trace_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_table_);
  }
  trace_table_ = trace_table;
  if (trace_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::release_trace_table() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = trace_table_;
  trace_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::unsafe_arena_release_trace_table() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = trace_table_;
  trace_table_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::_internal_mutable_trace_table() {
  
  if (trace_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    trace_table_ = p;
  }
  return trace_table_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::mutable_trace_table() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_trace_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table)
  return _msg;
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_trace_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* trace_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trace_table_;
  }
  if (trace_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(trace_table);
    if (message_arena != submessage_arena) {
      trace_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_table, submessage_arena);
    }
    
  } else {
    
  }
  trace_table_ = trace_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.trace_table)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration move_table = 12;
inline bool WriterConfiguration_ReadFast5Configuration::_internal_has_move_table() const {
  return this != internal_default_instance() && move_table_ != nullptr;
}
inline bool WriterConfiguration_ReadFast5Configuration::has_move_table() const {
  return _internal_has_move_table();
}
inline void WriterConfiguration_ReadFast5Configuration::clear_move_table() {
  if (GetArenaForAllocation() == nullptr && move_table_ != nullptr) {
    delete move_table_;
  }
  move_table_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::_internal_move_table() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = move_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::move_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table)
  return _internal_move_table();
}
inline void WriterConfiguration_ReadFast5Configuration::unsafe_arena_set_allocated_move_table(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* move_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_table_);
  }
  move_table_ = move_table;
  if (move_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::release_move_table() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = move_table_;
  move_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::unsafe_arena_release_move_table() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = move_table_;
  move_table_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::_internal_mutable_move_table() {
  
  if (move_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    move_table_ = p;
  }
  return move_table_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::mutable_move_table() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_move_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table)
  return _msg;
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_move_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* move_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete move_table_;
  }
  if (move_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(move_table);
    if (message_arena != submessage_arena) {
      move_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_table, submessage_arena);
    }
    
  } else {
    
  }
  move_table_ = move_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.move_table)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration modifications_table = 13;
inline bool WriterConfiguration_ReadFast5Configuration::_internal_has_modifications_table() const {
  return this != internal_default_instance() && modifications_table_ != nullptr;
}
inline bool WriterConfiguration_ReadFast5Configuration::has_modifications_table() const {
  return _internal_has_modifications_table();
}
inline void WriterConfiguration_ReadFast5Configuration::clear_modifications_table() {
  if (GetArenaForAllocation() == nullptr && modifications_table_ != nullptr) {
    delete modifications_table_;
  }
  modifications_table_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::_internal_modifications_table() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = modifications_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFast5Configuration::modifications_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table)
  return _internal_modifications_table();
}
inline void WriterConfiguration_ReadFast5Configuration::unsafe_arena_set_allocated_modifications_table(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* modifications_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modifications_table_);
  }
  modifications_table_ = modifications_table;
  if (modifications_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::release_modifications_table() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = modifications_table_;
  modifications_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::unsafe_arena_release_modifications_table() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = modifications_table_;
  modifications_table_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::_internal_mutable_modifications_table() {
  
  if (modifications_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    modifications_table_ = p;
  }
  return modifications_table_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFast5Configuration::mutable_modifications_table() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_modifications_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table)
  return _msg;
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_modifications_table(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* modifications_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete modifications_table_;
  }
  if (modifications_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(modifications_table);
    if (message_arena != submessage_arena) {
      modifications_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modifications_table, submessage_arena);
    }
    
  } else {
    
  }
  modifications_table_ = modifications_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.modifications_table)
}

// bool disable_writing_passed_reads = 5;
inline void WriterConfiguration_ReadFast5Configuration::clear_disable_writing_passed_reads() {
  disable_writing_passed_reads_ = false;
}
inline bool WriterConfiguration_ReadFast5Configuration::_internal_disable_writing_passed_reads() const {
  return disable_writing_passed_reads_;
}
inline bool WriterConfiguration_ReadFast5Configuration::disable_writing_passed_reads() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_passed_reads)
  return _internal_disable_writing_passed_reads();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_disable_writing_passed_reads(bool value) {
  
  disable_writing_passed_reads_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_disable_writing_passed_reads(bool value) {
  _internal_set_disable_writing_passed_reads(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_passed_reads)
}

// bool disable_writing_failed_reads = 6;
inline void WriterConfiguration_ReadFast5Configuration::clear_disable_writing_failed_reads() {
  disable_writing_failed_reads_ = false;
}
inline bool WriterConfiguration_ReadFast5Configuration::_internal_disable_writing_failed_reads() const {
  return disable_writing_failed_reads_;
}
inline bool WriterConfiguration_ReadFast5Configuration::disable_writing_failed_reads() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_failed_reads)
  return _internal_disable_writing_failed_reads();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_disable_writing_failed_reads(bool value) {
  
  disable_writing_failed_reads_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_disable_writing_failed_reads(bool value) {
  _internal_set_disable_writing_failed_reads(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_failed_reads)
}

// bool disable_writing_force_skipped_reads = 7;
inline void WriterConfiguration_ReadFast5Configuration::clear_disable_writing_force_skipped_reads() {
  disable_writing_force_skipped_reads_ = false;
}
inline bool WriterConfiguration_ReadFast5Configuration::_internal_disable_writing_force_skipped_reads() const {
  return disable_writing_force_skipped_reads_;
}
inline bool WriterConfiguration_ReadFast5Configuration::disable_writing_force_skipped_reads() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_force_skipped_reads)
  return _internal_disable_writing_force_skipped_reads();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_disable_writing_force_skipped_reads(bool value) {
  
  disable_writing_force_skipped_reads_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_disable_writing_force_skipped_reads(bool value) {
  _internal_set_disable_writing_force_skipped_reads(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.disable_writing_force_skipped_reads)
}

// string file_pattern = 8;
inline void WriterConfiguration_ReadFast5Configuration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadFast5Configuration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadFast5Configuration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern)
}
inline std::string* WriterConfiguration_ReadFast5Configuration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadFast5Configuration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFast5Configuration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFast5Configuration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern)
}

// string fastq_header_pattern = 9;
inline void WriterConfiguration_ReadFast5Configuration::clear_fastq_header_pattern() {
  fastq_header_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadFast5Configuration::fastq_header_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern)
  return _internal_fastq_header_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadFast5Configuration::set_fastq_header_pattern(ArgT0&& arg0, ArgT... args) {
 
 fastq_header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern)
}
inline std::string* WriterConfiguration_ReadFast5Configuration::mutable_fastq_header_pattern() {
  std::string* _s = _internal_mutable_fastq_header_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadFast5Configuration::_internal_fastq_header_pattern() const {
  return fastq_header_pattern_.Get();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_fastq_header_pattern(const std::string& value) {
  
  fastq_header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFast5Configuration::_internal_mutable_fastq_header_pattern() {
  
  return fastq_header_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFast5Configuration::release_fastq_header_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern)
  return fastq_header_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadFast5Configuration::set_allocated_fastq_header_pattern(std::string* fastq_header_pattern) {
  if (fastq_header_pattern != nullptr) {
    
  } else {
    
  }
  fastq_header_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fastq_header_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern)
}

// uint32 batch_count = 10;
inline void WriterConfiguration_ReadFast5Configuration::clear_batch_count() {
  batch_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadFast5Configuration::_internal_batch_count() const {
  return batch_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadFast5Configuration::batch_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.batch_count)
  return _internal_batch_count();
}
inline void WriterConfiguration_ReadFast5Configuration::_internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_count_ = value;
}
inline void WriterConfiguration_ReadFast5Configuration::set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.batch_count)
}

// -------------------------------------------------------------------

// WriterConfiguration_ReadFastqConfiguration

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
inline bool WriterConfiguration_ReadFastqConfiguration::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool WriterConfiguration_ReadFastqConfiguration::has_enable() const {
  return _internal_has_enable();
}
inline void WriterConfiguration_ReadFastqConfiguration::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFastqConfiguration::_internal_enable() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadFastqConfiguration::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable)
  return _internal_enable();
}
inline void WriterConfiguration_ReadFastqConfiguration::unsafe_arena_set_allocated_enable(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFastqConfiguration::release_enable() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFastqConfiguration::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFastqConfiguration::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadFastqConfiguration::mutable_enable() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable)
  return _msg;
}
inline void WriterConfiguration_ReadFastqConfiguration::set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enable_;
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.enable)
}

// string file_pattern = 2;
inline void WriterConfiguration_ReadFastqConfiguration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadFastqConfiguration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadFastqConfiguration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern)
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadFastqConfiguration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_ReadFastqConfiguration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadFastqConfiguration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern)
}

// string header_pattern = 3;
inline void WriterConfiguration_ReadFastqConfiguration::clear_header_pattern() {
  header_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadFastqConfiguration::header_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern)
  return _internal_header_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadFastqConfiguration::set_header_pattern(ArgT0&& arg0, ArgT... args) {
 
 header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern)
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::mutable_header_pattern() {
  std::string* _s = _internal_mutable_header_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadFastqConfiguration::_internal_header_pattern() const {
  return header_pattern_.Get();
}
inline void WriterConfiguration_ReadFastqConfiguration::_internal_set_header_pattern(const std::string& value) {
  
  header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::_internal_mutable_header_pattern() {
  
  return header_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadFastqConfiguration::release_header_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern)
  return header_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadFastqConfiguration::set_allocated_header_pattern(std::string* header_pattern) {
  if (header_pattern != nullptr) {
    
  } else {
    
  }
  header_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern)
}

// uint32 batch_count = 4;
inline void WriterConfiguration_ReadFastqConfiguration::clear_batch_count() {
  batch_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadFastqConfiguration::_internal_batch_count() const {
  return batch_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadFastqConfiguration::batch_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.batch_count)
  return _internal_batch_count();
}
inline void WriterConfiguration_ReadFastqConfiguration::_internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_count_ = value;
}
inline void WriterConfiguration_ReadFastqConfiguration::set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.batch_count)
}

// bool compression = 5;
inline void WriterConfiguration_ReadFastqConfiguration::clear_compression() {
  compression_ = false;
}
inline bool WriterConfiguration_ReadFastqConfiguration::_internal_compression() const {
  return compression_;
}
inline bool WriterConfiguration_ReadFastqConfiguration::compression() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.compression)
  return _internal_compression();
}
inline void WriterConfiguration_ReadFastqConfiguration::_internal_set_compression(bool value) {
  
  compression_ = value;
}
inline void WriterConfiguration_ReadFastqConfiguration::set_compression(bool value) {
  _internal_set_compression(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.compression)
}

// -------------------------------------------------------------------

// WriterConfiguration_ReadBamConfiguration

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
inline bool WriterConfiguration_ReadBamConfiguration::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool WriterConfiguration_ReadBamConfiguration::has_enable() const {
  return _internal_has_enable();
}
inline void WriterConfiguration_ReadBamConfiguration::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadBamConfiguration::_internal_enable() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadBamConfiguration::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable)
  return _internal_enable();
}
inline void WriterConfiguration_ReadBamConfiguration::unsafe_arena_set_allocated_enable(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadBamConfiguration::release_enable() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadBamConfiguration::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadBamConfiguration::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadBamConfiguration::mutable_enable() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable)
  return _msg;
}
inline void WriterConfiguration_ReadBamConfiguration::set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enable_;
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.enable)
}

// string file_pattern = 2;
inline void WriterConfiguration_ReadBamConfiguration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadBamConfiguration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadBamConfiguration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern)
}
inline std::string* WriterConfiguration_ReadBamConfiguration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadBamConfiguration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_ReadBamConfiguration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadBamConfiguration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadBamConfiguration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadBamConfiguration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern)
}

// uint32 batch_count = 3;
inline void WriterConfiguration_ReadBamConfiguration::clear_batch_count() {
  batch_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadBamConfiguration::_internal_batch_count() const {
  return batch_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadBamConfiguration::batch_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.batch_count)
  return _internal_batch_count();
}
inline void WriterConfiguration_ReadBamConfiguration::_internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_count_ = value;
}
inline void WriterConfiguration_ReadBamConfiguration::set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.batch_count)
}

// -------------------------------------------------------------------

// WriterConfiguration_ReadProtobufConfiguration

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
inline bool WriterConfiguration_ReadProtobufConfiguration::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool WriterConfiguration_ReadProtobufConfiguration::has_enable() const {
  return _internal_has_enable();
}
inline void WriterConfiguration_ReadProtobufConfiguration::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadProtobufConfiguration::_internal_enable() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_ReadProtobufConfiguration::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable)
  return _internal_enable();
}
inline void WriterConfiguration_ReadProtobufConfiguration::unsafe_arena_set_allocated_enable(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadProtobufConfiguration::release_enable() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadProtobufConfiguration::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadProtobufConfiguration::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_ReadProtobufConfiguration::mutable_enable() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable)
  return _msg;
}
inline void WriterConfiguration_ReadProtobufConfiguration::set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enable_;
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.enable)
}

// string file_pattern = 2;
inline void WriterConfiguration_ReadProtobufConfiguration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReadProtobufConfiguration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReadProtobufConfiguration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern)
}
inline std::string* WriterConfiguration_ReadProtobufConfiguration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReadProtobufConfiguration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_ReadProtobufConfiguration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadProtobufConfiguration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReadProtobufConfiguration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReadProtobufConfiguration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern)
}

// uint32 batch_count = 3;
inline void WriterConfiguration_ReadProtobufConfiguration::clear_batch_count() {
  batch_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadProtobufConfiguration::_internal_batch_count() const {
  return batch_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriterConfiguration_ReadProtobufConfiguration::batch_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.batch_count)
  return _internal_batch_count();
}
inline void WriterConfiguration_ReadProtobufConfiguration::_internal_set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_count_ = value;
}
inline void WriterConfiguration_ReadProtobufConfiguration::set_batch_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.batch_count)
}

// -------------------------------------------------------------------

// WriterConfiguration_SequencingSummaryConfiguration

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
inline bool WriterConfiguration_SequencingSummaryConfiguration::_internal_has_enable() const {
  return this != internal_default_instance() && enable_ != nullptr;
}
inline bool WriterConfiguration_SequencingSummaryConfiguration::has_enable() const {
  return _internal_has_enable();
}
inline void WriterConfiguration_SequencingSummaryConfiguration::clear_enable() {
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_SequencingSummaryConfiguration::_internal_enable() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = enable_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_SequencingSummaryConfiguration::enable() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable)
  return _internal_enable();
}
inline void WriterConfiguration_SequencingSummaryConfiguration::unsafe_arena_set_allocated_enable(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_);
  }
  enable_ = enable;
  if (enable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_SequencingSummaryConfiguration::release_enable() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_SequencingSummaryConfiguration::unsafe_arena_release_enable() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_SequencingSummaryConfiguration::_internal_mutable_enable() {
  
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    enable_ = p;
  }
  return enable_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_SequencingSummaryConfiguration::mutable_enable() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_enable();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable)
  return _msg;
}
inline void WriterConfiguration_SequencingSummaryConfiguration::set_allocated_enable(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enable_;
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(enable);
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    
  } else {
    
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.enable)
}

// string file_pattern = 2;
inline void WriterConfiguration_SequencingSummaryConfiguration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_SequencingSummaryConfiguration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_SequencingSummaryConfiguration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern)
}
inline std::string* WriterConfiguration_SequencingSummaryConfiguration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_SequencingSummaryConfiguration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_SequencingSummaryConfiguration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_SequencingSummaryConfiguration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_SequencingSummaryConfiguration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_SequencingSummaryConfiguration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern)
}

// -------------------------------------------------------------------

// WriterConfiguration_BulkConfiguration

// int32 compression_level = 2;
inline void WriterConfiguration_BulkConfiguration::clear_compression_level() {
  compression_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_BulkConfiguration::_internal_compression_level() const {
  return compression_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriterConfiguration_BulkConfiguration::compression_level() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.compression_level)
  return _internal_compression_level();
}
inline void WriterConfiguration_BulkConfiguration::_internal_set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  compression_level_ = value;
}
inline void WriterConfiguration_BulkConfiguration::set_compression_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compression_level(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.compression_level)
}

// .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 13;
inline void WriterConfiguration_BulkConfiguration::clear_compression_type() {
  compression_type_ = 0;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType WriterConfiguration_BulkConfiguration::_internal_compression_type() const {
  return static_cast< ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType >(compression_type_);
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType WriterConfiguration_BulkConfiguration::compression_type() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.compression_type)
  return _internal_compression_type();
}
inline void WriterConfiguration_BulkConfiguration::_internal_set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value) {
  
  compression_type_ = value;
}
inline void WriterConfiguration_BulkConfiguration::set_compression_type(::minknow_api::analysis_configuration::WriterConfiguration_CompressionType value) {
  _internal_set_compression_type(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.compression_type)
}

// string file_pattern = 14;
inline void WriterConfiguration_BulkConfiguration::clear_file_pattern() {
  file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_BulkConfiguration::file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern)
  return _internal_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_BulkConfiguration::set_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern)
}
inline std::string* WriterConfiguration_BulkConfiguration::mutable_file_pattern() {
  std::string* _s = _internal_mutable_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_BulkConfiguration::_internal_file_pattern() const {
  return file_pattern_.Get();
}
inline void WriterConfiguration_BulkConfiguration::_internal_set_file_pattern(const std::string& value) {
  
  file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_BulkConfiguration::_internal_mutable_file_pattern() {
  
  return file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_BulkConfiguration::release_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern)
  return file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_file_pattern(std::string* file_pattern) {
  if (file_pattern != nullptr) {
    
  } else {
    
  }
  file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 3;
inline bool WriterConfiguration_BulkConfiguration::_internal_has_raw() const {
  return this != internal_default_instance() && raw_ != nullptr;
}
inline bool WriterConfiguration_BulkConfiguration::has_raw() const {
  return _internal_has_raw();
}
inline void WriterConfiguration_BulkConfiguration::clear_raw() {
  if (GetArenaForAllocation() == nullptr && raw_ != nullptr) {
    delete raw_;
  }
  raw_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::_internal_raw() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::raw() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw)
  return _internal_raw();
}
inline void WriterConfiguration_BulkConfiguration::unsafe_arena_set_allocated_raw(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_);
  }
  raw_ = raw;
  if (raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::release_raw() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = raw_;
  raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::unsafe_arena_release_raw() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = raw_;
  raw_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::_internal_mutable_raw() {
  
  if (raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    raw_ = p;
  }
  return raw_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::mutable_raw() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw)
  return _msg;
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_raw(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete raw_;
  }
  if (raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(raw);
    if (message_arena != submessage_arena) {
      raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw, submessage_arena);
    }
    
  } else {
    
  }
  raw_ = raw;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.raw)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration events = 4;
inline bool WriterConfiguration_BulkConfiguration::_internal_has_events() const {
  return this != internal_default_instance() && events_ != nullptr;
}
inline bool WriterConfiguration_BulkConfiguration::has_events() const {
  return _internal_has_events();
}
inline void WriterConfiguration_BulkConfiguration::clear_events() {
  if (GetArenaForAllocation() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::_internal_events() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = events_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::events() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events)
  return _internal_events();
}
inline void WriterConfiguration_BulkConfiguration::unsafe_arena_set_allocated_events(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* events) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(events_);
  }
  events_ = events;
  if (events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::release_events() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = events_;
  events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::unsafe_arena_release_events() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = events_;
  events_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::_internal_mutable_events() {
  
  if (events_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    events_ = p;
  }
  return events_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::mutable_events() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_events();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events)
  return _msg;
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_events(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete events_;
  }
  if (events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(events);
    if (message_arena != submessage_arena) {
      events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, events, submessage_arena);
    }
    
  } else {
    
  }
  events_ = events;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.events)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration reads = 5;
inline bool WriterConfiguration_BulkConfiguration::_internal_has_reads() const {
  return this != internal_default_instance() && reads_ != nullptr;
}
inline bool WriterConfiguration_BulkConfiguration::has_reads() const {
  return _internal_has_reads();
}
inline void WriterConfiguration_BulkConfiguration::clear_reads() {
  if (GetArenaForAllocation() == nullptr && reads_ != nullptr) {
    delete reads_;
  }
  reads_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::_internal_reads() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = reads_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::reads() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads)
  return _internal_reads();
}
inline void WriterConfiguration_BulkConfiguration::unsafe_arena_set_allocated_reads(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* reads) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reads_);
  }
  reads_ = reads;
  if (reads) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::release_reads() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = reads_;
  reads_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::unsafe_arena_release_reads() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = reads_;
  reads_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::_internal_mutable_reads() {
  
  if (reads_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    reads_ = p;
  }
  return reads_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::mutable_reads() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_reads();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads)
  return _msg;
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_reads(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* reads) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reads_;
  }
  if (reads) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(reads);
    if (message_arena != submessage_arena) {
      reads = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reads, submessage_arena);
    }
    
  } else {
    
  }
  reads_ = reads;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.reads)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration multiplex = 6;
inline bool WriterConfiguration_BulkConfiguration::_internal_has_multiplex() const {
  return this != internal_default_instance() && multiplex_ != nullptr;
}
inline bool WriterConfiguration_BulkConfiguration::has_multiplex() const {
  return _internal_has_multiplex();
}
inline void WriterConfiguration_BulkConfiguration::clear_multiplex() {
  if (GetArenaForAllocation() == nullptr && multiplex_ != nullptr) {
    delete multiplex_;
  }
  multiplex_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::_internal_multiplex() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = multiplex_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::multiplex() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex)
  return _internal_multiplex();
}
inline void WriterConfiguration_BulkConfiguration::unsafe_arena_set_allocated_multiplex(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* multiplex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplex_);
  }
  multiplex_ = multiplex;
  if (multiplex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::release_multiplex() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = multiplex_;
  multiplex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::unsafe_arena_release_multiplex() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = multiplex_;
  multiplex_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::_internal_mutable_multiplex() {
  
  if (multiplex_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    multiplex_ = p;
  }
  return multiplex_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::mutable_multiplex() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_multiplex();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex)
  return _msg;
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_multiplex(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* multiplex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete multiplex_;
  }
  if (multiplex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(multiplex);
    if (message_arena != submessage_arena) {
      multiplex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplex, submessage_arena);
    }
    
  } else {
    
  }
  multiplex_ = multiplex;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.multiplex)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channel_states = 7;
inline bool WriterConfiguration_BulkConfiguration::_internal_has_channel_states() const {
  return this != internal_default_instance() && channel_states_ != nullptr;
}
inline bool WriterConfiguration_BulkConfiguration::has_channel_states() const {
  return _internal_has_channel_states();
}
inline void WriterConfiguration_BulkConfiguration::clear_channel_states() {
  if (GetArenaForAllocation() == nullptr && channel_states_ != nullptr) {
    delete channel_states_;
  }
  channel_states_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::_internal_channel_states() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* p = channel_states_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& WriterConfiguration_BulkConfiguration::channel_states() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states)
  return _internal_channel_states();
}
inline void WriterConfiguration_BulkConfiguration::unsafe_arena_set_allocated_channel_states(
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channel_states) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_states_);
  }
  channel_states_ = channel_states;
  if (channel_states) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::release_channel_states() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = channel_states_;
  channel_states_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::unsafe_arena_release_channel_states() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = channel_states_;
  channel_states_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::_internal_mutable_channel_states() {
  
  if (channel_states_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>(GetArenaForAllocation());
    channel_states_ = p;
  }
  return channel_states_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* WriterConfiguration_BulkConfiguration::mutable_channel_states() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_channel_states();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states)
  return _msg;
}
inline void WriterConfiguration_BulkConfiguration::set_allocated_channel_states(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channel_states) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_states_;
  }
  if (channel_states) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration>::GetOwningArena(channel_states);
    if (message_arena != submessage_arena) {
      channel_states = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_states, submessage_arena);
    }
    
  } else {
    
  }
  channel_states_ = channel_states;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.channel_states)
}

// bool device_metadata = 11;
inline void WriterConfiguration_BulkConfiguration::clear_device_metadata() {
  device_metadata_ = false;
}
inline bool WriterConfiguration_BulkConfiguration::_internal_device_metadata() const {
  return device_metadata_;
}
inline bool WriterConfiguration_BulkConfiguration::device_metadata() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.device_metadata)
  return _internal_device_metadata();
}
inline void WriterConfiguration_BulkConfiguration::_internal_set_device_metadata(bool value) {
  
  device_metadata_ = value;
}
inline void WriterConfiguration_BulkConfiguration::set_device_metadata(bool value) {
  _internal_set_device_metadata(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.device_metadata)
}

// bool device_commands = 12;
inline void WriterConfiguration_BulkConfiguration::clear_device_commands() {
  device_commands_ = false;
}
inline bool WriterConfiguration_BulkConfiguration::_internal_device_commands() const {
  return device_commands_;
}
inline bool WriterConfiguration_BulkConfiguration::device_commands() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.device_commands)
  return _internal_device_commands();
}
inline void WriterConfiguration_BulkConfiguration::_internal_set_device_commands(bool value) {
  
  device_commands_ = value;
}
inline void WriterConfiguration_BulkConfiguration::set_device_commands(bool value) {
  _internal_set_device_commands(value);
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.device_commands)
}

// -------------------------------------------------------------------

// WriterConfiguration_ReportConfiguration

// string pdf_report_file_pattern = 1;
inline void WriterConfiguration_ReportConfiguration::clear_pdf_report_file_pattern() {
  pdf_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::pdf_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern)
  return _internal_pdf_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_pdf_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 pdf_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_pdf_report_file_pattern() {
  std::string* _s = _internal_mutable_pdf_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_pdf_report_file_pattern() const {
  return pdf_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_pdf_report_file_pattern(const std::string& value) {
  
  pdf_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_pdf_report_file_pattern() {
  
  return pdf_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_pdf_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern)
  return pdf_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_pdf_report_file_pattern(std::string* pdf_report_file_pattern) {
  if (pdf_report_file_pattern != nullptr) {
    
  } else {
    
  }
  pdf_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pdf_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern)
}

// string markdown_report_file_pattern = 2;
inline void WriterConfiguration_ReportConfiguration::clear_markdown_report_file_pattern() {
  markdown_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::markdown_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern)
  return _internal_markdown_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_markdown_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 markdown_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_markdown_report_file_pattern() {
  std::string* _s = _internal_mutable_markdown_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_markdown_report_file_pattern() const {
  return markdown_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_markdown_report_file_pattern(const std::string& value) {
  
  markdown_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_markdown_report_file_pattern() {
  
  return markdown_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_markdown_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern)
  return markdown_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_markdown_report_file_pattern(std::string* markdown_report_file_pattern) {
  if (markdown_report_file_pattern != nullptr) {
    
  } else {
    
  }
  markdown_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), markdown_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern)
}

// string duty_time_report_file_pattern = 3;
inline void WriterConfiguration_ReportConfiguration::clear_duty_time_report_file_pattern() {
  duty_time_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::duty_time_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern)
  return _internal_duty_time_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_duty_time_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 duty_time_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_duty_time_report_file_pattern() {
  std::string* _s = _internal_mutable_duty_time_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_duty_time_report_file_pattern() const {
  return duty_time_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_duty_time_report_file_pattern(const std::string& value) {
  
  duty_time_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_duty_time_report_file_pattern() {
  
  return duty_time_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_duty_time_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern)
  return duty_time_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_duty_time_report_file_pattern(std::string* duty_time_report_file_pattern) {
  if (duty_time_report_file_pattern != nullptr) {
    
  } else {
    
  }
  duty_time_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duty_time_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern)
}

// string throughput_report_file_pattern = 4;
inline void WriterConfiguration_ReportConfiguration::clear_throughput_report_file_pattern() {
  throughput_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::throughput_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern)
  return _internal_throughput_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_throughput_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 throughput_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_throughput_report_file_pattern() {
  std::string* _s = _internal_mutable_throughput_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_throughput_report_file_pattern() const {
  return throughput_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_throughput_report_file_pattern(const std::string& value) {
  
  throughput_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_throughput_report_file_pattern() {
  
  return throughput_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_throughput_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern)
  return throughput_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_throughput_report_file_pattern(std::string* throughput_report_file_pattern) {
  if (throughput_report_file_pattern != nullptr) {
    
  } else {
    
  }
  throughput_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), throughput_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern)
}

// string final_summary_report_file_pattern = 5;
inline void WriterConfiguration_ReportConfiguration::clear_final_summary_report_file_pattern() {
  final_summary_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::final_summary_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern)
  return _internal_final_summary_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_final_summary_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 final_summary_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_final_summary_report_file_pattern() {
  std::string* _s = _internal_mutable_final_summary_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_final_summary_report_file_pattern() const {
  return final_summary_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_final_summary_report_file_pattern(const std::string& value) {
  
  final_summary_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_final_summary_report_file_pattern() {
  
  return final_summary_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_final_summary_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern)
  return final_summary_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_final_summary_report_file_pattern(std::string* final_summary_report_file_pattern) {
  if (final_summary_report_file_pattern != nullptr) {
    
  } else {
    
  }
  final_summary_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), final_summary_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern)
}

// string barcode_alignment_report_file_pattern = 6;
inline void WriterConfiguration_ReportConfiguration::clear_barcode_alignment_report_file_pattern() {
  barcode_alignment_report_file_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::barcode_alignment_report_file_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern)
  return _internal_barcode_alignment_report_file_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_barcode_alignment_report_file_pattern(ArgT0&& arg0, ArgT... args) {
 
 barcode_alignment_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_barcode_alignment_report_file_pattern() {
  std::string* _s = _internal_mutable_barcode_alignment_report_file_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_barcode_alignment_report_file_pattern() const {
  return barcode_alignment_report_file_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_barcode_alignment_report_file_pattern(const std::string& value) {
  
  barcode_alignment_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_barcode_alignment_report_file_pattern() {
  
  return barcode_alignment_report_file_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_barcode_alignment_report_file_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern)
  return barcode_alignment_report_file_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_barcode_alignment_report_file_pattern(std::string* barcode_alignment_report_file_pattern) {
  if (barcode_alignment_report_file_pattern != nullptr) {
    
  } else {
    
  }
  barcode_alignment_report_file_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), barcode_alignment_report_file_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern)
}

// string custom_report_suffix_pattern = 7;
inline void WriterConfiguration_ReportConfiguration::clear_custom_report_suffix_pattern() {
  custom_report_suffix_pattern_.ClearToEmpty();
}
inline const std::string& WriterConfiguration_ReportConfiguration::custom_report_suffix_pattern() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern)
  return _internal_custom_report_suffix_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriterConfiguration_ReportConfiguration::set_custom_report_suffix_pattern(ArgT0&& arg0, ArgT... args) {
 
 custom_report_suffix_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern)
}
inline std::string* WriterConfiguration_ReportConfiguration::mutable_custom_report_suffix_pattern() {
  std::string* _s = _internal_mutable_custom_report_suffix_pattern();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern)
  return _s;
}
inline const std::string& WriterConfiguration_ReportConfiguration::_internal_custom_report_suffix_pattern() const {
  return custom_report_suffix_pattern_.Get();
}
inline void WriterConfiguration_ReportConfiguration::_internal_set_custom_report_suffix_pattern(const std::string& value) {
  
  custom_report_suffix_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::_internal_mutable_custom_report_suffix_pattern() {
  
  return custom_report_suffix_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriterConfiguration_ReportConfiguration::release_custom_report_suffix_pattern() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern)
  return custom_report_suffix_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriterConfiguration_ReportConfiguration::set_allocated_custom_report_suffix_pattern(std::string* custom_report_suffix_pattern) {
  if (custom_report_suffix_pattern != nullptr) {
    
  } else {
    
  }
  custom_report_suffix_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_report_suffix_pattern,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern)
}

// -------------------------------------------------------------------

// WriterConfiguration

// .minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration read_fast5 = 2;
inline bool WriterConfiguration::_internal_has_read_fast5() const {
  return this != internal_default_instance() && read_fast5_ != nullptr;
}
inline bool WriterConfiguration::has_read_fast5() const {
  return _internal_has_read_fast5();
}
inline void WriterConfiguration::clear_read_fast5() {
  if (GetArenaForAllocation() == nullptr && read_fast5_ != nullptr) {
    delete read_fast5_;
  }
  read_fast5_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration& WriterConfiguration::_internal_read_fast5() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* p = read_fast5_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ReadFast5Configuration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration& WriterConfiguration::read_fast5() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.read_fast5)
  return _internal_read_fast5();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_read_fast5(
    ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* read_fast5) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_fast5_);
  }
  read_fast5_ = read_fast5;
  if (read_fast5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_fast5)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* WriterConfiguration::release_read_fast5() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* temp = read_fast5_;
  read_fast5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* WriterConfiguration::unsafe_arena_release_read_fast5() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.read_fast5)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* temp = read_fast5_;
  read_fast5_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* WriterConfiguration::_internal_mutable_read_fast5() {
  
  if (read_fast5_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration>(GetArenaForAllocation());
    read_fast5_ = p;
  }
  return read_fast5_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* WriterConfiguration::mutable_read_fast5() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* _msg = _internal_mutable_read_fast5();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.read_fast5)
  return _msg;
}
inline void WriterConfiguration::set_allocated_read_fast5(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* read_fast5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_fast5_;
  }
  if (read_fast5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration>::GetOwningArena(read_fast5);
    if (message_arena != submessage_arena) {
      read_fast5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_fast5, submessage_arena);
    }
    
  } else {
    
  }
  read_fast5_ = read_fast5;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_fast5)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration read_fastq = 3;
inline bool WriterConfiguration::_internal_has_read_fastq() const {
  return this != internal_default_instance() && read_fastq_ != nullptr;
}
inline bool WriterConfiguration::has_read_fastq() const {
  return _internal_has_read_fastq();
}
inline void WriterConfiguration::clear_read_fastq() {
  if (GetArenaForAllocation() == nullptr && read_fastq_ != nullptr) {
    delete read_fastq_;
  }
  read_fastq_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration& WriterConfiguration::_internal_read_fastq() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* p = read_fastq_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ReadFastqConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration& WriterConfiguration::read_fastq() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.read_fastq)
  return _internal_read_fastq();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_read_fastq(
    ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* read_fastq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_fastq_);
  }
  read_fastq_ = read_fastq;
  if (read_fastq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_fastq)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* WriterConfiguration::release_read_fastq() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* temp = read_fastq_;
  read_fastq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* WriterConfiguration::unsafe_arena_release_read_fastq() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.read_fastq)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* temp = read_fastq_;
  read_fastq_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* WriterConfiguration::_internal_mutable_read_fastq() {
  
  if (read_fastq_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration>(GetArenaForAllocation());
    read_fastq_ = p;
  }
  return read_fastq_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* WriterConfiguration::mutable_read_fastq() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* _msg = _internal_mutable_read_fastq();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.read_fastq)
  return _msg;
}
inline void WriterConfiguration::set_allocated_read_fastq(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* read_fastq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_fastq_;
  }
  if (read_fastq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration>::GetOwningArena(read_fastq);
    if (message_arena != submessage_arena) {
      read_fastq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_fastq, submessage_arena);
    }
    
  } else {
    
  }
  read_fastq_ = read_fastq;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_fastq)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration read_bam = 8;
inline bool WriterConfiguration::_internal_has_read_bam() const {
  return this != internal_default_instance() && read_bam_ != nullptr;
}
inline bool WriterConfiguration::has_read_bam() const {
  return _internal_has_read_bam();
}
inline void WriterConfiguration::clear_read_bam() {
  if (GetArenaForAllocation() == nullptr && read_bam_ != nullptr) {
    delete read_bam_;
  }
  read_bam_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration& WriterConfiguration::_internal_read_bam() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* p = read_bam_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ReadBamConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration& WriterConfiguration::read_bam() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.read_bam)
  return _internal_read_bam();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_read_bam(
    ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* read_bam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_bam_);
  }
  read_bam_ = read_bam;
  if (read_bam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_bam)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* WriterConfiguration::release_read_bam() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* temp = read_bam_;
  read_bam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* WriterConfiguration::unsafe_arena_release_read_bam() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.read_bam)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* temp = read_bam_;
  read_bam_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* WriterConfiguration::_internal_mutable_read_bam() {
  
  if (read_bam_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration>(GetArenaForAllocation());
    read_bam_ = p;
  }
  return read_bam_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* WriterConfiguration::mutable_read_bam() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* _msg = _internal_mutable_read_bam();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.read_bam)
  return _msg;
}
inline void WriterConfiguration::set_allocated_read_bam(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* read_bam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_bam_;
  }
  if (read_bam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration>::GetOwningArena(read_bam);
    if (message_arena != submessage_arena) {
      read_bam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_bam, submessage_arena);
    }
    
  } else {
    
  }
  read_bam_ = read_bam;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_bam)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration read_protobuf = 4;
inline bool WriterConfiguration::_internal_has_read_protobuf() const {
  return this != internal_default_instance() && read_protobuf_ != nullptr;
}
inline bool WriterConfiguration::has_read_protobuf() const {
  return _internal_has_read_protobuf();
}
inline void WriterConfiguration::clear_read_protobuf() {
  if (GetArenaForAllocation() == nullptr && read_protobuf_ != nullptr) {
    delete read_protobuf_;
  }
  read_protobuf_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration& WriterConfiguration::_internal_read_protobuf() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* p = read_protobuf_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ReadProtobufConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration& WriterConfiguration::read_protobuf() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.read_protobuf)
  return _internal_read_protobuf();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_read_protobuf(
    ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* read_protobuf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_protobuf_);
  }
  read_protobuf_ = read_protobuf;
  if (read_protobuf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_protobuf)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* WriterConfiguration::release_read_protobuf() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* temp = read_protobuf_;
  read_protobuf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* WriterConfiguration::unsafe_arena_release_read_protobuf() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.read_protobuf)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* temp = read_protobuf_;
  read_protobuf_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* WriterConfiguration::_internal_mutable_read_protobuf() {
  
  if (read_protobuf_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration>(GetArenaForAllocation());
    read_protobuf_ = p;
  }
  return read_protobuf_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* WriterConfiguration::mutable_read_protobuf() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* _msg = _internal_mutable_read_protobuf();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.read_protobuf)
  return _msg;
}
inline void WriterConfiguration::set_allocated_read_protobuf(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* read_protobuf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete read_protobuf_;
  }
  if (read_protobuf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration>::GetOwningArena(read_protobuf);
    if (message_arena != submessage_arena) {
      read_protobuf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_protobuf, submessage_arena);
    }
    
  } else {
    
  }
  read_protobuf_ = read_protobuf;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.read_protobuf)
}

// .minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration sequencing_summary = 5;
inline bool WriterConfiguration::_internal_has_sequencing_summary() const {
  return this != internal_default_instance() && sequencing_summary_ != nullptr;
}
inline bool WriterConfiguration::has_sequencing_summary() const {
  return _internal_has_sequencing_summary();
}
inline void WriterConfiguration::clear_sequencing_summary() {
  if (GetArenaForAllocation() == nullptr && sequencing_summary_ != nullptr) {
    delete sequencing_summary_;
  }
  sequencing_summary_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration& WriterConfiguration::_internal_sequencing_summary() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* p = sequencing_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_SequencingSummaryConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration& WriterConfiguration::sequencing_summary() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary)
  return _internal_sequencing_summary();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_sequencing_summary(
    ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* sequencing_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequencing_summary_);
  }
  sequencing_summary_ = sequencing_summary;
  if (sequencing_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* WriterConfiguration::release_sequencing_summary() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* temp = sequencing_summary_;
  sequencing_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* WriterConfiguration::unsafe_arena_release_sequencing_summary() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* temp = sequencing_summary_;
  sequencing_summary_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* WriterConfiguration::_internal_mutable_sequencing_summary() {
  
  if (sequencing_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration>(GetArenaForAllocation());
    sequencing_summary_ = p;
  }
  return sequencing_summary_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* WriterConfiguration::mutable_sequencing_summary() {
  ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* _msg = _internal_mutable_sequencing_summary();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary)
  return _msg;
}
inline void WriterConfiguration::set_allocated_sequencing_summary(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* sequencing_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sequencing_summary_;
  }
  if (sequencing_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration>::GetOwningArena(sequencing_summary);
    if (message_arena != submessage_arena) {
      sequencing_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequencing_summary, submessage_arena);
    }
    
  } else {
    
  }
  sequencing_summary_ = sequencing_summary;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.sequencing_summary)
}

// .minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration bulk = 6;
inline bool WriterConfiguration::_internal_has_bulk() const {
  return this != internal_default_instance() && bulk_ != nullptr;
}
inline bool WriterConfiguration::has_bulk() const {
  return _internal_has_bulk();
}
inline void WriterConfiguration::clear_bulk() {
  if (GetArenaForAllocation() == nullptr && bulk_ != nullptr) {
    delete bulk_;
  }
  bulk_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration& WriterConfiguration::_internal_bulk() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* p = bulk_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_BulkConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration& WriterConfiguration::bulk() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.bulk)
  return _internal_bulk();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_bulk(
    ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* bulk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_);
  }
  bulk_ = bulk;
  if (bulk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.bulk)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* WriterConfiguration::release_bulk() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* temp = bulk_;
  bulk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* WriterConfiguration::unsafe_arena_release_bulk() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.bulk)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* temp = bulk_;
  bulk_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* WriterConfiguration::_internal_mutable_bulk() {
  
  if (bulk_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration>(GetArenaForAllocation());
    bulk_ = p;
  }
  return bulk_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* WriterConfiguration::mutable_bulk() {
  ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* _msg = _internal_mutable_bulk();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.bulk)
  return _msg;
}
inline void WriterConfiguration::set_allocated_bulk(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* bulk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bulk_;
  }
  if (bulk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration>::GetOwningArena(bulk);
    if (message_arena != submessage_arena) {
      bulk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk, submessage_arena);
    }
    
  } else {
    
  }
  bulk_ = bulk;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.bulk)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration report = 7;
inline bool WriterConfiguration::_internal_has_report() const {
  return this != internal_default_instance() && report_ != nullptr;
}
inline bool WriterConfiguration::has_report() const {
  return _internal_has_report();
}
inline void WriterConfiguration::clear_report() {
  if (GetArenaForAllocation() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration& WriterConfiguration::_internal_report() const {
  const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* p = report_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration&>(
      ::minknow_api::analysis_configuration::_WriterConfiguration_ReportConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration& WriterConfiguration::report() const {
  // @@protoc_insertion_point(field_get:minknow_api.analysis_configuration.WriterConfiguration.report)
  return _internal_report();
}
inline void WriterConfiguration::unsafe_arena_set_allocated_report(
    ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report_);
  }
  report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.report)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* WriterConfiguration::release_report() {
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* temp = report_;
  report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* WriterConfiguration::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:minknow_api.analysis_configuration.WriterConfiguration.report)
  
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* temp = report_;
  report_ = nullptr;
  return temp;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* WriterConfiguration::_internal_mutable_report() {
  
  if (report_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration>(GetArenaForAllocation());
    report_ = p;
  }
  return report_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* WriterConfiguration::mutable_report() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:minknow_api.analysis_configuration.WriterConfiguration.report)
  return _msg;
}
inline void WriterConfiguration::set_allocated_report(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete report_;
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration>::GetOwningArena(report);
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  report_ = report;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.report)
}

// -------------------------------------------------------------------

// SetWriterConfigurationResponse

// -------------------------------------------------------------------

// GetWriterConfigurationRequest

// -------------------------------------------------------------------

// GetReadClassificationsRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetReadClassificationsResponse

// map<int32, string> read_classifications = 1;
inline int GetReadClassificationsResponse::_internal_read_classifications_size() const {
  return read_classifications_.size();
}
inline int GetReadClassificationsResponse::read_classifications_size() const {
  return _internal_read_classifications_size();
}
inline void GetReadClassificationsResponse::clear_read_classifications() {
  read_classifications_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
GetReadClassificationsResponse::_internal_read_classifications() const {
  return read_classifications_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
GetReadClassificationsResponse::read_classifications() const {
  // @@protoc_insertion_point(field_map:minknow_api.analysis_configuration.GetReadClassificationsResponse.read_classifications)
  return _internal_read_classifications();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
GetReadClassificationsResponse::_internal_mutable_read_classifications() {
  return read_classifications_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
GetReadClassificationsResponse::mutable_read_classifications() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.analysis_configuration.GetReadClassificationsResponse.read_classifications)
  return _internal_mutable_read_classifications();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analysis_configuration
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode>() {
  return ::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme>() {
  return ::minknow_api::analysis_configuration::ReadClassificationParams_Scheme_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType>() {
  return ::minknow_api::analysis_configuration::WriterConfiguration_CompressionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fanalysis_5fconfiguration_2eproto
