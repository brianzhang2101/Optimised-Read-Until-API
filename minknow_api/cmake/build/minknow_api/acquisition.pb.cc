// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/acquisition.proto

#include "minknow_api/acquisition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace acquisition {
constexpr StartRequest::StartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dont_wait_for_device_ready_(false)
  , generate_report_(0)

  , send_sequencing_read_metrics_(0)

  , send_basecalling_metrics_(0)

  , purpose_(0)

  , analysis_(0)

  , file_output_(0)

  , generate_final_summary_(0)
{}
struct StartRequestDefaultTypeInternal {
  constexpr StartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartRequestDefaultTypeInternal() {}
  union {
    StartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartRequestDefaultTypeInternal _StartRequest_default_instance_;
constexpr StartResponse::StartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StartResponseDefaultTypeInternal {
  constexpr StartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartResponseDefaultTypeInternal() {}
  union {
    StartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartResponseDefaultTypeInternal _StartResponse_default_instance_;
constexpr StopRequest::StopRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_action_on_stop_(0)

  , wait_until_ready_(false)
  , keep_power_on_(false){}
struct StopRequestDefaultTypeInternal {
  constexpr StopRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopRequestDefaultTypeInternal() {}
  union {
    StopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopRequestDefaultTypeInternal _StopRequest_default_instance_;
constexpr StopResponse::StopResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StopResponseDefaultTypeInternal {
  constexpr StopResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopResponseDefaultTypeInternal() {}
  union {
    StopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopResponseDefaultTypeInternal _StopResponse_default_instance_;
constexpr WatchForStatusChangeRequest::WatchForStatusChangeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_(false){}
struct WatchForStatusChangeRequestDefaultTypeInternal {
  constexpr WatchForStatusChangeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchForStatusChangeRequestDefaultTypeInternal() {}
  union {
    WatchForStatusChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchForStatusChangeRequestDefaultTypeInternal _WatchForStatusChangeRequest_default_instance_;
constexpr WatchForStatusChangeResponse::WatchForStatusChangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct WatchForStatusChangeResponseDefaultTypeInternal {
  constexpr WatchForStatusChangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchForStatusChangeResponseDefaultTypeInternal() {}
  union {
    WatchForStatusChangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchForStatusChangeResponseDefaultTypeInternal _WatchForStatusChangeResponse_default_instance_;
constexpr CurrentStatusRequest::CurrentStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CurrentStatusRequestDefaultTypeInternal {
  constexpr CurrentStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurrentStatusRequestDefaultTypeInternal() {}
  union {
    CurrentStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurrentStatusRequestDefaultTypeInternal _CurrentStatusRequest_default_instance_;
constexpr CurrentStatusResponse::CurrentStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct CurrentStatusResponseDefaultTypeInternal {
  constexpr CurrentStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurrentStatusResponseDefaultTypeInternal() {}
  union {
    CurrentStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurrentStatusResponseDefaultTypeInternal _CurrentStatusResponse_default_instance_;
constexpr GetProgressRequest::GetProgressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetProgressRequestDefaultTypeInternal {
  constexpr GetProgressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProgressRequestDefaultTypeInternal() {}
  union {
    GetProgressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProgressRequestDefaultTypeInternal _GetProgressRequest_default_instance_;
constexpr GetProgressResponse_RawPerChannel::GetProgressResponse_RawPerChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acquired_(uint64_t{0u})
  , processed_(uint64_t{0u}){}
struct GetProgressResponse_RawPerChannelDefaultTypeInternal {
  constexpr GetProgressResponse_RawPerChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProgressResponse_RawPerChannelDefaultTypeInternal() {}
  union {
    GetProgressResponse_RawPerChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProgressResponse_RawPerChannelDefaultTypeInternal _GetProgressResponse_RawPerChannel_default_instance_;
constexpr GetProgressResponse::GetProgressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_per_channel_(nullptr){}
struct GetProgressResponseDefaultTypeInternal {
  constexpr GetProgressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProgressResponseDefaultTypeInternal() {}
  union {
    GetProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProgressResponseDefaultTypeInternal _GetProgressResponse_default_instance_;
constexpr GetAcquisitionRunInfoRequest::GetAcquisitionRunInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAcquisitionRunInfoRequestDefaultTypeInternal {
  constexpr GetAcquisitionRunInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAcquisitionRunInfoRequestDefaultTypeInternal() {}
  union {
    GetAcquisitionRunInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAcquisitionRunInfoRequestDefaultTypeInternal _GetAcquisitionRunInfoRequest_default_instance_;
constexpr AcquisitionYieldSummary::AcquisitionYieldSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_count_(int64_t{0})
  , basecalled_pass_read_count_(int64_t{0})
  , basecalled_fail_read_count_(int64_t{0})
  , basecalled_pass_bases_(int64_t{0})
  , basecalled_samples_(int64_t{0})
  , selected_raw_samples_(int64_t{0})
  , selected_events_(int64_t{0})
  , estimated_selected_bases_(int64_t{0})
  , basecalled_skipped_read_count_(int64_t{0})
  , alignment_matches_(int64_t{0})
  , alignment_mismatches_(int64_t{0})
  , alignment_insertions_(int64_t{0})
  , alignment_coverage_(0)
  , alignment_deletions_(int64_t{0})
  , basecalled_fail_bases_(int64_t{0}){}
struct AcquisitionYieldSummaryDefaultTypeInternal {
  constexpr AcquisitionYieldSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcquisitionYieldSummaryDefaultTypeInternal() {}
  union {
    AcquisitionYieldSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcquisitionYieldSummaryDefaultTypeInternal _AcquisitionYieldSummary_default_instance_;
constexpr AcquisitionWriterSummary::AcquisitionWriterSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : written_read_count_(int64_t{0})
  , bytes_to_write_produced_(int64_t{0})
  , bytes_to_write_failed_(int64_t{0})
  , bytes_to_write_completed_(int64_t{0}){}
struct AcquisitionWriterSummaryDefaultTypeInternal {
  constexpr AcquisitionWriterSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcquisitionWriterSummaryDefaultTypeInternal() {}
  union {
    AcquisitionWriterSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcquisitionWriterSummaryDefaultTypeInternal _AcquisitionWriterSummary_default_instance_;
constexpr ChannelStateInfo_Style::ChannelStateInfo_Style(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , colour_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChannelStateInfo_StyleDefaultTypeInternal {
  constexpr ChannelStateInfo_StyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStateInfo_StyleDefaultTypeInternal() {}
  union {
    ChannelStateInfo_Style _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStateInfo_StyleDefaultTypeInternal _ChannelStateInfo_Style_default_instance_;
constexpr ChannelStateInfo_ChannelState::ChannelStateInfo_ChannelState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr)
  , id_(0u)
  , global_order_(0u){}
struct ChannelStateInfo_ChannelStateDefaultTypeInternal {
  constexpr ChannelStateInfo_ChannelStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStateInfo_ChannelStateDefaultTypeInternal() {}
  union {
    ChannelStateInfo_ChannelState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStateInfo_ChannelStateDefaultTypeInternal _ChannelStateInfo_ChannelState_default_instance_;
constexpr ChannelStateInfo_Group::ChannelStateInfo_Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr){}
struct ChannelStateInfo_GroupDefaultTypeInternal {
  constexpr ChannelStateInfo_GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStateInfo_GroupDefaultTypeInternal() {}
  union {
    ChannelStateInfo_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStateInfo_GroupDefaultTypeInternal _ChannelStateInfo_Group_default_instance_;
constexpr ChannelStateInfo::ChannelStateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_(){}
struct ChannelStateInfoDefaultTypeInternal {
  constexpr ChannelStateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStateInfoDefaultTypeInternal() {}
  union {
    ChannelStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStateInfoDefaultTypeInternal _ChannelStateInfo_default_instance_;
constexpr AcquisitionConfigSummary::AcquisitionConfigSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reads_fallback_directories_()
  , barcoding_kits_()
  , alignment_reference_files_()
  , reads_directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bulk_file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , basecalling_config_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alignment_bed_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lamp_kit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_state_info_(nullptr)
  , fast5_reads_enabled_(false)
  , fastq_reads_enabled_(false)
  , protobuf_reads_enabled_(false)
  , bulk_file_enabled_(false)
  , events_to_base_ratio_(0)
  , basecalling_enabled_(false)
  , barcoding_enabled_(false)
  , alignment_enabled_(false)
  , lamp_enabled_(false)
  , sample_rate_(0u)
  , channel_count_(0u)
  , purpose_(0)
{}
struct AcquisitionConfigSummaryDefaultTypeInternal {
  constexpr AcquisitionConfigSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcquisitionConfigSummaryDefaultTypeInternal() {}
  union {
    AcquisitionConfigSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcquisitionConfigSummaryDefaultTypeInternal _AcquisitionConfigSummary_default_instance_;
constexpr AcquisitionRunInfo::AcquisitionRunInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , data_read_start_time_(nullptr)
  , data_read_end_time_(nullptr)
  , end_time_(nullptr)
  , yield_summary_(nullptr)
  , config_summary_(nullptr)
  , writer_summary_(nullptr)
  , startup_state_estimated_end_(nullptr)
  , state_(0)

  , stop_reason_(0)

  , finishing_state_(0)

  , startup_state_(0)

  , startup_state_estimated_percent_complete_(0){}
struct AcquisitionRunInfoDefaultTypeInternal {
  constexpr AcquisitionRunInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcquisitionRunInfoDefaultTypeInternal() {}
  union {
    AcquisitionRunInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcquisitionRunInfoDefaultTypeInternal _AcquisitionRunInfo_default_instance_;
constexpr ListAcquisitionRunsRequest::ListAcquisitionRunsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListAcquisitionRunsRequestDefaultTypeInternal {
  constexpr ListAcquisitionRunsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAcquisitionRunsRequestDefaultTypeInternal() {}
  union {
    ListAcquisitionRunsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAcquisitionRunsRequestDefaultTypeInternal _ListAcquisitionRunsRequest_default_instance_;
constexpr ListAcquisitionRunsResponse::ListAcquisitionRunsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_ids_(){}
struct ListAcquisitionRunsResponseDefaultTypeInternal {
  constexpr ListAcquisitionRunsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAcquisitionRunsResponseDefaultTypeInternal() {}
  union {
    ListAcquisitionRunsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAcquisitionRunsResponseDefaultTypeInternal _ListAcquisitionRunsResponse_default_instance_;
constexpr GetCurrentAcquisitionRunRequest::GetCurrentAcquisitionRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetCurrentAcquisitionRunRequestDefaultTypeInternal {
  constexpr GetCurrentAcquisitionRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCurrentAcquisitionRunRequestDefaultTypeInternal() {}
  union {
    GetCurrentAcquisitionRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCurrentAcquisitionRunRequestDefaultTypeInternal _GetCurrentAcquisitionRunRequest_default_instance_;
constexpr WatchCurrentAcquisitionRunRequest::WatchCurrentAcquisitionRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WatchCurrentAcquisitionRunRequestDefaultTypeInternal {
  constexpr WatchCurrentAcquisitionRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchCurrentAcquisitionRunRequestDefaultTypeInternal() {}
  union {
    WatchCurrentAcquisitionRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchCurrentAcquisitionRunRequestDefaultTypeInternal _WatchCurrentAcquisitionRunRequest_default_instance_;
constexpr SetSignalReaderRequest::SetSignalReaderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdf_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reader_(0)

  , hdf_mode_(0)

  , sample_rate_scale_factor_(0){}
struct SetSignalReaderRequestDefaultTypeInternal {
  constexpr SetSignalReaderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSignalReaderRequestDefaultTypeInternal() {}
  union {
    SetSignalReaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSignalReaderRequestDefaultTypeInternal _SetSignalReaderRequest_default_instance_;
constexpr SetSignalReaderResponse::SetSignalReaderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetSignalReaderResponseDefaultTypeInternal {
  constexpr SetSignalReaderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSignalReaderResponseDefaultTypeInternal() {}
  union {
    SetSignalReaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSignalReaderResponseDefaultTypeInternal _SetSignalReaderResponse_default_instance_;
}  // namespace acquisition
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2facquisition_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2facquisition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2facquisition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, dont_wait_for_device_ready_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, generate_report_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, send_sequencing_read_metrics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, send_basecalling_metrics_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, purpose_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, analysis_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, file_output_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartRequest, generate_final_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StartResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StopRequest, data_action_on_stop_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StopRequest, wait_until_ready_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StopRequest, keep_power_on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::WatchForStatusChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::WatchForStatusChangeRequest, stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::WatchForStatusChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::WatchForStatusChangeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::CurrentStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::CurrentStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::CurrentStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressResponse_RawPerChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressResponse_RawPerChannel, acquired_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressResponse_RawPerChannel, processed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetProgressResponse, raw_per_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetAcquisitionRunInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetAcquisitionRunInfoRequest, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, read_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_pass_read_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_fail_read_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_skipped_read_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_pass_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_fail_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, basecalled_samples_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, selected_raw_samples_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, selected_events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, estimated_selected_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, alignment_matches_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, alignment_mismatches_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, alignment_insertions_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, alignment_deletions_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionYieldSummary, alignment_coverage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionWriterSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionWriterSummary, written_read_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionWriterSummary, bytes_to_write_produced_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionWriterSummary, bytes_to_write_failed_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionWriterSummary, bytes_to_write_completed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Style, label_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Style, description_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Style, colour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_ChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_ChannelState, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_ChannelState, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_ChannelState, style_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_ChannelState, global_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Group, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Group, style_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo_Group, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ChannelStateInfo, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, purpose_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, basecalling_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, basecalling_config_filename_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, barcoding_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, barcoding_kits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, alignment_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, alignment_reference_files_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, alignment_bed_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, lamp_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, lamp_kit_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, reads_directory_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, reads_fallback_directories_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, fast5_reads_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, fastq_reads_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, protobuf_reads_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, bulk_file_path_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, bulk_file_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, channel_state_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, events_to_base_ratio_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionConfigSummary, channel_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, startup_state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, startup_state_estimated_end_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, startup_state_estimated_percent_complete_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, finishing_state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, stop_reason_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, data_read_start_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, data_read_end_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, yield_summary_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, config_summary_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::AcquisitionRunInfo, writer_summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ListAcquisitionRunsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ListAcquisitionRunsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::ListAcquisitionRunsResponse, run_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::GetCurrentAcquisitionRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderRequest, reader_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderRequest, hdf_source_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderRequest, hdf_mode_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderRequest, sample_rate_scale_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::acquisition::SetSignalReaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::acquisition::StartRequest)},
  { 14, -1, -1, sizeof(::minknow_api::acquisition::StartResponse)},
  { 21, -1, -1, sizeof(::minknow_api::acquisition::StopRequest)},
  { 30, -1, -1, sizeof(::minknow_api::acquisition::StopResponse)},
  { 36, -1, -1, sizeof(::minknow_api::acquisition::WatchForStatusChangeRequest)},
  { 43, -1, -1, sizeof(::minknow_api::acquisition::WatchForStatusChangeResponse)},
  { 50, -1, -1, sizeof(::minknow_api::acquisition::CurrentStatusRequest)},
  { 56, -1, -1, sizeof(::minknow_api::acquisition::CurrentStatusResponse)},
  { 63, -1, -1, sizeof(::minknow_api::acquisition::GetProgressRequest)},
  { 69, -1, -1, sizeof(::minknow_api::acquisition::GetProgressResponse_RawPerChannel)},
  { 77, -1, -1, sizeof(::minknow_api::acquisition::GetProgressResponse)},
  { 84, -1, -1, sizeof(::minknow_api::acquisition::GetAcquisitionRunInfoRequest)},
  { 91, -1, -1, sizeof(::minknow_api::acquisition::AcquisitionYieldSummary)},
  { 112, -1, -1, sizeof(::minknow_api::acquisition::AcquisitionWriterSummary)},
  { 122, -1, -1, sizeof(::minknow_api::acquisition::ChannelStateInfo_Style)},
  { 131, -1, -1, sizeof(::minknow_api::acquisition::ChannelStateInfo_ChannelState)},
  { 141, -1, -1, sizeof(::minknow_api::acquisition::ChannelStateInfo_Group)},
  { 150, -1, -1, sizeof(::minknow_api::acquisition::ChannelStateInfo)},
  { 157, -1, -1, sizeof(::minknow_api::acquisition::AcquisitionConfigSummary)},
  { 184, -1, -1, sizeof(::minknow_api::acquisition::AcquisitionRunInfo)},
  { 204, -1, -1, sizeof(::minknow_api::acquisition::ListAcquisitionRunsRequest)},
  { 210, -1, -1, sizeof(::minknow_api::acquisition::ListAcquisitionRunsResponse)},
  { 217, -1, -1, sizeof(::minknow_api::acquisition::GetCurrentAcquisitionRunRequest)},
  { 223, -1, -1, sizeof(::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest)},
  { 229, -1, -1, sizeof(::minknow_api::acquisition::SetSignalReaderRequest)},
  { 239, -1, -1, sizeof(::minknow_api::acquisition::SetSignalReaderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_StartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_StartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_StopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_StopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_WatchForStatusChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_WatchForStatusChangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_CurrentStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_CurrentStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_GetProgressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_GetProgressResponse_RawPerChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_GetProgressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_GetAcquisitionRunInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_AcquisitionYieldSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_AcquisitionWriterSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ChannelStateInfo_Style_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ChannelStateInfo_ChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ChannelStateInfo_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ChannelStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_AcquisitionConfigSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_AcquisitionRunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ListAcquisitionRunsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_ListAcquisitionRunsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_GetCurrentAcquisitionRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_WatchCurrentAcquisitionRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_SetSignalReaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::acquisition::_SetSignalReaderResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2facquisition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035minknow_api/acquisition.proto\022\027minknow"
  "_api.acquisition\032\035minknow_api/rpc_option"
  "s.proto\032\037google/protobuf/timestamp.proto"
  "\"\323\003\n\014StartRequest\022\"\n\032dont_wait_for_devic"
  "e_ready\030\002 \001(\010\0228\n\017generate_report\030\003 \001(\0162\037"
  ".minknow_api.acquisition.Option\022E\n\034send_"
  "sequencing_read_metrics\030\004 \001(\0162\037.minknow_"
  "api.acquisition.Option\022A\n\030send_basecalli"
  "ng_metrics\030\005 \001(\0162\037.minknow_api.acquisiti"
  "on.Option\0221\n\007purpose\030\006 \001(\0162 .minknow_api"
  ".acquisition.Purpose\0221\n\010analysis\030\007 \001(\0162\037"
  ".minknow_api.acquisition.Option\0224\n\013file_"
  "output\030\010 \001(\0162\037.minknow_api.acquisition.O"
  "ption\022\?\n\026generate_final_summary\030\t \001(\0162\037."
  "minknow_api.acquisition.Option\"\037\n\rStartR"
  "esponse\022\016\n\006run_id\030\001 \001(\t\"\340\001\n\013StopRequest\022"
  "L\n\023data_action_on_stop\030\001 \001(\0162/.minknow_a"
  "pi.acquisition.StopRequest.DataAction\022\030\n"
  "\020wait_until_ready\030\002 \001(\010\022\025\n\rkeep_power_on"
  "\030\003 \001(\010\"R\n\nDataAction\022\020\n\014STOP_DEFAULT\020\000\022\026"
  "\n\022STOP_KEEP_ALL_DATA\020\001\022\032\n\026STOP_FINISH_PR"
  "OCESSING\020\002\"\016\n\014StopResponse\"+\n\033WatchForSt"
  "atusChangeRequest\022\014\n\004stop\030\001 \001(\010\"V\n\034Watch"
  "ForStatusChangeResponse\0226\n\006status\030\001 \001(\0162"
  "&.minknow_api.acquisition.MinknowStatus\""
  "\026\n\024CurrentStatusRequest\"O\n\025CurrentStatus"
  "Response\0226\n\006status\030\001 \001(\0162&.minknow_api.a"
  "cquisition.MinknowStatus\"\024\n\022GetProgressR"
  "equest\"\240\001\n\023GetProgressResponse\022S\n\017raw_pe"
  "r_channel\030\001 \001(\0132:.minknow_api.acquisitio"
  "n.GetProgressResponse.RawPerChannel\0324\n\rR"
  "awPerChannel\022\020\n\010acquired\030\001 \001(\004\022\021\n\tproces"
  "sed\030\002 \001(\004\".\n\034GetAcquisitionRunInfoReques"
  "t\022\016\n\006run_id\030\001 \001(\t\"\337\003\n\027AcquisitionYieldSu"
  "mmary\022\022\n\nread_count\030\001 \001(\003\022\"\n\032basecalled_"
  "pass_read_count\030\003 \001(\003\022\"\n\032basecalled_fail"
  "_read_count\030\004 \001(\003\022%\n\035basecalled_skipped_"
  "read_count\030\n \001(\003\022\035\n\025basecalled_pass_base"
  "s\030\005 \001(\003\022\035\n\025basecalled_fail_bases\030\022 \001(\003\022\032"
  "\n\022basecalled_samples\030\006 \001(\003\022\034\n\024selected_r"
  "aw_samples\030\007 \001(\003\022\027\n\017selected_events\030\010 \001("
  "\003\022 \n\030estimated_selected_bases\030\t \001(\003\022\031\n\021a"
  "lignment_matches\030\016 \001(\003\022\034\n\024alignment_mism"
  "atches\030\017 \001(\003\022\034\n\024alignment_insertions\030\020 \001"
  "(\003\022\033\n\023alignment_deletions\030\021 \001(\003\022\032\n\022align"
  "ment_coverage\030\023 \001(\002\"\230\001\n\030AcquisitionWrite"
  "rSummary\022\032\n\022written_read_count\030\001 \001(\003\022\037\n\027"
  "bytes_to_write_produced\030\002 \001(\003\022\035\n\025bytes_t"
  "o_write_failed\030\003 \001(\003\022 \n\030bytes_to_write_c"
  "ompleted\030\004 \001(\003\"\260\003\n\020ChannelStateInfo\022\?\n\006g"
  "roups\030\001 \003(\0132/.minknow_api.acquisition.Ch"
  "annelStateInfo.Group\032;\n\005Style\022\r\n\005label\030\001"
  " \001(\t\022\023\n\013description\030\002 \001(\t\022\016\n\006colour\030\003 \001("
  "\t\032~\n\014ChannelState\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 "
  "\001(\t\022>\n\005style\030\003 \001(\0132/.minknow_api.acquisi"
  "tion.ChannelStateInfo.Style\022\024\n\014global_or"
  "der\030\004 \001(\r\032\235\001\n\005Group\022\014\n\004name\030\001 \001(\t\022>\n\005sty"
  "le\030\002 \001(\0132/.minknow_api.acquisition.Chann"
  "elStateInfo.Style\022F\n\006states\030\003 \003(\01326.mink"
  "now_api.acquisition.ChannelStateInfo.Cha"
  "nnelState\"\237\005\n\030AcquisitionConfigSummary\0221"
  "\n\007purpose\030\025 \001(\0162 .minknow_api.acquisitio"
  "n.Purpose\022\033\n\023basecalling_enabled\030\001 \001(\010\022#"
  "\n\033basecalling_config_filename\030\020 \001(\t\022\031\n\021b"
  "arcoding_enabled\030\r \001(\010\022\026\n\016barcoding_kits"
  "\030\021 \003(\t\022\031\n\021alignment_enabled\030\016 \001(\010\022!\n\031ali"
  "gnment_reference_files\030\022 \003(\t\022\032\n\022alignmen"
  "t_bed_file\030\023 \001(\t\022\024\n\014lamp_enabled\030\017 \001(\010\022\020"
  "\n\010lamp_kit\030\024 \001(\t\022\027\n\017reads_directory\030\002 \001("
  "\t\022\"\n\032reads_fallback_directories\030\003 \003(\t\022\033\n"
  "\023fast5_reads_enabled\030\004 \001(\010\022\033\n\023fastq_read"
  "s_enabled\030\005 \001(\010\022\036\n\026protobuf_reads_enable"
  "d\030\006 \001(\010\022\026\n\016bulk_file_path\030\007 \001(\t\022\031\n\021bulk_"
  "file_enabled\030\010 \001(\010\022E\n\022channel_state_info"
  "\030\t \001(\0132).minknow_api.acquisition.Channel"
  "StateInfo\022\034\n\024events_to_base_ratio\030\n \001(\002\022"
  "\023\n\013sample_rate\030\013 \001(\r\022\025\n\rchannel_count\030\014 "
  "\001(\r\"\305\006\n\022AcquisitionRunInfo\022\016\n\006run_id\030\001 \001"
  "(\t\022<\n\rstartup_state\030\014 \001(\0162%.minknow_api."
  "acquisition.StartupState\022\?\n\033startup_stat"
  "e_estimated_end\030\r \001(\0132\032.google.protobuf."
  "Timestamp\0220\n(startup_state_estimated_per"
  "cent_complete\030\016 \001(\002\0228\n\005state\030\002 \001(\0162).min"
  "know_api.acquisition.AcquisitionState\022@\n"
  "\017finishing_state\030\n \001(\0162\'.minknow_api.acq"
  "uisition.FinishingState\022C\n\013stop_reason\030\003"
  " \001(\0162..minknow_api.acquisition.Acquisiti"
  "onStopReason\022.\n\nstart_time\030\004 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0228\n\024data_read_start_"
  "time\030\005 \001(\0132\032.google.protobuf.Timestamp\0226"
  "\n\022data_read_end_time\030\006 \001(\0132\032.google.prot"
  "obuf.Timestamp\022,\n\010end_time\030\007 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022G\n\ryield_summary\030\010 "
  "\001(\01320.minknow_api.acquisition.Acquisitio"
  "nYieldSummary\022I\n\016config_summary\030\t \001(\01321."
  "minknow_api.acquisition.AcquisitionConfi"
  "gSummary\022I\n\016writer_summary\030\013 \001(\01321.minkn"
  "ow_api.acquisition.AcquisitionWriterSumm"
  "ary\"\034\n\032ListAcquisitionRunsRequest\".\n\033Lis"
  "tAcquisitionRunsResponse\022\017\n\007run_ids\030\001 \003("
  "\t\"!\n\037GetCurrentAcquisitionRunRequest\"#\n!"
  "WatchCurrentAcquisitionRunRequest\"\337\002\n\026Se"
  "tSignalReaderRequest\022V\n\006reader\030\001 \001(\0162@.m"
  "inknow_api.acquisition.SetSignalReaderRe"
  "quest.SignalReaderTypeB\004\210\265\030\001\022\022\n\nhdf_sour"
  "ce\030\002 \001(\t\022P\n\010hdf_mode\030\003 \001(\0162>.minknow_api"
  ".acquisition.SetSignalReaderRequest.Sour"
  "ceFileMode\022 \n\030sample_rate_scale_factor\030\004"
  " \001(\002\"(\n\020SignalReaderType\022\010\n\004HDF5\020\000\022\n\n\006DE"
  "VICE\020\001\";\n\016SourceFileMode\022\017\n\013UNSPECIFIED\020"
  "\000\022\016\n\nSINGLE_RUN\020\001\022\010\n\004LOOP\020\002\"\031\n\027SetSignal"
  "ReaderResponse*Y\n\rMinknowStatus\022\020\n\014ERROR"
  "_STATUS\020\000\022\t\n\005READY\020\001\022\014\n\010STARTING\020\002\022\016\n\nPR"
  "OCESSING\020\003\022\r\n\tFINISHING\020\004**\n\006Option\022\010\n\004A"
  "UTO\020\000\022\013\n\007DISABLE\020\001\022\t\n\005FORCE\020\002*=\n\007Purpose"
  "\022\021\n\rOTHER_PURPOSE\020\000\022\016\n\nSEQUENCING\020\002\022\017\n\013C"
  "ALIBRATION\020\003*{\n\020AcquisitionState\022\030\n\024ACQU"
  "ISITION_STARTING\020\000\022\027\n\023ACQUISITION_RUNNIN"
  "G\020\001\022\031\n\025ACQUISITION_FINISHING\020\002\022\031\n\025ACQUIS"
  "ITION_COMPLETED\020\003*\262\002\n\025AcquisitionStopRea"
  "son\022\023\n\017STOPPED_NOT_SET\020\000\022\032\n\026STOPPED_USER"
  "_REQUESTED\020\001\022\031\n\025STOPPED_NO_DISK_SPACE\020\002\022"
  "&\n\"STOPPED_DEVICE_STOPPED_ACQUISITION\020\003\022"
  " \n\034STOPPED_STARTING_ANOTHER_RUN\020\004\022\032\n\026STO"
  "PPED_PROTOCOL_ENDED\020\005\022\030\n\024STOPPED_DEVICE_"
  "ERROR\020\006\022\033\n\027STOPPED_BAD_TEMPERATURE\020\007\022\024\n\020"
  "STOPPED_SHUTDOWN\020\010\022\032\n\026STOPPED_INTERNAL_E"
  "RROR\020\t*\226\002\n\014StartupState\022\023\n\017STARTUP_UNKNO"
  "WN\020\000\022\035\n\031STARTUP_BUILDING_PIPELINE\020\002\022#\n\037S"
  "TARTUP_INITIALISING_BASECALLER\020\003\022-\n)STAR"
  "TUP_INITIALISING_BASECALLER_ALIGNMENT\020\004\022"
  "%\n!STARTUP_INITIALISING_DATA_WRITERS\020\005\0222"
  "\n.STARTUP_INITIALISING_INTERMEDIATE_DATA"
  "_STORAGE\020\006\022#\n\037STARTUP_INITIALISING_STATI"
  "STICS\020\007*\213\001\n\016FinishingState\022\025\n\021FINISHING_"
  "UNKNOWN\020\000\022&\n\"FINISHING_PROCESSING_DEVICE"
  "_SIGNAL\020\001\022\037\n\033FINISHING_BASECALLING_READS"
  "\020\002\022\031\n\025FINISHING_SAVING_DATA\020\0032\343\t\n\022Acquis"
  "itionService\022X\n\005start\022%.minknow_api.acqu"
  "isition.StartRequest\032&.minknow_api.acqui"
  "sition.StartResponse\"\000\022U\n\004stop\022$.minknow"
  "_api.acquisition.StopRequest\032%.minknow_a"
  "pi.acquisition.StopResponse\"\000\022\217\001\n\027watch_"
  "for_status_change\0224.minknow_api.acquisit"
  "ion.WatchForStatusChangeRequest\0325.minkno"
  "w_api.acquisition.WatchForStatusChangeRe"
  "sponse\"\003\220\002\001(\0010\001\022\217\001\n\035watch_current_acquis"
  "ition_run\022:.minknow_api.acquisition.Watc"
  "hCurrentAcquisitionRunRequest\032+.minknow_"
  "api.acquisition.AcquisitionRunInfo\"\003\220\002\0010"
  "\001\022t\n\016current_status\022-.minknow_api.acquis"
  "ition.CurrentStatusRequest\032..minknow_api"
  ".acquisition.CurrentStatusResponse\"\003\220\002\001\022"
  "n\n\014get_progress\022+.minknow_api.acquisitio"
  "n.GetProgressRequest\032,.minknow_api.acqui"
  "sition.GetProgressResponse\"\003\220\002\001\022\177\n\024get_a"
  "cquisition_info\0225.minknow_api.acquisitio"
  "n.GetAcquisitionRunInfoRequest\032+.minknow"
  "_api.acquisition.AcquisitionRunInfo\"\003\220\002\001"
  "\022\207\001\n\025list_acquisition_runs\0223.minknow_api"
  ".acquisition.ListAcquisitionRunsRequest\032"
  "4.minknow_api.acquisition.ListAcquisitio"
  "nRunsResponse\"\003\220\002\001\022\211\001\n\033get_current_acqui"
  "sition_run\0228.minknow_api.acquisition.Get"
  "CurrentAcquisitionRunRequest\032+.minknow_a"
  "pi.acquisition.AcquisitionRunInfo\"\003\220\002\001\022{"
  "\n\021set_signal_reader\022/.minknow_api.acquis"
  "ition.SetSignalReaderRequest\0320.minknow_a"
  "pi.acquisition.SetSignalReaderResponse\"\003"
  "\220\002\002B&\n\034com.nanoporetech.minknow_api\242\002\005MK"
  "APIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2facquisition_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2facquisition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2facquisition_2eproto = {
  false, false, 6811, descriptor_table_protodef_minknow_5fapi_2facquisition_2eproto, "minknow_api/acquisition.proto", 
  &descriptor_table_minknow_5fapi_2facquisition_2eproto_once, descriptor_table_minknow_5fapi_2facquisition_2eproto_deps, 2, 26,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2facquisition_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2facquisition_2eproto, file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto, file_level_service_descriptors_minknow_5fapi_2facquisition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2facquisition_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2facquisition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2facquisition_2eproto(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
namespace minknow_api {
namespace acquisition {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopRequest_DataAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[0];
}
bool StopRequest_DataAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopRequest_DataAction StopRequest::STOP_DEFAULT;
constexpr StopRequest_DataAction StopRequest::STOP_KEEP_ALL_DATA;
constexpr StopRequest_DataAction StopRequest::STOP_FINISH_PROCESSING;
constexpr StopRequest_DataAction StopRequest::DataAction_MIN;
constexpr StopRequest_DataAction StopRequest::DataAction_MAX;
constexpr int StopRequest::DataAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetSignalReaderRequest_SignalReaderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[1];
}
bool SetSignalReaderRequest_SignalReaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::HDF5;
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::DEVICE;
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::SignalReaderType_MIN;
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::SignalReaderType_MAX;
constexpr int SetSignalReaderRequest::SignalReaderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetSignalReaderRequest_SourceFileMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[2];
}
bool SetSignalReaderRequest_SourceFileMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::UNSPECIFIED;
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::SINGLE_RUN;
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::LOOP;
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::SourceFileMode_MIN;
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::SourceFileMode_MAX;
constexpr int SetSignalReaderRequest::SourceFileMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MinknowStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[3];
}
bool MinknowStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Option_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[4];
}
bool Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Purpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[5];
}
bool Purpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquisitionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[6];
}
bool AcquisitionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquisitionStopReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[7];
}
bool AcquisitionStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartupState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[8];
}
bool StartupState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FinishingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2facquisition_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2facquisition_2eproto[9];
}
bool FinishingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StartRequest::_Internal {
 public:
};

StartRequest::StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dont_wait_for_device_ready_, &from.dont_wait_for_device_ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&generate_final_summary_) -
    reinterpret_cast<char*>(&dont_wait_for_device_ready_)) + sizeof(generate_final_summary_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.StartRequest)
}

void StartRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dont_wait_for_device_ready_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&generate_final_summary_) -
    reinterpret_cast<char*>(&dont_wait_for_device_ready_)) + sizeof(generate_final_summary_));
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.StartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartRequest::ArenaDtor(void* object) {
  StartRequest* _this = reinterpret_cast< StartRequest* >(object);
  (void)_this;
}
void StartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dont_wait_for_device_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generate_final_summary_) -
      reinterpret_cast<char*>(&dont_wait_for_device_ready_)) + sizeof(generate_final_summary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool dont_wait_for_device_ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dont_wait_for_device_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option generate_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_generate_report(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option send_sequencing_read_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_send_sequencing_read_metrics(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option send_basecalling_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_send_basecalling_metrics(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Purpose purpose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_purpose(static_cast<::minknow_api::acquisition::Purpose>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option analysis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_analysis(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option file_output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_output(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Option generate_final_summary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_generate_final_summary(static_cast<::minknow_api::acquisition::Option>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.StartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dont_wait_for_device_ready = 2;
  if (this->_internal_dont_wait_for_device_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_dont_wait_for_device_ready(), target);
  }

  // .minknow_api.acquisition.Option generate_report = 3;
  if (this->_internal_generate_report() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_generate_report(), target);
  }

  // .minknow_api.acquisition.Option send_sequencing_read_metrics = 4;
  if (this->_internal_send_sequencing_read_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_send_sequencing_read_metrics(), target);
  }

  // .minknow_api.acquisition.Option send_basecalling_metrics = 5;
  if (this->_internal_send_basecalling_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_send_basecalling_metrics(), target);
  }

  // .minknow_api.acquisition.Purpose purpose = 6;
  if (this->_internal_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_purpose(), target);
  }

  // .minknow_api.acquisition.Option analysis = 7;
  if (this->_internal_analysis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_analysis(), target);
  }

  // .minknow_api.acquisition.Option file_output = 8;
  if (this->_internal_file_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_file_output(), target);
  }

  // .minknow_api.acquisition.Option generate_final_summary = 9;
  if (this->_internal_generate_final_summary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_generate_final_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.StartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dont_wait_for_device_ready = 2;
  if (this->_internal_dont_wait_for_device_ready() != 0) {
    total_size += 1 + 1;
  }

  // .minknow_api.acquisition.Option generate_report = 3;
  if (this->_internal_generate_report() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_generate_report());
  }

  // .minknow_api.acquisition.Option send_sequencing_read_metrics = 4;
  if (this->_internal_send_sequencing_read_metrics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_send_sequencing_read_metrics());
  }

  // .minknow_api.acquisition.Option send_basecalling_metrics = 5;
  if (this->_internal_send_basecalling_metrics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_send_basecalling_metrics());
  }

  // .minknow_api.acquisition.Purpose purpose = 6;
  if (this->_internal_purpose() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_purpose());
  }

  // .minknow_api.acquisition.Option analysis = 7;
  if (this->_internal_analysis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_analysis());
  }

  // .minknow_api.acquisition.Option file_output = 8;
  if (this->_internal_file_output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_output());
  }

  // .minknow_api.acquisition.Option generate_final_summary = 9;
  if (this->_internal_generate_final_summary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_generate_final_summary());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRequest::GetClassData() const { return &_class_data_; }

void StartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRequest *>(to)->MergeFrom(
      static_cast<const StartRequest &>(from));
}


void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dont_wait_for_device_ready() != 0) {
    _internal_set_dont_wait_for_device_ready(from._internal_dont_wait_for_device_ready());
  }
  if (from._internal_generate_report() != 0) {
    _internal_set_generate_report(from._internal_generate_report());
  }
  if (from._internal_send_sequencing_read_metrics() != 0) {
    _internal_set_send_sequencing_read_metrics(from._internal_send_sequencing_read_metrics());
  }
  if (from._internal_send_basecalling_metrics() != 0) {
    _internal_set_send_basecalling_metrics(from._internal_send_basecalling_metrics());
  }
  if (from._internal_purpose() != 0) {
    _internal_set_purpose(from._internal_purpose());
  }
  if (from._internal_analysis() != 0) {
    _internal_set_analysis(from._internal_analysis());
  }
  if (from._internal_file_output() != 0) {
    _internal_set_file_output(from._internal_file_output());
  }
  if (from._internal_generate_final_summary() != 0) {
    _internal_set_generate_final_summary(from._internal_generate_final_summary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartRequest, generate_final_summary_)
      + sizeof(StartRequest::generate_final_summary_)
      - PROTOBUF_FIELD_OFFSET(StartRequest, dont_wait_for_device_ready_)>(
          reinterpret_cast<char*>(&dont_wait_for_device_ready_),
          reinterpret_cast<char*>(&other->dont_wait_for_device_ready_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[0]);
}

// ===================================================================

class StartResponse::_Internal {
 public:
};

StartResponse::StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.StartResponse)
}
StartResponse::StartResponse(const StartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.StartResponse)
}

void StartResponse::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartResponse::~StartResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.StartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartResponse::ArenaDtor(void* object) {
  StartResponse* _this = reinterpret_cast< StartResponse* >(object);
  (void)_this;
}
void StartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.StartResponse.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.StartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.StartResponse.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.StartResponse)
  return target;
}

size_t StartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.StartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartResponse::GetClassData() const { return &_class_data_; }

void StartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartResponse *>(to)->MergeFrom(
      static_cast<const StartResponse &>(from));
}


void StartResponse::MergeFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartResponse::CopyFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResponse::IsInitialized() const {
  return true;
}

void StartResponse::InternalSwap(StartResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[1]);
}

// ===================================================================

class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_action_on_stop_, &from.data_action_on_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_power_on_) -
    reinterpret_cast<char*>(&data_action_on_stop_)) + sizeof(keep_power_on_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.StopRequest)
}

void StopRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_action_on_stop_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_power_on_) -
    reinterpret_cast<char*>(&data_action_on_stop_)) + sizeof(keep_power_on_));
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.StopRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopRequest::ArenaDtor(void* object) {
  StopRequest* _this = reinterpret_cast< StopRequest* >(object);
  (void)_this;
}
void StopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_action_on_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_power_on_) -
      reinterpret_cast<char*>(&data_action_on_stop_)) + sizeof(keep_power_on_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_action_on_stop(static_cast<::minknow_api::acquisition::StopRequest_DataAction>(val));
        } else
          goto handle_unusual;
        continue;
      // bool wait_until_ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wait_until_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool keep_power_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_power_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  if (this->_internal_data_action_on_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_action_on_stop(), target);
  }

  // bool wait_until_ready = 2;
  if (this->_internal_wait_until_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_wait_until_ready(), target);
  }

  // bool keep_power_on = 3;
  if (this->_internal_keep_power_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_keep_power_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.StopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  if (this->_internal_data_action_on_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_action_on_stop());
  }

  // bool wait_until_ready = 2;
  if (this->_internal_wait_until_ready() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_power_on = 3;
  if (this->_internal_keep_power_on() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopRequest::GetClassData() const { return &_class_data_; }

void StopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopRequest *>(to)->MergeFrom(
      static_cast<const StopRequest &>(from));
}


void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data_action_on_stop() != 0) {
    _internal_set_data_action_on_stop(from._internal_data_action_on_stop());
  }
  if (from._internal_wait_until_ready() != 0) {
    _internal_set_wait_until_ready(from._internal_wait_until_ready());
  }
  if (from._internal_keep_power_on() != 0) {
    _internal_set_keep_power_on(from._internal_keep_power_on());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopRequest, keep_power_on_)
      + sizeof(StopRequest::keep_power_on_)
      - PROTOBUF_FIELD_OFFSET(StopRequest, data_action_on_stop_)>(
          reinterpret_cast<char*>(&data_action_on_stop_),
          reinterpret_cast<char*>(&other->data_action_on_stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[2]);
}

// ===================================================================

class StopResponse::_Internal {
 public:
};

StopResponse::StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.StopResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[3]);
}

// ===================================================================

class WatchForStatusChangeRequest::_Internal {
 public:
};

WatchForStatusChangeRequest::WatchForStatusChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.WatchForStatusChangeRequest)
}
WatchForStatusChangeRequest::WatchForStatusChangeRequest(const WatchForStatusChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.WatchForStatusChangeRequest)
}

void WatchForStatusChangeRequest::SharedCtor() {
stop_ = false;
}

WatchForStatusChangeRequest::~WatchForStatusChangeRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.WatchForStatusChangeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchForStatusChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchForStatusChangeRequest::ArenaDtor(void* object) {
  WatchForStatusChangeRequest* _this = reinterpret_cast< WatchForStatusChangeRequest* >(object);
  (void)_this;
}
void WatchForStatusChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchForStatusChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchForStatusChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.WatchForStatusChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchForStatusChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchForStatusChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.WatchForStatusChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool stop = 1;
  if (this->_internal_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.WatchForStatusChangeRequest)
  return target;
}

size_t WatchForStatusChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.WatchForStatusChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool stop = 1;
  if (this->_internal_stop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchForStatusChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchForStatusChangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchForStatusChangeRequest::GetClassData() const { return &_class_data_; }

void WatchForStatusChangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchForStatusChangeRequest *>(to)->MergeFrom(
      static_cast<const WatchForStatusChangeRequest &>(from));
}


void WatchForStatusChangeRequest::MergeFrom(const WatchForStatusChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.WatchForStatusChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop() != 0) {
    _internal_set_stop(from._internal_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchForStatusChangeRequest::CopyFrom(const WatchForStatusChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.WatchForStatusChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchForStatusChangeRequest::IsInitialized() const {
  return true;
}

void WatchForStatusChangeRequest::InternalSwap(WatchForStatusChangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stop_, other->stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchForStatusChangeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[4]);
}

// ===================================================================

class WatchForStatusChangeResponse::_Internal {
 public:
};

WatchForStatusChangeResponse::WatchForStatusChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.WatchForStatusChangeResponse)
}
WatchForStatusChangeResponse::WatchForStatusChangeResponse(const WatchForStatusChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.WatchForStatusChangeResponse)
}

void WatchForStatusChangeResponse::SharedCtor() {
status_ = 0;
}

WatchForStatusChangeResponse::~WatchForStatusChangeResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.WatchForStatusChangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchForStatusChangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchForStatusChangeResponse::ArenaDtor(void* object) {
  WatchForStatusChangeResponse* _this = reinterpret_cast< WatchForStatusChangeResponse* >(object);
  (void)_this;
}
void WatchForStatusChangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchForStatusChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchForStatusChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.WatchForStatusChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchForStatusChangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.MinknowStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::minknow_api::acquisition::MinknowStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchForStatusChangeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.WatchForStatusChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.MinknowStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.WatchForStatusChangeResponse)
  return target;
}

size_t WatchForStatusChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.WatchForStatusChangeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.acquisition.MinknowStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchForStatusChangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchForStatusChangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchForStatusChangeResponse::GetClassData() const { return &_class_data_; }

void WatchForStatusChangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchForStatusChangeResponse *>(to)->MergeFrom(
      static_cast<const WatchForStatusChangeResponse &>(from));
}


void WatchForStatusChangeResponse::MergeFrom(const WatchForStatusChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.WatchForStatusChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchForStatusChangeResponse::CopyFrom(const WatchForStatusChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.WatchForStatusChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchForStatusChangeResponse::IsInitialized() const {
  return true;
}

void WatchForStatusChangeResponse::InternalSwap(WatchForStatusChangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchForStatusChangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[5]);
}

// ===================================================================

class CurrentStatusRequest::_Internal {
 public:
};

CurrentStatusRequest::CurrentStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.CurrentStatusRequest)
}
CurrentStatusRequest::CurrentStatusRequest(const CurrentStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.CurrentStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CurrentStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[6]);
}

// ===================================================================

class CurrentStatusResponse::_Internal {
 public:
};

CurrentStatusResponse::CurrentStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.CurrentStatusResponse)
}
CurrentStatusResponse::CurrentStatusResponse(const CurrentStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.CurrentStatusResponse)
}

void CurrentStatusResponse::SharedCtor() {
status_ = 0;
}

CurrentStatusResponse::~CurrentStatusResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.CurrentStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CurrentStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentStatusResponse::ArenaDtor(void* object) {
  CurrentStatusResponse* _this = reinterpret_cast< CurrentStatusResponse* >(object);
  (void)_this;
}
void CurrentStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.CurrentStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.MinknowStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::minknow_api::acquisition::MinknowStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.CurrentStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.MinknowStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.CurrentStatusResponse)
  return target;
}

size_t CurrentStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.CurrentStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.acquisition.MinknowStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentStatusResponse::GetClassData() const { return &_class_data_; }

void CurrentStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentStatusResponse *>(to)->MergeFrom(
      static_cast<const CurrentStatusResponse &>(from));
}


void CurrentStatusResponse::MergeFrom(const CurrentStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.CurrentStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentStatusResponse::CopyFrom(const CurrentStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.CurrentStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentStatusResponse::IsInitialized() const {
  return true;
}

void CurrentStatusResponse::InternalSwap(CurrentStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[7]);
}

// ===================================================================

class GetProgressRequest::_Internal {
 public:
};

GetProgressRequest::GetProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.GetProgressRequest)
}
GetProgressRequest::GetProgressRequest(const GetProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.GetProgressRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProgressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProgressRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetProgressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[8]);
}

// ===================================================================

class GetProgressResponse_RawPerChannel::_Internal {
 public:
};

GetProgressResponse_RawPerChannel::GetProgressResponse_RawPerChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
}
GetProgressResponse_RawPerChannel::GetProgressResponse_RawPerChannel(const GetProgressResponse_RawPerChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acquired_, &from.acquired_,
    static_cast<size_t>(reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&acquired_)) + sizeof(processed_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
}

void GetProgressResponse_RawPerChannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acquired_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&acquired_)) + sizeof(processed_));
}

GetProgressResponse_RawPerChannel::~GetProgressResponse_RawPerChannel() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProgressResponse_RawPerChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetProgressResponse_RawPerChannel::ArenaDtor(void* object) {
  GetProgressResponse_RawPerChannel* _this = reinterpret_cast< GetProgressResponse_RawPerChannel* >(object);
  (void)_this;
}
void GetProgressResponse_RawPerChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProgressResponse_RawPerChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProgressResponse_RawPerChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acquired_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processed_) -
      reinterpret_cast<char*>(&acquired_)) + sizeof(processed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgressResponse_RawPerChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 acquired = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProgressResponse_RawPerChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 acquired = 1;
  if (this->_internal_acquired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_acquired(), target);
  }

  // uint64 processed = 2;
  if (this->_internal_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_processed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  return target;
}

size_t GetProgressResponse_RawPerChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 acquired = 1;
  if (this->_internal_acquired() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_acquired());
  }

  // uint64 processed = 2;
  if (this->_internal_processed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_processed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProgressResponse_RawPerChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProgressResponse_RawPerChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProgressResponse_RawPerChannel::GetClassData() const { return &_class_data_; }

void GetProgressResponse_RawPerChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetProgressResponse_RawPerChannel *>(to)->MergeFrom(
      static_cast<const GetProgressResponse_RawPerChannel &>(from));
}


void GetProgressResponse_RawPerChannel::MergeFrom(const GetProgressResponse_RawPerChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acquired() != 0) {
    _internal_set_acquired(from._internal_acquired());
  }
  if (from._internal_processed() != 0) {
    _internal_set_processed(from._internal_processed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProgressResponse_RawPerChannel::CopyFrom(const GetProgressResponse_RawPerChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgressResponse_RawPerChannel::IsInitialized() const {
  return true;
}

void GetProgressResponse_RawPerChannel::InternalSwap(GetProgressResponse_RawPerChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetProgressResponse_RawPerChannel, processed_)
      + sizeof(GetProgressResponse_RawPerChannel::processed_)
      - PROTOBUF_FIELD_OFFSET(GetProgressResponse_RawPerChannel, acquired_)>(
          reinterpret_cast<char*>(&acquired_),
          reinterpret_cast<char*>(&other->acquired_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgressResponse_RawPerChannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[9]);
}

// ===================================================================

class GetProgressResponse::_Internal {
 public:
  static const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel& raw_per_channel(const GetProgressResponse* msg);
};

const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel&
GetProgressResponse::_Internal::raw_per_channel(const GetProgressResponse* msg) {
  return *msg->raw_per_channel_;
}
GetProgressResponse::GetProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.GetProgressResponse)
}
GetProgressResponse::GetProgressResponse(const GetProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_raw_per_channel()) {
    raw_per_channel_ = new ::minknow_api::acquisition::GetProgressResponse_RawPerChannel(*from.raw_per_channel_);
  } else {
    raw_per_channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.GetProgressResponse)
}

void GetProgressResponse::SharedCtor() {
raw_per_channel_ = nullptr;
}

GetProgressResponse::~GetProgressResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.GetProgressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete raw_per_channel_;
}

void GetProgressResponse::ArenaDtor(void* object) {
  GetProgressResponse* _this = reinterpret_cast< GetProgressResponse* >(object);
  (void)_this;
}
void GetProgressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.GetProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && raw_per_channel_ != nullptr) {
    delete raw_per_channel_;
  }
  raw_per_channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProgressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.GetProgressResponse.RawPerChannel raw_per_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_per_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProgressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.GetProgressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.GetProgressResponse.RawPerChannel raw_per_channel = 1;
  if (this->_internal_has_raw_per_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_per_channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.GetProgressResponse)
  return target;
}

size_t GetProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.GetProgressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.acquisition.GetProgressResponse.RawPerChannel raw_per_channel = 1;
  if (this->_internal_has_raw_per_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_per_channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProgressResponse::GetClassData() const { return &_class_data_; }

void GetProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetProgressResponse *>(to)->MergeFrom(
      static_cast<const GetProgressResponse &>(from));
}


void GetProgressResponse::MergeFrom(const GetProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.GetProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_raw_per_channel()) {
    _internal_mutable_raw_per_channel()->::minknow_api::acquisition::GetProgressResponse_RawPerChannel::MergeFrom(from._internal_raw_per_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProgressResponse::CopyFrom(const GetProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.GetProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgressResponse::IsInitialized() const {
  return true;
}

void GetProgressResponse::InternalSwap(GetProgressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(raw_per_channel_, other->raw_per_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProgressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[10]);
}

// ===================================================================

class GetAcquisitionRunInfoRequest::_Internal {
 public:
};

GetAcquisitionRunInfoRequest::GetAcquisitionRunInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
}
GetAcquisitionRunInfoRequest::GetAcquisitionRunInfoRequest(const GetAcquisitionRunInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
}

void GetAcquisitionRunInfoRequest::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAcquisitionRunInfoRequest::~GetAcquisitionRunInfoRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAcquisitionRunInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAcquisitionRunInfoRequest::ArenaDtor(void* object) {
  GetAcquisitionRunInfoRequest* _this = reinterpret_cast< GetAcquisitionRunInfoRequest* >(object);
  (void)_this;
}
void GetAcquisitionRunInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAcquisitionRunInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAcquisitionRunInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAcquisitionRunInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAcquisitionRunInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  return target;
}

size_t GetAcquisitionRunInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAcquisitionRunInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAcquisitionRunInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAcquisitionRunInfoRequest::GetClassData() const { return &_class_data_; }

void GetAcquisitionRunInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAcquisitionRunInfoRequest *>(to)->MergeFrom(
      static_cast<const GetAcquisitionRunInfoRequest &>(from));
}


void GetAcquisitionRunInfoRequest::MergeFrom(const GetAcquisitionRunInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAcquisitionRunInfoRequest::CopyFrom(const GetAcquisitionRunInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAcquisitionRunInfoRequest::IsInitialized() const {
  return true;
}

void GetAcquisitionRunInfoRequest::InternalSwap(GetAcquisitionRunInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAcquisitionRunInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[11]);
}

// ===================================================================

class AcquisitionYieldSummary::_Internal {
 public:
};

AcquisitionYieldSummary::AcquisitionYieldSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.AcquisitionYieldSummary)
}
AcquisitionYieldSummary::AcquisitionYieldSummary(const AcquisitionYieldSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&read_count_, &from.read_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&basecalled_fail_bases_) -
    reinterpret_cast<char*>(&read_count_)) + sizeof(basecalled_fail_bases_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.AcquisitionYieldSummary)
}

void AcquisitionYieldSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&basecalled_fail_bases_) -
    reinterpret_cast<char*>(&read_count_)) + sizeof(basecalled_fail_bases_));
}

AcquisitionYieldSummary::~AcquisitionYieldSummary() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.AcquisitionYieldSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcquisitionYieldSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AcquisitionYieldSummary::ArenaDtor(void* object) {
  AcquisitionYieldSummary* _this = reinterpret_cast< AcquisitionYieldSummary* >(object);
  (void)_this;
}
void AcquisitionYieldSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcquisitionYieldSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcquisitionYieldSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.AcquisitionYieldSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&read_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basecalled_fail_bases_) -
      reinterpret_cast<char*>(&read_count_)) + sizeof(basecalled_fail_bases_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcquisitionYieldSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 read_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_pass_read_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          basecalled_pass_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_fail_read_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          basecalled_fail_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_pass_bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          basecalled_pass_bases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_samples = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          basecalled_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 selected_raw_samples = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          selected_raw_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 selected_events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          selected_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 estimated_selected_bases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          estimated_selected_bases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_skipped_read_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          basecalled_skipped_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 alignment_matches = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          alignment_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 alignment_mismatches = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          alignment_mismatches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 alignment_insertions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          alignment_insertions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 alignment_deletions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          alignment_deletions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 basecalled_fail_bases = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          basecalled_fail_bases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float alignment_coverage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          alignment_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcquisitionYieldSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.AcquisitionYieldSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 read_count = 1;
  if (this->_internal_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_read_count(), target);
  }

  // int64 basecalled_pass_read_count = 3;
  if (this->_internal_basecalled_pass_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_basecalled_pass_read_count(), target);
  }

  // int64 basecalled_fail_read_count = 4;
  if (this->_internal_basecalled_fail_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_basecalled_fail_read_count(), target);
  }

  // int64 basecalled_pass_bases = 5;
  if (this->_internal_basecalled_pass_bases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_basecalled_pass_bases(), target);
  }

  // int64 basecalled_samples = 6;
  if (this->_internal_basecalled_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_basecalled_samples(), target);
  }

  // int64 selected_raw_samples = 7;
  if (this->_internal_selected_raw_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_selected_raw_samples(), target);
  }

  // int64 selected_events = 8;
  if (this->_internal_selected_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_selected_events(), target);
  }

  // int64 estimated_selected_bases = 9;
  if (this->_internal_estimated_selected_bases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_estimated_selected_bases(), target);
  }

  // int64 basecalled_skipped_read_count = 10;
  if (this->_internal_basecalled_skipped_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_basecalled_skipped_read_count(), target);
  }

  // int64 alignment_matches = 14;
  if (this->_internal_alignment_matches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_alignment_matches(), target);
  }

  // int64 alignment_mismatches = 15;
  if (this->_internal_alignment_mismatches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_alignment_mismatches(), target);
  }

  // int64 alignment_insertions = 16;
  if (this->_internal_alignment_insertions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_alignment_insertions(), target);
  }

  // int64 alignment_deletions = 17;
  if (this->_internal_alignment_deletions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_alignment_deletions(), target);
  }

  // int64 basecalled_fail_bases = 18;
  if (this->_internal_basecalled_fail_bases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_basecalled_fail_bases(), target);
  }

  // float alignment_coverage = 19;
  if (!(this->_internal_alignment_coverage() <= 0 && this->_internal_alignment_coverage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_alignment_coverage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.AcquisitionYieldSummary)
  return target;
}

size_t AcquisitionYieldSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.AcquisitionYieldSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 read_count = 1;
  if (this->_internal_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_read_count());
  }

  // int64 basecalled_pass_read_count = 3;
  if (this->_internal_basecalled_pass_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basecalled_pass_read_count());
  }

  // int64 basecalled_fail_read_count = 4;
  if (this->_internal_basecalled_fail_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basecalled_fail_read_count());
  }

  // int64 basecalled_pass_bases = 5;
  if (this->_internal_basecalled_pass_bases() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basecalled_pass_bases());
  }

  // int64 basecalled_samples = 6;
  if (this->_internal_basecalled_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basecalled_samples());
  }

  // int64 selected_raw_samples = 7;
  if (this->_internal_selected_raw_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_selected_raw_samples());
  }

  // int64 selected_events = 8;
  if (this->_internal_selected_events() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_selected_events());
  }

  // int64 estimated_selected_bases = 9;
  if (this->_internal_estimated_selected_bases() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_estimated_selected_bases());
  }

  // int64 basecalled_skipped_read_count = 10;
  if (this->_internal_basecalled_skipped_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_basecalled_skipped_read_count());
  }

  // int64 alignment_matches = 14;
  if (this->_internal_alignment_matches() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_alignment_matches());
  }

  // int64 alignment_mismatches = 15;
  if (this->_internal_alignment_mismatches() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_alignment_mismatches());
  }

  // int64 alignment_insertions = 16;
  if (this->_internal_alignment_insertions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_alignment_insertions());
  }

  // float alignment_coverage = 19;
  if (!(this->_internal_alignment_coverage() <= 0 && this->_internal_alignment_coverage() >= 0)) {
    total_size += 2 + 4;
  }

  // int64 alignment_deletions = 17;
  if (this->_internal_alignment_deletions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_alignment_deletions());
  }

  // int64 basecalled_fail_bases = 18;
  if (this->_internal_basecalled_fail_bases() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_basecalled_fail_bases());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcquisitionYieldSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcquisitionYieldSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcquisitionYieldSummary::GetClassData() const { return &_class_data_; }

void AcquisitionYieldSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcquisitionYieldSummary *>(to)->MergeFrom(
      static_cast<const AcquisitionYieldSummary &>(from));
}


void AcquisitionYieldSummary::MergeFrom(const AcquisitionYieldSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.AcquisitionYieldSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_read_count() != 0) {
    _internal_set_read_count(from._internal_read_count());
  }
  if (from._internal_basecalled_pass_read_count() != 0) {
    _internal_set_basecalled_pass_read_count(from._internal_basecalled_pass_read_count());
  }
  if (from._internal_basecalled_fail_read_count() != 0) {
    _internal_set_basecalled_fail_read_count(from._internal_basecalled_fail_read_count());
  }
  if (from._internal_basecalled_pass_bases() != 0) {
    _internal_set_basecalled_pass_bases(from._internal_basecalled_pass_bases());
  }
  if (from._internal_basecalled_samples() != 0) {
    _internal_set_basecalled_samples(from._internal_basecalled_samples());
  }
  if (from._internal_selected_raw_samples() != 0) {
    _internal_set_selected_raw_samples(from._internal_selected_raw_samples());
  }
  if (from._internal_selected_events() != 0) {
    _internal_set_selected_events(from._internal_selected_events());
  }
  if (from._internal_estimated_selected_bases() != 0) {
    _internal_set_estimated_selected_bases(from._internal_estimated_selected_bases());
  }
  if (from._internal_basecalled_skipped_read_count() != 0) {
    _internal_set_basecalled_skipped_read_count(from._internal_basecalled_skipped_read_count());
  }
  if (from._internal_alignment_matches() != 0) {
    _internal_set_alignment_matches(from._internal_alignment_matches());
  }
  if (from._internal_alignment_mismatches() != 0) {
    _internal_set_alignment_mismatches(from._internal_alignment_mismatches());
  }
  if (from._internal_alignment_insertions() != 0) {
    _internal_set_alignment_insertions(from._internal_alignment_insertions());
  }
  if (!(from._internal_alignment_coverage() <= 0 && from._internal_alignment_coverage() >= 0)) {
    _internal_set_alignment_coverage(from._internal_alignment_coverage());
  }
  if (from._internal_alignment_deletions() != 0) {
    _internal_set_alignment_deletions(from._internal_alignment_deletions());
  }
  if (from._internal_basecalled_fail_bases() != 0) {
    _internal_set_basecalled_fail_bases(from._internal_basecalled_fail_bases());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcquisitionYieldSummary::CopyFrom(const AcquisitionYieldSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.AcquisitionYieldSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionYieldSummary::IsInitialized() const {
  return true;
}

void AcquisitionYieldSummary::InternalSwap(AcquisitionYieldSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcquisitionYieldSummary, basecalled_fail_bases_)
      + sizeof(AcquisitionYieldSummary::basecalled_fail_bases_)
      - PROTOBUF_FIELD_OFFSET(AcquisitionYieldSummary, read_count_)>(
          reinterpret_cast<char*>(&read_count_),
          reinterpret_cast<char*>(&other->read_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcquisitionYieldSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[12]);
}

// ===================================================================

class AcquisitionWriterSummary::_Internal {
 public:
};

AcquisitionWriterSummary::AcquisitionWriterSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.AcquisitionWriterSummary)
}
AcquisitionWriterSummary::AcquisitionWriterSummary(const AcquisitionWriterSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&written_read_count_, &from.written_read_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_to_write_completed_) -
    reinterpret_cast<char*>(&written_read_count_)) + sizeof(bytes_to_write_completed_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.AcquisitionWriterSummary)
}

void AcquisitionWriterSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&written_read_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_to_write_completed_) -
    reinterpret_cast<char*>(&written_read_count_)) + sizeof(bytes_to_write_completed_));
}

AcquisitionWriterSummary::~AcquisitionWriterSummary() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.AcquisitionWriterSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcquisitionWriterSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AcquisitionWriterSummary::ArenaDtor(void* object) {
  AcquisitionWriterSummary* _this = reinterpret_cast< AcquisitionWriterSummary* >(object);
  (void)_this;
}
void AcquisitionWriterSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcquisitionWriterSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcquisitionWriterSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.AcquisitionWriterSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&written_read_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_to_write_completed_) -
      reinterpret_cast<char*>(&written_read_count_)) + sizeof(bytes_to_write_completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcquisitionWriterSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 written_read_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          written_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_to_write_produced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_to_write_produced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_to_write_failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bytes_to_write_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_to_write_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bytes_to_write_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcquisitionWriterSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.AcquisitionWriterSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 written_read_count = 1;
  if (this->_internal_written_read_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_written_read_count(), target);
  }

  // int64 bytes_to_write_produced = 2;
  if (this->_internal_bytes_to_write_produced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_to_write_produced(), target);
  }

  // int64 bytes_to_write_failed = 3;
  if (this->_internal_bytes_to_write_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_bytes_to_write_failed(), target);
  }

  // int64 bytes_to_write_completed = 4;
  if (this->_internal_bytes_to_write_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_bytes_to_write_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.AcquisitionWriterSummary)
  return target;
}

size_t AcquisitionWriterSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.AcquisitionWriterSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 written_read_count = 1;
  if (this->_internal_written_read_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_written_read_count());
  }

  // int64 bytes_to_write_produced = 2;
  if (this->_internal_bytes_to_write_produced() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_to_write_produced());
  }

  // int64 bytes_to_write_failed = 3;
  if (this->_internal_bytes_to_write_failed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_to_write_failed());
  }

  // int64 bytes_to_write_completed = 4;
  if (this->_internal_bytes_to_write_completed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_to_write_completed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcquisitionWriterSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcquisitionWriterSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcquisitionWriterSummary::GetClassData() const { return &_class_data_; }

void AcquisitionWriterSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcquisitionWriterSummary *>(to)->MergeFrom(
      static_cast<const AcquisitionWriterSummary &>(from));
}


void AcquisitionWriterSummary::MergeFrom(const AcquisitionWriterSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.AcquisitionWriterSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_written_read_count() != 0) {
    _internal_set_written_read_count(from._internal_written_read_count());
  }
  if (from._internal_bytes_to_write_produced() != 0) {
    _internal_set_bytes_to_write_produced(from._internal_bytes_to_write_produced());
  }
  if (from._internal_bytes_to_write_failed() != 0) {
    _internal_set_bytes_to_write_failed(from._internal_bytes_to_write_failed());
  }
  if (from._internal_bytes_to_write_completed() != 0) {
    _internal_set_bytes_to_write_completed(from._internal_bytes_to_write_completed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcquisitionWriterSummary::CopyFrom(const AcquisitionWriterSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.AcquisitionWriterSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionWriterSummary::IsInitialized() const {
  return true;
}

void AcquisitionWriterSummary::InternalSwap(AcquisitionWriterSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcquisitionWriterSummary, bytes_to_write_completed_)
      + sizeof(AcquisitionWriterSummary::bytes_to_write_completed_)
      - PROTOBUF_FIELD_OFFSET(AcquisitionWriterSummary, written_read_count_)>(
          reinterpret_cast<char*>(&written_read_count_),
          reinterpret_cast<char*>(&other->written_read_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcquisitionWriterSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[13]);
}

// ===================================================================

class ChannelStateInfo_Style::_Internal {
 public:
};

ChannelStateInfo_Style::ChannelStateInfo_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ChannelStateInfo.Style)
}
ChannelStateInfo_Style::ChannelStateInfo_Style(const ChannelStateInfo_Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_colour().empty()) {
    colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_colour(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ChannelStateInfo.Style)
}

void ChannelStateInfo_Style::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelStateInfo_Style::~ChannelStateInfo_Style() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.ChannelStateInfo.Style)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStateInfo_Style::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  colour_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelStateInfo_Style::ArenaDtor(void* object) {
  ChannelStateInfo_Style* _this = reinterpret_cast< ChannelStateInfo_Style* >(object);
  (void)_this;
}
void ChannelStateInfo_Style::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStateInfo_Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStateInfo_Style::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.ChannelStateInfo.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  description_.ClearToEmpty();
  colour_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStateInfo_Style::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ChannelStateInfo.Style.label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ChannelStateInfo.Style.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string colour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_colour();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ChannelStateInfo.Style.colour"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStateInfo_Style::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.ChannelStateInfo.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ChannelStateInfo.Style.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ChannelStateInfo.Style.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_colour().data(), static_cast<int>(this->_internal_colour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ChannelStateInfo.Style.colour");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_colour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.ChannelStateInfo.Style)
  return target;
}

size_t ChannelStateInfo_Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.ChannelStateInfo.Style)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_colour());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStateInfo_Style::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStateInfo_Style::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStateInfo_Style::GetClassData() const { return &_class_data_; }

void ChannelStateInfo_Style::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStateInfo_Style *>(to)->MergeFrom(
      static_cast<const ChannelStateInfo_Style &>(from));
}


void ChannelStateInfo_Style::MergeFrom(const ChannelStateInfo_Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.ChannelStateInfo.Style)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_colour().empty()) {
    _internal_set_colour(from._internal_colour());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStateInfo_Style::CopyFrom(const ChannelStateInfo_Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.ChannelStateInfo.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStateInfo_Style::IsInitialized() const {
  return true;
}

void ChannelStateInfo_Style::InternalSwap(ChannelStateInfo_Style* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &colour_, lhs_arena,
      &other->colour_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStateInfo_Style::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[14]);
}

// ===================================================================

class ChannelStateInfo_ChannelState::_Internal {
 public:
  static const ::minknow_api::acquisition::ChannelStateInfo_Style& style(const ChannelStateInfo_ChannelState* msg);
};

const ::minknow_api::acquisition::ChannelStateInfo_Style&
ChannelStateInfo_ChannelState::_Internal::style(const ChannelStateInfo_ChannelState* msg) {
  return *msg->style_;
}
ChannelStateInfo_ChannelState::ChannelStateInfo_ChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ChannelStateInfo.ChannelState)
}
ChannelStateInfo_ChannelState::ChannelStateInfo_ChannelState(const ChannelStateInfo_ChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::acquisition::ChannelStateInfo_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_order_) -
    reinterpret_cast<char*>(&id_)) + sizeof(global_order_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ChannelStateInfo.ChannelState)
}

void ChannelStateInfo_ChannelState::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&global_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(global_order_));
}

ChannelStateInfo_ChannelState::~ChannelStateInfo_ChannelState() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStateInfo_ChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void ChannelStateInfo_ChannelState::ArenaDtor(void* object) {
  ChannelStateInfo_ChannelState* _this = reinterpret_cast< ChannelStateInfo_ChannelState* >(object);
  (void)_this;
}
void ChannelStateInfo_ChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStateInfo_ChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStateInfo_ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_order_) -
      reinterpret_cast<char*>(&id_)) + sizeof(global_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStateInfo_ChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ChannelStateInfo.ChannelState.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.ChannelStateInfo.Style style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          global_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStateInfo_ChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ChannelStateInfo.ChannelState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 3;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  // uint32 global_order = 4;
  if (this->_internal_global_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_global_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  return target;
}

size_t ChannelStateInfo_ChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 3;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 global_order = 4;
  if (this->_internal_global_order() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_global_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStateInfo_ChannelState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStateInfo_ChannelState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStateInfo_ChannelState::GetClassData() const { return &_class_data_; }

void ChannelStateInfo_ChannelState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStateInfo_ChannelState *>(to)->MergeFrom(
      static_cast<const ChannelStateInfo_ChannelState &>(from));
}


void ChannelStateInfo_ChannelState::MergeFrom(const ChannelStateInfo_ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::acquisition::ChannelStateInfo_Style::MergeFrom(from._internal_style());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_global_order() != 0) {
    _internal_set_global_order(from._internal_global_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStateInfo_ChannelState::CopyFrom(const ChannelStateInfo_ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.ChannelStateInfo.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStateInfo_ChannelState::IsInitialized() const {
  return true;
}

void ChannelStateInfo_ChannelState::InternalSwap(ChannelStateInfo_ChannelState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStateInfo_ChannelState, global_order_)
      + sizeof(ChannelStateInfo_ChannelState::global_order_)
      - PROTOBUF_FIELD_OFFSET(ChannelStateInfo_ChannelState, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStateInfo_ChannelState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[15]);
}

// ===================================================================

class ChannelStateInfo_Group::_Internal {
 public:
  static const ::minknow_api::acquisition::ChannelStateInfo_Style& style(const ChannelStateInfo_Group* msg);
};

const ::minknow_api::acquisition::ChannelStateInfo_Style&
ChannelStateInfo_Group::_Internal::style(const ChannelStateInfo_Group* msg) {
  return *msg->style_;
}
ChannelStateInfo_Group::ChannelStateInfo_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ChannelStateInfo.Group)
}
ChannelStateInfo_Group::ChannelStateInfo_Group(const ChannelStateInfo_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::acquisition::ChannelStateInfo_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ChannelStateInfo.Group)
}

void ChannelStateInfo_Group::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_ = nullptr;
}

ChannelStateInfo_Group::~ChannelStateInfo_Group() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.ChannelStateInfo.Group)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStateInfo_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void ChannelStateInfo_Group::ArenaDtor(void* object) {
  ChannelStateInfo_Group* _this = reinterpret_cast< ChannelStateInfo_Group* >(object);
  (void)_this;
}
void ChannelStateInfo_Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStateInfo_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStateInfo_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.ChannelStateInfo.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStateInfo_Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ChannelStateInfo.Group.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.ChannelStateInfo.Style style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.acquisition.ChannelStateInfo.ChannelState states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStateInfo_Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.ChannelStateInfo.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ChannelStateInfo.Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 2;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  // repeated .minknow_api.acquisition.ChannelStateInfo.ChannelState states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.ChannelStateInfo.Group)
  return target;
}

size_t ChannelStateInfo_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.ChannelStateInfo.Group)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.acquisition.ChannelStateInfo.ChannelState states = 3;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 2;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStateInfo_Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStateInfo_Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStateInfo_Group::GetClassData() const { return &_class_data_; }

void ChannelStateInfo_Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStateInfo_Group *>(to)->MergeFrom(
      static_cast<const ChannelStateInfo_Group &>(from));
}


void ChannelStateInfo_Group::MergeFrom(const ChannelStateInfo_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.ChannelStateInfo.Group)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::acquisition::ChannelStateInfo_Style::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStateInfo_Group::CopyFrom(const ChannelStateInfo_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.ChannelStateInfo.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStateInfo_Group::IsInitialized() const {
  return true;
}

void ChannelStateInfo_Group::InternalSwap(ChannelStateInfo_Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStateInfo_Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[16]);
}

// ===================================================================

class ChannelStateInfo::_Internal {
 public:
};

ChannelStateInfo::ChannelStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ChannelStateInfo)
}
ChannelStateInfo::ChannelStateInfo(const ChannelStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ChannelStateInfo)
}

void ChannelStateInfo::SharedCtor() {
}

ChannelStateInfo::~ChannelStateInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.ChannelStateInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelStateInfo::ArenaDtor(void* object) {
  ChannelStateInfo* _this = reinterpret_cast< ChannelStateInfo* >(object);
  (void)_this;
}
void ChannelStateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.ChannelStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.acquisition.ChannelStateInfo.Group groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.ChannelStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.acquisition.ChannelStateInfo.Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.ChannelStateInfo)
  return target;
}

size_t ChannelStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.ChannelStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.acquisition.ChannelStateInfo.Group groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStateInfo::GetClassData() const { return &_class_data_; }

void ChannelStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStateInfo *>(to)->MergeFrom(
      static_cast<const ChannelStateInfo &>(from));
}


void ChannelStateInfo::MergeFrom(const ChannelStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.ChannelStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStateInfo::CopyFrom(const ChannelStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.ChannelStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStateInfo::IsInitialized() const {
  return true;
}

void ChannelStateInfo::InternalSwap(ChannelStateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStateInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[17]);
}

// ===================================================================

class AcquisitionConfigSummary::_Internal {
 public:
  static const ::minknow_api::acquisition::ChannelStateInfo& channel_state_info(const AcquisitionConfigSummary* msg);
};

const ::minknow_api::acquisition::ChannelStateInfo&
AcquisitionConfigSummary::_Internal::channel_state_info(const AcquisitionConfigSummary* msg) {
  return *msg->channel_state_info_;
}
AcquisitionConfigSummary::AcquisitionConfigSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reads_fallback_directories_(arena),
  barcoding_kits_(arena),
  alignment_reference_files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.AcquisitionConfigSummary)
}
AcquisitionConfigSummary::AcquisitionConfigSummary(const AcquisitionConfigSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reads_fallback_directories_(from.reads_fallback_directories_),
      barcoding_kits_(from.barcoding_kits_),
      alignment_reference_files_(from.alignment_reference_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reads_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reads_directory().empty()) {
    reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reads_directory(), 
      GetArenaForAllocation());
  }
  bulk_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bulk_file_path().empty()) {
    bulk_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bulk_file_path(), 
      GetArenaForAllocation());
  }
  basecalling_config_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basecalling_config_filename().empty()) {
    basecalling_config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basecalling_config_filename(), 
      GetArenaForAllocation());
  }
  alignment_bed_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alignment_bed_file().empty()) {
    alignment_bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alignment_bed_file(), 
      GetArenaForAllocation());
  }
  lamp_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lamp_kit().empty()) {
    lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lamp_kit(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_channel_state_info()) {
    channel_state_info_ = new ::minknow_api::acquisition::ChannelStateInfo(*from.channel_state_info_);
  } else {
    channel_state_info_ = nullptr;
  }
  ::memcpy(&fast5_reads_enabled_, &from.fast5_reads_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&fast5_reads_enabled_)) + sizeof(purpose_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.AcquisitionConfigSummary)
}

void AcquisitionConfigSummary::SharedCtor() {
reads_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bulk_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
basecalling_config_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alignment_bed_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lamp_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_state_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&channel_state_info_)) + sizeof(purpose_));
}

AcquisitionConfigSummary::~AcquisitionConfigSummary() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.AcquisitionConfigSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcquisitionConfigSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reads_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bulk_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  basecalling_config_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alignment_bed_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lamp_kit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_state_info_;
}

void AcquisitionConfigSummary::ArenaDtor(void* object) {
  AcquisitionConfigSummary* _this = reinterpret_cast< AcquisitionConfigSummary* >(object);
  (void)_this;
}
void AcquisitionConfigSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcquisitionConfigSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcquisitionConfigSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.AcquisitionConfigSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reads_fallback_directories_.Clear();
  barcoding_kits_.Clear();
  alignment_reference_files_.Clear();
  reads_directory_.ClearToEmpty();
  bulk_file_path_.ClearToEmpty();
  basecalling_config_filename_.ClearToEmpty();
  alignment_bed_file_.ClearToEmpty();
  lamp_kit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && channel_state_info_ != nullptr) {
    delete channel_state_info_;
  }
  channel_state_info_ = nullptr;
  ::memset(&fast5_reads_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purpose_) -
      reinterpret_cast<char*>(&fast5_reads_enabled_)) + sizeof(purpose_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcquisitionConfigSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool basecalling_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          basecalling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reads_directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reads_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.reads_directory"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string reads_fallback_directories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reads_fallback_directories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool fast5_reads_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fast5_reads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fastq_reads_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fastq_reads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool protobuf_reads_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          protobuf_reads_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bulk_file_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_bulk_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bulk_file_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bulk_file_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.ChannelStateInfo channel_state_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_state_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float events_to_base_ratio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          events_to_base_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_rate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool barcoding_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          barcoding_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool alignment_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          alignment_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lamp_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lamp_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string basecalling_config_filename = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_basecalling_config_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string barcoding_kits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_barcoding_kits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string alignment_reference_files = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_alignment_reference_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string alignment_bed_file = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_alignment_bed_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lamp_kit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_lamp_kit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.Purpose purpose = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_purpose(static_cast<::minknow_api::acquisition::Purpose>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcquisitionConfigSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.AcquisitionConfigSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool basecalling_enabled = 1;
  if (this->_internal_basecalling_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_basecalling_enabled(), target);
  }

  // string reads_directory = 2;
  if (!this->_internal_reads_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reads_directory().data(), static_cast<int>(this->_internal_reads_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.reads_directory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reads_directory(), target);
  }

  // repeated string reads_fallback_directories = 3;
  for (int i = 0, n = this->_internal_reads_fallback_directories_size(); i < n; i++) {
    const auto& s = this->_internal_reads_fallback_directories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories");
    target = stream->WriteString(3, s, target);
  }

  // bool fast5_reads_enabled = 4;
  if (this->_internal_fast5_reads_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fast5_reads_enabled(), target);
  }

  // bool fastq_reads_enabled = 5;
  if (this->_internal_fastq_reads_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fastq_reads_enabled(), target);
  }

  // bool protobuf_reads_enabled = 6;
  if (this->_internal_protobuf_reads_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_protobuf_reads_enabled(), target);
  }

  // string bulk_file_path = 7;
  if (!this->_internal_bulk_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bulk_file_path().data(), static_cast<int>(this->_internal_bulk_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_bulk_file_path(), target);
  }

  // bool bulk_file_enabled = 8;
  if (this->_internal_bulk_file_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bulk_file_enabled(), target);
  }

  // .minknow_api.acquisition.ChannelStateInfo channel_state_info = 9;
  if (this->_internal_has_channel_state_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::channel_state_info(this), target, stream);
  }

  // float events_to_base_ratio = 10;
  if (!(this->_internal_events_to_base_ratio() <= 0 && this->_internal_events_to_base_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_events_to_base_ratio(), target);
  }

  // uint32 sample_rate = 11;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sample_rate(), target);
  }

  // uint32 channel_count = 12;
  if (this->_internal_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_channel_count(), target);
  }

  // bool barcoding_enabled = 13;
  if (this->_internal_barcoding_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_barcoding_enabled(), target);
  }

  // bool alignment_enabled = 14;
  if (this->_internal_alignment_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_alignment_enabled(), target);
  }

  // bool lamp_enabled = 15;
  if (this->_internal_lamp_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_lamp_enabled(), target);
  }

  // string basecalling_config_filename = 16;
  if (!this->_internal_basecalling_config_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basecalling_config_filename().data(), static_cast<int>(this->_internal_basecalling_config_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_basecalling_config_filename(), target);
  }

  // repeated string barcoding_kits = 17;
  for (int i = 0, n = this->_internal_barcoding_kits_size(); i < n; i++) {
    const auto& s = this->_internal_barcoding_kits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits");
    target = stream->WriteString(17, s, target);
  }

  // repeated string alignment_reference_files = 18;
  for (int i = 0, n = this->_internal_alignment_reference_files_size(); i < n; i++) {
    const auto& s = this->_internal_alignment_reference_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files");
    target = stream->WriteString(18, s, target);
  }

  // string alignment_bed_file = 19;
  if (!this->_internal_alignment_bed_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alignment_bed_file().data(), static_cast<int>(this->_internal_alignment_bed_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_alignment_bed_file(), target);
  }

  // string lamp_kit = 20;
  if (!this->_internal_lamp_kit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lamp_kit().data(), static_cast<int>(this->_internal_lamp_kit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_lamp_kit(), target);
  }

  // .minknow_api.acquisition.Purpose purpose = 21;
  if (this->_internal_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.AcquisitionConfigSummary)
  return target;
}

size_t AcquisitionConfigSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.AcquisitionConfigSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reads_fallback_directories = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reads_fallback_directories_.size());
  for (int i = 0, n = reads_fallback_directories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reads_fallback_directories_.Get(i));
  }

  // repeated string barcoding_kits = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(barcoding_kits_.size());
  for (int i = 0, n = barcoding_kits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      barcoding_kits_.Get(i));
  }

  // repeated string alignment_reference_files = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alignment_reference_files_.size());
  for (int i = 0, n = alignment_reference_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alignment_reference_files_.Get(i));
  }

  // string reads_directory = 2;
  if (!this->_internal_reads_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reads_directory());
  }

  // string bulk_file_path = 7;
  if (!this->_internal_bulk_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bulk_file_path());
  }

  // string basecalling_config_filename = 16;
  if (!this->_internal_basecalling_config_filename().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basecalling_config_filename());
  }

  // string alignment_bed_file = 19;
  if (!this->_internal_alignment_bed_file().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alignment_bed_file());
  }

  // string lamp_kit = 20;
  if (!this->_internal_lamp_kit().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lamp_kit());
  }

  // .minknow_api.acquisition.ChannelStateInfo channel_state_info = 9;
  if (this->_internal_has_channel_state_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_state_info_);
  }

  // bool fast5_reads_enabled = 4;
  if (this->_internal_fast5_reads_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool fastq_reads_enabled = 5;
  if (this->_internal_fastq_reads_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool protobuf_reads_enabled = 6;
  if (this->_internal_protobuf_reads_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool bulk_file_enabled = 8;
  if (this->_internal_bulk_file_enabled() != 0) {
    total_size += 1 + 1;
  }

  // float events_to_base_ratio = 10;
  if (!(this->_internal_events_to_base_ratio() <= 0 && this->_internal_events_to_base_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // bool basecalling_enabled = 1;
  if (this->_internal_basecalling_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool barcoding_enabled = 13;
  if (this->_internal_barcoding_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool alignment_enabled = 14;
  if (this->_internal_alignment_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool lamp_enabled = 15;
  if (this->_internal_lamp_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sample_rate = 11;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_rate());
  }

  // uint32 channel_count = 12;
  if (this->_internal_channel_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_count());
  }

  // .minknow_api.acquisition.Purpose purpose = 21;
  if (this->_internal_purpose() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcquisitionConfigSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcquisitionConfigSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcquisitionConfigSummary::GetClassData() const { return &_class_data_; }

void AcquisitionConfigSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcquisitionConfigSummary *>(to)->MergeFrom(
      static_cast<const AcquisitionConfigSummary &>(from));
}


void AcquisitionConfigSummary::MergeFrom(const AcquisitionConfigSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.AcquisitionConfigSummary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reads_fallback_directories_.MergeFrom(from.reads_fallback_directories_);
  barcoding_kits_.MergeFrom(from.barcoding_kits_);
  alignment_reference_files_.MergeFrom(from.alignment_reference_files_);
  if (!from._internal_reads_directory().empty()) {
    _internal_set_reads_directory(from._internal_reads_directory());
  }
  if (!from._internal_bulk_file_path().empty()) {
    _internal_set_bulk_file_path(from._internal_bulk_file_path());
  }
  if (!from._internal_basecalling_config_filename().empty()) {
    _internal_set_basecalling_config_filename(from._internal_basecalling_config_filename());
  }
  if (!from._internal_alignment_bed_file().empty()) {
    _internal_set_alignment_bed_file(from._internal_alignment_bed_file());
  }
  if (!from._internal_lamp_kit().empty()) {
    _internal_set_lamp_kit(from._internal_lamp_kit());
  }
  if (from._internal_has_channel_state_info()) {
    _internal_mutable_channel_state_info()->::minknow_api::acquisition::ChannelStateInfo::MergeFrom(from._internal_channel_state_info());
  }
  if (from._internal_fast5_reads_enabled() != 0) {
    _internal_set_fast5_reads_enabled(from._internal_fast5_reads_enabled());
  }
  if (from._internal_fastq_reads_enabled() != 0) {
    _internal_set_fastq_reads_enabled(from._internal_fastq_reads_enabled());
  }
  if (from._internal_protobuf_reads_enabled() != 0) {
    _internal_set_protobuf_reads_enabled(from._internal_protobuf_reads_enabled());
  }
  if (from._internal_bulk_file_enabled() != 0) {
    _internal_set_bulk_file_enabled(from._internal_bulk_file_enabled());
  }
  if (!(from._internal_events_to_base_ratio() <= 0 && from._internal_events_to_base_ratio() >= 0)) {
    _internal_set_events_to_base_ratio(from._internal_events_to_base_ratio());
  }
  if (from._internal_basecalling_enabled() != 0) {
    _internal_set_basecalling_enabled(from._internal_basecalling_enabled());
  }
  if (from._internal_barcoding_enabled() != 0) {
    _internal_set_barcoding_enabled(from._internal_barcoding_enabled());
  }
  if (from._internal_alignment_enabled() != 0) {
    _internal_set_alignment_enabled(from._internal_alignment_enabled());
  }
  if (from._internal_lamp_enabled() != 0) {
    _internal_set_lamp_enabled(from._internal_lamp_enabled());
  }
  if (from._internal_sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from._internal_channel_count() != 0) {
    _internal_set_channel_count(from._internal_channel_count());
  }
  if (from._internal_purpose() != 0) {
    _internal_set_purpose(from._internal_purpose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcquisitionConfigSummary::CopyFrom(const AcquisitionConfigSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.AcquisitionConfigSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionConfigSummary::IsInitialized() const {
  return true;
}

void AcquisitionConfigSummary::InternalSwap(AcquisitionConfigSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reads_fallback_directories_.InternalSwap(&other->reads_fallback_directories_);
  barcoding_kits_.InternalSwap(&other->barcoding_kits_);
  alignment_reference_files_.InternalSwap(&other->alignment_reference_files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reads_directory_, lhs_arena,
      &other->reads_directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bulk_file_path_, lhs_arena,
      &other->bulk_file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &basecalling_config_filename_, lhs_arena,
      &other->basecalling_config_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alignment_bed_file_, lhs_arena,
      &other->alignment_bed_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lamp_kit_, lhs_arena,
      &other->lamp_kit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcquisitionConfigSummary, purpose_)
      + sizeof(AcquisitionConfigSummary::purpose_)
      - PROTOBUF_FIELD_OFFSET(AcquisitionConfigSummary, channel_state_info_)>(
          reinterpret_cast<char*>(&channel_state_info_),
          reinterpret_cast<char*>(&other->channel_state_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcquisitionConfigSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[18]);
}

// ===================================================================

class AcquisitionRunInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& startup_state_estimated_end(const AcquisitionRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const AcquisitionRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_read_start_time(const AcquisitionRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_read_end_time(const AcquisitionRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const AcquisitionRunInfo* msg);
  static const ::minknow_api::acquisition::AcquisitionYieldSummary& yield_summary(const AcquisitionRunInfo* msg);
  static const ::minknow_api::acquisition::AcquisitionConfigSummary& config_summary(const AcquisitionRunInfo* msg);
  static const ::minknow_api::acquisition::AcquisitionWriterSummary& writer_summary(const AcquisitionRunInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcquisitionRunInfo::_Internal::startup_state_estimated_end(const AcquisitionRunInfo* msg) {
  return *msg->startup_state_estimated_end_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcquisitionRunInfo::_Internal::start_time(const AcquisitionRunInfo* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcquisitionRunInfo::_Internal::data_read_start_time(const AcquisitionRunInfo* msg) {
  return *msg->data_read_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcquisitionRunInfo::_Internal::data_read_end_time(const AcquisitionRunInfo* msg) {
  return *msg->data_read_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AcquisitionRunInfo::_Internal::end_time(const AcquisitionRunInfo* msg) {
  return *msg->end_time_;
}
const ::minknow_api::acquisition::AcquisitionYieldSummary&
AcquisitionRunInfo::_Internal::yield_summary(const AcquisitionRunInfo* msg) {
  return *msg->yield_summary_;
}
const ::minknow_api::acquisition::AcquisitionConfigSummary&
AcquisitionRunInfo::_Internal::config_summary(const AcquisitionRunInfo* msg) {
  return *msg->config_summary_;
}
const ::minknow_api::acquisition::AcquisitionWriterSummary&
AcquisitionRunInfo::_Internal::writer_summary(const AcquisitionRunInfo* msg) {
  return *msg->writer_summary_;
}
void AcquisitionRunInfo::clear_startup_state_estimated_end() {
  if (GetArenaForAllocation() == nullptr && startup_state_estimated_end_ != nullptr) {
    delete startup_state_estimated_end_;
  }
  startup_state_estimated_end_ = nullptr;
}
void AcquisitionRunInfo::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void AcquisitionRunInfo::clear_data_read_start_time() {
  if (GetArenaForAllocation() == nullptr && data_read_start_time_ != nullptr) {
    delete data_read_start_time_;
  }
  data_read_start_time_ = nullptr;
}
void AcquisitionRunInfo::clear_data_read_end_time() {
  if (GetArenaForAllocation() == nullptr && data_read_end_time_ != nullptr) {
    delete data_read_end_time_;
  }
  data_read_end_time_ = nullptr;
}
void AcquisitionRunInfo::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
AcquisitionRunInfo::AcquisitionRunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.AcquisitionRunInfo)
}
AcquisitionRunInfo::AcquisitionRunInfo(const AcquisitionRunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_data_read_start_time()) {
    data_read_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.data_read_start_time_);
  } else {
    data_read_start_time_ = nullptr;
  }
  if (from._internal_has_data_read_end_time()) {
    data_read_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.data_read_end_time_);
  } else {
    data_read_end_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_yield_summary()) {
    yield_summary_ = new ::minknow_api::acquisition::AcquisitionYieldSummary(*from.yield_summary_);
  } else {
    yield_summary_ = nullptr;
  }
  if (from._internal_has_config_summary()) {
    config_summary_ = new ::minknow_api::acquisition::AcquisitionConfigSummary(*from.config_summary_);
  } else {
    config_summary_ = nullptr;
  }
  if (from._internal_has_writer_summary()) {
    writer_summary_ = new ::minknow_api::acquisition::AcquisitionWriterSummary(*from.writer_summary_);
  } else {
    writer_summary_ = nullptr;
  }
  if (from._internal_has_startup_state_estimated_end()) {
    startup_state_estimated_end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.startup_state_estimated_end_);
  } else {
    startup_state_estimated_end_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&startup_state_estimated_percent_complete_) -
    reinterpret_cast<char*>(&state_)) + sizeof(startup_state_estimated_percent_complete_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.AcquisitionRunInfo)
}

void AcquisitionRunInfo::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startup_state_estimated_percent_complete_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(startup_state_estimated_percent_complete_));
}

AcquisitionRunInfo::~AcquisitionRunInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.AcquisitionRunInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AcquisitionRunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete data_read_start_time_;
  if (this != internal_default_instance()) delete data_read_end_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete yield_summary_;
  if (this != internal_default_instance()) delete config_summary_;
  if (this != internal_default_instance()) delete writer_summary_;
  if (this != internal_default_instance()) delete startup_state_estimated_end_;
}

void AcquisitionRunInfo::ArenaDtor(void* object) {
  AcquisitionRunInfo* _this = reinterpret_cast< AcquisitionRunInfo* >(object);
  (void)_this;
}
void AcquisitionRunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcquisitionRunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcquisitionRunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.AcquisitionRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_read_start_time_ != nullptr) {
    delete data_read_start_time_;
  }
  data_read_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_read_end_time_ != nullptr) {
    delete data_read_end_time_;
  }
  data_read_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && yield_summary_ != nullptr) {
    delete yield_summary_;
  }
  yield_summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && config_summary_ != nullptr) {
    delete config_summary_;
  }
  config_summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && writer_summary_ != nullptr) {
    delete writer_summary_;
  }
  writer_summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && startup_state_estimated_end_ != nullptr) {
    delete startup_state_estimated_end_;
  }
  startup_state_estimated_end_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startup_state_estimated_percent_complete_) -
      reinterpret_cast<char*>(&state_)) + sizeof(startup_state_estimated_percent_complete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcquisitionRunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.AcquisitionRunInfo.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minknow_api::acquisition::AcquisitionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionStopReason stop_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stop_reason(static_cast<::minknow_api::acquisition::AcquisitionStopReason>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp data_read_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_read_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp data_read_end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_read_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionConfigSummary config_summary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.FinishingState finishing_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_finishing_state(static_cast<::minknow_api::acquisition::FinishingState>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionWriterSummary writer_summary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_writer_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.StartupState startup_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_startup_state(static_cast<::minknow_api::acquisition::StartupState>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp startup_state_estimated_end = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_startup_state_estimated_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float startup_state_estimated_percent_complete = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          startup_state_estimated_percent_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcquisitionRunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.AcquisitionRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.AcquisitionRunInfo.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  // .minknow_api.acquisition.AcquisitionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .minknow_api.acquisition.AcquisitionStopReason stop_reason = 3;
  if (this->_internal_stop_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stop_reason(), target);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp data_read_start_time = 5;
  if (this->_internal_has_data_read_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data_read_start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp data_read_end_time = 6;
  if (this->_internal_has_data_read_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data_read_end_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 7;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::end_time(this), target, stream);
  }

  // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 8;
  if (this->_internal_has_yield_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::yield_summary(this), target, stream);
  }

  // .minknow_api.acquisition.AcquisitionConfigSummary config_summary = 9;
  if (this->_internal_has_config_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::config_summary(this), target, stream);
  }

  // .minknow_api.acquisition.FinishingState finishing_state = 10;
  if (this->_internal_finishing_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_finishing_state(), target);
  }

  // .minknow_api.acquisition.AcquisitionWriterSummary writer_summary = 11;
  if (this->_internal_has_writer_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::writer_summary(this), target, stream);
  }

  // .minknow_api.acquisition.StartupState startup_state = 12;
  if (this->_internal_startup_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_startup_state(), target);
  }

  // .google.protobuf.Timestamp startup_state_estimated_end = 13;
  if (this->_internal_has_startup_state_estimated_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::startup_state_estimated_end(this), target, stream);
  }

  // float startup_state_estimated_percent_complete = 14;
  if (!(this->_internal_startup_state_estimated_percent_complete() <= 0 && this->_internal_startup_state_estimated_percent_complete() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_startup_state_estimated_percent_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.AcquisitionRunInfo)
  return target;
}

size_t AcquisitionRunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.AcquisitionRunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp data_read_start_time = 5;
  if (this->_internal_has_data_read_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_read_start_time_);
  }

  // .google.protobuf.Timestamp data_read_end_time = 6;
  if (this->_internal_has_data_read_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_read_end_time_);
  }

  // .google.protobuf.Timestamp end_time = 7;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 8;
  if (this->_internal_has_yield_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yield_summary_);
  }

  // .minknow_api.acquisition.AcquisitionConfigSummary config_summary = 9;
  if (this->_internal_has_config_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_summary_);
  }

  // .minknow_api.acquisition.AcquisitionWriterSummary writer_summary = 11;
  if (this->_internal_has_writer_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *writer_summary_);
  }

  // .google.protobuf.Timestamp startup_state_estimated_end = 13;
  if (this->_internal_has_startup_state_estimated_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startup_state_estimated_end_);
  }

  // .minknow_api.acquisition.AcquisitionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .minknow_api.acquisition.AcquisitionStopReason stop_reason = 3;
  if (this->_internal_stop_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stop_reason());
  }

  // .minknow_api.acquisition.FinishingState finishing_state = 10;
  if (this->_internal_finishing_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_finishing_state());
  }

  // .minknow_api.acquisition.StartupState startup_state = 12;
  if (this->_internal_startup_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_startup_state());
  }

  // float startup_state_estimated_percent_complete = 14;
  if (!(this->_internal_startup_state_estimated_percent_complete() <= 0 && this->_internal_startup_state_estimated_percent_complete() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcquisitionRunInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcquisitionRunInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcquisitionRunInfo::GetClassData() const { return &_class_data_; }

void AcquisitionRunInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcquisitionRunInfo *>(to)->MergeFrom(
      static_cast<const AcquisitionRunInfo &>(from));
}


void AcquisitionRunInfo::MergeFrom(const AcquisitionRunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.AcquisitionRunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_data_read_start_time()) {
    _internal_mutable_data_read_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_data_read_start_time());
  }
  if (from._internal_has_data_read_end_time()) {
    _internal_mutable_data_read_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_data_read_end_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_has_yield_summary()) {
    _internal_mutable_yield_summary()->::minknow_api::acquisition::AcquisitionYieldSummary::MergeFrom(from._internal_yield_summary());
  }
  if (from._internal_has_config_summary()) {
    _internal_mutable_config_summary()->::minknow_api::acquisition::AcquisitionConfigSummary::MergeFrom(from._internal_config_summary());
  }
  if (from._internal_has_writer_summary()) {
    _internal_mutable_writer_summary()->::minknow_api::acquisition::AcquisitionWriterSummary::MergeFrom(from._internal_writer_summary());
  }
  if (from._internal_has_startup_state_estimated_end()) {
    _internal_mutable_startup_state_estimated_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_startup_state_estimated_end());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_stop_reason() != 0) {
    _internal_set_stop_reason(from._internal_stop_reason());
  }
  if (from._internal_finishing_state() != 0) {
    _internal_set_finishing_state(from._internal_finishing_state());
  }
  if (from._internal_startup_state() != 0) {
    _internal_set_startup_state(from._internal_startup_state());
  }
  if (!(from._internal_startup_state_estimated_percent_complete() <= 0 && from._internal_startup_state_estimated_percent_complete() >= 0)) {
    _internal_set_startup_state_estimated_percent_complete(from._internal_startup_state_estimated_percent_complete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcquisitionRunInfo::CopyFrom(const AcquisitionRunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.AcquisitionRunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionRunInfo::IsInitialized() const {
  return true;
}

void AcquisitionRunInfo::InternalSwap(AcquisitionRunInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcquisitionRunInfo, startup_state_estimated_percent_complete_)
      + sizeof(AcquisitionRunInfo::startup_state_estimated_percent_complete_)
      - PROTOBUF_FIELD_OFFSET(AcquisitionRunInfo, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcquisitionRunInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[19]);
}

// ===================================================================

class ListAcquisitionRunsRequest::_Internal {
 public:
};

ListAcquisitionRunsRequest::ListAcquisitionRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ListAcquisitionRunsRequest)
}
ListAcquisitionRunsRequest::ListAcquisitionRunsRequest(const ListAcquisitionRunsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ListAcquisitionRunsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAcquisitionRunsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAcquisitionRunsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListAcquisitionRunsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[20]);
}

// ===================================================================

class ListAcquisitionRunsResponse::_Internal {
 public:
};

ListAcquisitionRunsResponse::ListAcquisitionRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  run_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.ListAcquisitionRunsResponse)
}
ListAcquisitionRunsResponse::ListAcquisitionRunsResponse(const ListAcquisitionRunsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      run_ids_(from.run_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.ListAcquisitionRunsResponse)
}

void ListAcquisitionRunsResponse::SharedCtor() {
}

ListAcquisitionRunsResponse::~ListAcquisitionRunsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.ListAcquisitionRunsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAcquisitionRunsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListAcquisitionRunsResponse::ArenaDtor(void* object) {
  ListAcquisitionRunsResponse* _this = reinterpret_cast< ListAcquisitionRunsResponse* >(object);
  (void)_this;
}
void ListAcquisitionRunsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAcquisitionRunsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAcquisitionRunsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.ListAcquisitionRunsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAcquisitionRunsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string run_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_run_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAcquisitionRunsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.ListAcquisitionRunsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string run_ids = 1;
  for (int i = 0, n = this->_internal_run_ids_size(); i < n; i++) {
    const auto& s = this->_internal_run_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.ListAcquisitionRunsResponse)
  return target;
}

size_t ListAcquisitionRunsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.ListAcquisitionRunsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string run_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(run_ids_.size());
  for (int i = 0, n = run_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      run_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAcquisitionRunsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAcquisitionRunsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAcquisitionRunsResponse::GetClassData() const { return &_class_data_; }

void ListAcquisitionRunsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAcquisitionRunsResponse *>(to)->MergeFrom(
      static_cast<const ListAcquisitionRunsResponse &>(from));
}


void ListAcquisitionRunsResponse::MergeFrom(const ListAcquisitionRunsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.ListAcquisitionRunsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  run_ids_.MergeFrom(from.run_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAcquisitionRunsResponse::CopyFrom(const ListAcquisitionRunsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.ListAcquisitionRunsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAcquisitionRunsResponse::IsInitialized() const {
  return true;
}

void ListAcquisitionRunsResponse::InternalSwap(ListAcquisitionRunsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  run_ids_.InternalSwap(&other->run_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAcquisitionRunsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[21]);
}

// ===================================================================

class GetCurrentAcquisitionRunRequest::_Internal {
 public:
};

GetCurrentAcquisitionRunRequest::GetCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.GetCurrentAcquisitionRunRequest)
}
GetCurrentAcquisitionRunRequest::GetCurrentAcquisitionRunRequest(const GetCurrentAcquisitionRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.GetCurrentAcquisitionRunRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentAcquisitionRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentAcquisitionRunRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentAcquisitionRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[22]);
}

// ===================================================================

class WatchCurrentAcquisitionRunRequest::_Internal {
 public:
};

WatchCurrentAcquisitionRunRequest::WatchCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.WatchCurrentAcquisitionRunRequest)
}
WatchCurrentAcquisitionRunRequest::WatchCurrentAcquisitionRunRequest(const WatchCurrentAcquisitionRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.WatchCurrentAcquisitionRunRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchCurrentAcquisitionRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchCurrentAcquisitionRunRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WatchCurrentAcquisitionRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[23]);
}

// ===================================================================

class SetSignalReaderRequest::_Internal {
 public:
};

SetSignalReaderRequest::SetSignalReaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.SetSignalReaderRequest)
}
SetSignalReaderRequest::SetSignalReaderRequest(const SetSignalReaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hdf_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdf_source().empty()) {
    hdf_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hdf_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reader_, &from.reader_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_scale_factor_) -
    reinterpret_cast<char*>(&reader_)) + sizeof(sample_rate_scale_factor_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.SetSignalReaderRequest)
}

void SetSignalReaderRequest::SharedCtor() {
hdf_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_scale_factor_) -
    reinterpret_cast<char*>(&reader_)) + sizeof(sample_rate_scale_factor_));
}

SetSignalReaderRequest::~SetSignalReaderRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.acquisition.SetSignalReaderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetSignalReaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hdf_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSignalReaderRequest::ArenaDtor(void* object) {
  SetSignalReaderRequest* _this = reinterpret_cast< SetSignalReaderRequest* >(object);
  (void)_this;
}
void SetSignalReaderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSignalReaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSignalReaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.acquisition.SetSignalReaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdf_source_.ClearToEmpty();
  ::memset(&reader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_scale_factor_) -
      reinterpret_cast<char*>(&reader_)) + sizeof(sample_rate_scale_factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSignalReaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType reader = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reader(static_cast<::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType>(val));
        } else
          goto handle_unusual;
        continue;
      // string hdf_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hdf_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.acquisition.SetSignalReaderRequest.hdf_source"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode hdf_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hdf_mode(static_cast<::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode>(val));
        } else
          goto handle_unusual;
        continue;
      // float sample_rate_scale_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          sample_rate_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSignalReaderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.acquisition.SetSignalReaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType reader = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_reader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reader(), target);
  }

  // string hdf_source = 2;
  if (!this->_internal_hdf_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdf_source().data(), static_cast<int>(this->_internal_hdf_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.acquisition.SetSignalReaderRequest.hdf_source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hdf_source(), target);
  }

  // .minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode hdf_mode = 3;
  if (this->_internal_hdf_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_hdf_mode(), target);
  }

  // float sample_rate_scale_factor = 4;
  if (!(this->_internal_sample_rate_scale_factor() <= 0 && this->_internal_sample_rate_scale_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_sample_rate_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.acquisition.SetSignalReaderRequest)
  return target;
}

size_t SetSignalReaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.acquisition.SetSignalReaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdf_source = 2;
  if (!this->_internal_hdf_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdf_source());
  }

  // .minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType reader = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_reader() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reader());
  }

  // .minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode hdf_mode = 3;
  if (this->_internal_hdf_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hdf_mode());
  }

  // float sample_rate_scale_factor = 4;
  if (!(this->_internal_sample_rate_scale_factor() <= 0 && this->_internal_sample_rate_scale_factor() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSignalReaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSignalReaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSignalReaderRequest::GetClassData() const { return &_class_data_; }

void SetSignalReaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetSignalReaderRequest *>(to)->MergeFrom(
      static_cast<const SetSignalReaderRequest &>(from));
}


void SetSignalReaderRequest::MergeFrom(const SetSignalReaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.acquisition.SetSignalReaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hdf_source().empty()) {
    _internal_set_hdf_source(from._internal_hdf_source());
  }
  if (from._internal_reader() != 0) {
    _internal_set_reader(from._internal_reader());
  }
  if (from._internal_hdf_mode() != 0) {
    _internal_set_hdf_mode(from._internal_hdf_mode());
  }
  if (!(from._internal_sample_rate_scale_factor() <= 0 && from._internal_sample_rate_scale_factor() >= 0)) {
    _internal_set_sample_rate_scale_factor(from._internal_sample_rate_scale_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSignalReaderRequest::CopyFrom(const SetSignalReaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.acquisition.SetSignalReaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSignalReaderRequest::IsInitialized() const {
  return true;
}

void SetSignalReaderRequest::InternalSwap(SetSignalReaderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hdf_source_, lhs_arena,
      &other->hdf_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSignalReaderRequest, sample_rate_scale_factor_)
      + sizeof(SetSignalReaderRequest::sample_rate_scale_factor_)
      - PROTOBUF_FIELD_OFFSET(SetSignalReaderRequest, reader_)>(
          reinterpret_cast<char*>(&reader_),
          reinterpret_cast<char*>(&other->reader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSignalReaderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[24]);
}

// ===================================================================

class SetSignalReaderResponse::_Internal {
 public:
};

SetSignalReaderResponse::SetSignalReaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.acquisition.SetSignalReaderResponse)
}
SetSignalReaderResponse::SetSignalReaderResponse(const SetSignalReaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.acquisition.SetSignalReaderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSignalReaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSignalReaderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetSignalReaderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2facquisition_2eproto_getter, &descriptor_table_minknow_5fapi_2facquisition_2eproto_once,
      file_level_metadata_minknow_5fapi_2facquisition_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace acquisition
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::StartRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::StartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::StartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::StartResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::StartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::StartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::StopRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::StopResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::StopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::StopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::WatchForStatusChangeRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::WatchForStatusChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::WatchForStatusChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::WatchForStatusChangeResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::WatchForStatusChangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::WatchForStatusChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::CurrentStatusRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::CurrentStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::CurrentStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::CurrentStatusResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::CurrentStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::CurrentStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::GetProgressRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::GetProgressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::GetProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* Arena::CreateMaybeMessage< ::minknow_api::acquisition::GetProgressResponse_RawPerChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::GetProgressResponse_RawPerChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::GetProgressResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::GetProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::GetProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::GetAcquisitionRunInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::GetAcquisitionRunInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::AcquisitionYieldSummary* Arena::CreateMaybeMessage< ::minknow_api::acquisition::AcquisitionYieldSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::AcquisitionYieldSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::AcquisitionWriterSummary* Arena::CreateMaybeMessage< ::minknow_api::acquisition::AcquisitionWriterSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::AcquisitionWriterSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ChannelStateInfo_Style* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ChannelStateInfo_Style >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ChannelStateInfo_Style >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ChannelStateInfo_ChannelState* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ChannelStateInfo_Group* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ChannelStateInfo_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ChannelStateInfo_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ChannelStateInfo* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ChannelStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ChannelStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::AcquisitionConfigSummary* Arena::CreateMaybeMessage< ::minknow_api::acquisition::AcquisitionConfigSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::AcquisitionConfigSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::AcquisitionRunInfo* Arena::CreateMaybeMessage< ::minknow_api::acquisition::AcquisitionRunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::AcquisitionRunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ListAcquisitionRunsRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ListAcquisitionRunsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ListAcquisitionRunsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::ListAcquisitionRunsResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::ListAcquisitionRunsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::ListAcquisitionRunsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::SetSignalReaderRequest* Arena::CreateMaybeMessage< ::minknow_api::acquisition::SetSignalReaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::SetSignalReaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::acquisition::SetSignalReaderResponse* Arena::CreateMaybeMessage< ::minknow_api::acquisition::SetSignalReaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::acquisition::SetSignalReaderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
