// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/protocol_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "minknow_api/analysis_configuration.pb.h"
#include "minknow_api/rpc_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2fprotocol_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2fprotocol_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fprotocol_5fsettings_2eproto;
namespace minknow_api {
namespace protocol_settings {
class ProtocolSetting;
struct ProtocolSettingDefaultTypeInternal;
extern ProtocolSettingDefaultTypeInternal _ProtocolSetting_default_instance_;
class ProtocolSetting_Constraint;
struct ProtocolSetting_ConstraintDefaultTypeInternal;
extern ProtocolSetting_ConstraintDefaultTypeInternal _ProtocolSetting_Constraint_default_instance_;
class ProtocolSetting_Dependency;
struct ProtocolSetting_DependencyDefaultTypeInternal;
extern ProtocolSetting_DependencyDefaultTypeInternal _ProtocolSetting_Dependency_default_instance_;
class ProtocolSetting_ProtocolSettingValue;
struct ProtocolSetting_ProtocolSettingValueDefaultTypeInternal;
extern ProtocolSetting_ProtocolSettingValueDefaultTypeInternal _ProtocolSetting_ProtocolSettingValue_default_instance_;
}  // namespace protocol_settings
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::protocol_settings::ProtocolSetting* Arena::CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(Arena*);
template<> ::minknow_api::protocol_settings::ProtocolSetting_Constraint* Arena::CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting_Constraint>(Arena*);
template<> ::minknow_api::protocol_settings::ProtocolSetting_Dependency* Arena::CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting_Dependency>(Arena*);
template<> ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* Arena::CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace protocol_settings {

enum ProtocolSetting_Constraint_Condition : int {
  ProtocolSetting_Constraint_Condition_EQUAL = 0,
  ProtocolSetting_Constraint_Condition_NOT_EQUAL = 1,
  ProtocolSetting_Constraint_Condition_GT_EQ = 2,
  ProtocolSetting_Constraint_Condition_GT = 3,
  ProtocolSetting_Constraint_Condition_LT_EQ = 4,
  ProtocolSetting_Constraint_Condition_LT = 5,
  ProtocolSetting_Constraint_Condition_IN = 6,
  ProtocolSetting_Constraint_Condition_NOT_IN = 7,
  ProtocolSetting_Constraint_Condition_ENDS_WITH = 8,
  ProtocolSetting_Constraint_Condition_STARTS_WITH = 9,
  ProtocolSetting_Constraint_Condition_ProtocolSetting_Constraint_Condition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolSetting_Constraint_Condition_ProtocolSetting_Constraint_Condition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolSetting_Constraint_Condition_IsValid(int value);
constexpr ProtocolSetting_Constraint_Condition ProtocolSetting_Constraint_Condition_Condition_MIN = ProtocolSetting_Constraint_Condition_EQUAL;
constexpr ProtocolSetting_Constraint_Condition ProtocolSetting_Constraint_Condition_Condition_MAX = ProtocolSetting_Constraint_Condition_STARTS_WITH;
constexpr int ProtocolSetting_Constraint_Condition_Condition_ARRAYSIZE = ProtocolSetting_Constraint_Condition_Condition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolSetting_Constraint_Condition_descriptor();
template<typename T>
inline const std::string& ProtocolSetting_Constraint_Condition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolSetting_Constraint_Condition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolSetting_Constraint_Condition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolSetting_Constraint_Condition_descriptor(), enum_t_value);
}
inline bool ProtocolSetting_Constraint_Condition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolSetting_Constraint_Condition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolSetting_Constraint_Condition>(
    ProtocolSetting_Constraint_Condition_descriptor(), name, value);
}
enum ProtocolSetting_Category : int {
  ProtocolSetting_Category_OTHER = 0,
  ProtocolSetting_Category_RUN_OPTIONS = 1,
  ProtocolSetting_Category_BASECALLING = 2,
  ProtocolSetting_Category_OUTPUT = 3,
  ProtocolSetting_Category_ProtocolSetting_Category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolSetting_Category_ProtocolSetting_Category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolSetting_Category_IsValid(int value);
constexpr ProtocolSetting_Category ProtocolSetting_Category_Category_MIN = ProtocolSetting_Category_OTHER;
constexpr ProtocolSetting_Category ProtocolSetting_Category_Category_MAX = ProtocolSetting_Category_OUTPUT;
constexpr int ProtocolSetting_Category_Category_ARRAYSIZE = ProtocolSetting_Category_Category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolSetting_Category_descriptor();
template<typename T>
inline const std::string& ProtocolSetting_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolSetting_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolSetting_Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolSetting_Category_descriptor(), enum_t_value);
}
inline bool ProtocolSetting_Category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolSetting_Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolSetting_Category>(
    ProtocolSetting_Category_descriptor(), name, value);
}
enum ProtocolSetting_Unit : int {
  ProtocolSetting_Unit_UNITLESS = 0,
  ProtocolSetting_Unit_UTF8_STRING = 1,
  ProtocolSetting_Unit_ASCII_STRING = 2,
  ProtocolSetting_Unit_PATH = 3,
  ProtocolSetting_Unit_URL = 4,
  ProtocolSetting_Unit_PRIVATE_STRING = 5,
  ProtocolSetting_Unit_CHOICE = 6,
  ProtocolSetting_Unit_MULTI_CHOICE = 7,
  ProtocolSetting_Unit_SECOND = 8,
  ProtocolSetting_Unit_HOUR = 9,
  ProtocolSetting_Unit_BASE = 10,
  ProtocolSetting_Unit_KBASE = 11,
  ProtocolSetting_Unit_MBASE = 12,
  ProtocolSetting_Unit_GBASE = 13,
  ProtocolSetting_Unit_MILLIVOLT = 14,
  ProtocolSetting_Unit_ProtocolSetting_Unit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolSetting_Unit_ProtocolSetting_Unit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolSetting_Unit_IsValid(int value);
constexpr ProtocolSetting_Unit ProtocolSetting_Unit_Unit_MIN = ProtocolSetting_Unit_UNITLESS;
constexpr ProtocolSetting_Unit ProtocolSetting_Unit_Unit_MAX = ProtocolSetting_Unit_MILLIVOLT;
constexpr int ProtocolSetting_Unit_Unit_ARRAYSIZE = ProtocolSetting_Unit_Unit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolSetting_Unit_descriptor();
template<typename T>
inline const std::string& ProtocolSetting_Unit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolSetting_Unit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolSetting_Unit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolSetting_Unit_descriptor(), enum_t_value);
}
inline bool ProtocolSetting_Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolSetting_Unit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolSetting_Unit>(
    ProtocolSetting_Unit_descriptor(), name, value);
}
enum ProtocolSetting_Visibility : int {
  ProtocolSetting_Visibility_EDITABLE = 0,
  ProtocolSetting_Visibility_HIDDEN = 1,
  ProtocolSetting_Visibility_FIXED = 2,
  ProtocolSetting_Visibility_REQUIRED = 3,
  ProtocolSetting_Visibility_ProtocolSetting_Visibility_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolSetting_Visibility_ProtocolSetting_Visibility_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolSetting_Visibility_IsValid(int value);
constexpr ProtocolSetting_Visibility ProtocolSetting_Visibility_Visibility_MIN = ProtocolSetting_Visibility_EDITABLE;
constexpr ProtocolSetting_Visibility ProtocolSetting_Visibility_Visibility_MAX = ProtocolSetting_Visibility_REQUIRED;
constexpr int ProtocolSetting_Visibility_Visibility_ARRAYSIZE = ProtocolSetting_Visibility_Visibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolSetting_Visibility_descriptor();
template<typename T>
inline const std::string& ProtocolSetting_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolSetting_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolSetting_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolSetting_Visibility_descriptor(), enum_t_value);
}
inline bool ProtocolSetting_Visibility_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolSetting_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolSetting_Visibility>(
    ProtocolSetting_Visibility_descriptor(), name, value);
}
// ===================================================================

class ProtocolSetting_ProtocolSettingValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue) */ {
 public:
  inline ProtocolSetting_ProtocolSettingValue() : ProtocolSetting_ProtocolSettingValue(nullptr) {}
  ~ProtocolSetting_ProtocolSettingValue() override;
  explicit constexpr ProtocolSetting_ProtocolSettingValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolSetting_ProtocolSettingValue(const ProtocolSetting_ProtocolSettingValue& from);
  ProtocolSetting_ProtocolSettingValue(ProtocolSetting_ProtocolSettingValue&& from) noexcept
    : ProtocolSetting_ProtocolSettingValue() {
    *this = ::std::move(from);
  }

  inline ProtocolSetting_ProtocolSettingValue& operator=(const ProtocolSetting_ProtocolSettingValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSetting_ProtocolSettingValue& operator=(ProtocolSetting_ProtocolSettingValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolSetting_ProtocolSettingValue& default_instance() {
    return *internal_default_instance();
  }
  enum ProtocolSettingValueCase {
    kStringValue = 1,
    kFloatValue = 2,
    kIntegerValue = 3,
    kBoolValue = 4,
    kChannelsValue = 5,
    PROTOCOL_SETTING_VALUE_NOT_SET = 0,
  };

  static inline const ProtocolSetting_ProtocolSettingValue* internal_default_instance() {
    return reinterpret_cast<const ProtocolSetting_ProtocolSettingValue*>(
               &_ProtocolSetting_ProtocolSettingValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtocolSetting_ProtocolSettingValue& a, ProtocolSetting_ProtocolSettingValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSetting_ProtocolSettingValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSetting_ProtocolSettingValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSetting_ProtocolSettingValue* New() const final {
    return new ProtocolSetting_ProtocolSettingValue();
  }

  ProtocolSetting_ProtocolSettingValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSetting_ProtocolSettingValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolSetting_ProtocolSettingValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolSetting_ProtocolSettingValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSetting_ProtocolSettingValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue";
  }
  protected:
  explicit ProtocolSetting_ProtocolSettingValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kIntegerValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kChannelsValueFieldNumber = 5,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // double float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  double float_value() const;
  void set_float_value(double value);
  private:
  double _internal_float_value() const;
  void _internal_set_float_value(double value);
  public:

  // int64 integer_value = 3;
  bool has_integer_value() const;
  private:
  bool _internal_has_integer_value() const;
  public:
  void clear_integer_value();
  ::PROTOBUF_NAMESPACE_ID::int64 integer_value() const;
  void set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_integer_value() const;
  void _internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 4;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channels_value = 5;
  bool has_channels_value() const;
  private:
  bool _internal_has_channels_value() const;
  public:
  void clear_channels_value();
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& channels_value() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* release_channels_value();
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* mutable_channels_value();
  void set_allocated_channels_value(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channels_value);
  private:
  const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& _internal_channels_value() const;
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _internal_mutable_channels_value();
  public:
  void unsafe_arena_set_allocated_channels_value(
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channels_value);
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* unsafe_arena_release_channels_value();

  void clear_protocol_setting_value();
  ProtocolSettingValueCase protocol_setting_value_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_float_value();
  void set_has_integer_value();
  void set_has_bool_value();
  void set_has_channels_value();

  inline bool has_protocol_setting_value() const;
  inline void clear_has_protocol_setting_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ProtocolSettingValueUnion {
    constexpr ProtocolSettingValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    double float_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 integer_value_;
    bool bool_value_;
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channels_value_;
  } protocol_setting_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fprotocol_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSetting_Constraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol_settings.ProtocolSetting.Constraint) */ {
 public:
  inline ProtocolSetting_Constraint() : ProtocolSetting_Constraint(nullptr) {}
  ~ProtocolSetting_Constraint() override;
  explicit constexpr ProtocolSetting_Constraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolSetting_Constraint(const ProtocolSetting_Constraint& from);
  ProtocolSetting_Constraint(ProtocolSetting_Constraint&& from) noexcept
    : ProtocolSetting_Constraint() {
    *this = ::std::move(from);
  }

  inline ProtocolSetting_Constraint& operator=(const ProtocolSetting_Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSetting_Constraint& operator=(ProtocolSetting_Constraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolSetting_Constraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolSetting_Constraint* internal_default_instance() {
    return reinterpret_cast<const ProtocolSetting_Constraint*>(
               &_ProtocolSetting_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolSetting_Constraint& a, ProtocolSetting_Constraint& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSetting_Constraint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSetting_Constraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSetting_Constraint* New() const final {
    return new ProtocolSetting_Constraint();
  }

  ProtocolSetting_Constraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSetting_Constraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolSetting_Constraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolSetting_Constraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSetting_Constraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol_settings.ProtocolSetting.Constraint";
  }
  protected:
  explicit ProtocolSetting_Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtocolSetting_Constraint_Condition Condition;
  static constexpr Condition EQUAL =
    ProtocolSetting_Constraint_Condition_EQUAL;
  static constexpr Condition NOT_EQUAL =
    ProtocolSetting_Constraint_Condition_NOT_EQUAL;
  static constexpr Condition GT_EQ =
    ProtocolSetting_Constraint_Condition_GT_EQ;
  static constexpr Condition GT =
    ProtocolSetting_Constraint_Condition_GT;
  static constexpr Condition LT_EQ =
    ProtocolSetting_Constraint_Condition_LT_EQ;
  static constexpr Condition LT =
    ProtocolSetting_Constraint_Condition_LT;
  static constexpr Condition IN =
    ProtocolSetting_Constraint_Condition_IN;
  static constexpr Condition NOT_IN =
    ProtocolSetting_Constraint_Condition_NOT_IN;
  static constexpr Condition ENDS_WITH =
    ProtocolSetting_Constraint_Condition_ENDS_WITH;
  static constexpr Condition STARTS_WITH =
    ProtocolSetting_Constraint_Condition_STARTS_WITH;
  static inline bool Condition_IsValid(int value) {
    return ProtocolSetting_Constraint_Condition_IsValid(value);
  }
  static constexpr Condition Condition_MIN =
    ProtocolSetting_Constraint_Condition_Condition_MIN;
  static constexpr Condition Condition_MAX =
    ProtocolSetting_Constraint_Condition_Condition_MAX;
  static constexpr int Condition_ARRAYSIZE =
    ProtocolSetting_Constraint_Condition_Condition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Condition_descriptor() {
    return ProtocolSetting_Constraint_Condition_descriptor();
  }
  template<typename T>
  static inline const std::string& Condition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Condition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Condition_Name.");
    return ProtocolSetting_Constraint_Condition_Name(enum_t_value);
  }
  static inline bool Condition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Condition* value) {
    return ProtocolSetting_Constraint_Condition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kConditionFieldNumber = 1,
  };
  // .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& value() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* release_value();
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* mutable_value();
  void set_allocated_value(::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* value);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& _internal_value() const;
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* value);
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* unsafe_arena_release_value();

  // .minknow_api.protocol_settings.ProtocolSetting.Constraint.Condition condition = 1;
  void clear_condition();
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition condition() const;
  void set_condition(::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition value);
  private:
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition _internal_condition() const;
  void _internal_set_condition(::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol_settings.ProtocolSetting.Constraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* value_;
  int condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSetting_Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol_settings.ProtocolSetting.Dependency) */ {
 public:
  inline ProtocolSetting_Dependency() : ProtocolSetting_Dependency(nullptr) {}
  ~ProtocolSetting_Dependency() override;
  explicit constexpr ProtocolSetting_Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolSetting_Dependency(const ProtocolSetting_Dependency& from);
  ProtocolSetting_Dependency(ProtocolSetting_Dependency&& from) noexcept
    : ProtocolSetting_Dependency() {
    *this = ::std::move(from);
  }

  inline ProtocolSetting_Dependency& operator=(const ProtocolSetting_Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSetting_Dependency& operator=(ProtocolSetting_Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolSetting_Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolSetting_Dependency* internal_default_instance() {
    return reinterpret_cast<const ProtocolSetting_Dependency*>(
               &_ProtocolSetting_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtocolSetting_Dependency& a, ProtocolSetting_Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSetting_Dependency* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSetting_Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSetting_Dependency* New() const final {
    return new ProtocolSetting_Dependency();
  }

  ProtocolSetting_Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSetting_Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolSetting_Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolSetting_Dependency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSetting_Dependency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol_settings.ProtocolSetting.Dependency";
  }
  protected:
  explicit ProtocolSetting_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 2,
    kIdentifierFieldNumber = 1,
  };
  // repeated .minknow_api.protocol_settings.ProtocolSetting.Constraint constraints = 2;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >*
      mutable_constraints();
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& _internal_constraints(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* _internal_add_constraints();
  public:
  const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& constraints(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >&
      constraints() const;

  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol_settings.ProtocolSetting.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint > constraints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol_settings.ProtocolSetting) */ {
 public:
  inline ProtocolSetting() : ProtocolSetting(nullptr) {}
  ~ProtocolSetting() override;
  explicit constexpr ProtocolSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolSetting(const ProtocolSetting& from);
  ProtocolSetting(ProtocolSetting&& from) noexcept
    : ProtocolSetting() {
    *this = ::std::move(from);
  }

  inline ProtocolSetting& operator=(const ProtocolSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSetting& operator=(ProtocolSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolSetting* internal_default_instance() {
    return reinterpret_cast<const ProtocolSetting*>(
               &_ProtocolSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtocolSetting& a, ProtocolSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSetting* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSetting* New() const final {
    return new ProtocolSetting();
  }

  ProtocolSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolSetting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol_settings.ProtocolSetting";
  }
  protected:
  explicit ProtocolSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtocolSetting_ProtocolSettingValue ProtocolSettingValue;
  typedef ProtocolSetting_Constraint Constraint;
  typedef ProtocolSetting_Dependency Dependency;

  typedef ProtocolSetting_Category Category;
  static constexpr Category OTHER =
    ProtocolSetting_Category_OTHER;
  static constexpr Category RUN_OPTIONS =
    ProtocolSetting_Category_RUN_OPTIONS;
  static constexpr Category BASECALLING =
    ProtocolSetting_Category_BASECALLING;
  static constexpr Category OUTPUT =
    ProtocolSetting_Category_OUTPUT;
  static inline bool Category_IsValid(int value) {
    return ProtocolSetting_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    ProtocolSetting_Category_Category_MIN;
  static constexpr Category Category_MAX =
    ProtocolSetting_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    ProtocolSetting_Category_Category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Category_descriptor() {
    return ProtocolSetting_Category_descriptor();
  }
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return ProtocolSetting_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Category* value) {
    return ProtocolSetting_Category_Parse(name, value);
  }

  typedef ProtocolSetting_Unit Unit;
  static constexpr Unit UNITLESS =
    ProtocolSetting_Unit_UNITLESS;
  static constexpr Unit UTF8_STRING =
    ProtocolSetting_Unit_UTF8_STRING;
  static constexpr Unit ASCII_STRING =
    ProtocolSetting_Unit_ASCII_STRING;
  static constexpr Unit PATH =
    ProtocolSetting_Unit_PATH;
  static constexpr Unit URL =
    ProtocolSetting_Unit_URL;
  static constexpr Unit PRIVATE_STRING =
    ProtocolSetting_Unit_PRIVATE_STRING;
  static constexpr Unit CHOICE =
    ProtocolSetting_Unit_CHOICE;
  static constexpr Unit MULTI_CHOICE =
    ProtocolSetting_Unit_MULTI_CHOICE;
  static constexpr Unit SECOND =
    ProtocolSetting_Unit_SECOND;
  static constexpr Unit HOUR =
    ProtocolSetting_Unit_HOUR;
  static constexpr Unit BASE =
    ProtocolSetting_Unit_BASE;
  static constexpr Unit KBASE =
    ProtocolSetting_Unit_KBASE;
  static constexpr Unit MBASE =
    ProtocolSetting_Unit_MBASE;
  static constexpr Unit GBASE =
    ProtocolSetting_Unit_GBASE;
  static constexpr Unit MILLIVOLT =
    ProtocolSetting_Unit_MILLIVOLT;
  static inline bool Unit_IsValid(int value) {
    return ProtocolSetting_Unit_IsValid(value);
  }
  static constexpr Unit Unit_MIN =
    ProtocolSetting_Unit_Unit_MIN;
  static constexpr Unit Unit_MAX =
    ProtocolSetting_Unit_Unit_MAX;
  static constexpr int Unit_ARRAYSIZE =
    ProtocolSetting_Unit_Unit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Unit_descriptor() {
    return ProtocolSetting_Unit_descriptor();
  }
  template<typename T>
  static inline const std::string& Unit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Unit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Unit_Name.");
    return ProtocolSetting_Unit_Name(enum_t_value);
  }
  static inline bool Unit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Unit* value) {
    return ProtocolSetting_Unit_Parse(name, value);
  }

  typedef ProtocolSetting_Visibility Visibility;
  static constexpr Visibility EDITABLE =
    ProtocolSetting_Visibility_EDITABLE;
  static constexpr Visibility HIDDEN =
    ProtocolSetting_Visibility_HIDDEN;
  static constexpr Visibility FIXED =
    ProtocolSetting_Visibility_FIXED;
  static constexpr Visibility REQUIRED =
    ProtocolSetting_Visibility_REQUIRED;
  static inline bool Visibility_IsValid(int value) {
    return ProtocolSetting_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    ProtocolSetting_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    ProtocolSetting_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    ProtocolSetting_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return ProtocolSetting_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return ProtocolSetting_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Visibility* value) {
    return ProtocolSetting_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 7,
    kDependenciesFieldNumber = 8,
    kChoicesFieldNumber = 17,
    kIdentifierFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kHelpFieldNumber = 16,
    kDefaultValueFieldNumber = 6,
    kCategoryFieldNumber = 1,
    kUnitFieldNumber = 5,
    kVisibilityFieldNumber = 9,
  };
  // repeated .minknow_api.protocol_settings.ProtocolSetting.Constraint constraints = 7;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >*
      mutable_constraints();
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& _internal_constraints(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* _internal_add_constraints();
  public:
  const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& constraints(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >&
      constraints() const;

  // repeated .minknow_api.protocol_settings.ProtocolSetting.Dependency dependencies = 8;
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  ::minknow_api::protocol_settings::ProtocolSetting_Dependency* mutable_dependencies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Dependency >*
      mutable_dependencies();
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting_Dependency& _internal_dependencies(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Dependency* _internal_add_dependencies();
  public:
  const ::minknow_api::protocol_settings::ProtocolSetting_Dependency& dependencies(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting_Dependency* add_dependencies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Dependency >&
      dependencies() const;

  // repeated string choices = 17;
  int choices_size() const;
  private:
  int _internal_choices_size() const;
  public:
  void clear_choices();
  const std::string& choices(int index) const;
  std::string* mutable_choices(int index);
  void set_choices(int index, const std::string& value);
  void set_choices(int index, std::string&& value);
  void set_choices(int index, const char* value);
  void set_choices(int index, const char* value, size_t size);
  std::string* add_choices();
  void add_choices(const std::string& value);
  void add_choices(std::string&& value);
  void add_choices(const char* value);
  void add_choices(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& choices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_choices();
  private:
  const std::string& _internal_choices(int index) const;
  std::string* _internal_add_choices();
  public:

  // string identifier = 2 [(.minknow_api.rpc_required) = true];
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string display_name = 3 [(.minknow_api.rpc_required) = true];
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string help = 16;
  void clear_help();
  const std::string& help() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_help(ArgT0&& arg0, ArgT... args);
  std::string* mutable_help();
  PROTOBUF_MUST_USE_RESULT std::string* release_help();
  void set_allocated_help(std::string* help);
  private:
  const std::string& _internal_help() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_help(const std::string& value);
  std::string* _internal_mutable_help();
  public:

  // .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue default_value = 6;
  bool has_default_value() const;
  private:
  bool _internal_has_default_value() const;
  public:
  void clear_default_value();
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& default_value() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* release_default_value();
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* mutable_default_value();
  void set_allocated_default_value(::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* default_value);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& _internal_default_value() const;
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* _internal_mutable_default_value();
  public:
  void unsafe_arena_set_allocated_default_value(
      ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* default_value);
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* unsafe_arena_release_default_value();

  // .minknow_api.protocol_settings.ProtocolSetting.Category category = 1;
  void clear_category();
  ::minknow_api::protocol_settings::ProtocolSetting_Category category() const;
  void set_category(::minknow_api::protocol_settings::ProtocolSetting_Category value);
  private:
  ::minknow_api::protocol_settings::ProtocolSetting_Category _internal_category() const;
  void _internal_set_category(::minknow_api::protocol_settings::ProtocolSetting_Category value);
  public:

  // .minknow_api.protocol_settings.ProtocolSetting.Unit unit = 5;
  void clear_unit();
  ::minknow_api::protocol_settings::ProtocolSetting_Unit unit() const;
  void set_unit(::minknow_api::protocol_settings::ProtocolSetting_Unit value);
  private:
  ::minknow_api::protocol_settings::ProtocolSetting_Unit _internal_unit() const;
  void _internal_set_unit(::minknow_api::protocol_settings::ProtocolSetting_Unit value);
  public:

  // .minknow_api.protocol_settings.ProtocolSetting.Visibility visibility = 9;
  void clear_visibility();
  ::minknow_api::protocol_settings::ProtocolSetting_Visibility visibility() const;
  void set_visibility(::minknow_api::protocol_settings::ProtocolSetting_Visibility value);
  private:
  ::minknow_api::protocol_settings::ProtocolSetting_Visibility _internal_visibility() const;
  void _internal_set_visibility(::minknow_api::protocol_settings::ProtocolSetting_Visibility value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol_settings.ProtocolSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint > constraints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Dependency > dependencies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> choices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr help_;
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* default_value_;
  int category_;
  int unit_;
  int visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtocolSetting_ProtocolSettingValue

// string string_value = 1;
inline bool ProtocolSetting_ProtocolSettingValue::_internal_has_string_value() const {
  return protocol_setting_value_case() == kStringValue;
}
inline bool ProtocolSetting_ProtocolSettingValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ProtocolSetting_ProtocolSettingValue::clear_string_value() {
  if (_internal_has_string_value()) {
    protocol_setting_value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_protocol_setting_value();
  }
}
inline const std::string& ProtocolSetting_ProtocolSettingValue::string_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ProtocolSetting_ProtocolSettingValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_protocol_setting_value();
    set_has_string_value();
    protocol_setting_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  protocol_setting_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.string_value)
}
inline std::string* ProtocolSetting_ProtocolSettingValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.string_value)
  return _s;
}
inline const std::string& ProtocolSetting_ProtocolSettingValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return protocol_setting_value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProtocolSetting_ProtocolSettingValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_protocol_setting_value();
    set_has_string_value();
    protocol_setting_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  protocol_setting_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolSetting_ProtocolSettingValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_protocol_setting_value();
    set_has_string_value();
    protocol_setting_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return protocol_setting_value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolSetting_ProtocolSettingValue::release_string_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_protocol_setting_value();
    return protocol_setting_value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProtocolSetting_ProtocolSettingValue::set_allocated_string_value(std::string* string_value) {
  if (has_protocol_setting_value()) {
    clear_protocol_setting_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    protocol_setting_value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.string_value)
}

// double float_value = 2;
inline bool ProtocolSetting_ProtocolSettingValue::_internal_has_float_value() const {
  return protocol_setting_value_case() == kFloatValue;
}
inline bool ProtocolSetting_ProtocolSettingValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void ProtocolSetting_ProtocolSettingValue::clear_float_value() {
  if (_internal_has_float_value()) {
    protocol_setting_value_.float_value_ = 0;
    clear_has_protocol_setting_value();
  }
}
inline double ProtocolSetting_ProtocolSettingValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return protocol_setting_value_.float_value_;
  }
  return 0;
}
inline void ProtocolSetting_ProtocolSettingValue::_internal_set_float_value(double value) {
  if (!_internal_has_float_value()) {
    clear_protocol_setting_value();
    set_has_float_value();
  }
  protocol_setting_value_.float_value_ = value;
}
inline double ProtocolSetting_ProtocolSettingValue::float_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.float_value)
  return _internal_float_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_float_value(double value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.float_value)
}

// int64 integer_value = 3;
inline bool ProtocolSetting_ProtocolSettingValue::_internal_has_integer_value() const {
  return protocol_setting_value_case() == kIntegerValue;
}
inline bool ProtocolSetting_ProtocolSettingValue::has_integer_value() const {
  return _internal_has_integer_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
inline void ProtocolSetting_ProtocolSettingValue::clear_integer_value() {
  if (_internal_has_integer_value()) {
    protocol_setting_value_.integer_value_ = int64_t{0};
    clear_has_protocol_setting_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtocolSetting_ProtocolSettingValue::_internal_integer_value() const {
  if (_internal_has_integer_value()) {
    return protocol_setting_value_.integer_value_;
  }
  return int64_t{0};
}
inline void ProtocolSetting_ProtocolSettingValue::_internal_set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_integer_value()) {
    clear_protocol_setting_value();
    set_has_integer_value();
  }
  protocol_setting_value_.integer_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtocolSetting_ProtocolSettingValue::integer_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.integer_value)
  return _internal_integer_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_integer_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_integer_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.integer_value)
}

// bool bool_value = 4;
inline bool ProtocolSetting_ProtocolSettingValue::_internal_has_bool_value() const {
  return protocol_setting_value_case() == kBoolValue;
}
inline bool ProtocolSetting_ProtocolSettingValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ProtocolSetting_ProtocolSettingValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    protocol_setting_value_.bool_value_ = false;
    clear_has_protocol_setting_value();
  }
}
inline bool ProtocolSetting_ProtocolSettingValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return protocol_setting_value_.bool_value_;
  }
  return false;
}
inline void ProtocolSetting_ProtocolSettingValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_protocol_setting_value();
    set_has_bool_value();
  }
  protocol_setting_value_.bool_value_ = value;
}
inline bool ProtocolSetting_ProtocolSettingValue::bool_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.bool_value)
  return _internal_bool_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.bool_value)
}

// .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channels_value = 5;
inline bool ProtocolSetting_ProtocolSettingValue::_internal_has_channels_value() const {
  return protocol_setting_value_case() == kChannelsValue;
}
inline bool ProtocolSetting_ProtocolSettingValue::has_channels_value() const {
  return _internal_has_channels_value();
}
inline void ProtocolSetting_ProtocolSettingValue::set_has_channels_value() {
  _oneof_case_[0] = kChannelsValue;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* ProtocolSetting_ProtocolSettingValue::release_channels_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.channels_value)
  if (_internal_has_channels_value()) {
    clear_has_protocol_setting_value();
      ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = protocol_setting_value_.channels_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_setting_value_.channels_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& ProtocolSetting_ProtocolSettingValue::_internal_channels_value() const {
  return _internal_has_channels_value()
      ? *protocol_setting_value_.channels_value_
      : reinterpret_cast< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&>(::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& ProtocolSetting_ProtocolSettingValue::channels_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.channels_value)
  return _internal_channels_value();
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* ProtocolSetting_ProtocolSettingValue::unsafe_arena_release_channels_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.channels_value)
  if (_internal_has_channels_value()) {
    clear_has_protocol_setting_value();
    ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* temp = protocol_setting_value_.channels_value_;
    protocol_setting_value_.channels_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtocolSetting_ProtocolSettingValue::unsafe_arena_set_allocated_channels_value(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* channels_value) {
  clear_protocol_setting_value();
  if (channels_value) {
    set_has_channels_value();
    protocol_setting_value_.channels_value_ = channels_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.channels_value)
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* ProtocolSetting_ProtocolSettingValue::_internal_mutable_channels_value() {
  if (!_internal_has_channels_value()) {
    clear_protocol_setting_value();
    set_has_channels_value();
    protocol_setting_value_.channels_value_ = CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration >(GetArenaForAllocation());
  }
  return protocol_setting_value_.channels_value_;
}
inline ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* ProtocolSetting_ProtocolSettingValue::mutable_channels_value() {
  ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* _msg = _internal_mutable_channels_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue.channels_value)
  return _msg;
}

inline bool ProtocolSetting_ProtocolSettingValue::has_protocol_setting_value() const {
  return protocol_setting_value_case() != PROTOCOL_SETTING_VALUE_NOT_SET;
}
inline void ProtocolSetting_ProtocolSettingValue::clear_has_protocol_setting_value() {
  _oneof_case_[0] = PROTOCOL_SETTING_VALUE_NOT_SET;
}
inline ProtocolSetting_ProtocolSettingValue::ProtocolSettingValueCase ProtocolSetting_ProtocolSettingValue::protocol_setting_value_case() const {
  return ProtocolSetting_ProtocolSettingValue::ProtocolSettingValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProtocolSetting_Constraint

// .minknow_api.protocol_settings.ProtocolSetting.Constraint.Condition condition = 1;
inline void ProtocolSetting_Constraint::clear_condition() {
  condition_ = 0;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition ProtocolSetting_Constraint::_internal_condition() const {
  return static_cast< ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition >(condition_);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition ProtocolSetting_Constraint::condition() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.Constraint.condition)
  return _internal_condition();
}
inline void ProtocolSetting_Constraint::_internal_set_condition(::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition value) {
  
  condition_ = value;
}
inline void ProtocolSetting_Constraint::set_condition(::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.Constraint.condition)
}

// .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue value = 2;
inline bool ProtocolSetting_Constraint::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ProtocolSetting_Constraint::has_value() const {
  return _internal_has_value();
}
inline void ProtocolSetting_Constraint::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& ProtocolSetting_Constraint::_internal_value() const {
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_ProtocolSettingValue_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& ProtocolSetting_Constraint::value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.Constraint.value)
  return _internal_value();
}
inline void ProtocolSetting_Constraint::unsafe_arena_set_allocated_value(
    ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol_settings.ProtocolSetting.Constraint.value)
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting_Constraint::release_value() {
  
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting_Constraint::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.Constraint.value)
  
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting_Constraint::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting_Constraint::mutable_value() {
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.Constraint.value)
  return _msg;
}
inline void ProtocolSetting_Constraint::set_allocated_value(::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.Constraint.value)
}

// -------------------------------------------------------------------

// ProtocolSetting_Dependency

// string identifier = 1;
inline void ProtocolSetting_Dependency::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& ProtocolSetting_Dependency::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.Dependency.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolSetting_Dependency::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.Dependency.identifier)
}
inline std::string* ProtocolSetting_Dependency::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.Dependency.identifier)
  return _s;
}
inline const std::string& ProtocolSetting_Dependency::_internal_identifier() const {
  return identifier_.Get();
}
inline void ProtocolSetting_Dependency::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolSetting_Dependency::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolSetting_Dependency::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.Dependency.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolSetting_Dependency::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.Dependency.identifier)
}

// repeated .minknow_api.protocol_settings.ProtocolSetting.Constraint constraints = 2;
inline int ProtocolSetting_Dependency::_internal_constraints_size() const {
  return constraints_.size();
}
inline int ProtocolSetting_Dependency::constraints_size() const {
  return _internal_constraints_size();
}
inline void ProtocolSetting_Dependency::clear_constraints() {
  constraints_.Clear();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting_Dependency::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.Dependency.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >*
ProtocolSetting_Dependency::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol_settings.ProtocolSetting.Dependency.constraints)
  return &constraints_;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& ProtocolSetting_Dependency::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& ProtocolSetting_Dependency::constraints(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.Dependency.constraints)
  return _internal_constraints(index);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting_Dependency::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting_Dependency::add_constraints() {
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:minknow_api.protocol_settings.ProtocolSetting.Dependency.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >&
ProtocolSetting_Dependency::constraints() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol_settings.ProtocolSetting.Dependency.constraints)
  return constraints_;
}

// -------------------------------------------------------------------

// ProtocolSetting

// .minknow_api.protocol_settings.ProtocolSetting.Category category = 1;
inline void ProtocolSetting::clear_category() {
  category_ = 0;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Category ProtocolSetting::_internal_category() const {
  return static_cast< ::minknow_api::protocol_settings::ProtocolSetting_Category >(category_);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Category ProtocolSetting::category() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.category)
  return _internal_category();
}
inline void ProtocolSetting::_internal_set_category(::minknow_api::protocol_settings::ProtocolSetting_Category value) {
  
  category_ = value;
}
inline void ProtocolSetting::set_category(::minknow_api::protocol_settings::ProtocolSetting_Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.category)
}

// string identifier = 2 [(.minknow_api.rpc_required) = true];
inline void ProtocolSetting::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& ProtocolSetting::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolSetting::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.identifier)
}
inline std::string* ProtocolSetting::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.identifier)
  return _s;
}
inline const std::string& ProtocolSetting::_internal_identifier() const {
  return identifier_.Get();
}
inline void ProtocolSetting::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolSetting::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.identifier)
}

// string display_name = 3 [(.minknow_api.rpc_required) = true];
inline void ProtocolSetting::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& ProtocolSetting::display_name() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolSetting::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.display_name)
}
inline std::string* ProtocolSetting::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.display_name)
  return _s;
}
inline const std::string& ProtocolSetting::_internal_display_name() const {
  return display_name_.Get();
}
inline void ProtocolSetting::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::_internal_mutable_display_name() {
  
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::release_display_name() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.display_name)
  return display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolSetting::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.display_name)
}

// string help = 16;
inline void ProtocolSetting::clear_help() {
  help_.ClearToEmpty();
}
inline const std::string& ProtocolSetting::help() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.help)
  return _internal_help();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolSetting::set_help(ArgT0&& arg0, ArgT... args) {
 
 help_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.help)
}
inline std::string* ProtocolSetting::mutable_help() {
  std::string* _s = _internal_mutable_help();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.help)
  return _s;
}
inline const std::string& ProtocolSetting::_internal_help() const {
  return help_.Get();
}
inline void ProtocolSetting::_internal_set_help(const std::string& value) {
  
  help_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::_internal_mutable_help() {
  
  return help_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolSetting::release_help() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.help)
  return help_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolSetting::set_allocated_help(std::string* help) {
  if (help != nullptr) {
    
  } else {
    
  }
  help_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), help,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.help)
}

// .minknow_api.protocol_settings.ProtocolSetting.Unit unit = 5;
inline void ProtocolSetting::clear_unit() {
  unit_ = 0;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Unit ProtocolSetting::_internal_unit() const {
  return static_cast< ::minknow_api::protocol_settings::ProtocolSetting_Unit >(unit_);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Unit ProtocolSetting::unit() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.unit)
  return _internal_unit();
}
inline void ProtocolSetting::_internal_set_unit(::minknow_api::protocol_settings::ProtocolSetting_Unit value) {
  
  unit_ = value;
}
inline void ProtocolSetting::set_unit(::minknow_api::protocol_settings::ProtocolSetting_Unit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.unit)
}

// .minknow_api.protocol_settings.ProtocolSetting.ProtocolSettingValue default_value = 6;
inline bool ProtocolSetting::_internal_has_default_value() const {
  return this != internal_default_instance() && default_value_ != nullptr;
}
inline bool ProtocolSetting::has_default_value() const {
  return _internal_has_default_value();
}
inline void ProtocolSetting::clear_default_value() {
  if (GetArenaForAllocation() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& ProtocolSetting::_internal_default_value() const {
  const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* p = default_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_ProtocolSettingValue_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue& ProtocolSetting::default_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.default_value)
  return _internal_default_value();
}
inline void ProtocolSetting::unsafe_arena_set_allocated_default_value(
    ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* default_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_value_);
  }
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol_settings.ProtocolSetting.default_value)
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting::release_default_value() {
  
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* temp = default_value_;
  default_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol_settings.ProtocolSetting.default_value)
  
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* temp = default_value_;
  default_value_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting::_internal_mutable_default_value() {
  
  if (default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue>(GetArenaForAllocation());
    default_value_ = p;
  }
  return default_value_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* ProtocolSetting::mutable_default_value() {
  ::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* _msg = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.default_value)
  return _msg;
}
inline void ProtocolSetting::set_allocated_default_value(::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue* default_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete default_value_;
  }
  if (default_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol_settings::ProtocolSetting_ProtocolSettingValue>::GetOwningArena(default_value);
    if (message_arena != submessage_arena) {
      default_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_value, submessage_arena);
    }
    
  } else {
    
  }
  default_value_ = default_value;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol_settings.ProtocolSetting.default_value)
}

// repeated .minknow_api.protocol_settings.ProtocolSetting.Constraint constraints = 7;
inline int ProtocolSetting::_internal_constraints_size() const {
  return constraints_.size();
}
inline int ProtocolSetting::constraints_size() const {
  return _internal_constraints_size();
}
inline void ProtocolSetting::clear_constraints() {
  constraints_.Clear();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >*
ProtocolSetting::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol_settings.ProtocolSetting.constraints)
  return &constraints_;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& ProtocolSetting::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Constraint& ProtocolSetting::constraints(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.constraints)
  return _internal_constraints(index);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Constraint* ProtocolSetting::add_constraints() {
  ::minknow_api::protocol_settings::ProtocolSetting_Constraint* _add = _internal_add_constraints();
  // @@protoc_insertion_point(field_add:minknow_api.protocol_settings.ProtocolSetting.constraints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Constraint >&
ProtocolSetting::constraints() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol_settings.ProtocolSetting.constraints)
  return constraints_;
}

// repeated .minknow_api.protocol_settings.ProtocolSetting.Dependency dependencies = 8;
inline int ProtocolSetting::_internal_dependencies_size() const {
  return dependencies_.size();
}
inline int ProtocolSetting::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void ProtocolSetting::clear_dependencies() {
  dependencies_.Clear();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Dependency* ProtocolSetting::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.dependencies)
  return dependencies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Dependency >*
ProtocolSetting::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol_settings.ProtocolSetting.dependencies)
  return &dependencies_;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Dependency& ProtocolSetting::_internal_dependencies(int index) const {
  return dependencies_.Get(index);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting_Dependency& ProtocolSetting::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.dependencies)
  return _internal_dependencies(index);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Dependency* ProtocolSetting::_internal_add_dependencies() {
  return dependencies_.Add();
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Dependency* ProtocolSetting::add_dependencies() {
  ::minknow_api::protocol_settings::ProtocolSetting_Dependency* _add = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add:minknow_api.protocol_settings.ProtocolSetting.dependencies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting_Dependency >&
ProtocolSetting::dependencies() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol_settings.ProtocolSetting.dependencies)
  return dependencies_;
}

// .minknow_api.protocol_settings.ProtocolSetting.Visibility visibility = 9;
inline void ProtocolSetting::clear_visibility() {
  visibility_ = 0;
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Visibility ProtocolSetting::_internal_visibility() const {
  return static_cast< ::minknow_api::protocol_settings::ProtocolSetting_Visibility >(visibility_);
}
inline ::minknow_api::protocol_settings::ProtocolSetting_Visibility ProtocolSetting::visibility() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.visibility)
  return _internal_visibility();
}
inline void ProtocolSetting::_internal_set_visibility(::minknow_api::protocol_settings::ProtocolSetting_Visibility value) {
  
  visibility_ = value;
}
inline void ProtocolSetting::set_visibility(::minknow_api::protocol_settings::ProtocolSetting_Visibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.visibility)
}

// repeated string choices = 17;
inline int ProtocolSetting::_internal_choices_size() const {
  return choices_.size();
}
inline int ProtocolSetting::choices_size() const {
  return _internal_choices_size();
}
inline void ProtocolSetting::clear_choices() {
  choices_.Clear();
}
inline std::string* ProtocolSetting::add_choices() {
  std::string* _s = _internal_add_choices();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol_settings.ProtocolSetting.choices)
  return _s;
}
inline const std::string& ProtocolSetting::_internal_choices(int index) const {
  return choices_.Get(index);
}
inline const std::string& ProtocolSetting::choices(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol_settings.ProtocolSetting.choices)
  return _internal_choices(index);
}
inline std::string* ProtocolSetting::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol_settings.ProtocolSetting.choices)
  return choices_.Mutable(index);
}
inline void ProtocolSetting::set_choices(int index, const std::string& value) {
  choices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::set_choices(int index, std::string&& value) {
  choices_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::set_choices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  choices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::set_choices(int index, const char* value, size_t size) {
  choices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline std::string* ProtocolSetting::_internal_add_choices() {
  return choices_.Add();
}
inline void ProtocolSetting::add_choices(const std::string& value) {
  choices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::add_choices(std::string&& value) {
  choices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::add_choices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  choices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline void ProtocolSetting::add_choices(const char* value, size_t size) {
  choices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol_settings.ProtocolSetting.choices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtocolSetting::choices() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol_settings.ProtocolSetting.choices)
  return choices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtocolSetting::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol_settings.ProtocolSetting.choices)
  return &choices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol_settings
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition>() {
  return ::minknow_api::protocol_settings::ProtocolSetting_Constraint_Condition_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol_settings::ProtocolSetting_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol_settings::ProtocolSetting_Category>() {
  return ::minknow_api::protocol_settings::ProtocolSetting_Category_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol_settings::ProtocolSetting_Unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol_settings::ProtocolSetting_Unit>() {
  return ::minknow_api::protocol_settings::ProtocolSetting_Unit_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol_settings::ProtocolSetting_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol_settings::ProtocolSetting_Visibility>() {
  return ::minknow_api::protocol_settings::ProtocolSetting_Visibility_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_5fsettings_2eproto
