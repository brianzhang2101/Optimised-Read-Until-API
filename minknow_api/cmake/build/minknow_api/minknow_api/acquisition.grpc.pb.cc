// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/acquisition.proto

#include "minknow_api/acquisition.pb.h"
#include "minknow_api/acquisition.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace acquisition {

static const char* AcquisitionService_method_names[] = {
  "/minknow_api.acquisition.AcquisitionService/start",
  "/minknow_api.acquisition.AcquisitionService/stop",
  "/minknow_api.acquisition.AcquisitionService/watch_for_status_change",
  "/minknow_api.acquisition.AcquisitionService/watch_current_acquisition_run",
  "/minknow_api.acquisition.AcquisitionService/current_status",
  "/minknow_api.acquisition.AcquisitionService/get_progress",
  "/minknow_api.acquisition.AcquisitionService/get_acquisition_info",
  "/minknow_api.acquisition.AcquisitionService/list_acquisition_runs",
  "/minknow_api.acquisition.AcquisitionService/get_current_acquisition_run",
  "/minknow_api.acquisition.AcquisitionService/set_signal_reader",
};

std::unique_ptr< AcquisitionService::Stub> AcquisitionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AcquisitionService::Stub> stub(new AcquisitionService::Stub(channel, options));
  return stub;
}

AcquisitionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_start_(AcquisitionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(AcquisitionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_watch_for_status_change_(AcquisitionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_watch_current_acquisition_run_(AcquisitionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_current_status_(AcquisitionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_progress_(AcquisitionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_acquisition_info_(AcquisitionService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_acquisition_runs_(AcquisitionService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_current_acquisition_run_(AcquisitionService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_signal_reader_(AcquisitionService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AcquisitionService::Stub::start(::grpc::ClientContext* context, const ::minknow_api::acquisition::StartRequest& request, ::minknow_api::acquisition::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::StartRequest, ::minknow_api::acquisition::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void AcquisitionService::Stub::async::start(::grpc::ClientContext* context, const ::minknow_api::acquisition::StartRequest* request, ::minknow_api::acquisition::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::StartRequest, ::minknow_api::acquisition::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::start(::grpc::ClientContext* context, const ::minknow_api::acquisition::StartRequest* request, ::minknow_api::acquisition::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::StartResponse>* AcquisitionService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::StartResponse, ::minknow_api::acquisition::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::StartResponse>* AcquisitionService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::stop(::grpc::ClientContext* context, const ::minknow_api::acquisition::StopRequest& request, ::minknow_api::acquisition::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::StopRequest, ::minknow_api::acquisition::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void AcquisitionService::Stub::async::stop(::grpc::ClientContext* context, const ::minknow_api::acquisition::StopRequest* request, ::minknow_api::acquisition::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::StopRequest, ::minknow_api::acquisition::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::stop(::grpc::ClientContext* context, const ::minknow_api::acquisition::StopRequest* request, ::minknow_api::acquisition::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::StopResponse>* AcquisitionService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::StopResponse, ::minknow_api::acquisition::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::StopResponse>* AcquisitionService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>* AcquisitionService::Stub::watch_for_status_changeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>::Create(channel_.get(), rpcmethod_watch_for_status_change_, context);
}

void AcquisitionService::Stub::async::watch_for_status_change(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::minknow_api::acquisition::WatchForStatusChangeRequest,::minknow_api::acquisition::WatchForStatusChangeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::minknow_api::acquisition::WatchForStatusChangeRequest,::minknow_api::acquisition::WatchForStatusChangeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_watch_for_status_change_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>* AcquisitionService::Stub::Asyncwatch_for_status_changeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>::Create(channel_.get(), cq, rpcmethod_watch_for_status_change_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>* AcquisitionService::Stub::PrepareAsyncwatch_for_status_changeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>::Create(channel_.get(), cq, rpcmethod_watch_for_status_change_, context, false, nullptr);
}

::grpc::ClientReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::watch_current_acquisition_runRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::acquisition::AcquisitionRunInfo>::Create(channel_.get(), rpcmethod_watch_current_acquisition_run_, context, request);
}

void AcquisitionService::Stub::async::watch_current_acquisition_run(::grpc::ClientContext* context, const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest* request, ::grpc::ClientReadReactor< ::minknow_api::acquisition::AcquisitionRunInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::acquisition::AcquisitionRunInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_watch_current_acquisition_run_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::Asyncwatch_current_acquisition_runRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::acquisition::AcquisitionRunInfo>::Create(channel_.get(), cq, rpcmethod_watch_current_acquisition_run_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::PrepareAsyncwatch_current_acquisition_runRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::acquisition::AcquisitionRunInfo>::Create(channel_.get(), cq, rpcmethod_watch_current_acquisition_run_, context, request, false, nullptr);
}

::grpc::Status AcquisitionService::Stub::current_status(::grpc::ClientContext* context, const ::minknow_api::acquisition::CurrentStatusRequest& request, ::minknow_api::acquisition::CurrentStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::CurrentStatusRequest, ::minknow_api::acquisition::CurrentStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_current_status_, context, request, response);
}

void AcquisitionService::Stub::async::current_status(::grpc::ClientContext* context, const ::minknow_api::acquisition::CurrentStatusRequest* request, ::minknow_api::acquisition::CurrentStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::CurrentStatusRequest, ::minknow_api::acquisition::CurrentStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_status_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::current_status(::grpc::ClientContext* context, const ::minknow_api::acquisition::CurrentStatusRequest* request, ::minknow_api::acquisition::CurrentStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_current_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::CurrentStatusResponse>* AcquisitionService::Stub::PrepareAsynccurrent_statusRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::CurrentStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::CurrentStatusResponse, ::minknow_api::acquisition::CurrentStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_current_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::CurrentStatusResponse>* AcquisitionService::Stub::Asynccurrent_statusRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::CurrentStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccurrent_statusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::get_progress(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetProgressRequest& request, ::minknow_api::acquisition::GetProgressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::GetProgressRequest, ::minknow_api::acquisition::GetProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_progress_, context, request, response);
}

void AcquisitionService::Stub::async::get_progress(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetProgressRequest* request, ::minknow_api::acquisition::GetProgressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::GetProgressRequest, ::minknow_api::acquisition::GetProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_progress_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::get_progress(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetProgressRequest* request, ::minknow_api::acquisition::GetProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_progress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::GetProgressResponse>* AcquisitionService::Stub::PrepareAsyncget_progressRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::GetProgressResponse, ::minknow_api::acquisition::GetProgressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_progress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::GetProgressResponse>* AcquisitionService::Stub::Asyncget_progressRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetProgressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_progressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::get_acquisition_info(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest& request, ::minknow_api::acquisition::AcquisitionRunInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::GetAcquisitionRunInfoRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_acquisition_info_, context, request, response);
}

void AcquisitionService::Stub::async::get_acquisition_info(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::GetAcquisitionRunInfoRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_acquisition_info_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::get_acquisition_info(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_acquisition_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::PrepareAsyncget_acquisition_infoRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::AcquisitionRunInfo, ::minknow_api::acquisition::GetAcquisitionRunInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_acquisition_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::Asyncget_acquisition_infoRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_acquisition_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::list_acquisition_runs(::grpc::ClientContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest& request, ::minknow_api::acquisition::ListAcquisitionRunsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::ListAcquisitionRunsRequest, ::minknow_api::acquisition::ListAcquisitionRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_acquisition_runs_, context, request, response);
}

void AcquisitionService::Stub::async::list_acquisition_runs(::grpc::ClientContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest* request, ::minknow_api::acquisition::ListAcquisitionRunsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::ListAcquisitionRunsRequest, ::minknow_api::acquisition::ListAcquisitionRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_acquisition_runs_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::list_acquisition_runs(::grpc::ClientContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest* request, ::minknow_api::acquisition::ListAcquisitionRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_acquisition_runs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::ListAcquisitionRunsResponse>* AcquisitionService::Stub::PrepareAsynclist_acquisition_runsRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::ListAcquisitionRunsResponse, ::minknow_api::acquisition::ListAcquisitionRunsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_acquisition_runs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::ListAcquisitionRunsResponse>* AcquisitionService::Stub::Asynclist_acquisition_runsRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_acquisition_runsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::get_current_acquisition_run(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest& request, ::minknow_api::acquisition::AcquisitionRunInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_current_acquisition_run_, context, request, response);
}

void AcquisitionService::Stub::async::get_current_acquisition_run(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_current_acquisition_run_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::get_current_acquisition_run(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_current_acquisition_run_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::PrepareAsyncget_current_acquisition_runRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::AcquisitionRunInfo, ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_current_acquisition_run_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::AcquisitionRunInfo>* AcquisitionService::Stub::Asyncget_current_acquisition_runRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_current_acquisition_runRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AcquisitionService::Stub::set_signal_reader(::grpc::ClientContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest& request, ::minknow_api::acquisition::SetSignalReaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::acquisition::SetSignalReaderRequest, ::minknow_api::acquisition::SetSignalReaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_signal_reader_, context, request, response);
}

void AcquisitionService::Stub::async::set_signal_reader(::grpc::ClientContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest* request, ::minknow_api::acquisition::SetSignalReaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::acquisition::SetSignalReaderRequest, ::minknow_api::acquisition::SetSignalReaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_signal_reader_, context, request, response, std::move(f));
}

void AcquisitionService::Stub::async::set_signal_reader(::grpc::ClientContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest* request, ::minknow_api::acquisition::SetSignalReaderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_signal_reader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::SetSignalReaderResponse>* AcquisitionService::Stub::PrepareAsyncset_signal_readerRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::acquisition::SetSignalReaderResponse, ::minknow_api::acquisition::SetSignalReaderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_signal_reader_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::acquisition::SetSignalReaderResponse>* AcquisitionService::Stub::Asyncset_signal_readerRaw(::grpc::ClientContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_signal_readerRaw(context, request, cq);
  result->StartCall();
  return result;
}

AcquisitionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::StartRequest, ::minknow_api::acquisition::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::StartRequest* req,
             ::minknow_api::acquisition::StartResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::StopRequest, ::minknow_api::acquisition::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::StopRequest* req,
             ::minknow_api::acquisition::StopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AcquisitionService::Service, ::minknow_api::acquisition::WatchForStatusChangeRequest, ::minknow_api::acquisition::WatchForStatusChangeResponse>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::minknow_api::acquisition::WatchForStatusChangeResponse,
             ::minknow_api::acquisition::WatchForStatusChangeRequest>* stream) {
               return service->watch_for_status_change(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AcquisitionService::Service, ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest, ::minknow_api::acquisition::AcquisitionRunInfo>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest* req,
             ::grpc::ServerWriter<::minknow_api::acquisition::AcquisitionRunInfo>* writer) {
               return service->watch_current_acquisition_run(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::CurrentStatusRequest, ::minknow_api::acquisition::CurrentStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::CurrentStatusRequest* req,
             ::minknow_api::acquisition::CurrentStatusResponse* resp) {
               return service->current_status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::GetProgressRequest, ::minknow_api::acquisition::GetProgressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::GetProgressRequest* req,
             ::minknow_api::acquisition::GetProgressResponse* resp) {
               return service->get_progress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::GetAcquisitionRunInfoRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* req,
             ::minknow_api::acquisition::AcquisitionRunInfo* resp) {
               return service->get_acquisition_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::ListAcquisitionRunsRequest, ::minknow_api::acquisition::ListAcquisitionRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::ListAcquisitionRunsRequest* req,
             ::minknow_api::acquisition::ListAcquisitionRunsResponse* resp) {
               return service->list_acquisition_runs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest, ::minknow_api::acquisition::AcquisitionRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* req,
             ::minknow_api::acquisition::AcquisitionRunInfo* resp) {
               return service->get_current_acquisition_run(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AcquisitionService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AcquisitionService::Service, ::minknow_api::acquisition::SetSignalReaderRequest, ::minknow_api::acquisition::SetSignalReaderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AcquisitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::acquisition::SetSignalReaderRequest* req,
             ::minknow_api::acquisition::SetSignalReaderResponse* resp) {
               return service->set_signal_reader(ctx, req, resp);
             }, this)));
}

AcquisitionService::Service::~Service() {
}

::grpc::Status AcquisitionService::Service::start(::grpc::ServerContext* context, const ::minknow_api::acquisition::StartRequest* request, ::minknow_api::acquisition::StartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::stop(::grpc::ServerContext* context, const ::minknow_api::acquisition::StopRequest* request, ::minknow_api::acquisition::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::watch_for_status_change(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::minknow_api::acquisition::WatchForStatusChangeResponse, ::minknow_api::acquisition::WatchForStatusChangeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::watch_current_acquisition_run(::grpc::ServerContext* context, const ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest* request, ::grpc::ServerWriter< ::minknow_api::acquisition::AcquisitionRunInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::current_status(::grpc::ServerContext* context, const ::minknow_api::acquisition::CurrentStatusRequest* request, ::minknow_api::acquisition::CurrentStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::get_progress(::grpc::ServerContext* context, const ::minknow_api::acquisition::GetProgressRequest* request, ::minknow_api::acquisition::GetProgressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::get_acquisition_info(::grpc::ServerContext* context, const ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::list_acquisition_runs(::grpc::ServerContext* context, const ::minknow_api::acquisition::ListAcquisitionRunsRequest* request, ::minknow_api::acquisition::ListAcquisitionRunsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::get_current_acquisition_run(::grpc::ServerContext* context, const ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* request, ::minknow_api::acquisition::AcquisitionRunInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AcquisitionService::Service::set_signal_reader(::grpc::ServerContext* context, const ::minknow_api::acquisition::SetSignalReaderRequest* request, ::minknow_api::acquisition::SetSignalReaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace acquisition

