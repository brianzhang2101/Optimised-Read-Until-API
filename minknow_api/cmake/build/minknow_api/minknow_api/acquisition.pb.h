// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/acquisition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2facquisition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2facquisition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "minknow_api/rpc_options.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2facquisition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2facquisition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2facquisition_2eproto;
namespace minknow_api {
namespace acquisition {
class AcquisitionConfigSummary;
struct AcquisitionConfigSummaryDefaultTypeInternal;
extern AcquisitionConfigSummaryDefaultTypeInternal _AcquisitionConfigSummary_default_instance_;
class AcquisitionRunInfo;
struct AcquisitionRunInfoDefaultTypeInternal;
extern AcquisitionRunInfoDefaultTypeInternal _AcquisitionRunInfo_default_instance_;
class AcquisitionWriterSummary;
struct AcquisitionWriterSummaryDefaultTypeInternal;
extern AcquisitionWriterSummaryDefaultTypeInternal _AcquisitionWriterSummary_default_instance_;
class AcquisitionYieldSummary;
struct AcquisitionYieldSummaryDefaultTypeInternal;
extern AcquisitionYieldSummaryDefaultTypeInternal _AcquisitionYieldSummary_default_instance_;
class ChannelStateInfo;
struct ChannelStateInfoDefaultTypeInternal;
extern ChannelStateInfoDefaultTypeInternal _ChannelStateInfo_default_instance_;
class ChannelStateInfo_ChannelState;
struct ChannelStateInfo_ChannelStateDefaultTypeInternal;
extern ChannelStateInfo_ChannelStateDefaultTypeInternal _ChannelStateInfo_ChannelState_default_instance_;
class ChannelStateInfo_Group;
struct ChannelStateInfo_GroupDefaultTypeInternal;
extern ChannelStateInfo_GroupDefaultTypeInternal _ChannelStateInfo_Group_default_instance_;
class ChannelStateInfo_Style;
struct ChannelStateInfo_StyleDefaultTypeInternal;
extern ChannelStateInfo_StyleDefaultTypeInternal _ChannelStateInfo_Style_default_instance_;
class CurrentStatusRequest;
struct CurrentStatusRequestDefaultTypeInternal;
extern CurrentStatusRequestDefaultTypeInternal _CurrentStatusRequest_default_instance_;
class CurrentStatusResponse;
struct CurrentStatusResponseDefaultTypeInternal;
extern CurrentStatusResponseDefaultTypeInternal _CurrentStatusResponse_default_instance_;
class GetAcquisitionRunInfoRequest;
struct GetAcquisitionRunInfoRequestDefaultTypeInternal;
extern GetAcquisitionRunInfoRequestDefaultTypeInternal _GetAcquisitionRunInfoRequest_default_instance_;
class GetCurrentAcquisitionRunRequest;
struct GetCurrentAcquisitionRunRequestDefaultTypeInternal;
extern GetCurrentAcquisitionRunRequestDefaultTypeInternal _GetCurrentAcquisitionRunRequest_default_instance_;
class GetProgressRequest;
struct GetProgressRequestDefaultTypeInternal;
extern GetProgressRequestDefaultTypeInternal _GetProgressRequest_default_instance_;
class GetProgressResponse;
struct GetProgressResponseDefaultTypeInternal;
extern GetProgressResponseDefaultTypeInternal _GetProgressResponse_default_instance_;
class GetProgressResponse_RawPerChannel;
struct GetProgressResponse_RawPerChannelDefaultTypeInternal;
extern GetProgressResponse_RawPerChannelDefaultTypeInternal _GetProgressResponse_RawPerChannel_default_instance_;
class ListAcquisitionRunsRequest;
struct ListAcquisitionRunsRequestDefaultTypeInternal;
extern ListAcquisitionRunsRequestDefaultTypeInternal _ListAcquisitionRunsRequest_default_instance_;
class ListAcquisitionRunsResponse;
struct ListAcquisitionRunsResponseDefaultTypeInternal;
extern ListAcquisitionRunsResponseDefaultTypeInternal _ListAcquisitionRunsResponse_default_instance_;
class SetSignalReaderRequest;
struct SetSignalReaderRequestDefaultTypeInternal;
extern SetSignalReaderRequestDefaultTypeInternal _SetSignalReaderRequest_default_instance_;
class SetSignalReaderResponse;
struct SetSignalReaderResponseDefaultTypeInternal;
extern SetSignalReaderResponseDefaultTypeInternal _SetSignalReaderResponse_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
struct StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class WatchCurrentAcquisitionRunRequest;
struct WatchCurrentAcquisitionRunRequestDefaultTypeInternal;
extern WatchCurrentAcquisitionRunRequestDefaultTypeInternal _WatchCurrentAcquisitionRunRequest_default_instance_;
class WatchForStatusChangeRequest;
struct WatchForStatusChangeRequestDefaultTypeInternal;
extern WatchForStatusChangeRequestDefaultTypeInternal _WatchForStatusChangeRequest_default_instance_;
class WatchForStatusChangeResponse;
struct WatchForStatusChangeResponseDefaultTypeInternal;
extern WatchForStatusChangeResponseDefaultTypeInternal _WatchForStatusChangeResponse_default_instance_;
}  // namespace acquisition
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::acquisition::AcquisitionConfigSummary* Arena::CreateMaybeMessage<::minknow_api::acquisition::AcquisitionConfigSummary>(Arena*);
template<> ::minknow_api::acquisition::AcquisitionRunInfo* Arena::CreateMaybeMessage<::minknow_api::acquisition::AcquisitionRunInfo>(Arena*);
template<> ::minknow_api::acquisition::AcquisitionWriterSummary* Arena::CreateMaybeMessage<::minknow_api::acquisition::AcquisitionWriterSummary>(Arena*);
template<> ::minknow_api::acquisition::AcquisitionYieldSummary* Arena::CreateMaybeMessage<::minknow_api::acquisition::AcquisitionYieldSummary>(Arena*);
template<> ::minknow_api::acquisition::ChannelStateInfo* Arena::CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo>(Arena*);
template<> ::minknow_api::acquisition::ChannelStateInfo_ChannelState* Arena::CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo_ChannelState>(Arena*);
template<> ::minknow_api::acquisition::ChannelStateInfo_Group* Arena::CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo_Group>(Arena*);
template<> ::minknow_api::acquisition::ChannelStateInfo_Style* Arena::CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo_Style>(Arena*);
template<> ::minknow_api::acquisition::CurrentStatusRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::CurrentStatusRequest>(Arena*);
template<> ::minknow_api::acquisition::CurrentStatusResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::CurrentStatusResponse>(Arena*);
template<> ::minknow_api::acquisition::GetAcquisitionRunInfoRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::GetAcquisitionRunInfoRequest>(Arena*);
template<> ::minknow_api::acquisition::GetCurrentAcquisitionRunRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::GetCurrentAcquisitionRunRequest>(Arena*);
template<> ::minknow_api::acquisition::GetProgressRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::GetProgressRequest>(Arena*);
template<> ::minknow_api::acquisition::GetProgressResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::GetProgressResponse>(Arena*);
template<> ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* Arena::CreateMaybeMessage<::minknow_api::acquisition::GetProgressResponse_RawPerChannel>(Arena*);
template<> ::minknow_api::acquisition::ListAcquisitionRunsRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::ListAcquisitionRunsRequest>(Arena*);
template<> ::minknow_api::acquisition::ListAcquisitionRunsResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::ListAcquisitionRunsResponse>(Arena*);
template<> ::minknow_api::acquisition::SetSignalReaderRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::SetSignalReaderRequest>(Arena*);
template<> ::minknow_api::acquisition::SetSignalReaderResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::SetSignalReaderResponse>(Arena*);
template<> ::minknow_api::acquisition::StartRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::StartRequest>(Arena*);
template<> ::minknow_api::acquisition::StartResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::StartResponse>(Arena*);
template<> ::minknow_api::acquisition::StopRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::StopRequest>(Arena*);
template<> ::minknow_api::acquisition::StopResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::StopResponse>(Arena*);
template<> ::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::WatchCurrentAcquisitionRunRequest>(Arena*);
template<> ::minknow_api::acquisition::WatchForStatusChangeRequest* Arena::CreateMaybeMessage<::minknow_api::acquisition::WatchForStatusChangeRequest>(Arena*);
template<> ::minknow_api::acquisition::WatchForStatusChangeResponse* Arena::CreateMaybeMessage<::minknow_api::acquisition::WatchForStatusChangeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace acquisition {

enum StopRequest_DataAction : int {
  StopRequest_DataAction_STOP_DEFAULT = 0,
  StopRequest_DataAction_STOP_KEEP_ALL_DATA = 1,
  StopRequest_DataAction_STOP_FINISH_PROCESSING = 2,
  StopRequest_DataAction_StopRequest_DataAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StopRequest_DataAction_StopRequest_DataAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StopRequest_DataAction_IsValid(int value);
constexpr StopRequest_DataAction StopRequest_DataAction_DataAction_MIN = StopRequest_DataAction_STOP_DEFAULT;
constexpr StopRequest_DataAction StopRequest_DataAction_DataAction_MAX = StopRequest_DataAction_STOP_FINISH_PROCESSING;
constexpr int StopRequest_DataAction_DataAction_ARRAYSIZE = StopRequest_DataAction_DataAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopRequest_DataAction_descriptor();
template<typename T>
inline const std::string& StopRequest_DataAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopRequest_DataAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopRequest_DataAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopRequest_DataAction_descriptor(), enum_t_value);
}
inline bool StopRequest_DataAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopRequest_DataAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopRequest_DataAction>(
    StopRequest_DataAction_descriptor(), name, value);
}
enum SetSignalReaderRequest_SignalReaderType : int {
  SetSignalReaderRequest_SignalReaderType_HDF5 = 0,
  SetSignalReaderRequest_SignalReaderType_DEVICE = 1,
  SetSignalReaderRequest_SignalReaderType_SetSignalReaderRequest_SignalReaderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetSignalReaderRequest_SignalReaderType_SetSignalReaderRequest_SignalReaderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetSignalReaderRequest_SignalReaderType_IsValid(int value);
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest_SignalReaderType_SignalReaderType_MIN = SetSignalReaderRequest_SignalReaderType_HDF5;
constexpr SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest_SignalReaderType_SignalReaderType_MAX = SetSignalReaderRequest_SignalReaderType_DEVICE;
constexpr int SetSignalReaderRequest_SignalReaderType_SignalReaderType_ARRAYSIZE = SetSignalReaderRequest_SignalReaderType_SignalReaderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetSignalReaderRequest_SignalReaderType_descriptor();
template<typename T>
inline const std::string& SetSignalReaderRequest_SignalReaderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetSignalReaderRequest_SignalReaderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetSignalReaderRequest_SignalReaderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetSignalReaderRequest_SignalReaderType_descriptor(), enum_t_value);
}
inline bool SetSignalReaderRequest_SignalReaderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetSignalReaderRequest_SignalReaderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetSignalReaderRequest_SignalReaderType>(
    SetSignalReaderRequest_SignalReaderType_descriptor(), name, value);
}
enum SetSignalReaderRequest_SourceFileMode : int {
  SetSignalReaderRequest_SourceFileMode_UNSPECIFIED = 0,
  SetSignalReaderRequest_SourceFileMode_SINGLE_RUN = 1,
  SetSignalReaderRequest_SourceFileMode_LOOP = 2,
  SetSignalReaderRequest_SourceFileMode_SetSignalReaderRequest_SourceFileMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetSignalReaderRequest_SourceFileMode_SetSignalReaderRequest_SourceFileMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetSignalReaderRequest_SourceFileMode_IsValid(int value);
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest_SourceFileMode_SourceFileMode_MIN = SetSignalReaderRequest_SourceFileMode_UNSPECIFIED;
constexpr SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest_SourceFileMode_SourceFileMode_MAX = SetSignalReaderRequest_SourceFileMode_LOOP;
constexpr int SetSignalReaderRequest_SourceFileMode_SourceFileMode_ARRAYSIZE = SetSignalReaderRequest_SourceFileMode_SourceFileMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetSignalReaderRequest_SourceFileMode_descriptor();
template<typename T>
inline const std::string& SetSignalReaderRequest_SourceFileMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetSignalReaderRequest_SourceFileMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetSignalReaderRequest_SourceFileMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetSignalReaderRequest_SourceFileMode_descriptor(), enum_t_value);
}
inline bool SetSignalReaderRequest_SourceFileMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetSignalReaderRequest_SourceFileMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetSignalReaderRequest_SourceFileMode>(
    SetSignalReaderRequest_SourceFileMode_descriptor(), name, value);
}
enum MinknowStatus : int {
  ERROR_STATUS = 0,
  READY = 1,
  STARTING = 2,
  PROCESSING = 3,
  FINISHING = 4,
  MinknowStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MinknowStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MinknowStatus_IsValid(int value);
constexpr MinknowStatus MinknowStatus_MIN = ERROR_STATUS;
constexpr MinknowStatus MinknowStatus_MAX = FINISHING;
constexpr int MinknowStatus_ARRAYSIZE = MinknowStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MinknowStatus_descriptor();
template<typename T>
inline const std::string& MinknowStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MinknowStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MinknowStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MinknowStatus_descriptor(), enum_t_value);
}
inline bool MinknowStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MinknowStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MinknowStatus>(
    MinknowStatus_descriptor(), name, value);
}
enum Option : int {
  AUTO = 0,
  DISABLE = 1,
  FORCE = 2,
  Option_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Option_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Option_IsValid(int value);
constexpr Option Option_MIN = AUTO;
constexpr Option Option_MAX = FORCE;
constexpr int Option_ARRAYSIZE = Option_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Option_descriptor();
template<typename T>
inline const std::string& Option_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Option>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Option_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Option_descriptor(), enum_t_value);
}
inline bool Option_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Option* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Option>(
    Option_descriptor(), name, value);
}
enum Purpose : int {
  OTHER_PURPOSE = 0,
  SEQUENCING = 2,
  CALIBRATION = 3,
  Purpose_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Purpose_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Purpose_IsValid(int value);
constexpr Purpose Purpose_MIN = OTHER_PURPOSE;
constexpr Purpose Purpose_MAX = CALIBRATION;
constexpr int Purpose_ARRAYSIZE = Purpose_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Purpose_descriptor();
template<typename T>
inline const std::string& Purpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Purpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Purpose_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Purpose_descriptor(), enum_t_value);
}
inline bool Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Purpose* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Purpose>(
    Purpose_descriptor(), name, value);
}
enum AcquisitionState : int {
  ACQUISITION_STARTING = 0,
  ACQUISITION_RUNNING = 1,
  ACQUISITION_FINISHING = 2,
  ACQUISITION_COMPLETED = 3,
  AcquisitionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcquisitionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcquisitionState_IsValid(int value);
constexpr AcquisitionState AcquisitionState_MIN = ACQUISITION_STARTING;
constexpr AcquisitionState AcquisitionState_MAX = ACQUISITION_COMPLETED;
constexpr int AcquisitionState_ARRAYSIZE = AcquisitionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquisitionState_descriptor();
template<typename T>
inline const std::string& AcquisitionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcquisitionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcquisitionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AcquisitionState_descriptor(), enum_t_value);
}
inline bool AcquisitionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AcquisitionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AcquisitionState>(
    AcquisitionState_descriptor(), name, value);
}
enum AcquisitionStopReason : int {
  STOPPED_NOT_SET = 0,
  STOPPED_USER_REQUESTED = 1,
  STOPPED_NO_DISK_SPACE = 2,
  STOPPED_DEVICE_STOPPED_ACQUISITION = 3,
  STOPPED_STARTING_ANOTHER_RUN = 4,
  STOPPED_PROTOCOL_ENDED = 5,
  STOPPED_DEVICE_ERROR = 6,
  STOPPED_BAD_TEMPERATURE = 7,
  STOPPED_SHUTDOWN = 8,
  STOPPED_INTERNAL_ERROR = 9,
  AcquisitionStopReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcquisitionStopReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcquisitionStopReason_IsValid(int value);
constexpr AcquisitionStopReason AcquisitionStopReason_MIN = STOPPED_NOT_SET;
constexpr AcquisitionStopReason AcquisitionStopReason_MAX = STOPPED_INTERNAL_ERROR;
constexpr int AcquisitionStopReason_ARRAYSIZE = AcquisitionStopReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AcquisitionStopReason_descriptor();
template<typename T>
inline const std::string& AcquisitionStopReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcquisitionStopReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcquisitionStopReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AcquisitionStopReason_descriptor(), enum_t_value);
}
inline bool AcquisitionStopReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AcquisitionStopReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AcquisitionStopReason>(
    AcquisitionStopReason_descriptor(), name, value);
}
enum StartupState : int {
  STARTUP_UNKNOWN = 0,
  STARTUP_BUILDING_PIPELINE = 2,
  STARTUP_INITIALISING_BASECALLER = 3,
  STARTUP_INITIALISING_BASECALLER_ALIGNMENT = 4,
  STARTUP_INITIALISING_DATA_WRITERS = 5,
  STARTUP_INITIALISING_INTERMEDIATE_DATA_STORAGE = 6,
  STARTUP_INITIALISING_STATISTICS = 7,
  StartupState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StartupState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StartupState_IsValid(int value);
constexpr StartupState StartupState_MIN = STARTUP_UNKNOWN;
constexpr StartupState StartupState_MAX = STARTUP_INITIALISING_STATISTICS;
constexpr int StartupState_ARRAYSIZE = StartupState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartupState_descriptor();
template<typename T>
inline const std::string& StartupState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StartupState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StartupState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StartupState_descriptor(), enum_t_value);
}
inline bool StartupState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StartupState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StartupState>(
    StartupState_descriptor(), name, value);
}
enum FinishingState : int {
  FINISHING_UNKNOWN = 0,
  FINISHING_PROCESSING_DEVICE_SIGNAL = 1,
  FINISHING_BASECALLING_READS = 2,
  FINISHING_SAVING_DATA = 3,
  FinishingState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FinishingState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FinishingState_IsValid(int value);
constexpr FinishingState FinishingState_MIN = FINISHING_UNKNOWN;
constexpr FinishingState FinishingState_MAX = FINISHING_SAVING_DATA;
constexpr int FinishingState_ARRAYSIZE = FinishingState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FinishingState_descriptor();
template<typename T>
inline const std::string& FinishingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FinishingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FinishingState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FinishingState_descriptor(), enum_t_value);
}
inline bool FinishingState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FinishingState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FinishingState>(
    FinishingState_descriptor(), name, value);
}
// ===================================================================

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  ~StartRequest() override;
  explicit constexpr StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return new StartRequest();
  }

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDontWaitForDeviceReadyFieldNumber = 2,
    kGenerateReportFieldNumber = 3,
    kSendSequencingReadMetricsFieldNumber = 4,
    kSendBasecallingMetricsFieldNumber = 5,
    kPurposeFieldNumber = 6,
    kAnalysisFieldNumber = 7,
    kFileOutputFieldNumber = 8,
    kGenerateFinalSummaryFieldNumber = 9,
  };
  // bool dont_wait_for_device_ready = 2;
  void clear_dont_wait_for_device_ready();
  bool dont_wait_for_device_ready() const;
  void set_dont_wait_for_device_ready(bool value);
  private:
  bool _internal_dont_wait_for_device_ready() const;
  void _internal_set_dont_wait_for_device_ready(bool value);
  public:

  // .minknow_api.acquisition.Option generate_report = 3;
  void clear_generate_report();
  ::minknow_api::acquisition::Option generate_report() const;
  void set_generate_report(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_generate_report() const;
  void _internal_set_generate_report(::minknow_api::acquisition::Option value);
  public:

  // .minknow_api.acquisition.Option send_sequencing_read_metrics = 4;
  void clear_send_sequencing_read_metrics();
  ::minknow_api::acquisition::Option send_sequencing_read_metrics() const;
  void set_send_sequencing_read_metrics(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_send_sequencing_read_metrics() const;
  void _internal_set_send_sequencing_read_metrics(::minknow_api::acquisition::Option value);
  public:

  // .minknow_api.acquisition.Option send_basecalling_metrics = 5;
  void clear_send_basecalling_metrics();
  ::minknow_api::acquisition::Option send_basecalling_metrics() const;
  void set_send_basecalling_metrics(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_send_basecalling_metrics() const;
  void _internal_set_send_basecalling_metrics(::minknow_api::acquisition::Option value);
  public:

  // .minknow_api.acquisition.Purpose purpose = 6;
  void clear_purpose();
  ::minknow_api::acquisition::Purpose purpose() const;
  void set_purpose(::minknow_api::acquisition::Purpose value);
  private:
  ::minknow_api::acquisition::Purpose _internal_purpose() const;
  void _internal_set_purpose(::minknow_api::acquisition::Purpose value);
  public:

  // .minknow_api.acquisition.Option analysis = 7;
  void clear_analysis();
  ::minknow_api::acquisition::Option analysis() const;
  void set_analysis(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_analysis() const;
  void _internal_set_analysis(::minknow_api::acquisition::Option value);
  public:

  // .minknow_api.acquisition.Option file_output = 8;
  void clear_file_output();
  ::minknow_api::acquisition::Option file_output() const;
  void set_file_output(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_file_output() const;
  void _internal_set_file_output(::minknow_api::acquisition::Option value);
  public:

  // .minknow_api.acquisition.Option generate_final_summary = 9;
  void clear_generate_final_summary();
  ::minknow_api::acquisition::Option generate_final_summary() const;
  void set_generate_final_summary(::minknow_api::acquisition::Option value);
  private:
  ::minknow_api::acquisition::Option _internal_generate_final_summary() const;
  void _internal_set_generate_final_summary(::minknow_api::acquisition::Option value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dont_wait_for_device_ready_;
  int generate_report_;
  int send_sequencing_read_metrics_;
  int send_basecalling_metrics_;
  int purpose_;
  int analysis_;
  int file_output_;
  int generate_final_summary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class StartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {}
  ~StartResponse() override;
  explicit constexpr StartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartResponse* New() const final {
    return new StartResponse();
  }

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  ~StopRequest() override;
  explicit constexpr StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return new StopRequest();
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StopRequest_DataAction DataAction;
  static constexpr DataAction STOP_DEFAULT =
    StopRequest_DataAction_STOP_DEFAULT;
  static constexpr DataAction STOP_KEEP_ALL_DATA =
    StopRequest_DataAction_STOP_KEEP_ALL_DATA;
  static constexpr DataAction STOP_FINISH_PROCESSING =
    StopRequest_DataAction_STOP_FINISH_PROCESSING;
  static inline bool DataAction_IsValid(int value) {
    return StopRequest_DataAction_IsValid(value);
  }
  static constexpr DataAction DataAction_MIN =
    StopRequest_DataAction_DataAction_MIN;
  static constexpr DataAction DataAction_MAX =
    StopRequest_DataAction_DataAction_MAX;
  static constexpr int DataAction_ARRAYSIZE =
    StopRequest_DataAction_DataAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataAction_descriptor() {
    return StopRequest_DataAction_descriptor();
  }
  template<typename T>
  static inline const std::string& DataAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataAction_Name.");
    return StopRequest_DataAction_Name(enum_t_value);
  }
  static inline bool DataAction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataAction* value) {
    return StopRequest_DataAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataActionOnStopFieldNumber = 1,
    kWaitUntilReadyFieldNumber = 2,
    kKeepPowerOnFieldNumber = 3,
  };
  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  void clear_data_action_on_stop();
  ::minknow_api::acquisition::StopRequest_DataAction data_action_on_stop() const;
  void set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value);
  private:
  ::minknow_api::acquisition::StopRequest_DataAction _internal_data_action_on_stop() const;
  void _internal_set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value);
  public:

  // bool wait_until_ready = 2;
  void clear_wait_until_ready();
  bool wait_until_ready() const;
  void set_wait_until_ready(bool value);
  private:
  bool _internal_wait_until_ready() const;
  void _internal_set_wait_until_ready(bool value);
  public:

  // bool keep_power_on = 3;
  void clear_keep_power_on();
  bool keep_power_on() const;
  void set_keep_power_on(bool value);
  private:
  bool _internal_keep_power_on() const;
  void _internal_set_keep_power_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int data_action_on_stop_;
  bool wait_until_ready_;
  bool keep_power_on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  explicit constexpr StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return new StopResponse();
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class WatchForStatusChangeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.WatchForStatusChangeRequest) */ {
 public:
  inline WatchForStatusChangeRequest() : WatchForStatusChangeRequest(nullptr) {}
  ~WatchForStatusChangeRequest() override;
  explicit constexpr WatchForStatusChangeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchForStatusChangeRequest(const WatchForStatusChangeRequest& from);
  WatchForStatusChangeRequest(WatchForStatusChangeRequest&& from) noexcept
    : WatchForStatusChangeRequest() {
    *this = ::std::move(from);
  }

  inline WatchForStatusChangeRequest& operator=(const WatchForStatusChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchForStatusChangeRequest& operator=(WatchForStatusChangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchForStatusChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchForStatusChangeRequest* internal_default_instance() {
    return reinterpret_cast<const WatchForStatusChangeRequest*>(
               &_WatchForStatusChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WatchForStatusChangeRequest& a, WatchForStatusChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchForStatusChangeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchForStatusChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchForStatusChangeRequest* New() const final {
    return new WatchForStatusChangeRequest();
  }

  WatchForStatusChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchForStatusChangeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchForStatusChangeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchForStatusChangeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchForStatusChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.WatchForStatusChangeRequest";
  }
  protected:
  explicit WatchForStatusChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 1,
  };
  // bool stop = 1;
  void clear_stop();
  bool stop() const;
  void set_stop(bool value);
  private:
  bool _internal_stop() const;
  void _internal_set_stop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.WatchForStatusChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class WatchForStatusChangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.WatchForStatusChangeResponse) */ {
 public:
  inline WatchForStatusChangeResponse() : WatchForStatusChangeResponse(nullptr) {}
  ~WatchForStatusChangeResponse() override;
  explicit constexpr WatchForStatusChangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchForStatusChangeResponse(const WatchForStatusChangeResponse& from);
  WatchForStatusChangeResponse(WatchForStatusChangeResponse&& from) noexcept
    : WatchForStatusChangeResponse() {
    *this = ::std::move(from);
  }

  inline WatchForStatusChangeResponse& operator=(const WatchForStatusChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchForStatusChangeResponse& operator=(WatchForStatusChangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchForStatusChangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchForStatusChangeResponse* internal_default_instance() {
    return reinterpret_cast<const WatchForStatusChangeResponse*>(
               &_WatchForStatusChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WatchForStatusChangeResponse& a, WatchForStatusChangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchForStatusChangeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchForStatusChangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchForStatusChangeResponse* New() const final {
    return new WatchForStatusChangeResponse();
  }

  WatchForStatusChangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchForStatusChangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchForStatusChangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchForStatusChangeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchForStatusChangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.WatchForStatusChangeResponse";
  }
  protected:
  explicit WatchForStatusChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .minknow_api.acquisition.MinknowStatus status = 1;
  void clear_status();
  ::minknow_api::acquisition::MinknowStatus status() const;
  void set_status(::minknow_api::acquisition::MinknowStatus value);
  private:
  ::minknow_api::acquisition::MinknowStatus _internal_status() const;
  void _internal_set_status(::minknow_api::acquisition::MinknowStatus value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.WatchForStatusChangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class CurrentStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.CurrentStatusRequest) */ {
 public:
  inline CurrentStatusRequest() : CurrentStatusRequest(nullptr) {}
  explicit constexpr CurrentStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentStatusRequest(const CurrentStatusRequest& from);
  CurrentStatusRequest(CurrentStatusRequest&& from) noexcept
    : CurrentStatusRequest() {
    *this = ::std::move(from);
  }

  inline CurrentStatusRequest& operator=(const CurrentStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentStatusRequest& operator=(CurrentStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CurrentStatusRequest*>(
               &_CurrentStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CurrentStatusRequest& a, CurrentStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentStatusRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentStatusRequest* New() const final {
    return new CurrentStatusRequest();
  }

  CurrentStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CurrentStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CurrentStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.CurrentStatusRequest";
  }
  protected:
  explicit CurrentStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.CurrentStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class CurrentStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.CurrentStatusResponse) */ {
 public:
  inline CurrentStatusResponse() : CurrentStatusResponse(nullptr) {}
  ~CurrentStatusResponse() override;
  explicit constexpr CurrentStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CurrentStatusResponse(const CurrentStatusResponse& from);
  CurrentStatusResponse(CurrentStatusResponse&& from) noexcept
    : CurrentStatusResponse() {
    *this = ::std::move(from);
  }

  inline CurrentStatusResponse& operator=(const CurrentStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentStatusResponse& operator=(CurrentStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CurrentStatusResponse*>(
               &_CurrentStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CurrentStatusResponse& a, CurrentStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentStatusResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentStatusResponse* New() const final {
    return new CurrentStatusResponse();
  }

  CurrentStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CurrentStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CurrentStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.CurrentStatusResponse";
  }
  protected:
  explicit CurrentStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .minknow_api.acquisition.MinknowStatus status = 1;
  void clear_status();
  ::minknow_api::acquisition::MinknowStatus status() const;
  void set_status(::minknow_api::acquisition::MinknowStatus value);
  private:
  ::minknow_api::acquisition::MinknowStatus _internal_status() const;
  void _internal_set_status(::minknow_api::acquisition::MinknowStatus value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.CurrentStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class GetProgressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.GetProgressRequest) */ {
 public:
  inline GetProgressRequest() : GetProgressRequest(nullptr) {}
  explicit constexpr GetProgressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProgressRequest(const GetProgressRequest& from);
  GetProgressRequest(GetProgressRequest&& from) noexcept
    : GetProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetProgressRequest& operator=(const GetProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProgressRequest& operator=(GetProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetProgressRequest*>(
               &_GetProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetProgressRequest& a, GetProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProgressRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProgressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProgressRequest* New() const final {
    return new GetProgressRequest();
  }

  GetProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProgressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetProgressRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.GetProgressRequest";
  }
  protected:
  explicit GetProgressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.GetProgressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class GetProgressResponse_RawPerChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.GetProgressResponse.RawPerChannel) */ {
 public:
  inline GetProgressResponse_RawPerChannel() : GetProgressResponse_RawPerChannel(nullptr) {}
  ~GetProgressResponse_RawPerChannel() override;
  explicit constexpr GetProgressResponse_RawPerChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProgressResponse_RawPerChannel(const GetProgressResponse_RawPerChannel& from);
  GetProgressResponse_RawPerChannel(GetProgressResponse_RawPerChannel&& from) noexcept
    : GetProgressResponse_RawPerChannel() {
    *this = ::std::move(from);
  }

  inline GetProgressResponse_RawPerChannel& operator=(const GetProgressResponse_RawPerChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProgressResponse_RawPerChannel& operator=(GetProgressResponse_RawPerChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProgressResponse_RawPerChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProgressResponse_RawPerChannel* internal_default_instance() {
    return reinterpret_cast<const GetProgressResponse_RawPerChannel*>(
               &_GetProgressResponse_RawPerChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetProgressResponse_RawPerChannel& a, GetProgressResponse_RawPerChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProgressResponse_RawPerChannel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProgressResponse_RawPerChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProgressResponse_RawPerChannel* New() const final {
    return new GetProgressResponse_RawPerChannel();
  }

  GetProgressResponse_RawPerChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProgressResponse_RawPerChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProgressResponse_RawPerChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProgressResponse_RawPerChannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProgressResponse_RawPerChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.GetProgressResponse.RawPerChannel";
  }
  protected:
  explicit GetProgressResponse_RawPerChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcquiredFieldNumber = 1,
    kProcessedFieldNumber = 2,
  };
  // uint64 acquired = 1;
  void clear_acquired();
  ::PROTOBUF_NAMESPACE_ID::uint64 acquired() const;
  void set_acquired(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_acquired() const;
  void _internal_set_acquired(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 processed = 2;
  void clear_processed();
  ::PROTOBUF_NAMESPACE_ID::uint64 processed() const;
  void set_processed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_processed() const;
  void _internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.GetProgressResponse.RawPerChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 acquired_;
  ::PROTOBUF_NAMESPACE_ID::uint64 processed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class GetProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.GetProgressResponse) */ {
 public:
  inline GetProgressResponse() : GetProgressResponse(nullptr) {}
  ~GetProgressResponse() override;
  explicit constexpr GetProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProgressResponse(const GetProgressResponse& from);
  GetProgressResponse(GetProgressResponse&& from) noexcept
    : GetProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetProgressResponse& operator=(const GetProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProgressResponse& operator=(GetProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetProgressResponse*>(
               &_GetProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetProgressResponse& a, GetProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProgressResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProgressResponse* New() const final {
    return new GetProgressResponse();
  }

  GetProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProgressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProgressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.GetProgressResponse";
  }
  protected:
  explicit GetProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetProgressResponse_RawPerChannel RawPerChannel;

  // accessors -------------------------------------------------------

  enum : int {
    kRawPerChannelFieldNumber = 1,
  };
  // .minknow_api.acquisition.GetProgressResponse.RawPerChannel raw_per_channel = 1;
  bool has_raw_per_channel() const;
  private:
  bool _internal_has_raw_per_channel() const;
  public:
  void clear_raw_per_channel();
  const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel& raw_per_channel() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* release_raw_per_channel();
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* mutable_raw_per_channel();
  void set_allocated_raw_per_channel(::minknow_api::acquisition::GetProgressResponse_RawPerChannel* raw_per_channel);
  private:
  const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel& _internal_raw_per_channel() const;
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* _internal_mutable_raw_per_channel();
  public:
  void unsafe_arena_set_allocated_raw_per_channel(
      ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* raw_per_channel);
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* unsafe_arena_release_raw_per_channel();

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.GetProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* raw_per_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class GetAcquisitionRunInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.GetAcquisitionRunInfoRequest) */ {
 public:
  inline GetAcquisitionRunInfoRequest() : GetAcquisitionRunInfoRequest(nullptr) {}
  ~GetAcquisitionRunInfoRequest() override;
  explicit constexpr GetAcquisitionRunInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAcquisitionRunInfoRequest(const GetAcquisitionRunInfoRequest& from);
  GetAcquisitionRunInfoRequest(GetAcquisitionRunInfoRequest&& from) noexcept
    : GetAcquisitionRunInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAcquisitionRunInfoRequest& operator=(const GetAcquisitionRunInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAcquisitionRunInfoRequest& operator=(GetAcquisitionRunInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAcquisitionRunInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAcquisitionRunInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAcquisitionRunInfoRequest*>(
               &_GetAcquisitionRunInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAcquisitionRunInfoRequest& a, GetAcquisitionRunInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAcquisitionRunInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAcquisitionRunInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAcquisitionRunInfoRequest* New() const final {
    return new GetAcquisitionRunInfoRequest();
  }

  GetAcquisitionRunInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAcquisitionRunInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAcquisitionRunInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAcquisitionRunInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAcquisitionRunInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.GetAcquisitionRunInfoRequest";
  }
  protected:
  explicit GetAcquisitionRunInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.GetAcquisitionRunInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class AcquisitionYieldSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.AcquisitionYieldSummary) */ {
 public:
  inline AcquisitionYieldSummary() : AcquisitionYieldSummary(nullptr) {}
  ~AcquisitionYieldSummary() override;
  explicit constexpr AcquisitionYieldSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquisitionYieldSummary(const AcquisitionYieldSummary& from);
  AcquisitionYieldSummary(AcquisitionYieldSummary&& from) noexcept
    : AcquisitionYieldSummary() {
    *this = ::std::move(from);
  }

  inline AcquisitionYieldSummary& operator=(const AcquisitionYieldSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquisitionYieldSummary& operator=(AcquisitionYieldSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquisitionYieldSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquisitionYieldSummary* internal_default_instance() {
    return reinterpret_cast<const AcquisitionYieldSummary*>(
               &_AcquisitionYieldSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AcquisitionYieldSummary& a, AcquisitionYieldSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquisitionYieldSummary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquisitionYieldSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcquisitionYieldSummary* New() const final {
    return new AcquisitionYieldSummary();
  }

  AcquisitionYieldSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcquisitionYieldSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquisitionYieldSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquisitionYieldSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquisitionYieldSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.AcquisitionYieldSummary";
  }
  protected:
  explicit AcquisitionYieldSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadCountFieldNumber = 1,
    kBasecalledPassReadCountFieldNumber = 3,
    kBasecalledFailReadCountFieldNumber = 4,
    kBasecalledPassBasesFieldNumber = 5,
    kBasecalledSamplesFieldNumber = 6,
    kSelectedRawSamplesFieldNumber = 7,
    kSelectedEventsFieldNumber = 8,
    kEstimatedSelectedBasesFieldNumber = 9,
    kBasecalledSkippedReadCountFieldNumber = 10,
    kAlignmentMatchesFieldNumber = 14,
    kAlignmentMismatchesFieldNumber = 15,
    kAlignmentInsertionsFieldNumber = 16,
    kAlignmentCoverageFieldNumber = 19,
    kAlignmentDeletionsFieldNumber = 17,
    kBasecalledFailBasesFieldNumber = 18,
  };
  // int64 read_count = 1;
  void clear_read_count();
  ::PROTOBUF_NAMESPACE_ID::int64 read_count() const;
  void set_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_read_count() const;
  void _internal_set_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_pass_read_count = 3;
  void clear_basecalled_pass_read_count();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_pass_read_count() const;
  void set_basecalled_pass_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_pass_read_count() const;
  void _internal_set_basecalled_pass_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_fail_read_count = 4;
  void clear_basecalled_fail_read_count();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_fail_read_count() const;
  void set_basecalled_fail_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_fail_read_count() const;
  void _internal_set_basecalled_fail_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_pass_bases = 5;
  void clear_basecalled_pass_bases();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_pass_bases() const;
  void set_basecalled_pass_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_pass_bases() const;
  void _internal_set_basecalled_pass_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_samples = 6;
  void clear_basecalled_samples();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_samples() const;
  void set_basecalled_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_samples() const;
  void _internal_set_basecalled_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 selected_raw_samples = 7;
  void clear_selected_raw_samples();
  ::PROTOBUF_NAMESPACE_ID::int64 selected_raw_samples() const;
  void set_selected_raw_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_selected_raw_samples() const;
  void _internal_set_selected_raw_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 selected_events = 8;
  void clear_selected_events();
  ::PROTOBUF_NAMESPACE_ID::int64 selected_events() const;
  void set_selected_events(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_selected_events() const;
  void _internal_set_selected_events(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 estimated_selected_bases = 9;
  void clear_estimated_selected_bases();
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_selected_bases() const;
  void set_estimated_selected_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_estimated_selected_bases() const;
  void _internal_set_estimated_selected_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_skipped_read_count = 10;
  void clear_basecalled_skipped_read_count();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_skipped_read_count() const;
  void set_basecalled_skipped_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_skipped_read_count() const;
  void _internal_set_basecalled_skipped_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 alignment_matches = 14;
  void clear_alignment_matches();
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_matches() const;
  void set_alignment_matches(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_alignment_matches() const;
  void _internal_set_alignment_matches(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 alignment_mismatches = 15;
  void clear_alignment_mismatches();
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_mismatches() const;
  void set_alignment_mismatches(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_alignment_mismatches() const;
  void _internal_set_alignment_mismatches(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 alignment_insertions = 16;
  void clear_alignment_insertions();
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_insertions() const;
  void set_alignment_insertions(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_alignment_insertions() const;
  void _internal_set_alignment_insertions(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float alignment_coverage = 19;
  void clear_alignment_coverage();
  float alignment_coverage() const;
  void set_alignment_coverage(float value);
  private:
  float _internal_alignment_coverage() const;
  void _internal_set_alignment_coverage(float value);
  public:

  // int64 alignment_deletions = 17;
  void clear_alignment_deletions();
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_deletions() const;
  void set_alignment_deletions(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_alignment_deletions() const;
  void _internal_set_alignment_deletions(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 basecalled_fail_bases = 18;
  void clear_basecalled_fail_bases();
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_fail_bases() const;
  void set_basecalled_fail_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_basecalled_fail_bases() const;
  void _internal_set_basecalled_fail_bases(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.AcquisitionYieldSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 read_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_pass_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_fail_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_pass_bases_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_samples_;
  ::PROTOBUF_NAMESPACE_ID::int64 selected_raw_samples_;
  ::PROTOBUF_NAMESPACE_ID::int64 selected_events_;
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_selected_bases_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_skipped_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_matches_;
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_mismatches_;
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_insertions_;
  float alignment_coverage_;
  ::PROTOBUF_NAMESPACE_ID::int64 alignment_deletions_;
  ::PROTOBUF_NAMESPACE_ID::int64 basecalled_fail_bases_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class AcquisitionWriterSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.AcquisitionWriterSummary) */ {
 public:
  inline AcquisitionWriterSummary() : AcquisitionWriterSummary(nullptr) {}
  ~AcquisitionWriterSummary() override;
  explicit constexpr AcquisitionWriterSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquisitionWriterSummary(const AcquisitionWriterSummary& from);
  AcquisitionWriterSummary(AcquisitionWriterSummary&& from) noexcept
    : AcquisitionWriterSummary() {
    *this = ::std::move(from);
  }

  inline AcquisitionWriterSummary& operator=(const AcquisitionWriterSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquisitionWriterSummary& operator=(AcquisitionWriterSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquisitionWriterSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquisitionWriterSummary* internal_default_instance() {
    return reinterpret_cast<const AcquisitionWriterSummary*>(
               &_AcquisitionWriterSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AcquisitionWriterSummary& a, AcquisitionWriterSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquisitionWriterSummary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquisitionWriterSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcquisitionWriterSummary* New() const final {
    return new AcquisitionWriterSummary();
  }

  AcquisitionWriterSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcquisitionWriterSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquisitionWriterSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquisitionWriterSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquisitionWriterSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.AcquisitionWriterSummary";
  }
  protected:
  explicit AcquisitionWriterSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrittenReadCountFieldNumber = 1,
    kBytesToWriteProducedFieldNumber = 2,
    kBytesToWriteFailedFieldNumber = 3,
    kBytesToWriteCompletedFieldNumber = 4,
  };
  // int64 written_read_count = 1;
  void clear_written_read_count();
  ::PROTOBUF_NAMESPACE_ID::int64 written_read_count() const;
  void set_written_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_written_read_count() const;
  void _internal_set_written_read_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes_to_write_produced = 2;
  void clear_bytes_to_write_produced();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_produced() const;
  void set_bytes_to_write_produced(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_to_write_produced() const;
  void _internal_set_bytes_to_write_produced(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes_to_write_failed = 3;
  void clear_bytes_to_write_failed();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_failed() const;
  void set_bytes_to_write_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_to_write_failed() const;
  void _internal_set_bytes_to_write_failed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes_to_write_completed = 4;
  void clear_bytes_to_write_completed();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_completed() const;
  void set_bytes_to_write_completed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_to_write_completed() const;
  void _internal_set_bytes_to_write_completed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.AcquisitionWriterSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 written_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_produced_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_failed_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_to_write_completed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ChannelStateInfo_Style final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ChannelStateInfo.Style) */ {
 public:
  inline ChannelStateInfo_Style() : ChannelStateInfo_Style(nullptr) {}
  ~ChannelStateInfo_Style() override;
  explicit constexpr ChannelStateInfo_Style(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStateInfo_Style(const ChannelStateInfo_Style& from);
  ChannelStateInfo_Style(ChannelStateInfo_Style&& from) noexcept
    : ChannelStateInfo_Style() {
    *this = ::std::move(from);
  }

  inline ChannelStateInfo_Style& operator=(const ChannelStateInfo_Style& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStateInfo_Style& operator=(ChannelStateInfo_Style&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStateInfo_Style& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStateInfo_Style* internal_default_instance() {
    return reinterpret_cast<const ChannelStateInfo_Style*>(
               &_ChannelStateInfo_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChannelStateInfo_Style& a, ChannelStateInfo_Style& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStateInfo_Style* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStateInfo_Style* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStateInfo_Style* New() const final {
    return new ChannelStateInfo_Style();
  }

  ChannelStateInfo_Style* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStateInfo_Style>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStateInfo_Style& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStateInfo_Style& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStateInfo_Style* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ChannelStateInfo.Style";
  }
  protected:
  explicit ChannelStateInfo_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kColourFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string colour = 3;
  void clear_colour();
  const std::string& colour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colour();
  PROTOBUF_MUST_USE_RESULT std::string* release_colour();
  void set_allocated_colour(std::string* colour);
  private:
  const std::string& _internal_colour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colour(const std::string& value);
  std::string* _internal_mutable_colour();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ChannelStateInfo.Style)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colour_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ChannelStateInfo_ChannelState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ChannelStateInfo.ChannelState) */ {
 public:
  inline ChannelStateInfo_ChannelState() : ChannelStateInfo_ChannelState(nullptr) {}
  ~ChannelStateInfo_ChannelState() override;
  explicit constexpr ChannelStateInfo_ChannelState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStateInfo_ChannelState(const ChannelStateInfo_ChannelState& from);
  ChannelStateInfo_ChannelState(ChannelStateInfo_ChannelState&& from) noexcept
    : ChannelStateInfo_ChannelState() {
    *this = ::std::move(from);
  }

  inline ChannelStateInfo_ChannelState& operator=(const ChannelStateInfo_ChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStateInfo_ChannelState& operator=(ChannelStateInfo_ChannelState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStateInfo_ChannelState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStateInfo_ChannelState* internal_default_instance() {
    return reinterpret_cast<const ChannelStateInfo_ChannelState*>(
               &_ChannelStateInfo_ChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChannelStateInfo_ChannelState& a, ChannelStateInfo_ChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStateInfo_ChannelState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStateInfo_ChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStateInfo_ChannelState* New() const final {
    return new ChannelStateInfo_ChannelState();
  }

  ChannelStateInfo_ChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStateInfo_ChannelState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStateInfo_ChannelState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStateInfo_ChannelState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStateInfo_ChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ChannelStateInfo.ChannelState";
  }
  protected:
  explicit ChannelStateInfo_ChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStyleFieldNumber = 3,
    kIdFieldNumber = 1,
    kGlobalOrderFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::acquisition::ChannelStateInfo_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::ChannelStateInfo_Style* release_style();
  ::minknow_api::acquisition::ChannelStateInfo_Style* mutable_style();
  void set_allocated_style(::minknow_api::acquisition::ChannelStateInfo_Style* style);
  private:
  const ::minknow_api::acquisition::ChannelStateInfo_Style& _internal_style() const;
  ::minknow_api::acquisition::ChannelStateInfo_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::acquisition::ChannelStateInfo_Style* style);
  ::minknow_api::acquisition::ChannelStateInfo_Style* unsafe_arena_release_style();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 global_order = 4;
  void clear_global_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_order() const;
  void set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_order() const;
  void _internal_set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ChannelStateInfo.ChannelState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::acquisition::ChannelStateInfo_Style* style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ChannelStateInfo_Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ChannelStateInfo.Group) */ {
 public:
  inline ChannelStateInfo_Group() : ChannelStateInfo_Group(nullptr) {}
  ~ChannelStateInfo_Group() override;
  explicit constexpr ChannelStateInfo_Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStateInfo_Group(const ChannelStateInfo_Group& from);
  ChannelStateInfo_Group(ChannelStateInfo_Group&& from) noexcept
    : ChannelStateInfo_Group() {
    *this = ::std::move(from);
  }

  inline ChannelStateInfo_Group& operator=(const ChannelStateInfo_Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStateInfo_Group& operator=(ChannelStateInfo_Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStateInfo_Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStateInfo_Group* internal_default_instance() {
    return reinterpret_cast<const ChannelStateInfo_Group*>(
               &_ChannelStateInfo_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChannelStateInfo_Group& a, ChannelStateInfo_Group& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStateInfo_Group* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStateInfo_Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStateInfo_Group* New() const final {
    return new ChannelStateInfo_Group();
  }

  ChannelStateInfo_Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStateInfo_Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStateInfo_Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStateInfo_Group& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStateInfo_Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ChannelStateInfo.Group";
  }
  protected:
  explicit ChannelStateInfo_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 3,
    kNameFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // repeated .minknow_api.acquisition.ChannelStateInfo.ChannelState states = 3;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::minknow_api::acquisition::ChannelStateInfo_ChannelState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >*
      mutable_states();
  private:
  const ::minknow_api::acquisition::ChannelStateInfo_ChannelState& _internal_states(int index) const;
  ::minknow_api::acquisition::ChannelStateInfo_ChannelState* _internal_add_states();
  public:
  const ::minknow_api::acquisition::ChannelStateInfo_ChannelState& states(int index) const;
  ::minknow_api::acquisition::ChannelStateInfo_ChannelState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >&
      states() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.acquisition.ChannelStateInfo.Style style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::minknow_api::acquisition::ChannelStateInfo_Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::ChannelStateInfo_Style* release_style();
  ::minknow_api::acquisition::ChannelStateInfo_Style* mutable_style();
  void set_allocated_style(::minknow_api::acquisition::ChannelStateInfo_Style* style);
  private:
  const ::minknow_api::acquisition::ChannelStateInfo_Style& _internal_style() const;
  ::minknow_api::acquisition::ChannelStateInfo_Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::minknow_api::acquisition::ChannelStateInfo_Style* style);
  ::minknow_api::acquisition::ChannelStateInfo_Style* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ChannelStateInfo.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_ChannelState > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::acquisition::ChannelStateInfo_Style* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ChannelStateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ChannelStateInfo) */ {
 public:
  inline ChannelStateInfo() : ChannelStateInfo(nullptr) {}
  ~ChannelStateInfo() override;
  explicit constexpr ChannelStateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelStateInfo(const ChannelStateInfo& from);
  ChannelStateInfo(ChannelStateInfo&& from) noexcept
    : ChannelStateInfo() {
    *this = ::std::move(from);
  }

  inline ChannelStateInfo& operator=(const ChannelStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStateInfo& operator=(ChannelStateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStateInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelStateInfo*>(
               &_ChannelStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChannelStateInfo& a, ChannelStateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelStateInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelStateInfo* New() const final {
    return new ChannelStateInfo();
  }

  ChannelStateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelStateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelStateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelStateInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelStateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ChannelStateInfo";
  }
  protected:
  explicit ChannelStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelStateInfo_Style Style;
  typedef ChannelStateInfo_ChannelState ChannelState;
  typedef ChannelStateInfo_Group Group;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .minknow_api.acquisition.ChannelStateInfo.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::minknow_api::acquisition::ChannelStateInfo_Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_Group >*
      mutable_groups();
  private:
  const ::minknow_api::acquisition::ChannelStateInfo_Group& _internal_groups(int index) const;
  ::minknow_api::acquisition::ChannelStateInfo_Group* _internal_add_groups();
  public:
  const ::minknow_api::acquisition::ChannelStateInfo_Group& groups(int index) const;
  ::minknow_api::acquisition::ChannelStateInfo_Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ChannelStateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_Group > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class AcquisitionConfigSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.AcquisitionConfigSummary) */ {
 public:
  inline AcquisitionConfigSummary() : AcquisitionConfigSummary(nullptr) {}
  ~AcquisitionConfigSummary() override;
  explicit constexpr AcquisitionConfigSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquisitionConfigSummary(const AcquisitionConfigSummary& from);
  AcquisitionConfigSummary(AcquisitionConfigSummary&& from) noexcept
    : AcquisitionConfigSummary() {
    *this = ::std::move(from);
  }

  inline AcquisitionConfigSummary& operator=(const AcquisitionConfigSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquisitionConfigSummary& operator=(AcquisitionConfigSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquisitionConfigSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquisitionConfigSummary* internal_default_instance() {
    return reinterpret_cast<const AcquisitionConfigSummary*>(
               &_AcquisitionConfigSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AcquisitionConfigSummary& a, AcquisitionConfigSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquisitionConfigSummary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquisitionConfigSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcquisitionConfigSummary* New() const final {
    return new AcquisitionConfigSummary();
  }

  AcquisitionConfigSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcquisitionConfigSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquisitionConfigSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquisitionConfigSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquisitionConfigSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.AcquisitionConfigSummary";
  }
  protected:
  explicit AcquisitionConfigSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadsFallbackDirectoriesFieldNumber = 3,
    kBarcodingKitsFieldNumber = 17,
    kAlignmentReferenceFilesFieldNumber = 18,
    kReadsDirectoryFieldNumber = 2,
    kBulkFilePathFieldNumber = 7,
    kBasecallingConfigFilenameFieldNumber = 16,
    kAlignmentBedFileFieldNumber = 19,
    kLampKitFieldNumber = 20,
    kChannelStateInfoFieldNumber = 9,
    kFast5ReadsEnabledFieldNumber = 4,
    kFastqReadsEnabledFieldNumber = 5,
    kProtobufReadsEnabledFieldNumber = 6,
    kBulkFileEnabledFieldNumber = 8,
    kEventsToBaseRatioFieldNumber = 10,
    kBasecallingEnabledFieldNumber = 1,
    kBarcodingEnabledFieldNumber = 13,
    kAlignmentEnabledFieldNumber = 14,
    kLampEnabledFieldNumber = 15,
    kSampleRateFieldNumber = 11,
    kChannelCountFieldNumber = 12,
    kPurposeFieldNumber = 21,
  };
  // repeated string reads_fallback_directories = 3;
  int reads_fallback_directories_size() const;
  private:
  int _internal_reads_fallback_directories_size() const;
  public:
  void clear_reads_fallback_directories();
  const std::string& reads_fallback_directories(int index) const;
  std::string* mutable_reads_fallback_directories(int index);
  void set_reads_fallback_directories(int index, const std::string& value);
  void set_reads_fallback_directories(int index, std::string&& value);
  void set_reads_fallback_directories(int index, const char* value);
  void set_reads_fallback_directories(int index, const char* value, size_t size);
  std::string* add_reads_fallback_directories();
  void add_reads_fallback_directories(const std::string& value);
  void add_reads_fallback_directories(std::string&& value);
  void add_reads_fallback_directories(const char* value);
  void add_reads_fallback_directories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reads_fallback_directories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reads_fallback_directories();
  private:
  const std::string& _internal_reads_fallback_directories(int index) const;
  std::string* _internal_add_reads_fallback_directories();
  public:

  // repeated string barcoding_kits = 17;
  int barcoding_kits_size() const;
  private:
  int _internal_barcoding_kits_size() const;
  public:
  void clear_barcoding_kits();
  const std::string& barcoding_kits(int index) const;
  std::string* mutable_barcoding_kits(int index);
  void set_barcoding_kits(int index, const std::string& value);
  void set_barcoding_kits(int index, std::string&& value);
  void set_barcoding_kits(int index, const char* value);
  void set_barcoding_kits(int index, const char* value, size_t size);
  std::string* add_barcoding_kits();
  void add_barcoding_kits(const std::string& value);
  void add_barcoding_kits(std::string&& value);
  void add_barcoding_kits(const char* value);
  void add_barcoding_kits(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& barcoding_kits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_barcoding_kits();
  private:
  const std::string& _internal_barcoding_kits(int index) const;
  std::string* _internal_add_barcoding_kits();
  public:

  // repeated string alignment_reference_files = 18;
  int alignment_reference_files_size() const;
  private:
  int _internal_alignment_reference_files_size() const;
  public:
  void clear_alignment_reference_files();
  const std::string& alignment_reference_files(int index) const;
  std::string* mutable_alignment_reference_files(int index);
  void set_alignment_reference_files(int index, const std::string& value);
  void set_alignment_reference_files(int index, std::string&& value);
  void set_alignment_reference_files(int index, const char* value);
  void set_alignment_reference_files(int index, const char* value, size_t size);
  std::string* add_alignment_reference_files();
  void add_alignment_reference_files(const std::string& value);
  void add_alignment_reference_files(std::string&& value);
  void add_alignment_reference_files(const char* value);
  void add_alignment_reference_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alignment_reference_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alignment_reference_files();
  private:
  const std::string& _internal_alignment_reference_files(int index) const;
  std::string* _internal_add_alignment_reference_files();
  public:

  // string reads_directory = 2;
  void clear_reads_directory();
  const std::string& reads_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reads_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reads_directory();
  PROTOBUF_MUST_USE_RESULT std::string* release_reads_directory();
  void set_allocated_reads_directory(std::string* reads_directory);
  private:
  const std::string& _internal_reads_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reads_directory(const std::string& value);
  std::string* _internal_mutable_reads_directory();
  public:

  // string bulk_file_path = 7;
  void clear_bulk_file_path();
  const std::string& bulk_file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bulk_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bulk_file_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_bulk_file_path();
  void set_allocated_bulk_file_path(std::string* bulk_file_path);
  private:
  const std::string& _internal_bulk_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bulk_file_path(const std::string& value);
  std::string* _internal_mutable_bulk_file_path();
  public:

  // string basecalling_config_filename = 16;
  void clear_basecalling_config_filename();
  const std::string& basecalling_config_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_basecalling_config_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_basecalling_config_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_basecalling_config_filename();
  void set_allocated_basecalling_config_filename(std::string* basecalling_config_filename);
  private:
  const std::string& _internal_basecalling_config_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basecalling_config_filename(const std::string& value);
  std::string* _internal_mutable_basecalling_config_filename();
  public:

  // string alignment_bed_file = 19;
  void clear_alignment_bed_file();
  const std::string& alignment_bed_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alignment_bed_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alignment_bed_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_alignment_bed_file();
  void set_allocated_alignment_bed_file(std::string* alignment_bed_file);
  private:
  const std::string& _internal_alignment_bed_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alignment_bed_file(const std::string& value);
  std::string* _internal_mutable_alignment_bed_file();
  public:

  // string lamp_kit = 20;
  void clear_lamp_kit();
  const std::string& lamp_kit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lamp_kit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lamp_kit();
  PROTOBUF_MUST_USE_RESULT std::string* release_lamp_kit();
  void set_allocated_lamp_kit(std::string* lamp_kit);
  private:
  const std::string& _internal_lamp_kit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lamp_kit(const std::string& value);
  std::string* _internal_mutable_lamp_kit();
  public:

  // .minknow_api.acquisition.ChannelStateInfo channel_state_info = 9;
  bool has_channel_state_info() const;
  private:
  bool _internal_has_channel_state_info() const;
  public:
  void clear_channel_state_info();
  const ::minknow_api::acquisition::ChannelStateInfo& channel_state_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::ChannelStateInfo* release_channel_state_info();
  ::minknow_api::acquisition::ChannelStateInfo* mutable_channel_state_info();
  void set_allocated_channel_state_info(::minknow_api::acquisition::ChannelStateInfo* channel_state_info);
  private:
  const ::minknow_api::acquisition::ChannelStateInfo& _internal_channel_state_info() const;
  ::minknow_api::acquisition::ChannelStateInfo* _internal_mutable_channel_state_info();
  public:
  void unsafe_arena_set_allocated_channel_state_info(
      ::minknow_api::acquisition::ChannelStateInfo* channel_state_info);
  ::minknow_api::acquisition::ChannelStateInfo* unsafe_arena_release_channel_state_info();

  // bool fast5_reads_enabled = 4;
  void clear_fast5_reads_enabled();
  bool fast5_reads_enabled() const;
  void set_fast5_reads_enabled(bool value);
  private:
  bool _internal_fast5_reads_enabled() const;
  void _internal_set_fast5_reads_enabled(bool value);
  public:

  // bool fastq_reads_enabled = 5;
  void clear_fastq_reads_enabled();
  bool fastq_reads_enabled() const;
  void set_fastq_reads_enabled(bool value);
  private:
  bool _internal_fastq_reads_enabled() const;
  void _internal_set_fastq_reads_enabled(bool value);
  public:

  // bool protobuf_reads_enabled = 6;
  void clear_protobuf_reads_enabled();
  bool protobuf_reads_enabled() const;
  void set_protobuf_reads_enabled(bool value);
  private:
  bool _internal_protobuf_reads_enabled() const;
  void _internal_set_protobuf_reads_enabled(bool value);
  public:

  // bool bulk_file_enabled = 8;
  void clear_bulk_file_enabled();
  bool bulk_file_enabled() const;
  void set_bulk_file_enabled(bool value);
  private:
  bool _internal_bulk_file_enabled() const;
  void _internal_set_bulk_file_enabled(bool value);
  public:

  // float events_to_base_ratio = 10;
  void clear_events_to_base_ratio();
  float events_to_base_ratio() const;
  void set_events_to_base_ratio(float value);
  private:
  float _internal_events_to_base_ratio() const;
  void _internal_set_events_to_base_ratio(float value);
  public:

  // bool basecalling_enabled = 1;
  void clear_basecalling_enabled();
  bool basecalling_enabled() const;
  void set_basecalling_enabled(bool value);
  private:
  bool _internal_basecalling_enabled() const;
  void _internal_set_basecalling_enabled(bool value);
  public:

  // bool barcoding_enabled = 13;
  void clear_barcoding_enabled();
  bool barcoding_enabled() const;
  void set_barcoding_enabled(bool value);
  private:
  bool _internal_barcoding_enabled() const;
  void _internal_set_barcoding_enabled(bool value);
  public:

  // bool alignment_enabled = 14;
  void clear_alignment_enabled();
  bool alignment_enabled() const;
  void set_alignment_enabled(bool value);
  private:
  bool _internal_alignment_enabled() const;
  void _internal_set_alignment_enabled(bool value);
  public:

  // bool lamp_enabled = 15;
  void clear_lamp_enabled();
  bool lamp_enabled() const;
  void set_lamp_enabled(bool value);
  private:
  bool _internal_lamp_enabled() const;
  void _internal_set_lamp_enabled(bool value);
  public:

  // uint32 sample_rate = 11;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel_count = 12;
  void clear_channel_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count() const;
  void set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_count() const;
  void _internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .minknow_api.acquisition.Purpose purpose = 21;
  void clear_purpose();
  ::minknow_api::acquisition::Purpose purpose() const;
  void set_purpose(::minknow_api::acquisition::Purpose value);
  private:
  ::minknow_api::acquisition::Purpose _internal_purpose() const;
  void _internal_set_purpose(::minknow_api::acquisition::Purpose value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.AcquisitionConfigSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reads_fallback_directories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> barcoding_kits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alignment_reference_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reads_directory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bulk_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basecalling_config_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alignment_bed_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lamp_kit_;
  ::minknow_api::acquisition::ChannelStateInfo* channel_state_info_;
  bool fast5_reads_enabled_;
  bool fastq_reads_enabled_;
  bool protobuf_reads_enabled_;
  bool bulk_file_enabled_;
  float events_to_base_ratio_;
  bool basecalling_enabled_;
  bool barcoding_enabled_;
  bool alignment_enabled_;
  bool lamp_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count_;
  int purpose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class AcquisitionRunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.AcquisitionRunInfo) */ {
 public:
  inline AcquisitionRunInfo() : AcquisitionRunInfo(nullptr) {}
  ~AcquisitionRunInfo() override;
  explicit constexpr AcquisitionRunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcquisitionRunInfo(const AcquisitionRunInfo& from);
  AcquisitionRunInfo(AcquisitionRunInfo&& from) noexcept
    : AcquisitionRunInfo() {
    *this = ::std::move(from);
  }

  inline AcquisitionRunInfo& operator=(const AcquisitionRunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcquisitionRunInfo& operator=(AcquisitionRunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcquisitionRunInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcquisitionRunInfo* internal_default_instance() {
    return reinterpret_cast<const AcquisitionRunInfo*>(
               &_AcquisitionRunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AcquisitionRunInfo& a, AcquisitionRunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AcquisitionRunInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcquisitionRunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcquisitionRunInfo* New() const final {
    return new AcquisitionRunInfo();
  }

  AcquisitionRunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcquisitionRunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcquisitionRunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcquisitionRunInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcquisitionRunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.AcquisitionRunInfo";
  }
  protected:
  explicit AcquisitionRunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
    kStartTimeFieldNumber = 4,
    kDataReadStartTimeFieldNumber = 5,
    kDataReadEndTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kYieldSummaryFieldNumber = 8,
    kConfigSummaryFieldNumber = 9,
    kWriterSummaryFieldNumber = 11,
    kStartupStateEstimatedEndFieldNumber = 13,
    kStateFieldNumber = 2,
    kStopReasonFieldNumber = 3,
    kFinishingStateFieldNumber = 10,
    kStartupStateFieldNumber = 12,
    kStartupStateEstimatedPercentCompleteFieldNumber = 14,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp data_read_start_time = 5;
  bool has_data_read_start_time() const;
  private:
  bool _internal_has_data_read_start_time() const;
  public:
  void clear_data_read_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_read_start_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_data_read_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_data_read_start_time();
  void set_allocated_data_read_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_data_read_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_data_read_start_time();
  public:
  void unsafe_arena_set_allocated_data_read_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_data_read_start_time();

  // .google.protobuf.Timestamp data_read_end_time = 6;
  bool has_data_read_end_time() const;
  private:
  bool _internal_has_data_read_end_time() const;
  public:
  void clear_data_read_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_read_end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_data_read_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_data_read_end_time();
  void set_allocated_data_read_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_data_read_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_data_read_end_time();
  public:
  void unsafe_arena_set_allocated_data_read_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_data_read_end_time();

  // .google.protobuf.Timestamp end_time = 7;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 8;
  bool has_yield_summary() const;
  private:
  bool _internal_has_yield_summary() const;
  public:
  void clear_yield_summary();
  const ::minknow_api::acquisition::AcquisitionYieldSummary& yield_summary() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::AcquisitionYieldSummary* release_yield_summary();
  ::minknow_api::acquisition::AcquisitionYieldSummary* mutable_yield_summary();
  void set_allocated_yield_summary(::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary);
  private:
  const ::minknow_api::acquisition::AcquisitionYieldSummary& _internal_yield_summary() const;
  ::minknow_api::acquisition::AcquisitionYieldSummary* _internal_mutable_yield_summary();
  public:
  void unsafe_arena_set_allocated_yield_summary(
      ::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary);
  ::minknow_api::acquisition::AcquisitionYieldSummary* unsafe_arena_release_yield_summary();

  // .minknow_api.acquisition.AcquisitionConfigSummary config_summary = 9;
  bool has_config_summary() const;
  private:
  bool _internal_has_config_summary() const;
  public:
  void clear_config_summary();
  const ::minknow_api::acquisition::AcquisitionConfigSummary& config_summary() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::AcquisitionConfigSummary* release_config_summary();
  ::minknow_api::acquisition::AcquisitionConfigSummary* mutable_config_summary();
  void set_allocated_config_summary(::minknow_api::acquisition::AcquisitionConfigSummary* config_summary);
  private:
  const ::minknow_api::acquisition::AcquisitionConfigSummary& _internal_config_summary() const;
  ::minknow_api::acquisition::AcquisitionConfigSummary* _internal_mutable_config_summary();
  public:
  void unsafe_arena_set_allocated_config_summary(
      ::minknow_api::acquisition::AcquisitionConfigSummary* config_summary);
  ::minknow_api::acquisition::AcquisitionConfigSummary* unsafe_arena_release_config_summary();

  // .minknow_api.acquisition.AcquisitionWriterSummary writer_summary = 11;
  bool has_writer_summary() const;
  private:
  bool _internal_has_writer_summary() const;
  public:
  void clear_writer_summary();
  const ::minknow_api::acquisition::AcquisitionWriterSummary& writer_summary() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::acquisition::AcquisitionWriterSummary* release_writer_summary();
  ::minknow_api::acquisition::AcquisitionWriterSummary* mutable_writer_summary();
  void set_allocated_writer_summary(::minknow_api::acquisition::AcquisitionWriterSummary* writer_summary);
  private:
  const ::minknow_api::acquisition::AcquisitionWriterSummary& _internal_writer_summary() const;
  ::minknow_api::acquisition::AcquisitionWriterSummary* _internal_mutable_writer_summary();
  public:
  void unsafe_arena_set_allocated_writer_summary(
      ::minknow_api::acquisition::AcquisitionWriterSummary* writer_summary);
  ::minknow_api::acquisition::AcquisitionWriterSummary* unsafe_arena_release_writer_summary();

  // .google.protobuf.Timestamp startup_state_estimated_end = 13;
  bool has_startup_state_estimated_end() const;
  private:
  bool _internal_has_startup_state_estimated_end() const;
  public:
  void clear_startup_state_estimated_end();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& startup_state_estimated_end() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_startup_state_estimated_end();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_startup_state_estimated_end();
  void set_allocated_startup_state_estimated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* startup_state_estimated_end);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_startup_state_estimated_end() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_startup_state_estimated_end();
  public:
  void unsafe_arena_set_allocated_startup_state_estimated_end(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* startup_state_estimated_end);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_startup_state_estimated_end();

  // .minknow_api.acquisition.AcquisitionState state = 2;
  void clear_state();
  ::minknow_api::acquisition::AcquisitionState state() const;
  void set_state(::minknow_api::acquisition::AcquisitionState value);
  private:
  ::minknow_api::acquisition::AcquisitionState _internal_state() const;
  void _internal_set_state(::minknow_api::acquisition::AcquisitionState value);
  public:

  // .minknow_api.acquisition.AcquisitionStopReason stop_reason = 3;
  void clear_stop_reason();
  ::minknow_api::acquisition::AcquisitionStopReason stop_reason() const;
  void set_stop_reason(::minknow_api::acquisition::AcquisitionStopReason value);
  private:
  ::minknow_api::acquisition::AcquisitionStopReason _internal_stop_reason() const;
  void _internal_set_stop_reason(::minknow_api::acquisition::AcquisitionStopReason value);
  public:

  // .minknow_api.acquisition.FinishingState finishing_state = 10;
  void clear_finishing_state();
  ::minknow_api::acquisition::FinishingState finishing_state() const;
  void set_finishing_state(::minknow_api::acquisition::FinishingState value);
  private:
  ::minknow_api::acquisition::FinishingState _internal_finishing_state() const;
  void _internal_set_finishing_state(::minknow_api::acquisition::FinishingState value);
  public:

  // .minknow_api.acquisition.StartupState startup_state = 12;
  void clear_startup_state();
  ::minknow_api::acquisition::StartupState startup_state() const;
  void set_startup_state(::minknow_api::acquisition::StartupState value);
  private:
  ::minknow_api::acquisition::StartupState _internal_startup_state() const;
  void _internal_set_startup_state(::minknow_api::acquisition::StartupState value);
  public:

  // float startup_state_estimated_percent_complete = 14;
  void clear_startup_state_estimated_percent_complete();
  float startup_state_estimated_percent_complete() const;
  void set_startup_state_estimated_percent_complete(float value);
  private:
  float _internal_startup_state_estimated_percent_complete() const;
  void _internal_set_startup_state_estimated_percent_complete(float value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.AcquisitionRunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_start_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_end_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary_;
  ::minknow_api::acquisition::AcquisitionConfigSummary* config_summary_;
  ::minknow_api::acquisition::AcquisitionWriterSummary* writer_summary_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* startup_state_estimated_end_;
  int state_;
  int stop_reason_;
  int finishing_state_;
  int startup_state_;
  float startup_state_estimated_percent_complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ListAcquisitionRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ListAcquisitionRunsRequest) */ {
 public:
  inline ListAcquisitionRunsRequest() : ListAcquisitionRunsRequest(nullptr) {}
  explicit constexpr ListAcquisitionRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAcquisitionRunsRequest(const ListAcquisitionRunsRequest& from);
  ListAcquisitionRunsRequest(ListAcquisitionRunsRequest&& from) noexcept
    : ListAcquisitionRunsRequest() {
    *this = ::std::move(from);
  }

  inline ListAcquisitionRunsRequest& operator=(const ListAcquisitionRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAcquisitionRunsRequest& operator=(ListAcquisitionRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAcquisitionRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAcquisitionRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAcquisitionRunsRequest*>(
               &_ListAcquisitionRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListAcquisitionRunsRequest& a, ListAcquisitionRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAcquisitionRunsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAcquisitionRunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAcquisitionRunsRequest* New() const final {
    return new ListAcquisitionRunsRequest();
  }

  ListAcquisitionRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAcquisitionRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListAcquisitionRunsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListAcquisitionRunsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ListAcquisitionRunsRequest";
  }
  protected:
  explicit ListAcquisitionRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ListAcquisitionRunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class ListAcquisitionRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.ListAcquisitionRunsResponse) */ {
 public:
  inline ListAcquisitionRunsResponse() : ListAcquisitionRunsResponse(nullptr) {}
  ~ListAcquisitionRunsResponse() override;
  explicit constexpr ListAcquisitionRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAcquisitionRunsResponse(const ListAcquisitionRunsResponse& from);
  ListAcquisitionRunsResponse(ListAcquisitionRunsResponse&& from) noexcept
    : ListAcquisitionRunsResponse() {
    *this = ::std::move(from);
  }

  inline ListAcquisitionRunsResponse& operator=(const ListAcquisitionRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAcquisitionRunsResponse& operator=(ListAcquisitionRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAcquisitionRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAcquisitionRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAcquisitionRunsResponse*>(
               &_ListAcquisitionRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListAcquisitionRunsResponse& a, ListAcquisitionRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAcquisitionRunsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAcquisitionRunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAcquisitionRunsResponse* New() const final {
    return new ListAcquisitionRunsResponse();
  }

  ListAcquisitionRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAcquisitionRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAcquisitionRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAcquisitionRunsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAcquisitionRunsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.ListAcquisitionRunsResponse";
  }
  protected:
  explicit ListAcquisitionRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdsFieldNumber = 1,
  };
  // repeated string run_ids = 1;
  int run_ids_size() const;
  private:
  int _internal_run_ids_size() const;
  public:
  void clear_run_ids();
  const std::string& run_ids(int index) const;
  std::string* mutable_run_ids(int index);
  void set_run_ids(int index, const std::string& value);
  void set_run_ids(int index, std::string&& value);
  void set_run_ids(int index, const char* value);
  void set_run_ids(int index, const char* value, size_t size);
  std::string* add_run_ids();
  void add_run_ids(const std::string& value);
  void add_run_ids(std::string&& value);
  void add_run_ids(const char* value);
  void add_run_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& run_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_run_ids();
  private:
  const std::string& _internal_run_ids(int index) const;
  std::string* _internal_add_run_ids();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.ListAcquisitionRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> run_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentAcquisitionRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.GetCurrentAcquisitionRunRequest) */ {
 public:
  inline GetCurrentAcquisitionRunRequest() : GetCurrentAcquisitionRunRequest(nullptr) {}
  explicit constexpr GetCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentAcquisitionRunRequest(const GetCurrentAcquisitionRunRequest& from);
  GetCurrentAcquisitionRunRequest(GetCurrentAcquisitionRunRequest&& from) noexcept
    : GetCurrentAcquisitionRunRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentAcquisitionRunRequest& operator=(const GetCurrentAcquisitionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentAcquisitionRunRequest& operator=(GetCurrentAcquisitionRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentAcquisitionRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentAcquisitionRunRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentAcquisitionRunRequest*>(
               &_GetCurrentAcquisitionRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetCurrentAcquisitionRunRequest& a, GetCurrentAcquisitionRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentAcquisitionRunRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentAcquisitionRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentAcquisitionRunRequest* New() const final {
    return new GetCurrentAcquisitionRunRequest();
  }

  GetCurrentAcquisitionRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentAcquisitionRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCurrentAcquisitionRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCurrentAcquisitionRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.GetCurrentAcquisitionRunRequest";
  }
  protected:
  explicit GetCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.GetCurrentAcquisitionRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class WatchCurrentAcquisitionRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.WatchCurrentAcquisitionRunRequest) */ {
 public:
  inline WatchCurrentAcquisitionRunRequest() : WatchCurrentAcquisitionRunRequest(nullptr) {}
  explicit constexpr WatchCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchCurrentAcquisitionRunRequest(const WatchCurrentAcquisitionRunRequest& from);
  WatchCurrentAcquisitionRunRequest(WatchCurrentAcquisitionRunRequest&& from) noexcept
    : WatchCurrentAcquisitionRunRequest() {
    *this = ::std::move(from);
  }

  inline WatchCurrentAcquisitionRunRequest& operator=(const WatchCurrentAcquisitionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCurrentAcquisitionRunRequest& operator=(WatchCurrentAcquisitionRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchCurrentAcquisitionRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchCurrentAcquisitionRunRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCurrentAcquisitionRunRequest*>(
               &_WatchCurrentAcquisitionRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WatchCurrentAcquisitionRunRequest& a, WatchCurrentAcquisitionRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCurrentAcquisitionRunRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchCurrentAcquisitionRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCurrentAcquisitionRunRequest* New() const final {
    return new WatchCurrentAcquisitionRunRequest();
  }

  WatchCurrentAcquisitionRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCurrentAcquisitionRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WatchCurrentAcquisitionRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WatchCurrentAcquisitionRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.WatchCurrentAcquisitionRunRequest";
  }
  protected:
  explicit WatchCurrentAcquisitionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.WatchCurrentAcquisitionRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class SetSignalReaderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.SetSignalReaderRequest) */ {
 public:
  inline SetSignalReaderRequest() : SetSignalReaderRequest(nullptr) {}
  ~SetSignalReaderRequest() override;
  explicit constexpr SetSignalReaderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSignalReaderRequest(const SetSignalReaderRequest& from);
  SetSignalReaderRequest(SetSignalReaderRequest&& from) noexcept
    : SetSignalReaderRequest() {
    *this = ::std::move(from);
  }

  inline SetSignalReaderRequest& operator=(const SetSignalReaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSignalReaderRequest& operator=(SetSignalReaderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSignalReaderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSignalReaderRequest* internal_default_instance() {
    return reinterpret_cast<const SetSignalReaderRequest*>(
               &_SetSignalReaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetSignalReaderRequest& a, SetSignalReaderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSignalReaderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSignalReaderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSignalReaderRequest* New() const final {
    return new SetSignalReaderRequest();
  }

  SetSignalReaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSignalReaderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSignalReaderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSignalReaderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSignalReaderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.SetSignalReaderRequest";
  }
  protected:
  explicit SetSignalReaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetSignalReaderRequest_SignalReaderType SignalReaderType;
  static constexpr SignalReaderType HDF5 =
    SetSignalReaderRequest_SignalReaderType_HDF5;
  static constexpr SignalReaderType DEVICE =
    SetSignalReaderRequest_SignalReaderType_DEVICE;
  static inline bool SignalReaderType_IsValid(int value) {
    return SetSignalReaderRequest_SignalReaderType_IsValid(value);
  }
  static constexpr SignalReaderType SignalReaderType_MIN =
    SetSignalReaderRequest_SignalReaderType_SignalReaderType_MIN;
  static constexpr SignalReaderType SignalReaderType_MAX =
    SetSignalReaderRequest_SignalReaderType_SignalReaderType_MAX;
  static constexpr int SignalReaderType_ARRAYSIZE =
    SetSignalReaderRequest_SignalReaderType_SignalReaderType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalReaderType_descriptor() {
    return SetSignalReaderRequest_SignalReaderType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalReaderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalReaderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalReaderType_Name.");
    return SetSignalReaderRequest_SignalReaderType_Name(enum_t_value);
  }
  static inline bool SignalReaderType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SignalReaderType* value) {
    return SetSignalReaderRequest_SignalReaderType_Parse(name, value);
  }

  typedef SetSignalReaderRequest_SourceFileMode SourceFileMode;
  static constexpr SourceFileMode UNSPECIFIED =
    SetSignalReaderRequest_SourceFileMode_UNSPECIFIED;
  static constexpr SourceFileMode SINGLE_RUN =
    SetSignalReaderRequest_SourceFileMode_SINGLE_RUN;
  static constexpr SourceFileMode LOOP =
    SetSignalReaderRequest_SourceFileMode_LOOP;
  static inline bool SourceFileMode_IsValid(int value) {
    return SetSignalReaderRequest_SourceFileMode_IsValid(value);
  }
  static constexpr SourceFileMode SourceFileMode_MIN =
    SetSignalReaderRequest_SourceFileMode_SourceFileMode_MIN;
  static constexpr SourceFileMode SourceFileMode_MAX =
    SetSignalReaderRequest_SourceFileMode_SourceFileMode_MAX;
  static constexpr int SourceFileMode_ARRAYSIZE =
    SetSignalReaderRequest_SourceFileMode_SourceFileMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SourceFileMode_descriptor() {
    return SetSignalReaderRequest_SourceFileMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SourceFileMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SourceFileMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SourceFileMode_Name.");
    return SetSignalReaderRequest_SourceFileMode_Name(enum_t_value);
  }
  static inline bool SourceFileMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SourceFileMode* value) {
    return SetSignalReaderRequest_SourceFileMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHdfSourceFieldNumber = 2,
    kReaderFieldNumber = 1,
    kHdfModeFieldNumber = 3,
    kSampleRateScaleFactorFieldNumber = 4,
  };
  // string hdf_source = 2;
  void clear_hdf_source();
  const std::string& hdf_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hdf_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hdf_source();
  PROTOBUF_MUST_USE_RESULT std::string* release_hdf_source();
  void set_allocated_hdf_source(std::string* hdf_source);
  private:
  const std::string& _internal_hdf_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hdf_source(const std::string& value);
  std::string* _internal_mutable_hdf_source();
  public:

  // .minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType reader = 1 [(.minknow_api.rpc_required) = true];
  void clear_reader();
  ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType reader() const;
  void set_reader(::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType value);
  private:
  ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType _internal_reader() const;
  void _internal_set_reader(::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType value);
  public:

  // .minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode hdf_mode = 3;
  void clear_hdf_mode();
  ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode hdf_mode() const;
  void set_hdf_mode(::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode value);
  private:
  ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode _internal_hdf_mode() const;
  void _internal_set_hdf_mode(::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode value);
  public:

  // float sample_rate_scale_factor = 4;
  void clear_sample_rate_scale_factor();
  float sample_rate_scale_factor() const;
  void set_sample_rate_scale_factor(float value);
  private:
  float _internal_sample_rate_scale_factor() const;
  void _internal_set_sample_rate_scale_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.SetSignalReaderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdf_source_;
  int reader_;
  int hdf_mode_;
  float sample_rate_scale_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// -------------------------------------------------------------------

class SetSignalReaderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.acquisition.SetSignalReaderResponse) */ {
 public:
  inline SetSignalReaderResponse() : SetSignalReaderResponse(nullptr) {}
  explicit constexpr SetSignalReaderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSignalReaderResponse(const SetSignalReaderResponse& from);
  SetSignalReaderResponse(SetSignalReaderResponse&& from) noexcept
    : SetSignalReaderResponse() {
    *this = ::std::move(from);
  }

  inline SetSignalReaderResponse& operator=(const SetSignalReaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSignalReaderResponse& operator=(SetSignalReaderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSignalReaderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSignalReaderResponse* internal_default_instance() {
    return reinterpret_cast<const SetSignalReaderResponse*>(
               &_SetSignalReaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetSignalReaderResponse& a, SetSignalReaderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSignalReaderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSignalReaderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSignalReaderResponse* New() const final {
    return new SetSignalReaderResponse();
  }

  SetSignalReaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSignalReaderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetSignalReaderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetSignalReaderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.acquisition.SetSignalReaderResponse";
  }
  protected:
  explicit SetSignalReaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.acquisition.SetSignalReaderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2facquisition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartRequest

// bool dont_wait_for_device_ready = 2;
inline void StartRequest::clear_dont_wait_for_device_ready() {
  dont_wait_for_device_ready_ = false;
}
inline bool StartRequest::_internal_dont_wait_for_device_ready() const {
  return dont_wait_for_device_ready_;
}
inline bool StartRequest::dont_wait_for_device_ready() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.dont_wait_for_device_ready)
  return _internal_dont_wait_for_device_ready();
}
inline void StartRequest::_internal_set_dont_wait_for_device_ready(bool value) {
  
  dont_wait_for_device_ready_ = value;
}
inline void StartRequest::set_dont_wait_for_device_ready(bool value) {
  _internal_set_dont_wait_for_device_ready(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.dont_wait_for_device_ready)
}

// .minknow_api.acquisition.Option generate_report = 3;
inline void StartRequest::clear_generate_report() {
  generate_report_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_generate_report() const {
  return static_cast< ::minknow_api::acquisition::Option >(generate_report_);
}
inline ::minknow_api::acquisition::Option StartRequest::generate_report() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.generate_report)
  return _internal_generate_report();
}
inline void StartRequest::_internal_set_generate_report(::minknow_api::acquisition::Option value) {
  
  generate_report_ = value;
}
inline void StartRequest::set_generate_report(::minknow_api::acquisition::Option value) {
  _internal_set_generate_report(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.generate_report)
}

// .minknow_api.acquisition.Option send_sequencing_read_metrics = 4;
inline void StartRequest::clear_send_sequencing_read_metrics() {
  send_sequencing_read_metrics_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_send_sequencing_read_metrics() const {
  return static_cast< ::minknow_api::acquisition::Option >(send_sequencing_read_metrics_);
}
inline ::minknow_api::acquisition::Option StartRequest::send_sequencing_read_metrics() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.send_sequencing_read_metrics)
  return _internal_send_sequencing_read_metrics();
}
inline void StartRequest::_internal_set_send_sequencing_read_metrics(::minknow_api::acquisition::Option value) {
  
  send_sequencing_read_metrics_ = value;
}
inline void StartRequest::set_send_sequencing_read_metrics(::minknow_api::acquisition::Option value) {
  _internal_set_send_sequencing_read_metrics(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.send_sequencing_read_metrics)
}

// .minknow_api.acquisition.Option send_basecalling_metrics = 5;
inline void StartRequest::clear_send_basecalling_metrics() {
  send_basecalling_metrics_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_send_basecalling_metrics() const {
  return static_cast< ::minknow_api::acquisition::Option >(send_basecalling_metrics_);
}
inline ::minknow_api::acquisition::Option StartRequest::send_basecalling_metrics() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.send_basecalling_metrics)
  return _internal_send_basecalling_metrics();
}
inline void StartRequest::_internal_set_send_basecalling_metrics(::minknow_api::acquisition::Option value) {
  
  send_basecalling_metrics_ = value;
}
inline void StartRequest::set_send_basecalling_metrics(::minknow_api::acquisition::Option value) {
  _internal_set_send_basecalling_metrics(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.send_basecalling_metrics)
}

// .minknow_api.acquisition.Purpose purpose = 6;
inline void StartRequest::clear_purpose() {
  purpose_ = 0;
}
inline ::minknow_api::acquisition::Purpose StartRequest::_internal_purpose() const {
  return static_cast< ::minknow_api::acquisition::Purpose >(purpose_);
}
inline ::minknow_api::acquisition::Purpose StartRequest::purpose() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.purpose)
  return _internal_purpose();
}
inline void StartRequest::_internal_set_purpose(::minknow_api::acquisition::Purpose value) {
  
  purpose_ = value;
}
inline void StartRequest::set_purpose(::minknow_api::acquisition::Purpose value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.purpose)
}

// .minknow_api.acquisition.Option analysis = 7;
inline void StartRequest::clear_analysis() {
  analysis_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_analysis() const {
  return static_cast< ::minknow_api::acquisition::Option >(analysis_);
}
inline ::minknow_api::acquisition::Option StartRequest::analysis() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.analysis)
  return _internal_analysis();
}
inline void StartRequest::_internal_set_analysis(::minknow_api::acquisition::Option value) {
  
  analysis_ = value;
}
inline void StartRequest::set_analysis(::minknow_api::acquisition::Option value) {
  _internal_set_analysis(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.analysis)
}

// .minknow_api.acquisition.Option file_output = 8;
inline void StartRequest::clear_file_output() {
  file_output_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_file_output() const {
  return static_cast< ::minknow_api::acquisition::Option >(file_output_);
}
inline ::minknow_api::acquisition::Option StartRequest::file_output() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.file_output)
  return _internal_file_output();
}
inline void StartRequest::_internal_set_file_output(::minknow_api::acquisition::Option value) {
  
  file_output_ = value;
}
inline void StartRequest::set_file_output(::minknow_api::acquisition::Option value) {
  _internal_set_file_output(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.file_output)
}

// .minknow_api.acquisition.Option generate_final_summary = 9;
inline void StartRequest::clear_generate_final_summary() {
  generate_final_summary_ = 0;
}
inline ::minknow_api::acquisition::Option StartRequest::_internal_generate_final_summary() const {
  return static_cast< ::minknow_api::acquisition::Option >(generate_final_summary_);
}
inline ::minknow_api::acquisition::Option StartRequest::generate_final_summary() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartRequest.generate_final_summary)
  return _internal_generate_final_summary();
}
inline void StartRequest::_internal_set_generate_final_summary(::minknow_api::acquisition::Option value) {
  
  generate_final_summary_ = value;
}
inline void StartRequest::set_generate_final_summary(::minknow_api::acquisition::Option value) {
  _internal_set_generate_final_summary(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartRequest.generate_final_summary)
}

// -------------------------------------------------------------------

// StartResponse

// string run_id = 1;
inline void StartResponse::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& StartResponse::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StartResponse.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartResponse::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StartResponse.run_id)
}
inline std::string* StartResponse::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.StartResponse.run_id)
  return _s;
}
inline const std::string& StartResponse::_internal_run_id() const {
  return run_id_.Get();
}
inline void StartResponse::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartResponse::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartResponse::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.StartResponse.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartResponse::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.StartResponse.run_id)
}

// -------------------------------------------------------------------

// StopRequest

// .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
inline void StopRequest::clear_data_action_on_stop() {
  data_action_on_stop_ = 0;
}
inline ::minknow_api::acquisition::StopRequest_DataAction StopRequest::_internal_data_action_on_stop() const {
  return static_cast< ::minknow_api::acquisition::StopRequest_DataAction >(data_action_on_stop_);
}
inline ::minknow_api::acquisition::StopRequest_DataAction StopRequest::data_action_on_stop() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StopRequest.data_action_on_stop)
  return _internal_data_action_on_stop();
}
inline void StopRequest::_internal_set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value) {
  
  data_action_on_stop_ = value;
}
inline void StopRequest::set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value) {
  _internal_set_data_action_on_stop(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StopRequest.data_action_on_stop)
}

// bool wait_until_ready = 2;
inline void StopRequest::clear_wait_until_ready() {
  wait_until_ready_ = false;
}
inline bool StopRequest::_internal_wait_until_ready() const {
  return wait_until_ready_;
}
inline bool StopRequest::wait_until_ready() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StopRequest.wait_until_ready)
  return _internal_wait_until_ready();
}
inline void StopRequest::_internal_set_wait_until_ready(bool value) {
  
  wait_until_ready_ = value;
}
inline void StopRequest::set_wait_until_ready(bool value) {
  _internal_set_wait_until_ready(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StopRequest.wait_until_ready)
}

// bool keep_power_on = 3;
inline void StopRequest::clear_keep_power_on() {
  keep_power_on_ = false;
}
inline bool StopRequest::_internal_keep_power_on() const {
  return keep_power_on_;
}
inline bool StopRequest::keep_power_on() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.StopRequest.keep_power_on)
  return _internal_keep_power_on();
}
inline void StopRequest::_internal_set_keep_power_on(bool value) {
  
  keep_power_on_ = value;
}
inline void StopRequest::set_keep_power_on(bool value) {
  _internal_set_keep_power_on(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.StopRequest.keep_power_on)
}

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// WatchForStatusChangeRequest

// bool stop = 1;
inline void WatchForStatusChangeRequest::clear_stop() {
  stop_ = false;
}
inline bool WatchForStatusChangeRequest::_internal_stop() const {
  return stop_;
}
inline bool WatchForStatusChangeRequest::stop() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.WatchForStatusChangeRequest.stop)
  return _internal_stop();
}
inline void WatchForStatusChangeRequest::_internal_set_stop(bool value) {
  
  stop_ = value;
}
inline void WatchForStatusChangeRequest::set_stop(bool value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.WatchForStatusChangeRequest.stop)
}

// -------------------------------------------------------------------

// WatchForStatusChangeResponse

// .minknow_api.acquisition.MinknowStatus status = 1;
inline void WatchForStatusChangeResponse::clear_status() {
  status_ = 0;
}
inline ::minknow_api::acquisition::MinknowStatus WatchForStatusChangeResponse::_internal_status() const {
  return static_cast< ::minknow_api::acquisition::MinknowStatus >(status_);
}
inline ::minknow_api::acquisition::MinknowStatus WatchForStatusChangeResponse::status() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.WatchForStatusChangeResponse.status)
  return _internal_status();
}
inline void WatchForStatusChangeResponse::_internal_set_status(::minknow_api::acquisition::MinknowStatus value) {
  
  status_ = value;
}
inline void WatchForStatusChangeResponse::set_status(::minknow_api::acquisition::MinknowStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.WatchForStatusChangeResponse.status)
}

// -------------------------------------------------------------------

// CurrentStatusRequest

// -------------------------------------------------------------------

// CurrentStatusResponse

// .minknow_api.acquisition.MinknowStatus status = 1;
inline void CurrentStatusResponse::clear_status() {
  status_ = 0;
}
inline ::minknow_api::acquisition::MinknowStatus CurrentStatusResponse::_internal_status() const {
  return static_cast< ::minknow_api::acquisition::MinknowStatus >(status_);
}
inline ::minknow_api::acquisition::MinknowStatus CurrentStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.CurrentStatusResponse.status)
  return _internal_status();
}
inline void CurrentStatusResponse::_internal_set_status(::minknow_api::acquisition::MinknowStatus value) {
  
  status_ = value;
}
inline void CurrentStatusResponse::set_status(::minknow_api::acquisition::MinknowStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.CurrentStatusResponse.status)
}

// -------------------------------------------------------------------

// GetProgressRequest

// -------------------------------------------------------------------

// GetProgressResponse_RawPerChannel

// uint64 acquired = 1;
inline void GetProgressResponse_RawPerChannel::clear_acquired() {
  acquired_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProgressResponse_RawPerChannel::_internal_acquired() const {
  return acquired_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProgressResponse_RawPerChannel::acquired() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.GetProgressResponse.RawPerChannel.acquired)
  return _internal_acquired();
}
inline void GetProgressResponse_RawPerChannel::_internal_set_acquired(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  acquired_ = value;
}
inline void GetProgressResponse_RawPerChannel::set_acquired(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_acquired(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.GetProgressResponse.RawPerChannel.acquired)
}

// uint64 processed = 2;
inline void GetProgressResponse_RawPerChannel::clear_processed() {
  processed_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProgressResponse_RawPerChannel::_internal_processed() const {
  return processed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetProgressResponse_RawPerChannel::processed() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.GetProgressResponse.RawPerChannel.processed)
  return _internal_processed();
}
inline void GetProgressResponse_RawPerChannel::_internal_set_processed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  processed_ = value;
}
inline void GetProgressResponse_RawPerChannel::set_processed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_processed(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.GetProgressResponse.RawPerChannel.processed)
}

// -------------------------------------------------------------------

// GetProgressResponse

// .minknow_api.acquisition.GetProgressResponse.RawPerChannel raw_per_channel = 1;
inline bool GetProgressResponse::_internal_has_raw_per_channel() const {
  return this != internal_default_instance() && raw_per_channel_ != nullptr;
}
inline bool GetProgressResponse::has_raw_per_channel() const {
  return _internal_has_raw_per_channel();
}
inline void GetProgressResponse::clear_raw_per_channel() {
  if (GetArenaForAllocation() == nullptr && raw_per_channel_ != nullptr) {
    delete raw_per_channel_;
  }
  raw_per_channel_ = nullptr;
}
inline const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel& GetProgressResponse::_internal_raw_per_channel() const {
  const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* p = raw_per_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel&>(
      ::minknow_api::acquisition::_GetProgressResponse_RawPerChannel_default_instance_);
}
inline const ::minknow_api::acquisition::GetProgressResponse_RawPerChannel& GetProgressResponse::raw_per_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.GetProgressResponse.raw_per_channel)
  return _internal_raw_per_channel();
}
inline void GetProgressResponse::unsafe_arena_set_allocated_raw_per_channel(
    ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* raw_per_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_per_channel_);
  }
  raw_per_channel_ = raw_per_channel;
  if (raw_per_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.GetProgressResponse.raw_per_channel)
}
inline ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* GetProgressResponse::release_raw_per_channel() {
  
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* temp = raw_per_channel_;
  raw_per_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* GetProgressResponse::unsafe_arena_release_raw_per_channel() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.GetProgressResponse.raw_per_channel)
  
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* temp = raw_per_channel_;
  raw_per_channel_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* GetProgressResponse::_internal_mutable_raw_per_channel() {
  
  if (raw_per_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::GetProgressResponse_RawPerChannel>(GetArenaForAllocation());
    raw_per_channel_ = p;
  }
  return raw_per_channel_;
}
inline ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* GetProgressResponse::mutable_raw_per_channel() {
  ::minknow_api::acquisition::GetProgressResponse_RawPerChannel* _msg = _internal_mutable_raw_per_channel();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.GetProgressResponse.raw_per_channel)
  return _msg;
}
inline void GetProgressResponse::set_allocated_raw_per_channel(::minknow_api::acquisition::GetProgressResponse_RawPerChannel* raw_per_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete raw_per_channel_;
  }
  if (raw_per_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::GetProgressResponse_RawPerChannel>::GetOwningArena(raw_per_channel);
    if (message_arena != submessage_arena) {
      raw_per_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_per_channel, submessage_arena);
    }
    
  } else {
    
  }
  raw_per_channel_ = raw_per_channel;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.GetProgressResponse.raw_per_channel)
}

// -------------------------------------------------------------------

// GetAcquisitionRunInfoRequest

// string run_id = 1;
inline void GetAcquisitionRunInfoRequest::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& GetAcquisitionRunInfoRequest::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAcquisitionRunInfoRequest::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id)
}
inline std::string* GetAcquisitionRunInfoRequest::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id)
  return _s;
}
inline const std::string& GetAcquisitionRunInfoRequest::_internal_run_id() const {
  return run_id_.Get();
}
inline void GetAcquisitionRunInfoRequest::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAcquisitionRunInfoRequest::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAcquisitionRunInfoRequest::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAcquisitionRunInfoRequest::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.GetAcquisitionRunInfoRequest.run_id)
}

// -------------------------------------------------------------------

// AcquisitionYieldSummary

// int64 read_count = 1;
inline void AcquisitionYieldSummary::clear_read_count() {
  read_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_read_count() const {
  return read_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::read_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.read_count)
  return _internal_read_count();
}
inline void AcquisitionYieldSummary::_internal_set_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  read_count_ = value;
}
inline void AcquisitionYieldSummary::set_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_read_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.read_count)
}

// int64 basecalled_pass_read_count = 3;
inline void AcquisitionYieldSummary::clear_basecalled_pass_read_count() {
  basecalled_pass_read_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_pass_read_count() const {
  return basecalled_pass_read_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_pass_read_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_pass_read_count)
  return _internal_basecalled_pass_read_count();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_pass_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_pass_read_count_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_pass_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_pass_read_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_pass_read_count)
}

// int64 basecalled_fail_read_count = 4;
inline void AcquisitionYieldSummary::clear_basecalled_fail_read_count() {
  basecalled_fail_read_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_fail_read_count() const {
  return basecalled_fail_read_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_fail_read_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_fail_read_count)
  return _internal_basecalled_fail_read_count();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_fail_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_fail_read_count_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_fail_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_fail_read_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_fail_read_count)
}

// int64 basecalled_skipped_read_count = 10;
inline void AcquisitionYieldSummary::clear_basecalled_skipped_read_count() {
  basecalled_skipped_read_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_skipped_read_count() const {
  return basecalled_skipped_read_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_skipped_read_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_skipped_read_count)
  return _internal_basecalled_skipped_read_count();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_skipped_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_skipped_read_count_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_skipped_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_skipped_read_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_skipped_read_count)
}

// int64 basecalled_pass_bases = 5;
inline void AcquisitionYieldSummary::clear_basecalled_pass_bases() {
  basecalled_pass_bases_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_pass_bases() const {
  return basecalled_pass_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_pass_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_pass_bases)
  return _internal_basecalled_pass_bases();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_pass_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_pass_bases_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_pass_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_pass_bases(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_pass_bases)
}

// int64 basecalled_fail_bases = 18;
inline void AcquisitionYieldSummary::clear_basecalled_fail_bases() {
  basecalled_fail_bases_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_fail_bases() const {
  return basecalled_fail_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_fail_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_fail_bases)
  return _internal_basecalled_fail_bases();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_fail_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_fail_bases_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_fail_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_fail_bases(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_fail_bases)
}

// int64 basecalled_samples = 6;
inline void AcquisitionYieldSummary::clear_basecalled_samples() {
  basecalled_samples_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_basecalled_samples() const {
  return basecalled_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::basecalled_samples() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_samples)
  return _internal_basecalled_samples();
}
inline void AcquisitionYieldSummary::_internal_set_basecalled_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  basecalled_samples_ = value;
}
inline void AcquisitionYieldSummary::set_basecalled_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_basecalled_samples(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.basecalled_samples)
}

// int64 selected_raw_samples = 7;
inline void AcquisitionYieldSummary::clear_selected_raw_samples() {
  selected_raw_samples_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_selected_raw_samples() const {
  return selected_raw_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::selected_raw_samples() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.selected_raw_samples)
  return _internal_selected_raw_samples();
}
inline void AcquisitionYieldSummary::_internal_set_selected_raw_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  selected_raw_samples_ = value;
}
inline void AcquisitionYieldSummary::set_selected_raw_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_selected_raw_samples(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.selected_raw_samples)
}

// int64 selected_events = 8;
inline void AcquisitionYieldSummary::clear_selected_events() {
  selected_events_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_selected_events() const {
  return selected_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::selected_events() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.selected_events)
  return _internal_selected_events();
}
inline void AcquisitionYieldSummary::_internal_set_selected_events(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  selected_events_ = value;
}
inline void AcquisitionYieldSummary::set_selected_events(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_selected_events(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.selected_events)
}

// int64 estimated_selected_bases = 9;
inline void AcquisitionYieldSummary::clear_estimated_selected_bases() {
  estimated_selected_bases_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_estimated_selected_bases() const {
  return estimated_selected_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::estimated_selected_bases() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.estimated_selected_bases)
  return _internal_estimated_selected_bases();
}
inline void AcquisitionYieldSummary::_internal_set_estimated_selected_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  estimated_selected_bases_ = value;
}
inline void AcquisitionYieldSummary::set_estimated_selected_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_estimated_selected_bases(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.estimated_selected_bases)
}

// int64 alignment_matches = 14;
inline void AcquisitionYieldSummary::clear_alignment_matches() {
  alignment_matches_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_alignment_matches() const {
  return alignment_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::alignment_matches() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.alignment_matches)
  return _internal_alignment_matches();
}
inline void AcquisitionYieldSummary::_internal_set_alignment_matches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  alignment_matches_ = value;
}
inline void AcquisitionYieldSummary::set_alignment_matches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_alignment_matches(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.alignment_matches)
}

// int64 alignment_mismatches = 15;
inline void AcquisitionYieldSummary::clear_alignment_mismatches() {
  alignment_mismatches_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_alignment_mismatches() const {
  return alignment_mismatches_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::alignment_mismatches() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.alignment_mismatches)
  return _internal_alignment_mismatches();
}
inline void AcquisitionYieldSummary::_internal_set_alignment_mismatches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  alignment_mismatches_ = value;
}
inline void AcquisitionYieldSummary::set_alignment_mismatches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_alignment_mismatches(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.alignment_mismatches)
}

// int64 alignment_insertions = 16;
inline void AcquisitionYieldSummary::clear_alignment_insertions() {
  alignment_insertions_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_alignment_insertions() const {
  return alignment_insertions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::alignment_insertions() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.alignment_insertions)
  return _internal_alignment_insertions();
}
inline void AcquisitionYieldSummary::_internal_set_alignment_insertions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  alignment_insertions_ = value;
}
inline void AcquisitionYieldSummary::set_alignment_insertions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_alignment_insertions(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.alignment_insertions)
}

// int64 alignment_deletions = 17;
inline void AcquisitionYieldSummary::clear_alignment_deletions() {
  alignment_deletions_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::_internal_alignment_deletions() const {
  return alignment_deletions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionYieldSummary::alignment_deletions() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.alignment_deletions)
  return _internal_alignment_deletions();
}
inline void AcquisitionYieldSummary::_internal_set_alignment_deletions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  alignment_deletions_ = value;
}
inline void AcquisitionYieldSummary::set_alignment_deletions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_alignment_deletions(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.alignment_deletions)
}

// float alignment_coverage = 19;
inline void AcquisitionYieldSummary::clear_alignment_coverage() {
  alignment_coverage_ = 0;
}
inline float AcquisitionYieldSummary::_internal_alignment_coverage() const {
  return alignment_coverage_;
}
inline float AcquisitionYieldSummary::alignment_coverage() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionYieldSummary.alignment_coverage)
  return _internal_alignment_coverage();
}
inline void AcquisitionYieldSummary::_internal_set_alignment_coverage(float value) {
  
  alignment_coverage_ = value;
}
inline void AcquisitionYieldSummary::set_alignment_coverage(float value) {
  _internal_set_alignment_coverage(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionYieldSummary.alignment_coverage)
}

// -------------------------------------------------------------------

// AcquisitionWriterSummary

// int64 written_read_count = 1;
inline void AcquisitionWriterSummary::clear_written_read_count() {
  written_read_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::_internal_written_read_count() const {
  return written_read_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::written_read_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionWriterSummary.written_read_count)
  return _internal_written_read_count();
}
inline void AcquisitionWriterSummary::_internal_set_written_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  written_read_count_ = value;
}
inline void AcquisitionWriterSummary::set_written_read_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_written_read_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionWriterSummary.written_read_count)
}

// int64 bytes_to_write_produced = 2;
inline void AcquisitionWriterSummary::clear_bytes_to_write_produced() {
  bytes_to_write_produced_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::_internal_bytes_to_write_produced() const {
  return bytes_to_write_produced_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::bytes_to_write_produced() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_produced)
  return _internal_bytes_to_write_produced();
}
inline void AcquisitionWriterSummary::_internal_set_bytes_to_write_produced(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_to_write_produced_ = value;
}
inline void AcquisitionWriterSummary::set_bytes_to_write_produced(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_to_write_produced(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_produced)
}

// int64 bytes_to_write_failed = 3;
inline void AcquisitionWriterSummary::clear_bytes_to_write_failed() {
  bytes_to_write_failed_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::_internal_bytes_to_write_failed() const {
  return bytes_to_write_failed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::bytes_to_write_failed() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_failed)
  return _internal_bytes_to_write_failed();
}
inline void AcquisitionWriterSummary::_internal_set_bytes_to_write_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_to_write_failed_ = value;
}
inline void AcquisitionWriterSummary::set_bytes_to_write_failed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_to_write_failed(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_failed)
}

// int64 bytes_to_write_completed = 4;
inline void AcquisitionWriterSummary::clear_bytes_to_write_completed() {
  bytes_to_write_completed_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::_internal_bytes_to_write_completed() const {
  return bytes_to_write_completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AcquisitionWriterSummary::bytes_to_write_completed() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_completed)
  return _internal_bytes_to_write_completed();
}
inline void AcquisitionWriterSummary::_internal_set_bytes_to_write_completed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_to_write_completed_ = value;
}
inline void AcquisitionWriterSummary::set_bytes_to_write_completed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_to_write_completed(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionWriterSummary.bytes_to_write_completed)
}

// -------------------------------------------------------------------

// ChannelStateInfo_Style

// string label = 1;
inline void ChannelStateInfo_Style::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& ChannelStateInfo_Style::label() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Style.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStateInfo_Style::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.Style.label)
}
inline std::string* ChannelStateInfo_Style::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Style.label)
  return _s;
}
inline const std::string& ChannelStateInfo_Style::_internal_label() const {
  return label_.Get();
}
inline void ChannelStateInfo_Style::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::release_label() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.Style.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStateInfo_Style::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.Style.label)
}

// string description = 2;
inline void ChannelStateInfo_Style::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ChannelStateInfo_Style::description() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Style.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStateInfo_Style::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.Style.description)
}
inline std::string* ChannelStateInfo_Style::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Style.description)
  return _s;
}
inline const std::string& ChannelStateInfo_Style::_internal_description() const {
  return description_.Get();
}
inline void ChannelStateInfo_Style::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::release_description() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.Style.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStateInfo_Style::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.Style.description)
}

// string colour = 3;
inline void ChannelStateInfo_Style::clear_colour() {
  colour_.ClearToEmpty();
}
inline const std::string& ChannelStateInfo_Style::colour() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Style.colour)
  return _internal_colour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStateInfo_Style::set_colour(ArgT0&& arg0, ArgT... args) {
 
 colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.Style.colour)
}
inline std::string* ChannelStateInfo_Style::mutable_colour() {
  std::string* _s = _internal_mutable_colour();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Style.colour)
  return _s;
}
inline const std::string& ChannelStateInfo_Style::_internal_colour() const {
  return colour_.Get();
}
inline void ChannelStateInfo_Style::_internal_set_colour(const std::string& value) {
  
  colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::_internal_mutable_colour() {
  
  return colour_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Style::release_colour() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.Style.colour)
  return colour_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStateInfo_Style::set_allocated_colour(std::string* colour) {
  if (colour != nullptr) {
    
  } else {
    
  }
  colour_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colour,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.Style.colour)
}

// -------------------------------------------------------------------

// ChannelStateInfo_ChannelState

// uint32 id = 1;
inline void ChannelStateInfo_ChannelState::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelStateInfo_ChannelState::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelStateInfo_ChannelState::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.ChannelState.id)
  return _internal_id();
}
inline void ChannelStateInfo_ChannelState::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ChannelStateInfo_ChannelState::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.ChannelState.id)
}

// string name = 2;
inline void ChannelStateInfo_ChannelState::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelStateInfo_ChannelState::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.ChannelState.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStateInfo_ChannelState::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.ChannelState.name)
}
inline std::string* ChannelStateInfo_ChannelState::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.ChannelState.name)
  return _s;
}
inline const std::string& ChannelStateInfo_ChannelState::_internal_name() const {
  return name_.Get();
}
inline void ChannelStateInfo_ChannelState::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_ChannelState::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_ChannelState::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.ChannelState.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStateInfo_ChannelState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.ChannelState.name)
}

// .minknow_api.acquisition.ChannelStateInfo.Style style = 3;
inline bool ChannelStateInfo_ChannelState::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool ChannelStateInfo_ChannelState::has_style() const {
  return _internal_has_style();
}
inline void ChannelStateInfo_ChannelState::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Style& ChannelStateInfo_ChannelState::_internal_style() const {
  const ::minknow_api::acquisition::ChannelStateInfo_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::ChannelStateInfo_Style&>(
      ::minknow_api::acquisition::_ChannelStateInfo_Style_default_instance_);
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Style& ChannelStateInfo_ChannelState::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.ChannelState.style)
  return _internal_style();
}
inline void ChannelStateInfo_ChannelState::unsafe_arena_set_allocated_style(
    ::minknow_api::acquisition::ChannelStateInfo_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.ChannelStateInfo.ChannelState.style)
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_ChannelState::release_style() {
  
  ::minknow_api::acquisition::ChannelStateInfo_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_ChannelState::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.ChannelState.style)
  
  ::minknow_api::acquisition::ChannelStateInfo_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_ChannelState::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_ChannelState::mutable_style() {
  ::minknow_api::acquisition::ChannelStateInfo_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.ChannelState.style)
  return _msg;
}
inline void ChannelStateInfo_ChannelState::set_allocated_style(::minknow_api::acquisition::ChannelStateInfo_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::ChannelStateInfo_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.ChannelState.style)
}

// uint32 global_order = 4;
inline void ChannelStateInfo_ChannelState::clear_global_order() {
  global_order_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelStateInfo_ChannelState::_internal_global_order() const {
  return global_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelStateInfo_ChannelState::global_order() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.ChannelState.global_order)
  return _internal_global_order();
}
inline void ChannelStateInfo_ChannelState::_internal_set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_order_ = value;
}
inline void ChannelStateInfo_ChannelState::set_global_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_order(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.ChannelState.global_order)
}

// -------------------------------------------------------------------

// ChannelStateInfo_Group

// string name = 1;
inline void ChannelStateInfo_Group::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelStateInfo_Group::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelStateInfo_Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ChannelStateInfo.Group.name)
}
inline std::string* ChannelStateInfo_Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Group.name)
  return _s;
}
inline const std::string& ChannelStateInfo_Group::_internal_name() const {
  return name_.Get();
}
inline void ChannelStateInfo_Group::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Group::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelStateInfo_Group::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelStateInfo_Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.Group.name)
}

// .minknow_api.acquisition.ChannelStateInfo.Style style = 2;
inline bool ChannelStateInfo_Group::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool ChannelStateInfo_Group::has_style() const {
  return _internal_has_style();
}
inline void ChannelStateInfo_Group::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Style& ChannelStateInfo_Group::_internal_style() const {
  const ::minknow_api::acquisition::ChannelStateInfo_Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::ChannelStateInfo_Style&>(
      ::minknow_api::acquisition::_ChannelStateInfo_Style_default_instance_);
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Style& ChannelStateInfo_Group::style() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Group.style)
  return _internal_style();
}
inline void ChannelStateInfo_Group::unsafe_arena_set_allocated_style(
    ::minknow_api::acquisition::ChannelStateInfo_Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.ChannelStateInfo.Group.style)
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_Group::release_style() {
  
  ::minknow_api::acquisition::ChannelStateInfo_Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_Group::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.ChannelStateInfo.Group.style)
  
  ::minknow_api::acquisition::ChannelStateInfo_Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_Group::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo_Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::minknow_api::acquisition::ChannelStateInfo_Style* ChannelStateInfo_Group::mutable_style() {
  ::minknow_api::acquisition::ChannelStateInfo_Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Group.style)
  return _msg;
}
inline void ChannelStateInfo_Group::set_allocated_style(::minknow_api::acquisition::ChannelStateInfo_Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::ChannelStateInfo_Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.ChannelStateInfo.Group.style)
}

// repeated .minknow_api.acquisition.ChannelStateInfo.ChannelState states = 3;
inline int ChannelStateInfo_Group::_internal_states_size() const {
  return states_.size();
}
inline int ChannelStateInfo_Group::states_size() const {
  return _internal_states_size();
}
inline void ChannelStateInfo_Group::clear_states() {
  states_.Clear();
}
inline ::minknow_api::acquisition::ChannelStateInfo_ChannelState* ChannelStateInfo_Group::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.Group.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >*
ChannelStateInfo_Group::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.ChannelStateInfo.Group.states)
  return &states_;
}
inline const ::minknow_api::acquisition::ChannelStateInfo_ChannelState& ChannelStateInfo_Group::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::minknow_api::acquisition::ChannelStateInfo_ChannelState& ChannelStateInfo_Group::states(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.Group.states)
  return _internal_states(index);
}
inline ::minknow_api::acquisition::ChannelStateInfo_ChannelState* ChannelStateInfo_Group::_internal_add_states() {
  return states_.Add();
}
inline ::minknow_api::acquisition::ChannelStateInfo_ChannelState* ChannelStateInfo_Group::add_states() {
  ::minknow_api::acquisition::ChannelStateInfo_ChannelState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.ChannelStateInfo.Group.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_ChannelState >&
ChannelStateInfo_Group::states() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.ChannelStateInfo.Group.states)
  return states_;
}

// -------------------------------------------------------------------

// ChannelStateInfo

// repeated .minknow_api.acquisition.ChannelStateInfo.Group groups = 1;
inline int ChannelStateInfo::_internal_groups_size() const {
  return groups_.size();
}
inline int ChannelStateInfo::groups_size() const {
  return _internal_groups_size();
}
inline void ChannelStateInfo::clear_groups() {
  groups_.Clear();
}
inline ::minknow_api::acquisition::ChannelStateInfo_Group* ChannelStateInfo::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ChannelStateInfo.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_Group >*
ChannelStateInfo::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.ChannelStateInfo.groups)
  return &groups_;
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Group& ChannelStateInfo::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::minknow_api::acquisition::ChannelStateInfo_Group& ChannelStateInfo::groups(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ChannelStateInfo.groups)
  return _internal_groups(index);
}
inline ::minknow_api::acquisition::ChannelStateInfo_Group* ChannelStateInfo::_internal_add_groups() {
  return groups_.Add();
}
inline ::minknow_api::acquisition::ChannelStateInfo_Group* ChannelStateInfo::add_groups() {
  ::minknow_api::acquisition::ChannelStateInfo_Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.ChannelStateInfo.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::acquisition::ChannelStateInfo_Group >&
ChannelStateInfo::groups() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.ChannelStateInfo.groups)
  return groups_;
}

// -------------------------------------------------------------------

// AcquisitionConfigSummary

// .minknow_api.acquisition.Purpose purpose = 21;
inline void AcquisitionConfigSummary::clear_purpose() {
  purpose_ = 0;
}
inline ::minknow_api::acquisition::Purpose AcquisitionConfigSummary::_internal_purpose() const {
  return static_cast< ::minknow_api::acquisition::Purpose >(purpose_);
}
inline ::minknow_api::acquisition::Purpose AcquisitionConfigSummary::purpose() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.purpose)
  return _internal_purpose();
}
inline void AcquisitionConfigSummary::_internal_set_purpose(::minknow_api::acquisition::Purpose value) {
  
  purpose_ = value;
}
inline void AcquisitionConfigSummary::set_purpose(::minknow_api::acquisition::Purpose value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.purpose)
}

// bool basecalling_enabled = 1;
inline void AcquisitionConfigSummary::clear_basecalling_enabled() {
  basecalling_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_basecalling_enabled() const {
  return basecalling_enabled_;
}
inline bool AcquisitionConfigSummary::basecalling_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_enabled)
  return _internal_basecalling_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_basecalling_enabled(bool value) {
  
  basecalling_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_basecalling_enabled(bool value) {
  _internal_set_basecalling_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_enabled)
}

// string basecalling_config_filename = 16;
inline void AcquisitionConfigSummary::clear_basecalling_config_filename() {
  basecalling_config_filename_.ClearToEmpty();
}
inline const std::string& AcquisitionConfigSummary::basecalling_config_filename() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename)
  return _internal_basecalling_config_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionConfigSummary::set_basecalling_config_filename(ArgT0&& arg0, ArgT... args) {
 
 basecalling_config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename)
}
inline std::string* AcquisitionConfigSummary::mutable_basecalling_config_filename() {
  std::string* _s = _internal_mutable_basecalling_config_filename();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_basecalling_config_filename() const {
  return basecalling_config_filename_.Get();
}
inline void AcquisitionConfigSummary::_internal_set_basecalling_config_filename(const std::string& value) {
  
  basecalling_config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::_internal_mutable_basecalling_config_filename() {
  
  return basecalling_config_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::release_basecalling_config_filename() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename)
  return basecalling_config_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionConfigSummary::set_allocated_basecalling_config_filename(std::string* basecalling_config_filename) {
  if (basecalling_config_filename != nullptr) {
    
  } else {
    
  }
  basecalling_config_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basecalling_config_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.basecalling_config_filename)
}

// bool barcoding_enabled = 13;
inline void AcquisitionConfigSummary::clear_barcoding_enabled() {
  barcoding_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_barcoding_enabled() const {
  return barcoding_enabled_;
}
inline bool AcquisitionConfigSummary::barcoding_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_enabled)
  return _internal_barcoding_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_barcoding_enabled(bool value) {
  
  barcoding_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_barcoding_enabled(bool value) {
  _internal_set_barcoding_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_enabled)
}

// repeated string barcoding_kits = 17;
inline int AcquisitionConfigSummary::_internal_barcoding_kits_size() const {
  return barcoding_kits_.size();
}
inline int AcquisitionConfigSummary::barcoding_kits_size() const {
  return _internal_barcoding_kits_size();
}
inline void AcquisitionConfigSummary::clear_barcoding_kits() {
  barcoding_kits_.Clear();
}
inline std::string* AcquisitionConfigSummary::add_barcoding_kits() {
  std::string* _s = _internal_add_barcoding_kits();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_barcoding_kits(int index) const {
  return barcoding_kits_.Get(index);
}
inline const std::string& AcquisitionConfigSummary::barcoding_kits(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
  return _internal_barcoding_kits(index);
}
inline std::string* AcquisitionConfigSummary::mutable_barcoding_kits(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
  return barcoding_kits_.Mutable(index);
}
inline void AcquisitionConfigSummary::set_barcoding_kits(int index, const std::string& value) {
  barcoding_kits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::set_barcoding_kits(int index, std::string&& value) {
  barcoding_kits_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::set_barcoding_kits(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  barcoding_kits_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::set_barcoding_kits(int index, const char* value, size_t size) {
  barcoding_kits_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline std::string* AcquisitionConfigSummary::_internal_add_barcoding_kits() {
  return barcoding_kits_.Add();
}
inline void AcquisitionConfigSummary::add_barcoding_kits(const std::string& value) {
  barcoding_kits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::add_barcoding_kits(std::string&& value) {
  barcoding_kits_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::add_barcoding_kits(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  barcoding_kits_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline void AcquisitionConfigSummary::add_barcoding_kits(const char* value, size_t size) {
  barcoding_kits_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AcquisitionConfigSummary::barcoding_kits() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
  return barcoding_kits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AcquisitionConfigSummary::mutable_barcoding_kits() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.AcquisitionConfigSummary.barcoding_kits)
  return &barcoding_kits_;
}

// bool alignment_enabled = 14;
inline void AcquisitionConfigSummary::clear_alignment_enabled() {
  alignment_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_alignment_enabled() const {
  return alignment_enabled_;
}
inline bool AcquisitionConfigSummary::alignment_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.alignment_enabled)
  return _internal_alignment_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_alignment_enabled(bool value) {
  
  alignment_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_alignment_enabled(bool value) {
  _internal_set_alignment_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.alignment_enabled)
}

// repeated string alignment_reference_files = 18;
inline int AcquisitionConfigSummary::_internal_alignment_reference_files_size() const {
  return alignment_reference_files_.size();
}
inline int AcquisitionConfigSummary::alignment_reference_files_size() const {
  return _internal_alignment_reference_files_size();
}
inline void AcquisitionConfigSummary::clear_alignment_reference_files() {
  alignment_reference_files_.Clear();
}
inline std::string* AcquisitionConfigSummary::add_alignment_reference_files() {
  std::string* _s = _internal_add_alignment_reference_files();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_alignment_reference_files(int index) const {
  return alignment_reference_files_.Get(index);
}
inline const std::string& AcquisitionConfigSummary::alignment_reference_files(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
  return _internal_alignment_reference_files(index);
}
inline std::string* AcquisitionConfigSummary::mutable_alignment_reference_files(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
  return alignment_reference_files_.Mutable(index);
}
inline void AcquisitionConfigSummary::set_alignment_reference_files(int index, const std::string& value) {
  alignment_reference_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::set_alignment_reference_files(int index, std::string&& value) {
  alignment_reference_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::set_alignment_reference_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alignment_reference_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::set_alignment_reference_files(int index, const char* value, size_t size) {
  alignment_reference_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline std::string* AcquisitionConfigSummary::_internal_add_alignment_reference_files() {
  return alignment_reference_files_.Add();
}
inline void AcquisitionConfigSummary::add_alignment_reference_files(const std::string& value) {
  alignment_reference_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::add_alignment_reference_files(std::string&& value) {
  alignment_reference_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::add_alignment_reference_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alignment_reference_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline void AcquisitionConfigSummary::add_alignment_reference_files(const char* value, size_t size) {
  alignment_reference_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AcquisitionConfigSummary::alignment_reference_files() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
  return alignment_reference_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AcquisitionConfigSummary::mutable_alignment_reference_files() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.AcquisitionConfigSummary.alignment_reference_files)
  return &alignment_reference_files_;
}

// string alignment_bed_file = 19;
inline void AcquisitionConfigSummary::clear_alignment_bed_file() {
  alignment_bed_file_.ClearToEmpty();
}
inline const std::string& AcquisitionConfigSummary::alignment_bed_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file)
  return _internal_alignment_bed_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionConfigSummary::set_alignment_bed_file(ArgT0&& arg0, ArgT... args) {
 
 alignment_bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file)
}
inline std::string* AcquisitionConfigSummary::mutable_alignment_bed_file() {
  std::string* _s = _internal_mutable_alignment_bed_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_alignment_bed_file() const {
  return alignment_bed_file_.Get();
}
inline void AcquisitionConfigSummary::_internal_set_alignment_bed_file(const std::string& value) {
  
  alignment_bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::_internal_mutable_alignment_bed_file() {
  
  return alignment_bed_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::release_alignment_bed_file() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file)
  return alignment_bed_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionConfigSummary::set_allocated_alignment_bed_file(std::string* alignment_bed_file) {
  if (alignment_bed_file != nullptr) {
    
  } else {
    
  }
  alignment_bed_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alignment_bed_file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.alignment_bed_file)
}

// bool lamp_enabled = 15;
inline void AcquisitionConfigSummary::clear_lamp_enabled() {
  lamp_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_lamp_enabled() const {
  return lamp_enabled_;
}
inline bool AcquisitionConfigSummary::lamp_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.lamp_enabled)
  return _internal_lamp_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_lamp_enabled(bool value) {
  
  lamp_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_lamp_enabled(bool value) {
  _internal_set_lamp_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.lamp_enabled)
}

// string lamp_kit = 20;
inline void AcquisitionConfigSummary::clear_lamp_kit() {
  lamp_kit_.ClearToEmpty();
}
inline const std::string& AcquisitionConfigSummary::lamp_kit() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit)
  return _internal_lamp_kit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionConfigSummary::set_lamp_kit(ArgT0&& arg0, ArgT... args) {
 
 lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit)
}
inline std::string* AcquisitionConfigSummary::mutable_lamp_kit() {
  std::string* _s = _internal_mutable_lamp_kit();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_lamp_kit() const {
  return lamp_kit_.Get();
}
inline void AcquisitionConfigSummary::_internal_set_lamp_kit(const std::string& value) {
  
  lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::_internal_mutable_lamp_kit() {
  
  return lamp_kit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::release_lamp_kit() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit)
  return lamp_kit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionConfigSummary::set_allocated_lamp_kit(std::string* lamp_kit) {
  if (lamp_kit != nullptr) {
    
  } else {
    
  }
  lamp_kit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lamp_kit,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.lamp_kit)
}

// string reads_directory = 2;
inline void AcquisitionConfigSummary::clear_reads_directory() {
  reads_directory_.ClearToEmpty();
}
inline const std::string& AcquisitionConfigSummary::reads_directory() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.reads_directory)
  return _internal_reads_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionConfigSummary::set_reads_directory(ArgT0&& arg0, ArgT... args) {
 
 reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.reads_directory)
}
inline std::string* AcquisitionConfigSummary::mutable_reads_directory() {
  std::string* _s = _internal_mutable_reads_directory();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.reads_directory)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_reads_directory() const {
  return reads_directory_.Get();
}
inline void AcquisitionConfigSummary::_internal_set_reads_directory(const std::string& value) {
  
  reads_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::_internal_mutable_reads_directory() {
  
  return reads_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::release_reads_directory() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.reads_directory)
  return reads_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionConfigSummary::set_allocated_reads_directory(std::string* reads_directory) {
  if (reads_directory != nullptr) {
    
  } else {
    
  }
  reads_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reads_directory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.reads_directory)
}

// repeated string reads_fallback_directories = 3;
inline int AcquisitionConfigSummary::_internal_reads_fallback_directories_size() const {
  return reads_fallback_directories_.size();
}
inline int AcquisitionConfigSummary::reads_fallback_directories_size() const {
  return _internal_reads_fallback_directories_size();
}
inline void AcquisitionConfigSummary::clear_reads_fallback_directories() {
  reads_fallback_directories_.Clear();
}
inline std::string* AcquisitionConfigSummary::add_reads_fallback_directories() {
  std::string* _s = _internal_add_reads_fallback_directories();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_reads_fallback_directories(int index) const {
  return reads_fallback_directories_.Get(index);
}
inline const std::string& AcquisitionConfigSummary::reads_fallback_directories(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
  return _internal_reads_fallback_directories(index);
}
inline std::string* AcquisitionConfigSummary::mutable_reads_fallback_directories(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
  return reads_fallback_directories_.Mutable(index);
}
inline void AcquisitionConfigSummary::set_reads_fallback_directories(int index, const std::string& value) {
  reads_fallback_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::set_reads_fallback_directories(int index, std::string&& value) {
  reads_fallback_directories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::set_reads_fallback_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reads_fallback_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::set_reads_fallback_directories(int index, const char* value, size_t size) {
  reads_fallback_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline std::string* AcquisitionConfigSummary::_internal_add_reads_fallback_directories() {
  return reads_fallback_directories_.Add();
}
inline void AcquisitionConfigSummary::add_reads_fallback_directories(const std::string& value) {
  reads_fallback_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::add_reads_fallback_directories(std::string&& value) {
  reads_fallback_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::add_reads_fallback_directories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reads_fallback_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline void AcquisitionConfigSummary::add_reads_fallback_directories(const char* value, size_t size) {
  reads_fallback_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AcquisitionConfigSummary::reads_fallback_directories() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
  return reads_fallback_directories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AcquisitionConfigSummary::mutable_reads_fallback_directories() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.AcquisitionConfigSummary.reads_fallback_directories)
  return &reads_fallback_directories_;
}

// bool fast5_reads_enabled = 4;
inline void AcquisitionConfigSummary::clear_fast5_reads_enabled() {
  fast5_reads_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_fast5_reads_enabled() const {
  return fast5_reads_enabled_;
}
inline bool AcquisitionConfigSummary::fast5_reads_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.fast5_reads_enabled)
  return _internal_fast5_reads_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_fast5_reads_enabled(bool value) {
  
  fast5_reads_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_fast5_reads_enabled(bool value) {
  _internal_set_fast5_reads_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.fast5_reads_enabled)
}

// bool fastq_reads_enabled = 5;
inline void AcquisitionConfigSummary::clear_fastq_reads_enabled() {
  fastq_reads_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_fastq_reads_enabled() const {
  return fastq_reads_enabled_;
}
inline bool AcquisitionConfigSummary::fastq_reads_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.fastq_reads_enabled)
  return _internal_fastq_reads_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_fastq_reads_enabled(bool value) {
  
  fastq_reads_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_fastq_reads_enabled(bool value) {
  _internal_set_fastq_reads_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.fastq_reads_enabled)
}

// bool protobuf_reads_enabled = 6;
inline void AcquisitionConfigSummary::clear_protobuf_reads_enabled() {
  protobuf_reads_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_protobuf_reads_enabled() const {
  return protobuf_reads_enabled_;
}
inline bool AcquisitionConfigSummary::protobuf_reads_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.protobuf_reads_enabled)
  return _internal_protobuf_reads_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_protobuf_reads_enabled(bool value) {
  
  protobuf_reads_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_protobuf_reads_enabled(bool value) {
  _internal_set_protobuf_reads_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.protobuf_reads_enabled)
}

// string bulk_file_path = 7;
inline void AcquisitionConfigSummary::clear_bulk_file_path() {
  bulk_file_path_.ClearToEmpty();
}
inline const std::string& AcquisitionConfigSummary::bulk_file_path() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path)
  return _internal_bulk_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionConfigSummary::set_bulk_file_path(ArgT0&& arg0, ArgT... args) {
 
 bulk_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path)
}
inline std::string* AcquisitionConfigSummary::mutable_bulk_file_path() {
  std::string* _s = _internal_mutable_bulk_file_path();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path)
  return _s;
}
inline const std::string& AcquisitionConfigSummary::_internal_bulk_file_path() const {
  return bulk_file_path_.Get();
}
inline void AcquisitionConfigSummary::_internal_set_bulk_file_path(const std::string& value) {
  
  bulk_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::_internal_mutable_bulk_file_path() {
  
  return bulk_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionConfigSummary::release_bulk_file_path() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path)
  return bulk_file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionConfigSummary::set_allocated_bulk_file_path(std::string* bulk_file_path) {
  if (bulk_file_path != nullptr) {
    
  } else {
    
  }
  bulk_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bulk_file_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_path)
}

// bool bulk_file_enabled = 8;
inline void AcquisitionConfigSummary::clear_bulk_file_enabled() {
  bulk_file_enabled_ = false;
}
inline bool AcquisitionConfigSummary::_internal_bulk_file_enabled() const {
  return bulk_file_enabled_;
}
inline bool AcquisitionConfigSummary::bulk_file_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_enabled)
  return _internal_bulk_file_enabled();
}
inline void AcquisitionConfigSummary::_internal_set_bulk_file_enabled(bool value) {
  
  bulk_file_enabled_ = value;
}
inline void AcquisitionConfigSummary::set_bulk_file_enabled(bool value) {
  _internal_set_bulk_file_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.bulk_file_enabled)
}

// .minknow_api.acquisition.ChannelStateInfo channel_state_info = 9;
inline bool AcquisitionConfigSummary::_internal_has_channel_state_info() const {
  return this != internal_default_instance() && channel_state_info_ != nullptr;
}
inline bool AcquisitionConfigSummary::has_channel_state_info() const {
  return _internal_has_channel_state_info();
}
inline void AcquisitionConfigSummary::clear_channel_state_info() {
  if (GetArenaForAllocation() == nullptr && channel_state_info_ != nullptr) {
    delete channel_state_info_;
  }
  channel_state_info_ = nullptr;
}
inline const ::minknow_api::acquisition::ChannelStateInfo& AcquisitionConfigSummary::_internal_channel_state_info() const {
  const ::minknow_api::acquisition::ChannelStateInfo* p = channel_state_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::ChannelStateInfo&>(
      ::minknow_api::acquisition::_ChannelStateInfo_default_instance_);
}
inline const ::minknow_api::acquisition::ChannelStateInfo& AcquisitionConfigSummary::channel_state_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info)
  return _internal_channel_state_info();
}
inline void AcquisitionConfigSummary::unsafe_arena_set_allocated_channel_state_info(
    ::minknow_api::acquisition::ChannelStateInfo* channel_state_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_state_info_);
  }
  channel_state_info_ = channel_state_info;
  if (channel_state_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info)
}
inline ::minknow_api::acquisition::ChannelStateInfo* AcquisitionConfigSummary::release_channel_state_info() {
  
  ::minknow_api::acquisition::ChannelStateInfo* temp = channel_state_info_;
  channel_state_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo* AcquisitionConfigSummary::unsafe_arena_release_channel_state_info() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info)
  
  ::minknow_api::acquisition::ChannelStateInfo* temp = channel_state_info_;
  channel_state_info_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::ChannelStateInfo* AcquisitionConfigSummary::_internal_mutable_channel_state_info() {
  
  if (channel_state_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::ChannelStateInfo>(GetArenaForAllocation());
    channel_state_info_ = p;
  }
  return channel_state_info_;
}
inline ::minknow_api::acquisition::ChannelStateInfo* AcquisitionConfigSummary::mutable_channel_state_info() {
  ::minknow_api::acquisition::ChannelStateInfo* _msg = _internal_mutable_channel_state_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info)
  return _msg;
}
inline void AcquisitionConfigSummary::set_allocated_channel_state_info(::minknow_api::acquisition::ChannelStateInfo* channel_state_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_state_info_;
  }
  if (channel_state_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::ChannelStateInfo>::GetOwningArena(channel_state_info);
    if (message_arena != submessage_arena) {
      channel_state_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_state_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_state_info_ = channel_state_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionConfigSummary.channel_state_info)
}

// float events_to_base_ratio = 10;
inline void AcquisitionConfigSummary::clear_events_to_base_ratio() {
  events_to_base_ratio_ = 0;
}
inline float AcquisitionConfigSummary::_internal_events_to_base_ratio() const {
  return events_to_base_ratio_;
}
inline float AcquisitionConfigSummary::events_to_base_ratio() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.events_to_base_ratio)
  return _internal_events_to_base_ratio();
}
inline void AcquisitionConfigSummary::_internal_set_events_to_base_ratio(float value) {
  
  events_to_base_ratio_ = value;
}
inline void AcquisitionConfigSummary::set_events_to_base_ratio(float value) {
  _internal_set_events_to_base_ratio(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.events_to_base_ratio)
}

// uint32 sample_rate = 11;
inline void AcquisitionConfigSummary::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcquisitionConfigSummary::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcquisitionConfigSummary::sample_rate() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.sample_rate)
  return _internal_sample_rate();
}
inline void AcquisitionConfigSummary::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void AcquisitionConfigSummary::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.sample_rate)
}

// uint32 channel_count = 12;
inline void AcquisitionConfigSummary::clear_channel_count() {
  channel_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcquisitionConfigSummary::_internal_channel_count() const {
  return channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcquisitionConfigSummary::channel_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionConfigSummary.channel_count)
  return _internal_channel_count();
}
inline void AcquisitionConfigSummary::_internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_count_ = value;
}
inline void AcquisitionConfigSummary::set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionConfigSummary.channel_count)
}

// -------------------------------------------------------------------

// AcquisitionRunInfo

// string run_id = 1;
inline void AcquisitionRunInfo::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& AcquisitionRunInfo::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcquisitionRunInfo::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.run_id)
}
inline std::string* AcquisitionRunInfo::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.run_id)
  return _s;
}
inline const std::string& AcquisitionRunInfo::_internal_run_id() const {
  return run_id_.Get();
}
inline void AcquisitionRunInfo::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcquisitionRunInfo::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcquisitionRunInfo::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcquisitionRunInfo::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.run_id)
}

// .minknow_api.acquisition.StartupState startup_state = 12;
inline void AcquisitionRunInfo::clear_startup_state() {
  startup_state_ = 0;
}
inline ::minknow_api::acquisition::StartupState AcquisitionRunInfo::_internal_startup_state() const {
  return static_cast< ::minknow_api::acquisition::StartupState >(startup_state_);
}
inline ::minknow_api::acquisition::StartupState AcquisitionRunInfo::startup_state() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.startup_state)
  return _internal_startup_state();
}
inline void AcquisitionRunInfo::_internal_set_startup_state(::minknow_api::acquisition::StartupState value) {
  
  startup_state_ = value;
}
inline void AcquisitionRunInfo::set_startup_state(::minknow_api::acquisition::StartupState value) {
  _internal_set_startup_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.startup_state)
}

// .google.protobuf.Timestamp startup_state_estimated_end = 13;
inline bool AcquisitionRunInfo::_internal_has_startup_state_estimated_end() const {
  return this != internal_default_instance() && startup_state_estimated_end_ != nullptr;
}
inline bool AcquisitionRunInfo::has_startup_state_estimated_end() const {
  return _internal_has_startup_state_estimated_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::_internal_startup_state_estimated_end() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = startup_state_estimated_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::startup_state_estimated_end() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_end)
  return _internal_startup_state_estimated_end();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_startup_state_estimated_end(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* startup_state_estimated_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_state_estimated_end_);
  }
  startup_state_estimated_end_ = startup_state_estimated_end;
  if (startup_state_estimated_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_end)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::release_startup_state_estimated_end() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = startup_state_estimated_end_;
  startup_state_estimated_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::unsafe_arena_release_startup_state_estimated_end() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_end)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = startup_state_estimated_end_;
  startup_state_estimated_end_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::_internal_mutable_startup_state_estimated_end() {
  
  if (startup_state_estimated_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    startup_state_estimated_end_ = p;
  }
  return startup_state_estimated_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::mutable_startup_state_estimated_end() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_startup_state_estimated_end();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_end)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_startup_state_estimated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* startup_state_estimated_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_state_estimated_end_);
  }
  if (startup_state_estimated_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_state_estimated_end));
    if (message_arena != submessage_arena) {
      startup_state_estimated_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startup_state_estimated_end, submessage_arena);
    }
    
  } else {
    
  }
  startup_state_estimated_end_ = startup_state_estimated_end;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_end)
}

// float startup_state_estimated_percent_complete = 14;
inline void AcquisitionRunInfo::clear_startup_state_estimated_percent_complete() {
  startup_state_estimated_percent_complete_ = 0;
}
inline float AcquisitionRunInfo::_internal_startup_state_estimated_percent_complete() const {
  return startup_state_estimated_percent_complete_;
}
inline float AcquisitionRunInfo::startup_state_estimated_percent_complete() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_percent_complete)
  return _internal_startup_state_estimated_percent_complete();
}
inline void AcquisitionRunInfo::_internal_set_startup_state_estimated_percent_complete(float value) {
  
  startup_state_estimated_percent_complete_ = value;
}
inline void AcquisitionRunInfo::set_startup_state_estimated_percent_complete(float value) {
  _internal_set_startup_state_estimated_percent_complete(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.startup_state_estimated_percent_complete)
}

// .minknow_api.acquisition.AcquisitionState state = 2;
inline void AcquisitionRunInfo::clear_state() {
  state_ = 0;
}
inline ::minknow_api::acquisition::AcquisitionState AcquisitionRunInfo::_internal_state() const {
  return static_cast< ::minknow_api::acquisition::AcquisitionState >(state_);
}
inline ::minknow_api::acquisition::AcquisitionState AcquisitionRunInfo::state() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.state)
  return _internal_state();
}
inline void AcquisitionRunInfo::_internal_set_state(::minknow_api::acquisition::AcquisitionState value) {
  
  state_ = value;
}
inline void AcquisitionRunInfo::set_state(::minknow_api::acquisition::AcquisitionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.state)
}

// .minknow_api.acquisition.FinishingState finishing_state = 10;
inline void AcquisitionRunInfo::clear_finishing_state() {
  finishing_state_ = 0;
}
inline ::minknow_api::acquisition::FinishingState AcquisitionRunInfo::_internal_finishing_state() const {
  return static_cast< ::minknow_api::acquisition::FinishingState >(finishing_state_);
}
inline ::minknow_api::acquisition::FinishingState AcquisitionRunInfo::finishing_state() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.finishing_state)
  return _internal_finishing_state();
}
inline void AcquisitionRunInfo::_internal_set_finishing_state(::minknow_api::acquisition::FinishingState value) {
  
  finishing_state_ = value;
}
inline void AcquisitionRunInfo::set_finishing_state(::minknow_api::acquisition::FinishingState value) {
  _internal_set_finishing_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.finishing_state)
}

// .minknow_api.acquisition.AcquisitionStopReason stop_reason = 3;
inline void AcquisitionRunInfo::clear_stop_reason() {
  stop_reason_ = 0;
}
inline ::minknow_api::acquisition::AcquisitionStopReason AcquisitionRunInfo::_internal_stop_reason() const {
  return static_cast< ::minknow_api::acquisition::AcquisitionStopReason >(stop_reason_);
}
inline ::minknow_api::acquisition::AcquisitionStopReason AcquisitionRunInfo::stop_reason() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.stop_reason)
  return _internal_stop_reason();
}
inline void AcquisitionRunInfo::_internal_set_stop_reason(::minknow_api::acquisition::AcquisitionStopReason value) {
  
  stop_reason_ = value;
}
inline void AcquisitionRunInfo::set_stop_reason(::minknow_api::acquisition::AcquisitionStopReason value) {
  _internal_set_stop_reason(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.AcquisitionRunInfo.stop_reason)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool AcquisitionRunInfo::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool AcquisitionRunInfo::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::start_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.start_time)
  return _internal_start_time();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_time_ = p;
  }
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.start_time)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.start_time)
}

// .google.protobuf.Timestamp data_read_start_time = 5;
inline bool AcquisitionRunInfo::_internal_has_data_read_start_time() const {
  return this != internal_default_instance() && data_read_start_time_ != nullptr;
}
inline bool AcquisitionRunInfo::has_data_read_start_time() const {
  return _internal_has_data_read_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::_internal_data_read_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = data_read_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::data_read_start_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time)
  return _internal_data_read_start_time();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_data_read_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_start_time_);
  }
  data_read_start_time_ = data_read_start_time;
  if (data_read_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::release_data_read_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_read_start_time_;
  data_read_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::unsafe_arena_release_data_read_start_time() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_read_start_time_;
  data_read_start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::_internal_mutable_data_read_start_time() {
  
  if (data_read_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    data_read_start_time_ = p;
  }
  return data_read_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::mutable_data_read_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_data_read_start_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_data_read_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_start_time_);
  }
  if (data_read_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_start_time));
    if (message_arena != submessage_arena) {
      data_read_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_read_start_time, submessage_arena);
    }
    
  } else {
    
  }
  data_read_start_time_ = data_read_start_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.data_read_start_time)
}

// .google.protobuf.Timestamp data_read_end_time = 6;
inline bool AcquisitionRunInfo::_internal_has_data_read_end_time() const {
  return this != internal_default_instance() && data_read_end_time_ != nullptr;
}
inline bool AcquisitionRunInfo::has_data_read_end_time() const {
  return _internal_has_data_read_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::_internal_data_read_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = data_read_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::data_read_end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time)
  return _internal_data_read_end_time();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_data_read_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_end_time_);
  }
  data_read_end_time_ = data_read_end_time;
  if (data_read_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::release_data_read_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_read_end_time_;
  data_read_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::unsafe_arena_release_data_read_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = data_read_end_time_;
  data_read_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::_internal_mutable_data_read_end_time() {
  
  if (data_read_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    data_read_end_time_ = p;
  }
  return data_read_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::mutable_data_read_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_data_read_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_data_read_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_read_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_end_time_);
  }
  if (data_read_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_read_end_time));
    if (message_arena != submessage_arena) {
      data_read_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_read_end_time, submessage_arena);
    }
    
  } else {
    
  }
  data_read_end_time_ = data_read_end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.data_read_end_time)
}

// .google.protobuf.Timestamp end_time = 7;
inline bool AcquisitionRunInfo::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool AcquisitionRunInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AcquisitionRunInfo::end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.end_time)
  return _internal_end_time();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_time_ = p;
  }
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AcquisitionRunInfo::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.end_time)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.end_time)
}

// .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 8;
inline bool AcquisitionRunInfo::_internal_has_yield_summary() const {
  return this != internal_default_instance() && yield_summary_ != nullptr;
}
inline bool AcquisitionRunInfo::has_yield_summary() const {
  return _internal_has_yield_summary();
}
inline void AcquisitionRunInfo::clear_yield_summary() {
  if (GetArenaForAllocation() == nullptr && yield_summary_ != nullptr) {
    delete yield_summary_;
  }
  yield_summary_ = nullptr;
}
inline const ::minknow_api::acquisition::AcquisitionYieldSummary& AcquisitionRunInfo::_internal_yield_summary() const {
  const ::minknow_api::acquisition::AcquisitionYieldSummary* p = yield_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::AcquisitionYieldSummary&>(
      ::minknow_api::acquisition::_AcquisitionYieldSummary_default_instance_);
}
inline const ::minknow_api::acquisition::AcquisitionYieldSummary& AcquisitionRunInfo::yield_summary() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.yield_summary)
  return _internal_yield_summary();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_yield_summary(
    ::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield_summary_);
  }
  yield_summary_ = yield_summary;
  if (yield_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.yield_summary)
}
inline ::minknow_api::acquisition::AcquisitionYieldSummary* AcquisitionRunInfo::release_yield_summary() {
  
  ::minknow_api::acquisition::AcquisitionYieldSummary* temp = yield_summary_;
  yield_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionYieldSummary* AcquisitionRunInfo::unsafe_arena_release_yield_summary() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.yield_summary)
  
  ::minknow_api::acquisition::AcquisitionYieldSummary* temp = yield_summary_;
  yield_summary_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionYieldSummary* AcquisitionRunInfo::_internal_mutable_yield_summary() {
  
  if (yield_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::AcquisitionYieldSummary>(GetArenaForAllocation());
    yield_summary_ = p;
  }
  return yield_summary_;
}
inline ::minknow_api::acquisition::AcquisitionYieldSummary* AcquisitionRunInfo::mutable_yield_summary() {
  ::minknow_api::acquisition::AcquisitionYieldSummary* _msg = _internal_mutable_yield_summary();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.yield_summary)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_yield_summary(::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete yield_summary_;
  }
  if (yield_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::AcquisitionYieldSummary>::GetOwningArena(yield_summary);
    if (message_arena != submessage_arena) {
      yield_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_summary, submessage_arena);
    }
    
  } else {
    
  }
  yield_summary_ = yield_summary;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.yield_summary)
}

// .minknow_api.acquisition.AcquisitionConfigSummary config_summary = 9;
inline bool AcquisitionRunInfo::_internal_has_config_summary() const {
  return this != internal_default_instance() && config_summary_ != nullptr;
}
inline bool AcquisitionRunInfo::has_config_summary() const {
  return _internal_has_config_summary();
}
inline void AcquisitionRunInfo::clear_config_summary() {
  if (GetArenaForAllocation() == nullptr && config_summary_ != nullptr) {
    delete config_summary_;
  }
  config_summary_ = nullptr;
}
inline const ::minknow_api::acquisition::AcquisitionConfigSummary& AcquisitionRunInfo::_internal_config_summary() const {
  const ::minknow_api::acquisition::AcquisitionConfigSummary* p = config_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::AcquisitionConfigSummary&>(
      ::minknow_api::acquisition::_AcquisitionConfigSummary_default_instance_);
}
inline const ::minknow_api::acquisition::AcquisitionConfigSummary& AcquisitionRunInfo::config_summary() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.config_summary)
  return _internal_config_summary();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_config_summary(
    ::minknow_api::acquisition::AcquisitionConfigSummary* config_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_summary_);
  }
  config_summary_ = config_summary;
  if (config_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.config_summary)
}
inline ::minknow_api::acquisition::AcquisitionConfigSummary* AcquisitionRunInfo::release_config_summary() {
  
  ::minknow_api::acquisition::AcquisitionConfigSummary* temp = config_summary_;
  config_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionConfigSummary* AcquisitionRunInfo::unsafe_arena_release_config_summary() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.config_summary)
  
  ::minknow_api::acquisition::AcquisitionConfigSummary* temp = config_summary_;
  config_summary_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionConfigSummary* AcquisitionRunInfo::_internal_mutable_config_summary() {
  
  if (config_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::AcquisitionConfigSummary>(GetArenaForAllocation());
    config_summary_ = p;
  }
  return config_summary_;
}
inline ::minknow_api::acquisition::AcquisitionConfigSummary* AcquisitionRunInfo::mutable_config_summary() {
  ::minknow_api::acquisition::AcquisitionConfigSummary* _msg = _internal_mutable_config_summary();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.config_summary)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_config_summary(::minknow_api::acquisition::AcquisitionConfigSummary* config_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_summary_;
  }
  if (config_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::AcquisitionConfigSummary>::GetOwningArena(config_summary);
    if (message_arena != submessage_arena) {
      config_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_summary, submessage_arena);
    }
    
  } else {
    
  }
  config_summary_ = config_summary;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.config_summary)
}

// .minknow_api.acquisition.AcquisitionWriterSummary writer_summary = 11;
inline bool AcquisitionRunInfo::_internal_has_writer_summary() const {
  return this != internal_default_instance() && writer_summary_ != nullptr;
}
inline bool AcquisitionRunInfo::has_writer_summary() const {
  return _internal_has_writer_summary();
}
inline void AcquisitionRunInfo::clear_writer_summary() {
  if (GetArenaForAllocation() == nullptr && writer_summary_ != nullptr) {
    delete writer_summary_;
  }
  writer_summary_ = nullptr;
}
inline const ::minknow_api::acquisition::AcquisitionWriterSummary& AcquisitionRunInfo::_internal_writer_summary() const {
  const ::minknow_api::acquisition::AcquisitionWriterSummary* p = writer_summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::acquisition::AcquisitionWriterSummary&>(
      ::minknow_api::acquisition::_AcquisitionWriterSummary_default_instance_);
}
inline const ::minknow_api::acquisition::AcquisitionWriterSummary& AcquisitionRunInfo::writer_summary() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.AcquisitionRunInfo.writer_summary)
  return _internal_writer_summary();
}
inline void AcquisitionRunInfo::unsafe_arena_set_allocated_writer_summary(
    ::minknow_api::acquisition::AcquisitionWriterSummary* writer_summary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(writer_summary_);
  }
  writer_summary_ = writer_summary;
  if (writer_summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.writer_summary)
}
inline ::minknow_api::acquisition::AcquisitionWriterSummary* AcquisitionRunInfo::release_writer_summary() {
  
  ::minknow_api::acquisition::AcquisitionWriterSummary* temp = writer_summary_;
  writer_summary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionWriterSummary* AcquisitionRunInfo::unsafe_arena_release_writer_summary() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.AcquisitionRunInfo.writer_summary)
  
  ::minknow_api::acquisition::AcquisitionWriterSummary* temp = writer_summary_;
  writer_summary_ = nullptr;
  return temp;
}
inline ::minknow_api::acquisition::AcquisitionWriterSummary* AcquisitionRunInfo::_internal_mutable_writer_summary() {
  
  if (writer_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::acquisition::AcquisitionWriterSummary>(GetArenaForAllocation());
    writer_summary_ = p;
  }
  return writer_summary_;
}
inline ::minknow_api::acquisition::AcquisitionWriterSummary* AcquisitionRunInfo::mutable_writer_summary() {
  ::minknow_api::acquisition::AcquisitionWriterSummary* _msg = _internal_mutable_writer_summary();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.AcquisitionRunInfo.writer_summary)
  return _msg;
}
inline void AcquisitionRunInfo::set_allocated_writer_summary(::minknow_api::acquisition::AcquisitionWriterSummary* writer_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete writer_summary_;
  }
  if (writer_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::acquisition::AcquisitionWriterSummary>::GetOwningArena(writer_summary);
    if (message_arena != submessage_arena) {
      writer_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writer_summary, submessage_arena);
    }
    
  } else {
    
  }
  writer_summary_ = writer_summary;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.AcquisitionRunInfo.writer_summary)
}

// -------------------------------------------------------------------

// ListAcquisitionRunsRequest

// -------------------------------------------------------------------

// ListAcquisitionRunsResponse

// repeated string run_ids = 1;
inline int ListAcquisitionRunsResponse::_internal_run_ids_size() const {
  return run_ids_.size();
}
inline int ListAcquisitionRunsResponse::run_ids_size() const {
  return _internal_run_ids_size();
}
inline void ListAcquisitionRunsResponse::clear_run_ids() {
  run_ids_.Clear();
}
inline std::string* ListAcquisitionRunsResponse::add_run_ids() {
  std::string* _s = _internal_add_run_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
  return _s;
}
inline const std::string& ListAcquisitionRunsResponse::_internal_run_ids(int index) const {
  return run_ids_.Get(index);
}
inline const std::string& ListAcquisitionRunsResponse::run_ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
  return _internal_run_ids(index);
}
inline std::string* ListAcquisitionRunsResponse::mutable_run_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
  return run_ids_.Mutable(index);
}
inline void ListAcquisitionRunsResponse::set_run_ids(int index, const std::string& value) {
  run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::set_run_ids(int index, std::string&& value) {
  run_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::set_run_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::set_run_ids(int index, const char* value, size_t size) {
  run_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline std::string* ListAcquisitionRunsResponse::_internal_add_run_ids() {
  return run_ids_.Add();
}
inline void ListAcquisitionRunsResponse::add_run_ids(const std::string& value) {
  run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::add_run_ids(std::string&& value) {
  run_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::add_run_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline void ListAcquisitionRunsResponse::add_run_ids(const char* value, size_t size) {
  run_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAcquisitionRunsResponse::run_ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
  return run_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAcquisitionRunsResponse::mutable_run_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.acquisition.ListAcquisitionRunsResponse.run_ids)
  return &run_ids_;
}

// -------------------------------------------------------------------

// GetCurrentAcquisitionRunRequest

// -------------------------------------------------------------------

// WatchCurrentAcquisitionRunRequest

// -------------------------------------------------------------------

// SetSignalReaderRequest

// .minknow_api.acquisition.SetSignalReaderRequest.SignalReaderType reader = 1 [(.minknow_api.rpc_required) = true];
inline void SetSignalReaderRequest::clear_reader() {
  reader_ = 0;
}
inline ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::_internal_reader() const {
  return static_cast< ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType >(reader_);
}
inline ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType SetSignalReaderRequest::reader() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.SetSignalReaderRequest.reader)
  return _internal_reader();
}
inline void SetSignalReaderRequest::_internal_set_reader(::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType value) {
  
  reader_ = value;
}
inline void SetSignalReaderRequest::set_reader(::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType value) {
  _internal_set_reader(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.SetSignalReaderRequest.reader)
}

// string hdf_source = 2;
inline void SetSignalReaderRequest::clear_hdf_source() {
  hdf_source_.ClearToEmpty();
}
inline const std::string& SetSignalReaderRequest::hdf_source() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.SetSignalReaderRequest.hdf_source)
  return _internal_hdf_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetSignalReaderRequest::set_hdf_source(ArgT0&& arg0, ArgT... args) {
 
 hdf_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.SetSignalReaderRequest.hdf_source)
}
inline std::string* SetSignalReaderRequest::mutable_hdf_source() {
  std::string* _s = _internal_mutable_hdf_source();
  // @@protoc_insertion_point(field_mutable:minknow_api.acquisition.SetSignalReaderRequest.hdf_source)
  return _s;
}
inline const std::string& SetSignalReaderRequest::_internal_hdf_source() const {
  return hdf_source_.Get();
}
inline void SetSignalReaderRequest::_internal_set_hdf_source(const std::string& value) {
  
  hdf_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetSignalReaderRequest::_internal_mutable_hdf_source() {
  
  return hdf_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetSignalReaderRequest::release_hdf_source() {
  // @@protoc_insertion_point(field_release:minknow_api.acquisition.SetSignalReaderRequest.hdf_source)
  return hdf_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetSignalReaderRequest::set_allocated_hdf_source(std::string* hdf_source) {
  if (hdf_source != nullptr) {
    
  } else {
    
  }
  hdf_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdf_source,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.acquisition.SetSignalReaderRequest.hdf_source)
}

// .minknow_api.acquisition.SetSignalReaderRequest.SourceFileMode hdf_mode = 3;
inline void SetSignalReaderRequest::clear_hdf_mode() {
  hdf_mode_ = 0;
}
inline ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::_internal_hdf_mode() const {
  return static_cast< ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode >(hdf_mode_);
}
inline ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode SetSignalReaderRequest::hdf_mode() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.SetSignalReaderRequest.hdf_mode)
  return _internal_hdf_mode();
}
inline void SetSignalReaderRequest::_internal_set_hdf_mode(::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode value) {
  
  hdf_mode_ = value;
}
inline void SetSignalReaderRequest::set_hdf_mode(::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode value) {
  _internal_set_hdf_mode(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.SetSignalReaderRequest.hdf_mode)
}

// float sample_rate_scale_factor = 4;
inline void SetSignalReaderRequest::clear_sample_rate_scale_factor() {
  sample_rate_scale_factor_ = 0;
}
inline float SetSignalReaderRequest::_internal_sample_rate_scale_factor() const {
  return sample_rate_scale_factor_;
}
inline float SetSignalReaderRequest::sample_rate_scale_factor() const {
  // @@protoc_insertion_point(field_get:minknow_api.acquisition.SetSignalReaderRequest.sample_rate_scale_factor)
  return _internal_sample_rate_scale_factor();
}
inline void SetSignalReaderRequest::_internal_set_sample_rate_scale_factor(float value) {
  
  sample_rate_scale_factor_ = value;
}
inline void SetSignalReaderRequest::set_sample_rate_scale_factor(float value) {
  _internal_set_sample_rate_scale_factor(value);
  // @@protoc_insertion_point(field_set:minknow_api.acquisition.SetSignalReaderRequest.sample_rate_scale_factor)
}

// -------------------------------------------------------------------

// SetSignalReaderResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace acquisition
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::acquisition::StopRequest_DataAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::StopRequest_DataAction>() {
  return ::minknow_api::acquisition::StopRequest_DataAction_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType>() {
  return ::minknow_api::acquisition::SetSignalReaderRequest_SignalReaderType_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode>() {
  return ::minknow_api::acquisition::SetSignalReaderRequest_SourceFileMode_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::MinknowStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::MinknowStatus>() {
  return ::minknow_api::acquisition::MinknowStatus_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::Option> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::Option>() {
  return ::minknow_api::acquisition::Option_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::Purpose> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::Purpose>() {
  return ::minknow_api::acquisition::Purpose_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::AcquisitionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::AcquisitionState>() {
  return ::minknow_api::acquisition::AcquisitionState_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::AcquisitionStopReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::AcquisitionStopReason>() {
  return ::minknow_api::acquisition::AcquisitionStopReason_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::StartupState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::StartupState>() {
  return ::minknow_api::acquisition::StartupState_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::acquisition::FinishingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::acquisition::FinishingState>() {
  return ::minknow_api::acquisition::FinishingState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2facquisition_2eproto
