// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "minknow_api/rpc_options.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[62]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fdevice_2eproto;
namespace minknow_api {
namespace device {
class CancelUnblocksRequest;
struct CancelUnblocksRequestDefaultTypeInternal;
extern CancelUnblocksRequestDefaultTypeInternal _CancelUnblocksRequest_default_instance_;
class CancelUnblocksResponse;
struct CancelUnblocksResponseDefaultTypeInternal;
extern CancelUnblocksResponseDefaultTypeInternal _CancelUnblocksResponse_default_instance_;
class ChannelConfiguration;
struct ChannelConfigurationDefaultTypeInternal;
extern ChannelConfigurationDefaultTypeInternal _ChannelConfiguration_default_instance_;
class ChannelRecord;
struct ChannelRecordDefaultTypeInternal;
extern ChannelRecordDefaultTypeInternal _ChannelRecord_default_instance_;
class ChannelRecord_MuxRecord;
struct ChannelRecord_MuxRecordDefaultTypeInternal;
extern ChannelRecord_MuxRecordDefaultTypeInternal _ChannelRecord_MuxRecord_default_instance_;
class ClearCalibrationRequest;
struct ClearCalibrationRequestDefaultTypeInternal;
extern ClearCalibrationRequestDefaultTypeInternal _ClearCalibrationRequest_default_instance_;
class ClearCalibrationResponse;
struct ClearCalibrationResponseDefaultTypeInternal;
extern ClearCalibrationResponseDefaultTypeInternal _ClearCalibrationResponse_default_instance_;
class GetBiasVoltageRequest;
struct GetBiasVoltageRequestDefaultTypeInternal;
extern GetBiasVoltageRequestDefaultTypeInternal _GetBiasVoltageRequest_default_instance_;
class GetBiasVoltageResponse;
struct GetBiasVoltageResponseDefaultTypeInternal;
extern GetBiasVoltageResponseDefaultTypeInternal _GetBiasVoltageResponse_default_instance_;
class GetCalibrationRequest;
struct GetCalibrationRequestDefaultTypeInternal;
extern GetCalibrationRequestDefaultTypeInternal _GetCalibrationRequest_default_instance_;
class GetCalibrationResponse;
struct GetCalibrationResponseDefaultTypeInternal;
extern GetCalibrationResponseDefaultTypeInternal _GetCalibrationResponse_default_instance_;
class GetChannelConfigurationRequest;
struct GetChannelConfigurationRequestDefaultTypeInternal;
extern GetChannelConfigurationRequestDefaultTypeInternal _GetChannelConfigurationRequest_default_instance_;
class GetChannelConfigurationResponse;
struct GetChannelConfigurationResponseDefaultTypeInternal;
extern GetChannelConfigurationResponseDefaultTypeInternal _GetChannelConfigurationResponse_default_instance_;
class GetChannelsLayoutRequest;
struct GetChannelsLayoutRequestDefaultTypeInternal;
extern GetChannelsLayoutRequestDefaultTypeInternal _GetChannelsLayoutRequest_default_instance_;
class GetChannelsLayoutResponse;
struct GetChannelsLayoutResponseDefaultTypeInternal;
extern GetChannelsLayoutResponseDefaultTypeInternal _GetChannelsLayoutResponse_default_instance_;
class GetDeviceInfoRequest;
struct GetDeviceInfoRequestDefaultTypeInternal;
extern GetDeviceInfoRequestDefaultTypeInternal _GetDeviceInfoRequest_default_instance_;
class GetDeviceInfoResponse;
struct GetDeviceInfoResponseDefaultTypeInternal;
extern GetDeviceInfoResponseDefaultTypeInternal _GetDeviceInfoResponse_default_instance_;
class GetDeviceInfoResponse_ComponentVersion;
struct GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal;
extern GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal _GetDeviceInfoResponse_ComponentVersion_default_instance_;
class GetDeviceStateRequest;
struct GetDeviceStateRequestDefaultTypeInternal;
extern GetDeviceStateRequestDefaultTypeInternal _GetDeviceStateRequest_default_instance_;
class GetDeviceStateResponse;
struct GetDeviceStateResponseDefaultTypeInternal;
extern GetDeviceStateResponseDefaultTypeInternal _GetDeviceStateResponse_default_instance_;
class GetFlowCellInfoRequest;
struct GetFlowCellInfoRequestDefaultTypeInternal;
extern GetFlowCellInfoRequestDefaultTypeInternal _GetFlowCellInfoRequest_default_instance_;
class GetFlowCellInfoResponse;
struct GetFlowCellInfoResponseDefaultTypeInternal;
extern GetFlowCellInfoResponseDefaultTypeInternal _GetFlowCellInfoResponse_default_instance_;
class GetSampleRateRequest;
struct GetSampleRateRequestDefaultTypeInternal;
extern GetSampleRateRequestDefaultTypeInternal _GetSampleRateRequest_default_instance_;
class GetSampleRateResponse;
struct GetSampleRateResponseDefaultTypeInternal;
extern GetSampleRateResponseDefaultTypeInternal _GetSampleRateResponse_default_instance_;
class GetSaturationConfigRequest;
struct GetSaturationConfigRequestDefaultTypeInternal;
extern GetSaturationConfigRequestDefaultTypeInternal _GetSaturationConfigRequest_default_instance_;
class GetSaturationConfigResponse;
struct GetSaturationConfigResponseDefaultTypeInternal;
extern GetSaturationConfigResponseDefaultTypeInternal _GetSaturationConfigResponse_default_instance_;
class GetTemperatureRequest;
struct GetTemperatureRequestDefaultTypeInternal;
extern GetTemperatureRequestDefaultTypeInternal _GetTemperatureRequest_default_instance_;
class GetTemperatureResponse;
struct GetTemperatureResponseDefaultTypeInternal;
extern GetTemperatureResponseDefaultTypeInternal _GetTemperatureResponse_default_instance_;
class GetTemperatureResponse_MinIONTemperature;
struct GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal;
extern GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal _GetTemperatureResponse_MinIONTemperature_default_instance_;
class GetTemperatureResponse_PromethIONTemperature;
struct GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal;
extern GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal _GetTemperatureResponse_PromethIONTemperature_default_instance_;
class ResetDeviceSettingsRequest;
struct ResetDeviceSettingsRequestDefaultTypeInternal;
extern ResetDeviceSettingsRequestDefaultTypeInternal _ResetDeviceSettingsRequest_default_instance_;
class ResetDeviceSettingsResponse;
struct ResetDeviceSettingsResponseDefaultTypeInternal;
extern ResetDeviceSettingsResponseDefaultTypeInternal _ResetDeviceSettingsResponse_default_instance_;
class ReturnedChannelConfiguration;
struct ReturnedChannelConfigurationDefaultTypeInternal;
extern ReturnedChannelConfigurationDefaultTypeInternal _ReturnedChannelConfiguration_default_instance_;
class SaturationConfig;
struct SaturationConfigDefaultTypeInternal;
extern SaturationConfigDefaultTypeInternal _SaturationConfig_default_instance_;
class SaturationConfig_SoftwareSaturation;
struct SaturationConfig_SoftwareSaturationDefaultTypeInternal;
extern SaturationConfig_SoftwareSaturationDefaultTypeInternal _SaturationConfig_SoftwareSaturation_default_instance_;
class SaturationConfig_Thresholds;
struct SaturationConfig_ThresholdsDefaultTypeInternal;
extern SaturationConfig_ThresholdsDefaultTypeInternal _SaturationConfig_Thresholds_default_instance_;
class SaturationConfig_UserThresholdSaturation;
struct SaturationConfig_UserThresholdSaturationDefaultTypeInternal;
extern SaturationConfig_UserThresholdSaturationDefaultTypeInternal _SaturationConfig_UserThresholdSaturation_default_instance_;
class SetBiasVoltageRequest;
struct SetBiasVoltageRequestDefaultTypeInternal;
extern SetBiasVoltageRequestDefaultTypeInternal _SetBiasVoltageRequest_default_instance_;
class SetBiasVoltageResponse;
struct SetBiasVoltageResponseDefaultTypeInternal;
extern SetBiasVoltageResponseDefaultTypeInternal _SetBiasVoltageResponse_default_instance_;
class SetCalibrationRequest;
struct SetCalibrationRequestDefaultTypeInternal;
extern SetCalibrationRequestDefaultTypeInternal _SetCalibrationRequest_default_instance_;
class SetCalibrationResponse;
struct SetCalibrationResponseDefaultTypeInternal;
extern SetCalibrationResponseDefaultTypeInternal _SetCalibrationResponse_default_instance_;
class SetChannelConfigurationAllRequest;
struct SetChannelConfigurationAllRequestDefaultTypeInternal;
extern SetChannelConfigurationAllRequestDefaultTypeInternal _SetChannelConfigurationAllRequest_default_instance_;
class SetChannelConfigurationAllResponse;
struct SetChannelConfigurationAllResponseDefaultTypeInternal;
extern SetChannelConfigurationAllResponseDefaultTypeInternal _SetChannelConfigurationAllResponse_default_instance_;
class SetChannelConfigurationRequest;
struct SetChannelConfigurationRequestDefaultTypeInternal;
extern SetChannelConfigurationRequestDefaultTypeInternal _SetChannelConfigurationRequest_default_instance_;
class SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse;
struct SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal;
extern SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal _SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse_default_instance_;
class SetChannelConfigurationResponse;
struct SetChannelConfigurationResponseDefaultTypeInternal;
extern SetChannelConfigurationResponseDefaultTypeInternal _SetChannelConfigurationResponse_default_instance_;
class SetSampleRateRequest;
struct SetSampleRateRequestDefaultTypeInternal;
extern SetSampleRateRequestDefaultTypeInternal _SetSampleRateRequest_default_instance_;
class SetSampleRateResponse;
struct SetSampleRateResponseDefaultTypeInternal;
extern SetSampleRateResponseDefaultTypeInternal _SetSampleRateResponse_default_instance_;
class SetSaturationConfigRequest;
struct SetSaturationConfigRequestDefaultTypeInternal;
extern SetSaturationConfigRequestDefaultTypeInternal _SetSaturationConfigRequest_default_instance_;
class SetSaturationConfigResponse;
struct SetSaturationConfigResponseDefaultTypeInternal;
extern SetSaturationConfigResponseDefaultTypeInternal _SetSaturationConfigResponse_default_instance_;
class SetTemperatureRequest;
struct SetTemperatureRequestDefaultTypeInternal;
extern SetTemperatureRequestDefaultTypeInternal _SetTemperatureRequest_default_instance_;
class SetTemperatureRequest_WaitForTemperatureSettings;
struct SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal;
extern SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal _SetTemperatureRequest_WaitForTemperatureSettings_default_instance_;
class SetTemperatureResponse;
struct SetTemperatureResponseDefaultTypeInternal;
extern SetTemperatureResponseDefaultTypeInternal _SetTemperatureResponse_default_instance_;
class SetUserSpecifiedFlowCellIdRequest;
struct SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal;
extern SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal _SetUserSpecifiedFlowCellIdRequest_default_instance_;
class SetUserSpecifiedFlowCellIdResponse;
struct SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal;
extern SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal _SetUserSpecifiedFlowCellIdResponse_default_instance_;
class SetUserSpecifiedProductCodeRequest;
struct SetUserSpecifiedProductCodeRequestDefaultTypeInternal;
extern SetUserSpecifiedProductCodeRequestDefaultTypeInternal _SetUserSpecifiedProductCodeRequest_default_instance_;
class SetUserSpecifiedProductCodeResponse;
struct SetUserSpecifiedProductCodeResponseDefaultTypeInternal;
extern SetUserSpecifiedProductCodeResponseDefaultTypeInternal _SetUserSpecifiedProductCodeResponse_default_instance_;
class StreamDeviceStateRequest;
struct StreamDeviceStateRequestDefaultTypeInternal;
extern StreamDeviceStateRequestDefaultTypeInternal _StreamDeviceStateRequest_default_instance_;
class StreamFlowCellInfoRequest;
struct StreamFlowCellInfoRequestDefaultTypeInternal;
extern StreamFlowCellInfoRequestDefaultTypeInternal _StreamFlowCellInfoRequest_default_instance_;
class StreamTemperatureRequest;
struct StreamTemperatureRequestDefaultTypeInternal;
extern StreamTemperatureRequestDefaultTypeInternal _StreamTemperatureRequest_default_instance_;
class UnblockRequest;
struct UnblockRequestDefaultTypeInternal;
extern UnblockRequestDefaultTypeInternal _UnblockRequest_default_instance_;
class UnblockResponse;
struct UnblockResponseDefaultTypeInternal;
extern UnblockResponseDefaultTypeInternal _UnblockResponse_default_instance_;
}  // namespace device
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::device::CancelUnblocksRequest* Arena::CreateMaybeMessage<::minknow_api::device::CancelUnblocksRequest>(Arena*);
template<> ::minknow_api::device::CancelUnblocksResponse* Arena::CreateMaybeMessage<::minknow_api::device::CancelUnblocksResponse>(Arena*);
template<> ::minknow_api::device::ChannelConfiguration* Arena::CreateMaybeMessage<::minknow_api::device::ChannelConfiguration>(Arena*);
template<> ::minknow_api::device::ChannelRecord* Arena::CreateMaybeMessage<::minknow_api::device::ChannelRecord>(Arena*);
template<> ::minknow_api::device::ChannelRecord_MuxRecord* Arena::CreateMaybeMessage<::minknow_api::device::ChannelRecord_MuxRecord>(Arena*);
template<> ::minknow_api::device::ClearCalibrationRequest* Arena::CreateMaybeMessage<::minknow_api::device::ClearCalibrationRequest>(Arena*);
template<> ::minknow_api::device::ClearCalibrationResponse* Arena::CreateMaybeMessage<::minknow_api::device::ClearCalibrationResponse>(Arena*);
template<> ::minknow_api::device::GetBiasVoltageRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetBiasVoltageRequest>(Arena*);
template<> ::minknow_api::device::GetBiasVoltageResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetBiasVoltageResponse>(Arena*);
template<> ::minknow_api::device::GetCalibrationRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetCalibrationRequest>(Arena*);
template<> ::minknow_api::device::GetCalibrationResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetCalibrationResponse>(Arena*);
template<> ::minknow_api::device::GetChannelConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetChannelConfigurationRequest>(Arena*);
template<> ::minknow_api::device::GetChannelConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetChannelConfigurationResponse>(Arena*);
template<> ::minknow_api::device::GetChannelsLayoutRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetChannelsLayoutRequest>(Arena*);
template<> ::minknow_api::device::GetChannelsLayoutResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetChannelsLayoutResponse>(Arena*);
template<> ::minknow_api::device::GetDeviceInfoRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetDeviceInfoRequest>(Arena*);
template<> ::minknow_api::device::GetDeviceInfoResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetDeviceInfoResponse>(Arena*);
template<> ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* Arena::CreateMaybeMessage<::minknow_api::device::GetDeviceInfoResponse_ComponentVersion>(Arena*);
template<> ::minknow_api::device::GetDeviceStateRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetDeviceStateRequest>(Arena*);
template<> ::minknow_api::device::GetDeviceStateResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetDeviceStateResponse>(Arena*);
template<> ::minknow_api::device::GetFlowCellInfoRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetFlowCellInfoRequest>(Arena*);
template<> ::minknow_api::device::GetFlowCellInfoResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetFlowCellInfoResponse>(Arena*);
template<> ::minknow_api::device::GetSampleRateRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetSampleRateRequest>(Arena*);
template<> ::minknow_api::device::GetSampleRateResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetSampleRateResponse>(Arena*);
template<> ::minknow_api::device::GetSaturationConfigRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetSaturationConfigRequest>(Arena*);
template<> ::minknow_api::device::GetSaturationConfigResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetSaturationConfigResponse>(Arena*);
template<> ::minknow_api::device::GetTemperatureRequest* Arena::CreateMaybeMessage<::minknow_api::device::GetTemperatureRequest>(Arena*);
template<> ::minknow_api::device::GetTemperatureResponse* Arena::CreateMaybeMessage<::minknow_api::device::GetTemperatureResponse>(Arena*);
template<> ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* Arena::CreateMaybeMessage<::minknow_api::device::GetTemperatureResponse_MinIONTemperature>(Arena*);
template<> ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* Arena::CreateMaybeMessage<::minknow_api::device::GetTemperatureResponse_PromethIONTemperature>(Arena*);
template<> ::minknow_api::device::ResetDeviceSettingsRequest* Arena::CreateMaybeMessage<::minknow_api::device::ResetDeviceSettingsRequest>(Arena*);
template<> ::minknow_api::device::ResetDeviceSettingsResponse* Arena::CreateMaybeMessage<::minknow_api::device::ResetDeviceSettingsResponse>(Arena*);
template<> ::minknow_api::device::ReturnedChannelConfiguration* Arena::CreateMaybeMessage<::minknow_api::device::ReturnedChannelConfiguration>(Arena*);
template<> ::minknow_api::device::SaturationConfig* Arena::CreateMaybeMessage<::minknow_api::device::SaturationConfig>(Arena*);
template<> ::minknow_api::device::SaturationConfig_SoftwareSaturation* Arena::CreateMaybeMessage<::minknow_api::device::SaturationConfig_SoftwareSaturation>(Arena*);
template<> ::minknow_api::device::SaturationConfig_Thresholds* Arena::CreateMaybeMessage<::minknow_api::device::SaturationConfig_Thresholds>(Arena*);
template<> ::minknow_api::device::SaturationConfig_UserThresholdSaturation* Arena::CreateMaybeMessage<::minknow_api::device::SaturationConfig_UserThresholdSaturation>(Arena*);
template<> ::minknow_api::device::SetBiasVoltageRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetBiasVoltageRequest>(Arena*);
template<> ::minknow_api::device::SetBiasVoltageResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetBiasVoltageResponse>(Arena*);
template<> ::minknow_api::device::SetCalibrationRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetCalibrationRequest>(Arena*);
template<> ::minknow_api::device::SetCalibrationResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetCalibrationResponse>(Arena*);
template<> ::minknow_api::device::SetChannelConfigurationAllRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetChannelConfigurationAllRequest>(Arena*);
template<> ::minknow_api::device::SetChannelConfigurationAllResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetChannelConfigurationAllResponse>(Arena*);
template<> ::minknow_api::device::SetChannelConfigurationRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetChannelConfigurationRequest>(Arena*);
template<> ::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse>(Arena*);
template<> ::minknow_api::device::SetChannelConfigurationResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetChannelConfigurationResponse>(Arena*);
template<> ::minknow_api::device::SetSampleRateRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetSampleRateRequest>(Arena*);
template<> ::minknow_api::device::SetSampleRateResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetSampleRateResponse>(Arena*);
template<> ::minknow_api::device::SetSaturationConfigRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetSaturationConfigRequest>(Arena*);
template<> ::minknow_api::device::SetSaturationConfigResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetSaturationConfigResponse>(Arena*);
template<> ::minknow_api::device::SetTemperatureRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetTemperatureRequest>(Arena*);
template<> ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* Arena::CreateMaybeMessage<::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings>(Arena*);
template<> ::minknow_api::device::SetTemperatureResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetTemperatureResponse>(Arena*);
template<> ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetUserSpecifiedFlowCellIdRequest>(Arena*);
template<> ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetUserSpecifiedFlowCellIdResponse>(Arena*);
template<> ::minknow_api::device::SetUserSpecifiedProductCodeRequest* Arena::CreateMaybeMessage<::minknow_api::device::SetUserSpecifiedProductCodeRequest>(Arena*);
template<> ::minknow_api::device::SetUserSpecifiedProductCodeResponse* Arena::CreateMaybeMessage<::minknow_api::device::SetUserSpecifiedProductCodeResponse>(Arena*);
template<> ::minknow_api::device::StreamDeviceStateRequest* Arena::CreateMaybeMessage<::minknow_api::device::StreamDeviceStateRequest>(Arena*);
template<> ::minknow_api::device::StreamFlowCellInfoRequest* Arena::CreateMaybeMessage<::minknow_api::device::StreamFlowCellInfoRequest>(Arena*);
template<> ::minknow_api::device::StreamTemperatureRequest* Arena::CreateMaybeMessage<::minknow_api::device::StreamTemperatureRequest>(Arena*);
template<> ::minknow_api::device::UnblockRequest* Arena::CreateMaybeMessage<::minknow_api::device::UnblockRequest>(Arena*);
template<> ::minknow_api::device::UnblockResponse* Arena::CreateMaybeMessage<::minknow_api::device::UnblockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace device {

enum GetDeviceInfoResponse_DeviceType : int {
  GetDeviceInfoResponse_DeviceType_MINION = 0,
  GetDeviceInfoResponse_DeviceType_GRIDION = 2,
  GetDeviceInfoResponse_DeviceType_PROMETHION = 3,
  GetDeviceInfoResponse_DeviceType_MINION_MK1C = 4,
  GetDeviceInfoResponse_DeviceType_TRAXION = 5,
  GetDeviceInfoResponse_DeviceType_GetDeviceInfoResponse_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetDeviceInfoResponse_DeviceType_GetDeviceInfoResponse_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetDeviceInfoResponse_DeviceType_IsValid(int value);
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse_DeviceType_DeviceType_MIN = GetDeviceInfoResponse_DeviceType_MINION;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse_DeviceType_DeviceType_MAX = GetDeviceInfoResponse_DeviceType_TRAXION;
constexpr int GetDeviceInfoResponse_DeviceType_DeviceType_ARRAYSIZE = GetDeviceInfoResponse_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDeviceInfoResponse_DeviceType_descriptor();
template<typename T>
inline const std::string& GetDeviceInfoResponse_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetDeviceInfoResponse_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetDeviceInfoResponse_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetDeviceInfoResponse_DeviceType_descriptor(), enum_t_value);
}
inline bool GetDeviceInfoResponse_DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetDeviceInfoResponse_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetDeviceInfoResponse_DeviceType>(
    GetDeviceInfoResponse_DeviceType_descriptor(), name, value);
}
enum GetDeviceStateResponse_DeviceState : int {
  GetDeviceStateResponse_DeviceState_DEVICE_DISCONNECTED = 0,
  GetDeviceStateResponse_DeviceState_DEVICE_READY = 1,
  GetDeviceStateResponse_DeviceState_GetDeviceStateResponse_DeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetDeviceStateResponse_DeviceState_GetDeviceStateResponse_DeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetDeviceStateResponse_DeviceState_IsValid(int value);
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse_DeviceState_DeviceState_MIN = GetDeviceStateResponse_DeviceState_DEVICE_DISCONNECTED;
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse_DeviceState_DeviceState_MAX = GetDeviceStateResponse_DeviceState_DEVICE_READY;
constexpr int GetDeviceStateResponse_DeviceState_DeviceState_ARRAYSIZE = GetDeviceStateResponse_DeviceState_DeviceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDeviceStateResponse_DeviceState_descriptor();
template<typename T>
inline const std::string& GetDeviceStateResponse_DeviceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetDeviceStateResponse_DeviceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetDeviceStateResponse_DeviceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetDeviceStateResponse_DeviceState_descriptor(), enum_t_value);
}
inline bool GetDeviceStateResponse_DeviceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetDeviceStateResponse_DeviceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetDeviceStateResponse_DeviceState>(
    GetDeviceStateResponse_DeviceState_descriptor(), name, value);
}
enum FlowCellConnectorType : int {
  FCCON_NOT_SET = 0,
  FCCON_PROMETHION = 1,
  FCCON_MINION_MK1 = 2,
  FCCON_FLONGLE = 3,
  FlowCellConnectorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlowCellConnectorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlowCellConnectorType_IsValid(int value);
constexpr FlowCellConnectorType FlowCellConnectorType_MIN = FCCON_NOT_SET;
constexpr FlowCellConnectorType FlowCellConnectorType_MAX = FCCON_FLONGLE;
constexpr int FlowCellConnectorType_ARRAYSIZE = FlowCellConnectorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowCellConnectorType_descriptor();
template<typename T>
inline const std::string& FlowCellConnectorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowCellConnectorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowCellConnectorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowCellConnectorType_descriptor(), enum_t_value);
}
inline bool FlowCellConnectorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowCellConnectorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowCellConnectorType>(
    FlowCellConnectorType_descriptor(), name, value);
}
enum SelectedWell : int {
  WELL_NONE = 0,
  WELL_1 = 1,
  WELL_2 = 2,
  WELL_3 = 3,
  WELL_4 = 4,
  WELL_OTHER = 5,
  SelectedWell_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelectedWell_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelectedWell_IsValid(int value);
constexpr SelectedWell SelectedWell_MIN = WELL_NONE;
constexpr SelectedWell SelectedWell_MAX = WELL_OTHER;
constexpr int SelectedWell_ARRAYSIZE = SelectedWell_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectedWell_descriptor();
template<typename T>
inline const std::string& SelectedWell_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectedWell>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectedWell_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectedWell_descriptor(), enum_t_value);
}
inline bool SelectedWell_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectedWell* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectedWell>(
    SelectedWell_descriptor(), name, value);
}
// ===================================================================

class ChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.ChannelConfiguration) */ {
 public:
  inline ChannelConfiguration() : ChannelConfiguration(nullptr) {}
  ~ChannelConfiguration() override;
  explicit constexpr ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelConfiguration(const ChannelConfiguration& from);
  ChannelConfiguration(ChannelConfiguration&& from) noexcept
    : ChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline ChannelConfiguration& operator=(const ChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelConfiguration& operator=(ChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const ChannelConfiguration*>(
               &_ChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelConfiguration& a, ChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelConfiguration* New() const final {
    return new ChannelConfiguration();
  }

  ChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ChannelConfiguration";
  }
  protected:
  explicit ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWellFieldNumber = 1,
    kTestCurrentFieldNumber = 2,
  };
  // uint32 well = 1;
  void clear_well();
  ::PROTOBUF_NAMESPACE_ID::uint32 well() const;
  void set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_well() const;
  void _internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool test_current = 2;
  void clear_test_current();
  bool test_current() const;
  void set_test_current(bool value);
  private:
  bool _internal_test_current() const;
  void _internal_set_test_current(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.ChannelConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 well_;
  bool test_current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ReturnedChannelConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.ReturnedChannelConfiguration) */ {
 public:
  inline ReturnedChannelConfiguration() : ReturnedChannelConfiguration(nullptr) {}
  ~ReturnedChannelConfiguration() override;
  explicit constexpr ReturnedChannelConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnedChannelConfiguration(const ReturnedChannelConfiguration& from);
  ReturnedChannelConfiguration(ReturnedChannelConfiguration&& from) noexcept
    : ReturnedChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline ReturnedChannelConfiguration& operator=(const ReturnedChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnedChannelConfiguration& operator=(ReturnedChannelConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnedChannelConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnedChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const ReturnedChannelConfiguration*>(
               &_ReturnedChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReturnedChannelConfiguration& a, ReturnedChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnedChannelConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnedChannelConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnedChannelConfiguration* New() const final {
    return new ReturnedChannelConfiguration();
  }

  ReturnedChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnedChannelConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnedChannelConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReturnedChannelConfiguration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnedChannelConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ReturnedChannelConfiguration";
  }
  protected:
  explicit ReturnedChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWellFieldNumber = 1,
    kTestCurrentFieldNumber = 2,
    kUnblockFieldNumber = 4,
  };
  // uint32 well = 1;
  void clear_well();
  ::PROTOBUF_NAMESPACE_ID::uint32 well() const;
  void set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_well() const;
  void _internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool test_current = 2;
  void clear_test_current();
  bool test_current() const;
  void set_test_current(bool value);
  private:
  bool _internal_test_current() const;
  void _internal_set_test_current(bool value);
  public:

  // bool unblock = 4;
  void clear_unblock();
  bool unblock() const;
  void set_unblock(bool value);
  private:
  bool _internal_unblock() const;
  void _internal_set_unblock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.ReturnedChannelConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 well_;
  bool test_current_;
  bool unblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetDeviceInfoRequest) */ {
 public:
  inline GetDeviceInfoRequest() : GetDeviceInfoRequest(nullptr) {}
  explicit constexpr GetDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceInfoRequest(const GetDeviceInfoRequest& from);
  GetDeviceInfoRequest(GetDeviceInfoRequest&& from) noexcept
    : GetDeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceInfoRequest& operator=(const GetDeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceInfoRequest& operator=(GetDeviceInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceInfoRequest*>(
               &_GetDeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDeviceInfoRequest& a, GetDeviceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceInfoRequest* New() const final {
    return new GetDeviceInfoRequest();
  }

  GetDeviceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDeviceInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDeviceInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetDeviceInfoRequest";
  }
  protected:
  explicit GetDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetDeviceInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceInfoResponse_ComponentVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetDeviceInfoResponse.ComponentVersion) */ {
 public:
  inline GetDeviceInfoResponse_ComponentVersion() : GetDeviceInfoResponse_ComponentVersion(nullptr) {}
  ~GetDeviceInfoResponse_ComponentVersion() override;
  explicit constexpr GetDeviceInfoResponse_ComponentVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceInfoResponse_ComponentVersion(const GetDeviceInfoResponse_ComponentVersion& from);
  GetDeviceInfoResponse_ComponentVersion(GetDeviceInfoResponse_ComponentVersion&& from) noexcept
    : GetDeviceInfoResponse_ComponentVersion() {
    *this = ::std::move(from);
  }

  inline GetDeviceInfoResponse_ComponentVersion& operator=(const GetDeviceInfoResponse_ComponentVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceInfoResponse_ComponentVersion& operator=(GetDeviceInfoResponse_ComponentVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceInfoResponse_ComponentVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceInfoResponse_ComponentVersion* internal_default_instance() {
    return reinterpret_cast<const GetDeviceInfoResponse_ComponentVersion*>(
               &_GetDeviceInfoResponse_ComponentVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDeviceInfoResponse_ComponentVersion& a, GetDeviceInfoResponse_ComponentVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceInfoResponse_ComponentVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceInfoResponse_ComponentVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceInfoResponse_ComponentVersion* New() const final {
    return new GetDeviceInfoResponse_ComponentVersion();
  }

  GetDeviceInfoResponse_ComponentVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceInfoResponse_ComponentVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceInfoResponse_ComponentVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceInfoResponse_ComponentVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceInfoResponse_ComponentVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetDeviceInfoResponse.ComponentVersion";
  }
  protected:
  explicit GetDeviceInfoResponse_ComponentVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialNumberFieldNumber = 3,
  };
  // string component = 1;
  void clear_component();
  const std::string& component() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component();
  PROTOBUF_MUST_USE_RESULT std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string serial_number = 3;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_MUST_USE_RESULT std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetDeviceInfoResponse) */ {
 public:
  inline GetDeviceInfoResponse() : GetDeviceInfoResponse(nullptr) {}
  ~GetDeviceInfoResponse() override;
  explicit constexpr GetDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceInfoResponse(const GetDeviceInfoResponse& from);
  GetDeviceInfoResponse(GetDeviceInfoResponse&& from) noexcept
    : GetDeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceInfoResponse& operator=(const GetDeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceInfoResponse& operator=(GetDeviceInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceInfoResponse*>(
               &_GetDeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDeviceInfoResponse& a, GetDeviceInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceInfoResponse* New() const final {
    return new GetDeviceInfoResponse();
  }

  GetDeviceInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetDeviceInfoResponse";
  }
  protected:
  explicit GetDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetDeviceInfoResponse_ComponentVersion ComponentVersion;

  typedef GetDeviceInfoResponse_DeviceType DeviceType;
  static constexpr DeviceType MINION =
    GetDeviceInfoResponse_DeviceType_MINION;
  static constexpr DeviceType GRIDION =
    GetDeviceInfoResponse_DeviceType_GRIDION;
  static constexpr DeviceType PROMETHION =
    GetDeviceInfoResponse_DeviceType_PROMETHION;
  static constexpr DeviceType MINION_MK1C =
    GetDeviceInfoResponse_DeviceType_MINION_MK1C;
  static constexpr DeviceType TRAXION =
    GetDeviceInfoResponse_DeviceType_TRAXION;
  static inline bool DeviceType_IsValid(int value) {
    return GetDeviceInfoResponse_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    GetDeviceInfoResponse_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    GetDeviceInfoResponse_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    GetDeviceInfoResponse_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return GetDeviceInfoResponse_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return GetDeviceInfoResponse_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceType* value) {
    return GetDeviceInfoResponse_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareVersionFieldNumber = 10,
    kDeviceIdFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kMaxChannelCountFieldNumber = 4,
    kIsSimulatedFieldNumber = 3,
    kCanSetTemperatureFieldNumber = 6,
    kMaxWellsPerChannelFieldNumber = 5,
    kDigitisationFieldNumber = 7,
  };
  // repeated .minknow_api.device.GetDeviceInfoResponse.ComponentVersion firmware_version = 10;
  int firmware_version_size() const;
  private:
  int _internal_firmware_version_size() const;
  public:
  void clear_firmware_version();
  ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* mutable_firmware_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >*
      mutable_firmware_version();
  private:
  const ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion& _internal_firmware_version(int index) const;
  ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* _internal_add_firmware_version();
  public:
  const ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion& firmware_version(int index) const;
  ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* add_firmware_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >&
      firmware_version() const;

  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 2;
  void clear_device_type();
  ::minknow_api::device::GetDeviceInfoResponse_DeviceType device_type() const;
  void set_device_type(::minknow_api::device::GetDeviceInfoResponse_DeviceType value);
  private:
  ::minknow_api::device::GetDeviceInfoResponse_DeviceType _internal_device_type() const;
  void _internal_set_device_type(::minknow_api::device::GetDeviceInfoResponse_DeviceType value);
  public:

  // uint32 max_channel_count = 4;
  void clear_max_channel_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_channel_count() const;
  void set_max_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_channel_count() const;
  void _internal_set_max_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_simulated = 3;
  void clear_is_simulated();
  bool is_simulated() const;
  void set_is_simulated(bool value);
  private:
  bool _internal_is_simulated() const;
  void _internal_set_is_simulated(bool value);
  public:

  // bool can_set_temperature = 6;
  void clear_can_set_temperature();
  bool can_set_temperature() const;
  void set_can_set_temperature(bool value);
  private:
  bool _internal_can_set_temperature() const;
  void _internal_set_can_set_temperature(bool value);
  public:

  // uint32 max_wells_per_channel = 5;
  void clear_max_wells_per_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_wells_per_channel() const;
  void set_max_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_wells_per_channel() const;
  void _internal_set_max_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 digitisation = 7;
  void clear_digitisation();
  ::PROTOBUF_NAMESPACE_ID::uint32 digitisation() const;
  void set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_digitisation() const;
  void _internal_set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetDeviceInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion > firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  int device_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_channel_count_;
  bool is_simulated_;
  bool can_set_temperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_wells_per_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 digitisation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetDeviceStateRequest) */ {
 public:
  inline GetDeviceStateRequest() : GetDeviceStateRequest(nullptr) {}
  explicit constexpr GetDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceStateRequest(const GetDeviceStateRequest& from);
  GetDeviceStateRequest(GetDeviceStateRequest&& from) noexcept
    : GetDeviceStateRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceStateRequest& operator=(const GetDeviceStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceStateRequest& operator=(GetDeviceStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceStateRequest*>(
               &_GetDeviceStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDeviceStateRequest& a, GetDeviceStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceStateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceStateRequest* New() const final {
    return new GetDeviceStateRequest();
  }

  GetDeviceStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDeviceStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDeviceStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetDeviceStateRequest";
  }
  protected:
  explicit GetDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetDeviceStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetDeviceStateResponse) */ {
 public:
  inline GetDeviceStateResponse() : GetDeviceStateResponse(nullptr) {}
  ~GetDeviceStateResponse() override;
  explicit constexpr GetDeviceStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceStateResponse(const GetDeviceStateResponse& from);
  GetDeviceStateResponse(GetDeviceStateResponse&& from) noexcept
    : GetDeviceStateResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceStateResponse& operator=(const GetDeviceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceStateResponse& operator=(GetDeviceStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceStateResponse*>(
               &_GetDeviceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDeviceStateResponse& a, GetDeviceStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceStateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceStateResponse* New() const final {
    return new GetDeviceStateResponse();
  }

  GetDeviceStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetDeviceStateResponse";
  }
  protected:
  explicit GetDeviceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetDeviceStateResponse_DeviceState DeviceState;
  static constexpr DeviceState DEVICE_DISCONNECTED =
    GetDeviceStateResponse_DeviceState_DEVICE_DISCONNECTED;
  static constexpr DeviceState DEVICE_READY =
    GetDeviceStateResponse_DeviceState_DEVICE_READY;
  static inline bool DeviceState_IsValid(int value) {
    return GetDeviceStateResponse_DeviceState_IsValid(value);
  }
  static constexpr DeviceState DeviceState_MIN =
    GetDeviceStateResponse_DeviceState_DeviceState_MIN;
  static constexpr DeviceState DeviceState_MAX =
    GetDeviceStateResponse_DeviceState_DeviceState_MAX;
  static constexpr int DeviceState_ARRAYSIZE =
    GetDeviceStateResponse_DeviceState_DeviceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceState_descriptor() {
    return GetDeviceStateResponse_DeviceState_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceState_Name.");
    return GetDeviceStateResponse_DeviceState_Name(enum_t_value);
  }
  static inline bool DeviceState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceState* value) {
    return GetDeviceStateResponse_DeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceStateFieldNumber = 1,
    kFlowCellConnectorFieldNumber = 2,
  };
  // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
  void clear_device_state();
  ::minknow_api::device::GetDeviceStateResponse_DeviceState device_state() const;
  void set_device_state(::minknow_api::device::GetDeviceStateResponse_DeviceState value);
  private:
  ::minknow_api::device::GetDeviceStateResponse_DeviceState _internal_device_state() const;
  void _internal_set_device_state(::minknow_api::device::GetDeviceStateResponse_DeviceState value);
  public:

  // .minknow_api.device.FlowCellConnectorType flow_cell_connector = 2;
  void clear_flow_cell_connector();
  ::minknow_api::device::FlowCellConnectorType flow_cell_connector() const;
  void set_flow_cell_connector(::minknow_api::device::FlowCellConnectorType value);
  private:
  ::minknow_api::device::FlowCellConnectorType _internal_flow_cell_connector() const;
  void _internal_set_flow_cell_connector(::minknow_api::device::FlowCellConnectorType value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetDeviceStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int device_state_;
  int flow_cell_connector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class StreamDeviceStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.StreamDeviceStateRequest) */ {
 public:
  inline StreamDeviceStateRequest() : StreamDeviceStateRequest(nullptr) {}
  explicit constexpr StreamDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDeviceStateRequest(const StreamDeviceStateRequest& from);
  StreamDeviceStateRequest(StreamDeviceStateRequest&& from) noexcept
    : StreamDeviceStateRequest() {
    *this = ::std::move(from);
  }

  inline StreamDeviceStateRequest& operator=(const StreamDeviceStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDeviceStateRequest& operator=(StreamDeviceStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDeviceStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDeviceStateRequest* internal_default_instance() {
    return reinterpret_cast<const StreamDeviceStateRequest*>(
               &_StreamDeviceStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamDeviceStateRequest& a, StreamDeviceStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDeviceStateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDeviceStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDeviceStateRequest* New() const final {
    return new StreamDeviceStateRequest();
  }

  StreamDeviceStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDeviceStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StreamDeviceStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StreamDeviceStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.StreamDeviceStateRequest";
  }
  protected:
  explicit StreamDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.StreamDeviceStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetFlowCellInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetFlowCellInfoRequest) */ {
 public:
  inline GetFlowCellInfoRequest() : GetFlowCellInfoRequest(nullptr) {}
  explicit constexpr GetFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlowCellInfoRequest(const GetFlowCellInfoRequest& from);
  GetFlowCellInfoRequest(GetFlowCellInfoRequest&& from) noexcept
    : GetFlowCellInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetFlowCellInfoRequest& operator=(const GetFlowCellInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlowCellInfoRequest& operator=(GetFlowCellInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlowCellInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlowCellInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlowCellInfoRequest*>(
               &_GetFlowCellInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetFlowCellInfoRequest& a, GetFlowCellInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlowCellInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlowCellInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFlowCellInfoRequest* New() const final {
    return new GetFlowCellInfoRequest();
  }

  GetFlowCellInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFlowCellInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetFlowCellInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetFlowCellInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetFlowCellInfoRequest";
  }
  protected:
  explicit GetFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetFlowCellInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetFlowCellInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetFlowCellInfoResponse) */ {
 public:
  inline GetFlowCellInfoResponse() : GetFlowCellInfoResponse(nullptr) {}
  ~GetFlowCellInfoResponse() override;
  explicit constexpr GetFlowCellInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlowCellInfoResponse(const GetFlowCellInfoResponse& from);
  GetFlowCellInfoResponse(GetFlowCellInfoResponse&& from) noexcept
    : GetFlowCellInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetFlowCellInfoResponse& operator=(const GetFlowCellInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlowCellInfoResponse& operator=(GetFlowCellInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlowCellInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  enum TemperatureOffsetNullableCase {
    kTemperatureOffset = 11,
    TEMPERATURE_OFFSET_NULLABLE_NOT_SET = 0,
  };

  static inline const GetFlowCellInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlowCellInfoResponse*>(
               &_GetFlowCellInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetFlowCellInfoResponse& a, GetFlowCellInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlowCellInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlowCellInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFlowCellInfoResponse* New() const final {
    return new GetFlowCellInfoResponse();
  }

  GetFlowCellInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFlowCellInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlowCellInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFlowCellInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlowCellInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetFlowCellInfoResponse";
  }
  protected:
  explicit GetFlowCellInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowCellIdFieldNumber = 4,
    kProductCodeFieldNumber = 6,
    kUserSpecifiedFlowCellIdFieldNumber = 7,
    kUserSpecifiedProductCodeFieldNumber = 8,
    kAdapterIdFieldNumber = 10,
    kAsicVersionFieldNumber = 12,
    kAsicIdStrFieldNumber = 13,
    kChannelCountFieldNumber = 2,
    kWellsPerChannelFieldNumber = 3,
    kHasFlowCellFieldNumber = 1,
    kHasAdapterFieldNumber = 9,
    kTemperatureOffsetFieldNumber = 11,
  };
  // string flow_cell_id = 4;
  void clear_flow_cell_id();
  const std::string& flow_cell_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flow_cell_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flow_cell_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_flow_cell_id();
  void set_allocated_flow_cell_id(std::string* flow_cell_id);
  private:
  const std::string& _internal_flow_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flow_cell_id(const std::string& value);
  std::string* _internal_mutable_flow_cell_id();
  public:

  // string product_code = 6;
  void clear_product_code();
  const std::string& product_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_product_code();
  void set_allocated_product_code(std::string* product_code);
  private:
  const std::string& _internal_product_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_code(const std::string& value);
  std::string* _internal_mutable_product_code();
  public:

  // string user_specified_flow_cell_id = 7;
  void clear_user_specified_flow_cell_id();
  const std::string& user_specified_flow_cell_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_specified_flow_cell_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_specified_flow_cell_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_specified_flow_cell_id();
  void set_allocated_user_specified_flow_cell_id(std::string* user_specified_flow_cell_id);
  private:
  const std::string& _internal_user_specified_flow_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_specified_flow_cell_id(const std::string& value);
  std::string* _internal_mutable_user_specified_flow_cell_id();
  public:

  // string user_specified_product_code = 8;
  void clear_user_specified_product_code();
  const std::string& user_specified_product_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_specified_product_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_specified_product_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_specified_product_code();
  void set_allocated_user_specified_product_code(std::string* user_specified_product_code);
  private:
  const std::string& _internal_user_specified_product_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_specified_product_code(const std::string& value);
  std::string* _internal_mutable_user_specified_product_code();
  public:

  // string adapter_id = 10;
  void clear_adapter_id();
  const std::string& adapter_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adapter_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adapter_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_adapter_id();
  void set_allocated_adapter_id(std::string* adapter_id);
  private:
  const std::string& _internal_adapter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adapter_id(const std::string& value);
  std::string* _internal_mutable_adapter_id();
  public:

  // string asic_version = 12;
  void clear_asic_version();
  const std::string& asic_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asic_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asic_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_asic_version();
  void set_allocated_asic_version(std::string* asic_version);
  private:
  const std::string& _internal_asic_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asic_version(const std::string& value);
  std::string* _internal_mutable_asic_version();
  public:

  // string asic_id_str = 13;
  void clear_asic_id_str();
  const std::string& asic_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asic_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asic_id_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_asic_id_str();
  void set_allocated_asic_id_str(std::string* asic_id_str);
  private:
  const std::string& _internal_asic_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asic_id_str(const std::string& value);
  std::string* _internal_mutable_asic_id_str();
  public:

  // uint32 channel_count = 2;
  void clear_channel_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count() const;
  void set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_count() const;
  void _internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wells_per_channel = 3;
  void clear_wells_per_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 wells_per_channel() const;
  void set_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wells_per_channel() const;
  void _internal_set_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool has_flow_cell = 1;
  void clear_has_flow_cell();
  bool has_flow_cell() const;
  void set_has_flow_cell(bool value);
  private:
  bool _internal_has_flow_cell() const;
  void _internal_set_has_flow_cell(bool value);
  public:

  // bool has_adapter = 9;
  void clear_has_adapter();
  bool has_adapter() const;
  void set_has_adapter(bool value);
  private:
  bool _internal_has_adapter() const;
  void _internal_set_has_adapter(bool value);
  public:

  // float temperature_offset = 11;
  bool has_temperature_offset() const;
  private:
  bool _internal_has_temperature_offset() const;
  public:
  void clear_temperature_offset();
  float temperature_offset() const;
  void set_temperature_offset(float value);
  private:
  float _internal_temperature_offset() const;
  void _internal_set_temperature_offset(float value);
  public:

  void clear_temperature_offset_nullable();
  TemperatureOffsetNullableCase temperature_offset_nullable_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.device.GetFlowCellInfoResponse)
 private:
  class _Internal;
  void set_has_temperature_offset();

  inline bool has_temperature_offset_nullable() const;
  inline void clear_has_temperature_offset_nullable();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_specified_flow_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_specified_product_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adapter_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asic_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asic_id_str_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wells_per_channel_;
  bool has_flow_cell_;
  bool has_adapter_;
  union TemperatureOffsetNullableUnion {
    constexpr TemperatureOffsetNullableUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float temperature_offset_;
  } temperature_offset_nullable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class StreamFlowCellInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.StreamFlowCellInfoRequest) */ {
 public:
  inline StreamFlowCellInfoRequest() : StreamFlowCellInfoRequest(nullptr) {}
  explicit constexpr StreamFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamFlowCellInfoRequest(const StreamFlowCellInfoRequest& from);
  StreamFlowCellInfoRequest(StreamFlowCellInfoRequest&& from) noexcept
    : StreamFlowCellInfoRequest() {
    *this = ::std::move(from);
  }

  inline StreamFlowCellInfoRequest& operator=(const StreamFlowCellInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamFlowCellInfoRequest& operator=(StreamFlowCellInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamFlowCellInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamFlowCellInfoRequest* internal_default_instance() {
    return reinterpret_cast<const StreamFlowCellInfoRequest*>(
               &_StreamFlowCellInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamFlowCellInfoRequest& a, StreamFlowCellInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamFlowCellInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamFlowCellInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamFlowCellInfoRequest* New() const final {
    return new StreamFlowCellInfoRequest();
  }

  StreamFlowCellInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamFlowCellInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StreamFlowCellInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StreamFlowCellInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.StreamFlowCellInfoRequest";
  }
  protected:
  explicit StreamFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.StreamFlowCellInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetUserSpecifiedFlowCellIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetUserSpecifiedFlowCellIdRequest) */ {
 public:
  inline SetUserSpecifiedFlowCellIdRequest() : SetUserSpecifiedFlowCellIdRequest(nullptr) {}
  ~SetUserSpecifiedFlowCellIdRequest() override;
  explicit constexpr SetUserSpecifiedFlowCellIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserSpecifiedFlowCellIdRequest(const SetUserSpecifiedFlowCellIdRequest& from);
  SetUserSpecifiedFlowCellIdRequest(SetUserSpecifiedFlowCellIdRequest&& from) noexcept
    : SetUserSpecifiedFlowCellIdRequest() {
    *this = ::std::move(from);
  }

  inline SetUserSpecifiedFlowCellIdRequest& operator=(const SetUserSpecifiedFlowCellIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserSpecifiedFlowCellIdRequest& operator=(SetUserSpecifiedFlowCellIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserSpecifiedFlowCellIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserSpecifiedFlowCellIdRequest* internal_default_instance() {
    return reinterpret_cast<const SetUserSpecifiedFlowCellIdRequest*>(
               &_SetUserSpecifiedFlowCellIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetUserSpecifiedFlowCellIdRequest& a, SetUserSpecifiedFlowCellIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserSpecifiedFlowCellIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserSpecifiedFlowCellIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserSpecifiedFlowCellIdRequest* New() const final {
    return new SetUserSpecifiedFlowCellIdRequest();
  }

  SetUserSpecifiedFlowCellIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserSpecifiedFlowCellIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserSpecifiedFlowCellIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetUserSpecifiedFlowCellIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserSpecifiedFlowCellIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetUserSpecifiedFlowCellIdRequest";
  }
  protected:
  explicit SetUserSpecifiedFlowCellIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.minknow_api.rpc_required) = true];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetUserSpecifiedFlowCellIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetUserSpecifiedFlowCellIdResponse) */ {
 public:
  inline SetUserSpecifiedFlowCellIdResponse() : SetUserSpecifiedFlowCellIdResponse(nullptr) {}
  explicit constexpr SetUserSpecifiedFlowCellIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserSpecifiedFlowCellIdResponse(const SetUserSpecifiedFlowCellIdResponse& from);
  SetUserSpecifiedFlowCellIdResponse(SetUserSpecifiedFlowCellIdResponse&& from) noexcept
    : SetUserSpecifiedFlowCellIdResponse() {
    *this = ::std::move(from);
  }

  inline SetUserSpecifiedFlowCellIdResponse& operator=(const SetUserSpecifiedFlowCellIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserSpecifiedFlowCellIdResponse& operator=(SetUserSpecifiedFlowCellIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserSpecifiedFlowCellIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserSpecifiedFlowCellIdResponse* internal_default_instance() {
    return reinterpret_cast<const SetUserSpecifiedFlowCellIdResponse*>(
               &_SetUserSpecifiedFlowCellIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetUserSpecifiedFlowCellIdResponse& a, SetUserSpecifiedFlowCellIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserSpecifiedFlowCellIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserSpecifiedFlowCellIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserSpecifiedFlowCellIdResponse* New() const final {
    return new SetUserSpecifiedFlowCellIdResponse();
  }

  SetUserSpecifiedFlowCellIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserSpecifiedFlowCellIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetUserSpecifiedFlowCellIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetUserSpecifiedFlowCellIdResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetUserSpecifiedFlowCellIdResponse";
  }
  protected:
  explicit SetUserSpecifiedFlowCellIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetUserSpecifiedFlowCellIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetUserSpecifiedProductCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetUserSpecifiedProductCodeRequest) */ {
 public:
  inline SetUserSpecifiedProductCodeRequest() : SetUserSpecifiedProductCodeRequest(nullptr) {}
  ~SetUserSpecifiedProductCodeRequest() override;
  explicit constexpr SetUserSpecifiedProductCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserSpecifiedProductCodeRequest(const SetUserSpecifiedProductCodeRequest& from);
  SetUserSpecifiedProductCodeRequest(SetUserSpecifiedProductCodeRequest&& from) noexcept
    : SetUserSpecifiedProductCodeRequest() {
    *this = ::std::move(from);
  }

  inline SetUserSpecifiedProductCodeRequest& operator=(const SetUserSpecifiedProductCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserSpecifiedProductCodeRequest& operator=(SetUserSpecifiedProductCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserSpecifiedProductCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserSpecifiedProductCodeRequest* internal_default_instance() {
    return reinterpret_cast<const SetUserSpecifiedProductCodeRequest*>(
               &_SetUserSpecifiedProductCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetUserSpecifiedProductCodeRequest& a, SetUserSpecifiedProductCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserSpecifiedProductCodeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserSpecifiedProductCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserSpecifiedProductCodeRequest* New() const final {
    return new SetUserSpecifiedProductCodeRequest();
  }

  SetUserSpecifiedProductCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserSpecifiedProductCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserSpecifiedProductCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetUserSpecifiedProductCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserSpecifiedProductCodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetUserSpecifiedProductCodeRequest";
  }
  protected:
  explicit SetUserSpecifiedProductCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1 [(.minknow_api.rpc_required) = true];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetUserSpecifiedProductCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetUserSpecifiedProductCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetUserSpecifiedProductCodeResponse) */ {
 public:
  inline SetUserSpecifiedProductCodeResponse() : SetUserSpecifiedProductCodeResponse(nullptr) {}
  explicit constexpr SetUserSpecifiedProductCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserSpecifiedProductCodeResponse(const SetUserSpecifiedProductCodeResponse& from);
  SetUserSpecifiedProductCodeResponse(SetUserSpecifiedProductCodeResponse&& from) noexcept
    : SetUserSpecifiedProductCodeResponse() {
    *this = ::std::move(from);
  }

  inline SetUserSpecifiedProductCodeResponse& operator=(const SetUserSpecifiedProductCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserSpecifiedProductCodeResponse& operator=(SetUserSpecifiedProductCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserSpecifiedProductCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserSpecifiedProductCodeResponse* internal_default_instance() {
    return reinterpret_cast<const SetUserSpecifiedProductCodeResponse*>(
               &_SetUserSpecifiedProductCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetUserSpecifiedProductCodeResponse& a, SetUserSpecifiedProductCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserSpecifiedProductCodeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserSpecifiedProductCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetUserSpecifiedProductCodeResponse* New() const final {
    return new SetUserSpecifiedProductCodeResponse();
  }

  SetUserSpecifiedProductCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetUserSpecifiedProductCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetUserSpecifiedProductCodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetUserSpecifiedProductCodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetUserSpecifiedProductCodeResponse";
  }
  protected:
  explicit SetUserSpecifiedProductCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetUserSpecifiedProductCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetChannelsLayoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetChannelsLayoutRequest) */ {
 public:
  inline GetChannelsLayoutRequest() : GetChannelsLayoutRequest(nullptr) {}
  explicit constexpr GetChannelsLayoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelsLayoutRequest(const GetChannelsLayoutRequest& from);
  GetChannelsLayoutRequest(GetChannelsLayoutRequest&& from) noexcept
    : GetChannelsLayoutRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelsLayoutRequest& operator=(const GetChannelsLayoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelsLayoutRequest& operator=(GetChannelsLayoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelsLayoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelsLayoutRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelsLayoutRequest*>(
               &_GetChannelsLayoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetChannelsLayoutRequest& a, GetChannelsLayoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelsLayoutRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelsLayoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelsLayoutRequest* New() const final {
    return new GetChannelsLayoutRequest();
  }

  GetChannelsLayoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelsLayoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetChannelsLayoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetChannelsLayoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetChannelsLayoutRequest";
  }
  protected:
  explicit GetChannelsLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetChannelsLayoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetChannelsLayoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetChannelsLayoutResponse) */ {
 public:
  inline GetChannelsLayoutResponse() : GetChannelsLayoutResponse(nullptr) {}
  ~GetChannelsLayoutResponse() override;
  explicit constexpr GetChannelsLayoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelsLayoutResponse(const GetChannelsLayoutResponse& from);
  GetChannelsLayoutResponse(GetChannelsLayoutResponse&& from) noexcept
    : GetChannelsLayoutResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelsLayoutResponse& operator=(const GetChannelsLayoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelsLayoutResponse& operator=(GetChannelsLayoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelsLayoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelsLayoutResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelsLayoutResponse*>(
               &_GetChannelsLayoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetChannelsLayoutResponse& a, GetChannelsLayoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelsLayoutResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelsLayoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelsLayoutResponse* New() const final {
    return new GetChannelsLayoutResponse();
  }

  GetChannelsLayoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelsLayoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelsLayoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelsLayoutResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelsLayoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetChannelsLayoutResponse";
  }
  protected:
  explicit GetChannelsLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelRecordsFieldNumber = 1,
  };
  // repeated .minknow_api.device.ChannelRecord channel_records = 1;
  int channel_records_size() const;
  private:
  int _internal_channel_records_size() const;
  public:
  void clear_channel_records();
  ::minknow_api::device::ChannelRecord* mutable_channel_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord >*
      mutable_channel_records();
  private:
  const ::minknow_api::device::ChannelRecord& _internal_channel_records(int index) const;
  ::minknow_api::device::ChannelRecord* _internal_add_channel_records();
  public:
  const ::minknow_api::device::ChannelRecord& channel_records(int index) const;
  ::minknow_api::device::ChannelRecord* add_channel_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord >&
      channel_records() const;

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetChannelsLayoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord > channel_records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ChannelRecord_MuxRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.ChannelRecord.MuxRecord) */ {
 public:
  inline ChannelRecord_MuxRecord() : ChannelRecord_MuxRecord(nullptr) {}
  ~ChannelRecord_MuxRecord() override;
  explicit constexpr ChannelRecord_MuxRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelRecord_MuxRecord(const ChannelRecord_MuxRecord& from);
  ChannelRecord_MuxRecord(ChannelRecord_MuxRecord&& from) noexcept
    : ChannelRecord_MuxRecord() {
    *this = ::std::move(from);
  }

  inline ChannelRecord_MuxRecord& operator=(const ChannelRecord_MuxRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelRecord_MuxRecord& operator=(ChannelRecord_MuxRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelRecord_MuxRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelRecord_MuxRecord* internal_default_instance() {
    return reinterpret_cast<const ChannelRecord_MuxRecord*>(
               &_ChannelRecord_MuxRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChannelRecord_MuxRecord& a, ChannelRecord_MuxRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelRecord_MuxRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelRecord_MuxRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelRecord_MuxRecord* New() const final {
    return new ChannelRecord_MuxRecord();
  }

  ChannelRecord_MuxRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelRecord_MuxRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelRecord_MuxRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelRecord_MuxRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRecord_MuxRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ChannelRecord.MuxRecord";
  }
  protected:
  explicit ChannelRecord_MuxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPhysXFieldNumber = 2,
    kPhysYFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 phys_x = 2;
  void clear_phys_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 phys_x() const;
  void set_phys_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phys_x() const;
  void _internal_set_phys_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 phys_y = 3;
  void clear_phys_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 phys_y() const;
  void set_phys_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phys_y() const;
  void _internal_set_phys_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.ChannelRecord.MuxRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phys_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phys_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ChannelRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.ChannelRecord) */ {
 public:
  inline ChannelRecord() : ChannelRecord(nullptr) {}
  ~ChannelRecord() override;
  explicit constexpr ChannelRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelRecord(const ChannelRecord& from);
  ChannelRecord(ChannelRecord&& from) noexcept
    : ChannelRecord() {
    *this = ::std::move(from);
  }

  inline ChannelRecord& operator=(const ChannelRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelRecord& operator=(ChannelRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelRecord* internal_default_instance() {
    return reinterpret_cast<const ChannelRecord*>(
               &_ChannelRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChannelRecord& a, ChannelRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelRecord* New() const final {
    return new ChannelRecord();
  }

  ChannelRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ChannelRecord";
  }
  protected:
  explicit ChannelRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChannelRecord_MuxRecord MuxRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kMuxRecordsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .minknow_api.device.ChannelRecord.MuxRecord mux_records = 3;
  int mux_records_size() const;
  private:
  int _internal_mux_records_size() const;
  public:
  void clear_mux_records();
  ::minknow_api::device::ChannelRecord_MuxRecord* mutable_mux_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord_MuxRecord >*
      mutable_mux_records();
  private:
  const ::minknow_api::device::ChannelRecord_MuxRecord& _internal_mux_records(int index) const;
  ::minknow_api::device::ChannelRecord_MuxRecord* _internal_add_mux_records();
  public:
  const ::minknow_api::device::ChannelRecord_MuxRecord& mux_records(int index) const;
  ::minknow_api::device::ChannelRecord_MuxRecord* add_mux_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord_MuxRecord >&
      mux_records() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.ChannelRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord_MuxRecord > mux_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ResetDeviceSettingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.ResetDeviceSettingsRequest) */ {
 public:
  inline ResetDeviceSettingsRequest() : ResetDeviceSettingsRequest(nullptr) {}
  explicit constexpr ResetDeviceSettingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetDeviceSettingsRequest(const ResetDeviceSettingsRequest& from);
  ResetDeviceSettingsRequest(ResetDeviceSettingsRequest&& from) noexcept
    : ResetDeviceSettingsRequest() {
    *this = ::std::move(from);
  }

  inline ResetDeviceSettingsRequest& operator=(const ResetDeviceSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetDeviceSettingsRequest& operator=(ResetDeviceSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetDeviceSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetDeviceSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const ResetDeviceSettingsRequest*>(
               &_ResetDeviceSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResetDeviceSettingsRequest& a, ResetDeviceSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetDeviceSettingsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetDeviceSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetDeviceSettingsRequest* New() const final {
    return new ResetDeviceSettingsRequest();
  }

  ResetDeviceSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetDeviceSettingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetDeviceSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetDeviceSettingsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ResetDeviceSettingsRequest";
  }
  protected:
  explicit ResetDeviceSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.ResetDeviceSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ResetDeviceSettingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.ResetDeviceSettingsResponse) */ {
 public:
  inline ResetDeviceSettingsResponse() : ResetDeviceSettingsResponse(nullptr) {}
  explicit constexpr ResetDeviceSettingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetDeviceSettingsResponse(const ResetDeviceSettingsResponse& from);
  ResetDeviceSettingsResponse(ResetDeviceSettingsResponse&& from) noexcept
    : ResetDeviceSettingsResponse() {
    *this = ::std::move(from);
  }

  inline ResetDeviceSettingsResponse& operator=(const ResetDeviceSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetDeviceSettingsResponse& operator=(ResetDeviceSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetDeviceSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetDeviceSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const ResetDeviceSettingsResponse*>(
               &_ResetDeviceSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResetDeviceSettingsResponse& a, ResetDeviceSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetDeviceSettingsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetDeviceSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetDeviceSettingsResponse* New() const final {
    return new ResetDeviceSettingsResponse();
  }

  ResetDeviceSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetDeviceSettingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetDeviceSettingsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetDeviceSettingsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ResetDeviceSettingsResponse";
  }
  protected:
  explicit ResetDeviceSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.ResetDeviceSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetCalibrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetCalibrationRequest) */ {
 public:
  inline SetCalibrationRequest() : SetCalibrationRequest(nullptr) {}
  ~SetCalibrationRequest() override;
  explicit constexpr SetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCalibrationRequest(const SetCalibrationRequest& from);
  SetCalibrationRequest(SetCalibrationRequest&& from) noexcept
    : SetCalibrationRequest() {
    *this = ::std::move(from);
  }

  inline SetCalibrationRequest& operator=(const SetCalibrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCalibrationRequest& operator=(SetCalibrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCalibrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCalibrationRequest* internal_default_instance() {
    return reinterpret_cast<const SetCalibrationRequest*>(
               &_SetCalibrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetCalibrationRequest& a, SetCalibrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCalibrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCalibrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCalibrationRequest* New() const final {
    return new SetCalibrationRequest();
  }

  SetCalibrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCalibrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCalibrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetCalibrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCalibrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetCalibrationRequest";
  }
  protected:
  explicit SetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetsFieldNumber = 3,
    kPaRangesFieldNumber = 4,
    kFirstChannelFieldNumber = 1,
    kLastChannelFieldNumber = 2,
  };
  // repeated float offsets = 3 [(.minknow_api.rpc_required) = true];
  int offsets_size() const;
  private:
  int _internal_offsets_size() const;
  public:
  void clear_offsets();
  private:
  float _internal_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_offsets() const;
  void _internal_add_offsets(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_offsets();
  public:
  float offsets(int index) const;
  void set_offsets(int index, float value);
  void add_offsets(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_offsets();

  // repeated float pa_ranges = 4 [(.minknow_api.rpc_required) = true];
  int pa_ranges_size() const;
  private:
  int _internal_pa_ranges_size() const;
  public:
  void clear_pa_ranges();
  private:
  float _internal_pa_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pa_ranges() const;
  void _internal_add_pa_ranges(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pa_ranges();
  public:
  float pa_ranges(int index) const;
  void set_pa_ranges(int index, float value);
  void add_pa_ranges(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pa_ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pa_ranges();

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  void clear_first_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_channel() const;
  void set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_channel() const;
  void _internal_set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  void clear_last_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_channel() const;
  void set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_channel() const;
  void _internal_set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetCalibrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > offsets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pa_ranges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetCalibrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetCalibrationResponse) */ {
 public:
  inline SetCalibrationResponse() : SetCalibrationResponse(nullptr) {}
  explicit constexpr SetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCalibrationResponse(const SetCalibrationResponse& from);
  SetCalibrationResponse(SetCalibrationResponse&& from) noexcept
    : SetCalibrationResponse() {
    *this = ::std::move(from);
  }

  inline SetCalibrationResponse& operator=(const SetCalibrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCalibrationResponse& operator=(SetCalibrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCalibrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCalibrationResponse* internal_default_instance() {
    return reinterpret_cast<const SetCalibrationResponse*>(
               &_SetCalibrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetCalibrationResponse& a, SetCalibrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCalibrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCalibrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCalibrationResponse* New() const final {
    return new SetCalibrationResponse();
  }

  SetCalibrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCalibrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCalibrationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCalibrationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetCalibrationResponse";
  }
  protected:
  explicit SetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetCalibrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ClearCalibrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.ClearCalibrationRequest) */ {
 public:
  inline ClearCalibrationRequest() : ClearCalibrationRequest(nullptr) {}
  explicit constexpr ClearCalibrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearCalibrationRequest(const ClearCalibrationRequest& from);
  ClearCalibrationRequest(ClearCalibrationRequest&& from) noexcept
    : ClearCalibrationRequest() {
    *this = ::std::move(from);
  }

  inline ClearCalibrationRequest& operator=(const ClearCalibrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearCalibrationRequest& operator=(ClearCalibrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearCalibrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearCalibrationRequest* internal_default_instance() {
    return reinterpret_cast<const ClearCalibrationRequest*>(
               &_ClearCalibrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ClearCalibrationRequest& a, ClearCalibrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearCalibrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearCalibrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearCalibrationRequest* New() const final {
    return new ClearCalibrationRequest();
  }

  ClearCalibrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearCalibrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearCalibrationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearCalibrationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ClearCalibrationRequest";
  }
  protected:
  explicit ClearCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.ClearCalibrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class ClearCalibrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.ClearCalibrationResponse) */ {
 public:
  inline ClearCalibrationResponse() : ClearCalibrationResponse(nullptr) {}
  explicit constexpr ClearCalibrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearCalibrationResponse(const ClearCalibrationResponse& from);
  ClearCalibrationResponse(ClearCalibrationResponse&& from) noexcept
    : ClearCalibrationResponse() {
    *this = ::std::move(from);
  }

  inline ClearCalibrationResponse& operator=(const ClearCalibrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearCalibrationResponse& operator=(ClearCalibrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearCalibrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearCalibrationResponse* internal_default_instance() {
    return reinterpret_cast<const ClearCalibrationResponse*>(
               &_ClearCalibrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ClearCalibrationResponse& a, ClearCalibrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearCalibrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearCalibrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearCalibrationResponse* New() const final {
    return new ClearCalibrationResponse();
  }

  ClearCalibrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearCalibrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearCalibrationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearCalibrationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.ClearCalibrationResponse";
  }
  protected:
  explicit ClearCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.ClearCalibrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetCalibrationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetCalibrationRequest) */ {
 public:
  inline GetCalibrationRequest() : GetCalibrationRequest(nullptr) {}
  ~GetCalibrationRequest() override;
  explicit constexpr GetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCalibrationRequest(const GetCalibrationRequest& from);
  GetCalibrationRequest(GetCalibrationRequest&& from) noexcept
    : GetCalibrationRequest() {
    *this = ::std::move(from);
  }

  inline GetCalibrationRequest& operator=(const GetCalibrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCalibrationRequest& operator=(GetCalibrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCalibrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCalibrationRequest* internal_default_instance() {
    return reinterpret_cast<const GetCalibrationRequest*>(
               &_GetCalibrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetCalibrationRequest& a, GetCalibrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCalibrationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCalibrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCalibrationRequest* New() const final {
    return new GetCalibrationRequest();
  }

  GetCalibrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCalibrationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCalibrationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCalibrationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCalibrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetCalibrationRequest";
  }
  protected:
  explicit GetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstChannelFieldNumber = 1,
    kLastChannelFieldNumber = 2,
  };
  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  void clear_first_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_channel() const;
  void set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_channel() const;
  void _internal_set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  void clear_last_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_channel() const;
  void set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_channel() const;
  void _internal_set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetCalibrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetCalibrationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetCalibrationResponse) */ {
 public:
  inline GetCalibrationResponse() : GetCalibrationResponse(nullptr) {}
  ~GetCalibrationResponse() override;
  explicit constexpr GetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCalibrationResponse(const GetCalibrationResponse& from);
  GetCalibrationResponse(GetCalibrationResponse&& from) noexcept
    : GetCalibrationResponse() {
    *this = ::std::move(from);
  }

  inline GetCalibrationResponse& operator=(const GetCalibrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCalibrationResponse& operator=(GetCalibrationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCalibrationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCalibrationResponse* internal_default_instance() {
    return reinterpret_cast<const GetCalibrationResponse*>(
               &_GetCalibrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetCalibrationResponse& a, GetCalibrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCalibrationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCalibrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCalibrationResponse* New() const final {
    return new GetCalibrationResponse();
  }

  GetCalibrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCalibrationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCalibrationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCalibrationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCalibrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetCalibrationResponse";
  }
  protected:
  explicit GetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetsFieldNumber = 2,
    kPaRangesFieldNumber = 3,
    kDigitisationFieldNumber = 1,
    kHasCalibrationFieldNumber = 4,
  };
  // repeated float offsets = 2;
  int offsets_size() const;
  private:
  int _internal_offsets_size() const;
  public:
  void clear_offsets();
  private:
  float _internal_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_offsets() const;
  void _internal_add_offsets(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_offsets();
  public:
  float offsets(int index) const;
  void set_offsets(int index, float value);
  void add_offsets(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_offsets();

  // repeated float pa_ranges = 3;
  int pa_ranges_size() const;
  private:
  int _internal_pa_ranges_size() const;
  public:
  void clear_pa_ranges();
  private:
  float _internal_pa_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pa_ranges() const;
  void _internal_add_pa_ranges(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pa_ranges();
  public:
  float pa_ranges(int index) const;
  void set_pa_ranges(int index, float value);
  void add_pa_ranges(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pa_ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pa_ranges();

  // uint32 digitisation = 1;
  void clear_digitisation();
  ::PROTOBUF_NAMESPACE_ID::uint32 digitisation() const;
  void set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_digitisation() const;
  void _internal_set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool has_calibration = 4;
  void clear_has_calibration();
  bool has_calibration() const;
  void set_has_calibration(bool value);
  private:
  bool _internal_has_calibration() const;
  void _internal_set_has_calibration(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetCalibrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > offsets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pa_ranges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 digitisation_;
  bool has_calibration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetTemperatureRequest_WaitForTemperatureSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings) */ {
 public:
  inline SetTemperatureRequest_WaitForTemperatureSettings() : SetTemperatureRequest_WaitForTemperatureSettings(nullptr) {}
  ~SetTemperatureRequest_WaitForTemperatureSettings() override;
  explicit constexpr SetTemperatureRequest_WaitForTemperatureSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTemperatureRequest_WaitForTemperatureSettings(const SetTemperatureRequest_WaitForTemperatureSettings& from);
  SetTemperatureRequest_WaitForTemperatureSettings(SetTemperatureRequest_WaitForTemperatureSettings&& from) noexcept
    : SetTemperatureRequest_WaitForTemperatureSettings() {
    *this = ::std::move(from);
  }

  inline SetTemperatureRequest_WaitForTemperatureSettings& operator=(const SetTemperatureRequest_WaitForTemperatureSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTemperatureRequest_WaitForTemperatureSettings& operator=(SetTemperatureRequest_WaitForTemperatureSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTemperatureRequest_WaitForTemperatureSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTemperatureRequest_WaitForTemperatureSettings* internal_default_instance() {
    return reinterpret_cast<const SetTemperatureRequest_WaitForTemperatureSettings*>(
               &_SetTemperatureRequest_WaitForTemperatureSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetTemperatureRequest_WaitForTemperatureSettings& a, SetTemperatureRequest_WaitForTemperatureSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTemperatureRequest_WaitForTemperatureSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTemperatureRequest_WaitForTemperatureSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTemperatureRequest_WaitForTemperatureSettings* New() const final {
    return new SetTemperatureRequest_WaitForTemperatureSettings();
  }

  SetTemperatureRequest_WaitForTemperatureSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTemperatureRequest_WaitForTemperatureSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTemperatureRequest_WaitForTemperatureSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTemperatureRequest_WaitForTemperatureSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTemperatureRequest_WaitForTemperatureSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings";
  }
  protected:
  explicit SetTemperatureRequest_WaitForTemperatureSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 1,
    kToleranceFieldNumber = 2,
    kMinStableDurationFieldNumber = 3,
  };
  // uint32 timeout = 1;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float tolerance = 2;
  void clear_tolerance();
  float tolerance() const;
  void set_tolerance(float value);
  private:
  float _internal_tolerance() const;
  void _internal_set_tolerance(float value);
  public:

  // uint32 min_stable_duration = 3;
  void clear_min_stable_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_stable_duration() const;
  void set_min_stable_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_stable_duration() const;
  void _internal_set_min_stable_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  float tolerance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_stable_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetTemperatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetTemperatureRequest) */ {
 public:
  inline SetTemperatureRequest() : SetTemperatureRequest(nullptr) {}
  ~SetTemperatureRequest() override;
  explicit constexpr SetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTemperatureRequest(const SetTemperatureRequest& from);
  SetTemperatureRequest(SetTemperatureRequest&& from) noexcept
    : SetTemperatureRequest() {
    *this = ::std::move(from);
  }

  inline SetTemperatureRequest& operator=(const SetTemperatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTemperatureRequest& operator=(SetTemperatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTemperatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTemperatureRequest* internal_default_instance() {
    return reinterpret_cast<const SetTemperatureRequest*>(
               &_SetTemperatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetTemperatureRequest& a, SetTemperatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTemperatureRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTemperatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTemperatureRequest* New() const final {
    return new SetTemperatureRequest();
  }

  SetTemperatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTemperatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTemperatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTemperatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTemperatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetTemperatureRequest";
  }
  protected:
  explicit SetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetTemperatureRequest_WaitForTemperatureSettings WaitForTemperatureSettings;

  // accessors -------------------------------------------------------

  enum : int {
    kWaitForTemperatureFieldNumber = 2,
    kTemperatureFieldNumber = 1,
  };
  // .minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings wait_for_temperature = 2;
  bool has_wait_for_temperature() const;
  private:
  bool _internal_has_wait_for_temperature() const;
  public:
  void clear_wait_for_temperature();
  const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings& wait_for_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* release_wait_for_temperature();
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* mutable_wait_for_temperature();
  void set_allocated_wait_for_temperature(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* wait_for_temperature);
  private:
  const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings& _internal_wait_for_temperature() const;
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* _internal_mutable_wait_for_temperature();
  public:
  void unsafe_arena_set_allocated_wait_for_temperature(
      ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* wait_for_temperature);
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* unsafe_arena_release_wait_for_temperature();

  // float temperature = 1;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetTemperatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* wait_for_temperature_;
  float temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetTemperatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetTemperatureResponse) */ {
 public:
  inline SetTemperatureResponse() : SetTemperatureResponse(nullptr) {}
  ~SetTemperatureResponse() override;
  explicit constexpr SetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTemperatureResponse(const SetTemperatureResponse& from);
  SetTemperatureResponse(SetTemperatureResponse&& from) noexcept
    : SetTemperatureResponse() {
    *this = ::std::move(from);
  }

  inline SetTemperatureResponse& operator=(const SetTemperatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTemperatureResponse& operator=(SetTemperatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTemperatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTemperatureResponse* internal_default_instance() {
    return reinterpret_cast<const SetTemperatureResponse*>(
               &_SetTemperatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetTemperatureResponse& a, SetTemperatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTemperatureResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTemperatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTemperatureResponse* New() const final {
    return new SetTemperatureResponse();
  }

  SetTemperatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTemperatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTemperatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTemperatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTemperatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetTemperatureResponse";
  }
  protected:
  explicit SetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimedOutWaitingForTemperatureFieldNumber = 1,
  };
  // bool timed_out_waiting_for_temperature = 1;
  void clear_timed_out_waiting_for_temperature();
  bool timed_out_waiting_for_temperature() const;
  void set_timed_out_waiting_for_temperature(bool value);
  private:
  bool _internal_timed_out_waiting_for_temperature() const;
  void _internal_set_timed_out_waiting_for_temperature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetTemperatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool timed_out_waiting_for_temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetTemperatureRequest) */ {
 public:
  inline GetTemperatureRequest() : GetTemperatureRequest(nullptr) {}
  explicit constexpr GetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemperatureRequest(const GetTemperatureRequest& from);
  GetTemperatureRequest(GetTemperatureRequest&& from) noexcept
    : GetTemperatureRequest() {
    *this = ::std::move(from);
  }

  inline GetTemperatureRequest& operator=(const GetTemperatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureRequest& operator=(GetTemperatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemperatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTemperatureRequest* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureRequest*>(
               &_GetTemperatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetTemperatureRequest& a, GetTemperatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureRequest* New() const final {
    return new GetTemperatureRequest();
  }

  GetTemperatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTemperatureRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTemperatureRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetTemperatureRequest";
  }
  protected:
  explicit GetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetTemperatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureResponse_MinIONTemperature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetTemperatureResponse.MinIONTemperature) */ {
 public:
  inline GetTemperatureResponse_MinIONTemperature() : GetTemperatureResponse_MinIONTemperature(nullptr) {}
  ~GetTemperatureResponse_MinIONTemperature() override;
  explicit constexpr GetTemperatureResponse_MinIONTemperature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemperatureResponse_MinIONTemperature(const GetTemperatureResponse_MinIONTemperature& from);
  GetTemperatureResponse_MinIONTemperature(GetTemperatureResponse_MinIONTemperature&& from) noexcept
    : GetTemperatureResponse_MinIONTemperature() {
    *this = ::std::move(from);
  }

  inline GetTemperatureResponse_MinIONTemperature& operator=(const GetTemperatureResponse_MinIONTemperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureResponse_MinIONTemperature& operator=(GetTemperatureResponse_MinIONTemperature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemperatureResponse_MinIONTemperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTemperatureResponse_MinIONTemperature* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureResponse_MinIONTemperature*>(
               &_GetTemperatureResponse_MinIONTemperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetTemperatureResponse_MinIONTemperature& a, GetTemperatureResponse_MinIONTemperature& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureResponse_MinIONTemperature* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureResponse_MinIONTemperature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureResponse_MinIONTemperature* New() const final {
    return new GetTemperatureResponse_MinIONTemperature();
  }

  GetTemperatureResponse_MinIONTemperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureResponse_MinIONTemperature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTemperatureResponse_MinIONTemperature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTemperatureResponse_MinIONTemperature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemperatureResponse_MinIONTemperature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetTemperatureResponse.MinIONTemperature";
  }
  protected:
  explicit GetTemperatureResponse_MinIONTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsicTemperatureFieldNumber = 1,
    kHeatsinkTemperatureFieldNumber = 2,
  };
  // .google.protobuf.FloatValue asic_temperature = 1;
  bool has_asic_temperature() const;
  private:
  bool _internal_has_asic_temperature() const;
  public:
  void clear_asic_temperature();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& asic_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_asic_temperature();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_asic_temperature();
  void set_allocated_asic_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* asic_temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_asic_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_asic_temperature();
  public:
  void unsafe_arena_set_allocated_asic_temperature(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* asic_temperature);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_asic_temperature();

  // .google.protobuf.FloatValue heatsink_temperature = 2;
  bool has_heatsink_temperature() const;
  private:
  bool _internal_has_heatsink_temperature() const;
  public:
  void clear_heatsink_temperature();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& heatsink_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_heatsink_temperature();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_heatsink_temperature();
  void set_allocated_heatsink_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* heatsink_temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_heatsink_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_heatsink_temperature();
  public:
  void unsafe_arena_set_allocated_heatsink_temperature(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* heatsink_temperature);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_heatsink_temperature();

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* asic_temperature_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* heatsink_temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureResponse_PromethIONTemperature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetTemperatureResponse.PromethIONTemperature) */ {
 public:
  inline GetTemperatureResponse_PromethIONTemperature() : GetTemperatureResponse_PromethIONTemperature(nullptr) {}
  ~GetTemperatureResponse_PromethIONTemperature() override;
  explicit constexpr GetTemperatureResponse_PromethIONTemperature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemperatureResponse_PromethIONTemperature(const GetTemperatureResponse_PromethIONTemperature& from);
  GetTemperatureResponse_PromethIONTemperature(GetTemperatureResponse_PromethIONTemperature&& from) noexcept
    : GetTemperatureResponse_PromethIONTemperature() {
    *this = ::std::move(from);
  }

  inline GetTemperatureResponse_PromethIONTemperature& operator=(const GetTemperatureResponse_PromethIONTemperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureResponse_PromethIONTemperature& operator=(GetTemperatureResponse_PromethIONTemperature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemperatureResponse_PromethIONTemperature& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTemperatureResponse_PromethIONTemperature* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureResponse_PromethIONTemperature*>(
               &_GetTemperatureResponse_PromethIONTemperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetTemperatureResponse_PromethIONTemperature& a, GetTemperatureResponse_PromethIONTemperature& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureResponse_PromethIONTemperature* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureResponse_PromethIONTemperature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureResponse_PromethIONTemperature* New() const final {
    return new GetTemperatureResponse_PromethIONTemperature();
  }

  GetTemperatureResponse_PromethIONTemperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureResponse_PromethIONTemperature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTemperatureResponse_PromethIONTemperature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTemperatureResponse_PromethIONTemperature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemperatureResponse_PromethIONTemperature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetTemperatureResponse.PromethIONTemperature";
  }
  protected:
  explicit GetTemperatureResponse_PromethIONTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowcellTemperatureFieldNumber = 1,
    kChamberTemperatureFieldNumber = 2,
  };
  // .google.protobuf.FloatValue flowcell_temperature = 1;
  bool has_flowcell_temperature() const;
  private:
  bool _internal_has_flowcell_temperature() const;
  public:
  void clear_flowcell_temperature();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& flowcell_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_flowcell_temperature();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_flowcell_temperature();
  void set_allocated_flowcell_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* flowcell_temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_flowcell_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_flowcell_temperature();
  public:
  void unsafe_arena_set_allocated_flowcell_temperature(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* flowcell_temperature);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_flowcell_temperature();

  // .google.protobuf.FloatValue chamber_temperature = 2;
  bool has_chamber_temperature() const;
  private:
  bool _internal_has_chamber_temperature() const;
  public:
  void clear_chamber_temperature();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& chamber_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_chamber_temperature();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_chamber_temperature();
  void set_allocated_chamber_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* chamber_temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_chamber_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_chamber_temperature();
  public:
  void unsafe_arena_set_allocated_chamber_temperature(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* chamber_temperature);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_chamber_temperature();

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* flowcell_temperature_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* chamber_temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetTemperatureResponse) */ {
 public:
  inline GetTemperatureResponse() : GetTemperatureResponse(nullptr) {}
  ~GetTemperatureResponse() override;
  explicit constexpr GetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTemperatureResponse(const GetTemperatureResponse& from);
  GetTemperatureResponse(GetTemperatureResponse&& from) noexcept
    : GetTemperatureResponse() {
    *this = ::std::move(from);
  }

  inline GetTemperatureResponse& operator=(const GetTemperatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureResponse& operator=(GetTemperatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTemperatureResponse& default_instance() {
    return *internal_default_instance();
  }
  enum TemperatureCase {
    kMinion = 1,
    kPromethion = 2,
    TEMPERATURE_NOT_SET = 0,
  };

  static inline const GetTemperatureResponse* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureResponse*>(
               &_GetTemperatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetTemperatureResponse& a, GetTemperatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureResponse* New() const final {
    return new GetTemperatureResponse();
  }

  GetTemperatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTemperatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTemperatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemperatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetTemperatureResponse";
  }
  protected:
  explicit GetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetTemperatureResponse_MinIONTemperature MinIONTemperature;
  typedef GetTemperatureResponse_PromethIONTemperature PromethIONTemperature;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetTemperatureFieldNumber = 3,
    kMinionFieldNumber = 1,
    kPromethionFieldNumber = 2,
  };
  // .google.protobuf.FloatValue target_temperature = 3;
  bool has_target_temperature() const;
  private:
  bool _internal_has_target_temperature() const;
  public:
  void clear_target_temperature();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& target_temperature() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_target_temperature();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_target_temperature();
  void set_allocated_target_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* target_temperature);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_target_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_target_temperature();
  public:
  void unsafe_arena_set_allocated_target_temperature(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* target_temperature);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_target_temperature();

  // .minknow_api.device.GetTemperatureResponse.MinIONTemperature minion = 1;
  bool has_minion() const;
  private:
  bool _internal_has_minion() const;
  public:
  void clear_minion();
  const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature& minion() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* release_minion();
  ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* mutable_minion();
  void set_allocated_minion(::minknow_api::device::GetTemperatureResponse_MinIONTemperature* minion);
  private:
  const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature& _internal_minion() const;
  ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* _internal_mutable_minion();
  public:
  void unsafe_arena_set_allocated_minion(
      ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* minion);
  ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* unsafe_arena_release_minion();

  // .minknow_api.device.GetTemperatureResponse.PromethIONTemperature promethion = 2;
  bool has_promethion() const;
  private:
  bool _internal_has_promethion() const;
  public:
  void clear_promethion();
  const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature& promethion() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* release_promethion();
  ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* mutable_promethion();
  void set_allocated_promethion(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* promethion);
  private:
  const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature& _internal_promethion() const;
  ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* _internal_mutable_promethion();
  public:
  void unsafe_arena_set_allocated_promethion(
      ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* promethion);
  ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* unsafe_arena_release_promethion();

  void clear_temperature();
  TemperatureCase temperature_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.device.GetTemperatureResponse)
 private:
  class _Internal;
  void set_has_minion();
  void set_has_promethion();

  inline bool has_temperature() const;
  inline void clear_has_temperature();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* target_temperature_;
  union TemperatureUnion {
    constexpr TemperatureUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* minion_;
    ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* promethion_;
  } temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class StreamTemperatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.StreamTemperatureRequest) */ {
 public:
  inline StreamTemperatureRequest() : StreamTemperatureRequest(nullptr) {}
  ~StreamTemperatureRequest() override;
  explicit constexpr StreamTemperatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTemperatureRequest(const StreamTemperatureRequest& from);
  StreamTemperatureRequest(StreamTemperatureRequest&& from) noexcept
    : StreamTemperatureRequest() {
    *this = ::std::move(from);
  }

  inline StreamTemperatureRequest& operator=(const StreamTemperatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTemperatureRequest& operator=(StreamTemperatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTemperatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTemperatureRequest* internal_default_instance() {
    return reinterpret_cast<const StreamTemperatureRequest*>(
               &_StreamTemperatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(StreamTemperatureRequest& a, StreamTemperatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTemperatureRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTemperatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamTemperatureRequest* New() const final {
    return new StreamTemperatureRequest();
  }

  StreamTemperatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamTemperatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTemperatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTemperatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTemperatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.StreamTemperatureRequest";
  }
  protected:
  explicit StreamTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodSecondsFieldNumber = 1,
  };
  // uint32 period_seconds = 1;
  void clear_period_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 period_seconds() const;
  void set_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period_seconds() const;
  void _internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.StreamTemperatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UnblockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.UnblockRequest) */ {
 public:
  inline UnblockRequest() : UnblockRequest(nullptr) {}
  ~UnblockRequest() override;
  explicit constexpr UnblockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockRequest(const UnblockRequest& from);
  UnblockRequest(UnblockRequest&& from) noexcept
    : UnblockRequest() {
    *this = ::std::move(from);
  }

  inline UnblockRequest& operator=(const UnblockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockRequest& operator=(UnblockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DurationCase {
    kDurationInSeconds = 2,
    kDurationInMilliseconds = 3,
    DURATION_NOT_SET = 0,
  };

  static inline const UnblockRequest* internal_default_instance() {
    return reinterpret_cast<const UnblockRequest*>(
               &_UnblockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UnblockRequest& a, UnblockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnblockRequest* New() const final {
    return new UnblockRequest();
  }

  UnblockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnblockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnblockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnblockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.UnblockRequest";
  }
  protected:
  explicit UnblockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kDurationInSecondsFieldNumber = 2,
    kDurationInMillisecondsFieldNumber = 3,
  };
  // repeated uint32 channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // uint32 duration_in_seconds = 2;
  bool has_duration_in_seconds() const;
  private:
  bool _internal_has_duration_in_seconds() const;
  public:
  void clear_duration_in_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_in_seconds() const;
  void set_duration_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_in_seconds() const;
  void _internal_set_duration_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 duration_in_milliseconds = 3;
  bool has_duration_in_milliseconds() const;
  private:
  bool _internal_has_duration_in_milliseconds() const;
  public:
  void clear_duration_in_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_in_milliseconds() const;
  void set_duration_in_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_in_milliseconds() const;
  void _internal_set_duration_in_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_duration();
  DurationCase duration_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.device.UnblockRequest)
 private:
  class _Internal;
  void set_has_duration_in_seconds();
  void set_has_duration_in_milliseconds();

  inline bool has_duration() const;
  inline void clear_has_duration();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  union DurationUnion {
    constexpr DurationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 duration_in_seconds_;
    ::PROTOBUF_NAMESPACE_ID::uint32 duration_in_milliseconds_;
  } duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class UnblockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.UnblockResponse) */ {
 public:
  inline UnblockResponse() : UnblockResponse(nullptr) {}
  explicit constexpr UnblockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockResponse(const UnblockResponse& from);
  UnblockResponse(UnblockResponse&& from) noexcept
    : UnblockResponse() {
    *this = ::std::move(from);
  }

  inline UnblockResponse& operator=(const UnblockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockResponse& operator=(UnblockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnblockResponse* internal_default_instance() {
    return reinterpret_cast<const UnblockResponse*>(
               &_UnblockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UnblockResponse& a, UnblockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnblockResponse* New() const final {
    return new UnblockResponse();
  }

  UnblockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnblockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnblockResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnblockResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.UnblockResponse";
  }
  protected:
  explicit UnblockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.UnblockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CancelUnblocksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.CancelUnblocksRequest) */ {
 public:
  inline CancelUnblocksRequest() : CancelUnblocksRequest(nullptr) {}
  explicit constexpr CancelUnblocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelUnblocksRequest(const CancelUnblocksRequest& from);
  CancelUnblocksRequest(CancelUnblocksRequest&& from) noexcept
    : CancelUnblocksRequest() {
    *this = ::std::move(from);
  }

  inline CancelUnblocksRequest& operator=(const CancelUnblocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelUnblocksRequest& operator=(CancelUnblocksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelUnblocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelUnblocksRequest* internal_default_instance() {
    return reinterpret_cast<const CancelUnblocksRequest*>(
               &_CancelUnblocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CancelUnblocksRequest& a, CancelUnblocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelUnblocksRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelUnblocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelUnblocksRequest* New() const final {
    return new CancelUnblocksRequest();
  }

  CancelUnblocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelUnblocksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelUnblocksRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelUnblocksRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.CancelUnblocksRequest";
  }
  protected:
  explicit CancelUnblocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.CancelUnblocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class CancelUnblocksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.CancelUnblocksResponse) */ {
 public:
  inline CancelUnblocksResponse() : CancelUnblocksResponse(nullptr) {}
  ~CancelUnblocksResponse() override;
  explicit constexpr CancelUnblocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelUnblocksResponse(const CancelUnblocksResponse& from);
  CancelUnblocksResponse(CancelUnblocksResponse&& from) noexcept
    : CancelUnblocksResponse() {
    *this = ::std::move(from);
  }

  inline CancelUnblocksResponse& operator=(const CancelUnblocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelUnblocksResponse& operator=(CancelUnblocksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelUnblocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelUnblocksResponse* internal_default_instance() {
    return reinterpret_cast<const CancelUnblocksResponse*>(
               &_CancelUnblocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CancelUnblocksResponse& a, CancelUnblocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelUnblocksResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelUnblocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelUnblocksResponse* New() const final {
    return new CancelUnblocksResponse();
  }

  CancelUnblocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelUnblocksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelUnblocksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelUnblocksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelUnblocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.CancelUnblocksResponse";
  }
  protected:
  explicit CancelUnblocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancelledUnblocksFieldNumber = 1,
  };
  // uint32 cancelled_unblocks = 1;
  void clear_cancelled_unblocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 cancelled_unblocks() const;
  void set_cancelled_unblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cancelled_unblocks() const;
  void _internal_set_cancelled_unblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.CancelUnblocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cancelled_unblocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetChannelConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetChannelConfigurationRequest) */ {
 public:
  inline GetChannelConfigurationRequest() : GetChannelConfigurationRequest(nullptr) {}
  ~GetChannelConfigurationRequest() override;
  explicit constexpr GetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelConfigurationRequest(const GetChannelConfigurationRequest& from);
  GetChannelConfigurationRequest(GetChannelConfigurationRequest&& from) noexcept
    : GetChannelConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelConfigurationRequest& operator=(const GetChannelConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelConfigurationRequest& operator=(GetChannelConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelConfigurationRequest*>(
               &_GetChannelConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetChannelConfigurationRequest& a, GetChannelConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelConfigurationRequest* New() const final {
    return new GetChannelConfigurationRequest();
  }

  GetChannelConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelConfigurationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelConfigurationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetChannelConfigurationRequest";
  }
  protected:
  explicit GetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated uint32 channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetChannelConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetChannelConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetChannelConfigurationResponse) */ {
 public:
  inline GetChannelConfigurationResponse() : GetChannelConfigurationResponse(nullptr) {}
  ~GetChannelConfigurationResponse() override;
  explicit constexpr GetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChannelConfigurationResponse(const GetChannelConfigurationResponse& from);
  GetChannelConfigurationResponse(GetChannelConfigurationResponse&& from) noexcept
    : GetChannelConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelConfigurationResponse& operator=(const GetChannelConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelConfigurationResponse& operator=(GetChannelConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChannelConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChannelConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelConfigurationResponse*>(
               &_GetChannelConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetChannelConfigurationResponse& a, GetChannelConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelConfigurationResponse* New() const final {
    return new GetChannelConfigurationResponse();
  }

  GetChannelConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChannelConfigurationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetChannelConfigurationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetChannelConfigurationResponse";
  }
  protected:
  explicit GetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelConfigurationsFieldNumber = 1,
  };
  // repeated .minknow_api.device.ReturnedChannelConfiguration channel_configurations = 1;
  int channel_configurations_size() const;
  private:
  int _internal_channel_configurations_size() const;
  public:
  void clear_channel_configurations();
  ::minknow_api::device::ReturnedChannelConfiguration* mutable_channel_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ReturnedChannelConfiguration >*
      mutable_channel_configurations();
  private:
  const ::minknow_api::device::ReturnedChannelConfiguration& _internal_channel_configurations(int index) const;
  ::minknow_api::device::ReturnedChannelConfiguration* _internal_add_channel_configurations();
  public:
  const ::minknow_api::device::ReturnedChannelConfiguration& channel_configurations(int index) const;
  ::minknow_api::device::ReturnedChannelConfiguration* add_channel_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ReturnedChannelConfiguration >&
      channel_configurations() const;

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetChannelConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ReturnedChannelConfiguration > channel_configurations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse();
  explicit constexpr SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse& other);
  static const SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse*>(&_SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SetChannelConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetChannelConfigurationRequest) */ {
 public:
  inline SetChannelConfigurationRequest() : SetChannelConfigurationRequest(nullptr) {}
  ~SetChannelConfigurationRequest() override;
  explicit constexpr SetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChannelConfigurationRequest(const SetChannelConfigurationRequest& from);
  SetChannelConfigurationRequest(SetChannelConfigurationRequest&& from) noexcept
    : SetChannelConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SetChannelConfigurationRequest& operator=(const SetChannelConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChannelConfigurationRequest& operator=(SetChannelConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetChannelConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChannelConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SetChannelConfigurationRequest*>(
               &_SetChannelConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SetChannelConfigurationRequest& a, SetChannelConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChannelConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChannelConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetChannelConfigurationRequest* New() const final {
    return new SetChannelConfigurationRequest();
  }

  SetChannelConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetChannelConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetChannelConfigurationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetChannelConfigurationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetChannelConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetChannelConfigurationRequest";
  }
  protected:
  explicit SetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChannelConfigurationsFieldNumber = 1,
  };
  // map<uint32, .minknow_api.device.ChannelConfiguration> channel_configurations = 1;
  int channel_configurations_size() const;
  private:
  int _internal_channel_configurations_size() const;
  public:
  void clear_channel_configurations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >&
      _internal_channel_configurations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >*
      _internal_mutable_channel_configurations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >&
      channel_configurations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >*
      mutable_channel_configurations();

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetChannelConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> channel_configurations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetChannelConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetChannelConfigurationResponse) */ {
 public:
  inline SetChannelConfigurationResponse() : SetChannelConfigurationResponse(nullptr) {}
  explicit constexpr SetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChannelConfigurationResponse(const SetChannelConfigurationResponse& from);
  SetChannelConfigurationResponse(SetChannelConfigurationResponse&& from) noexcept
    : SetChannelConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetChannelConfigurationResponse& operator=(const SetChannelConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChannelConfigurationResponse& operator=(SetChannelConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetChannelConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChannelConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetChannelConfigurationResponse*>(
               &_SetChannelConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SetChannelConfigurationResponse& a, SetChannelConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChannelConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChannelConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetChannelConfigurationResponse* New() const final {
    return new SetChannelConfigurationResponse();
  }

  SetChannelConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetChannelConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetChannelConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetChannelConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetChannelConfigurationResponse";
  }
  protected:
  explicit SetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetChannelConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetChannelConfigurationAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetChannelConfigurationAllRequest) */ {
 public:
  inline SetChannelConfigurationAllRequest() : SetChannelConfigurationAllRequest(nullptr) {}
  ~SetChannelConfigurationAllRequest() override;
  explicit constexpr SetChannelConfigurationAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChannelConfigurationAllRequest(const SetChannelConfigurationAllRequest& from);
  SetChannelConfigurationAllRequest(SetChannelConfigurationAllRequest&& from) noexcept
    : SetChannelConfigurationAllRequest() {
    *this = ::std::move(from);
  }

  inline SetChannelConfigurationAllRequest& operator=(const SetChannelConfigurationAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChannelConfigurationAllRequest& operator=(SetChannelConfigurationAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetChannelConfigurationAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChannelConfigurationAllRequest* internal_default_instance() {
    return reinterpret_cast<const SetChannelConfigurationAllRequest*>(
               &_SetChannelConfigurationAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SetChannelConfigurationAllRequest& a, SetChannelConfigurationAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChannelConfigurationAllRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChannelConfigurationAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetChannelConfigurationAllRequest* New() const final {
    return new SetChannelConfigurationAllRequest();
  }

  SetChannelConfigurationAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetChannelConfigurationAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetChannelConfigurationAllRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetChannelConfigurationAllRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetChannelConfigurationAllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetChannelConfigurationAllRequest";
  }
  protected:
  explicit SetChannelConfigurationAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelConfigurationFieldNumber = 1,
  };
  // .minknow_api.device.ChannelConfiguration channel_configuration = 1 [(.minknow_api.rpc_unwrap) = true];
  bool has_channel_configuration() const;
  private:
  bool _internal_has_channel_configuration() const;
  public:
  void clear_channel_configuration();
  const ::minknow_api::device::ChannelConfiguration& channel_configuration() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::ChannelConfiguration* release_channel_configuration();
  ::minknow_api::device::ChannelConfiguration* mutable_channel_configuration();
  void set_allocated_channel_configuration(::minknow_api::device::ChannelConfiguration* channel_configuration);
  private:
  const ::minknow_api::device::ChannelConfiguration& _internal_channel_configuration() const;
  ::minknow_api::device::ChannelConfiguration* _internal_mutable_channel_configuration();
  public:
  void unsafe_arena_set_allocated_channel_configuration(
      ::minknow_api::device::ChannelConfiguration* channel_configuration);
  ::minknow_api::device::ChannelConfiguration* unsafe_arena_release_channel_configuration();

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetChannelConfigurationAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::device::ChannelConfiguration* channel_configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetChannelConfigurationAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetChannelConfigurationAllResponse) */ {
 public:
  inline SetChannelConfigurationAllResponse() : SetChannelConfigurationAllResponse(nullptr) {}
  explicit constexpr SetChannelConfigurationAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetChannelConfigurationAllResponse(const SetChannelConfigurationAllResponse& from);
  SetChannelConfigurationAllResponse(SetChannelConfigurationAllResponse&& from) noexcept
    : SetChannelConfigurationAllResponse() {
    *this = ::std::move(from);
  }

  inline SetChannelConfigurationAllResponse& operator=(const SetChannelConfigurationAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetChannelConfigurationAllResponse& operator=(SetChannelConfigurationAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetChannelConfigurationAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetChannelConfigurationAllResponse* internal_default_instance() {
    return reinterpret_cast<const SetChannelConfigurationAllResponse*>(
               &_SetChannelConfigurationAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SetChannelConfigurationAllResponse& a, SetChannelConfigurationAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetChannelConfigurationAllResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetChannelConfigurationAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetChannelConfigurationAllResponse* New() const final {
    return new SetChannelConfigurationAllResponse();
  }

  SetChannelConfigurationAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetChannelConfigurationAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetChannelConfigurationAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetChannelConfigurationAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetChannelConfigurationAllResponse";
  }
  protected:
  explicit SetChannelConfigurationAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetChannelConfigurationAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SaturationConfig_Thresholds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SaturationConfig.Thresholds) */ {
 public:
  inline SaturationConfig_Thresholds() : SaturationConfig_Thresholds(nullptr) {}
  ~SaturationConfig_Thresholds() override;
  explicit constexpr SaturationConfig_Thresholds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaturationConfig_Thresholds(const SaturationConfig_Thresholds& from);
  SaturationConfig_Thresholds(SaturationConfig_Thresholds&& from) noexcept
    : SaturationConfig_Thresholds() {
    *this = ::std::move(from);
  }

  inline SaturationConfig_Thresholds& operator=(const SaturationConfig_Thresholds& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaturationConfig_Thresholds& operator=(SaturationConfig_Thresholds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaturationConfig_Thresholds& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaturationConfig_Thresholds* internal_default_instance() {
    return reinterpret_cast<const SaturationConfig_Thresholds*>(
               &_SaturationConfig_Thresholds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SaturationConfig_Thresholds& a, SaturationConfig_Thresholds& b) {
    a.Swap(&b);
  }
  inline void Swap(SaturationConfig_Thresholds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaturationConfig_Thresholds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaturationConfig_Thresholds* New() const final {
    return new SaturationConfig_Thresholds();
  }

  SaturationConfig_Thresholds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaturationConfig_Thresholds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaturationConfig_Thresholds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaturationConfig_Thresholds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaturationConfig_Thresholds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SaturationConfig.Thresholds";
  }
  protected:
  explicit SaturationConfig_Thresholds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneralThresholdFieldNumber = 1,
    kUnblockThresholdFieldNumber = 2,
    kUserGeneralThresholdFieldNumber = 3,
    kUserUnblockThresholdFieldNumber = 4,
  };
  // .google.protobuf.UInt32Value general_threshold = 1;
  bool has_general_threshold() const;
  private:
  bool _internal_has_general_threshold() const;
  public:
  void clear_general_threshold();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& general_threshold() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_general_threshold();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_general_threshold();
  void set_allocated_general_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* general_threshold);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_general_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_general_threshold();
  public:
  void unsafe_arena_set_allocated_general_threshold(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* general_threshold);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_general_threshold();

  // .google.protobuf.UInt32Value unblock_threshold = 2;
  bool has_unblock_threshold() const;
  private:
  bool _internal_has_unblock_threshold() const;
  public:
  void clear_unblock_threshold();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& unblock_threshold() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_unblock_threshold();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_unblock_threshold();
  void set_allocated_unblock_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* unblock_threshold);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_unblock_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_unblock_threshold();
  public:
  void unsafe_arena_set_allocated_unblock_threshold(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* unblock_threshold);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_unblock_threshold();

  // .google.protobuf.UInt32Value user_general_threshold = 3;
  bool has_user_general_threshold() const;
  private:
  bool _internal_has_user_general_threshold() const;
  public:
  void clear_user_general_threshold();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& user_general_threshold() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_user_general_threshold();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_user_general_threshold();
  void set_allocated_user_general_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* user_general_threshold);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_user_general_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_user_general_threshold();
  public:
  void unsafe_arena_set_allocated_user_general_threshold(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_general_threshold);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_user_general_threshold();

  // .google.protobuf.UInt32Value user_unblock_threshold = 4;
  bool has_user_unblock_threshold() const;
  private:
  bool _internal_has_user_unblock_threshold() const;
  public:
  void clear_user_unblock_threshold();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& user_unblock_threshold() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_user_unblock_threshold();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_user_unblock_threshold();
  void set_allocated_user_unblock_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* user_unblock_threshold);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_user_unblock_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_user_unblock_threshold();
  public:
  void unsafe_arena_set_allocated_user_unblock_threshold(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_unblock_threshold);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_user_unblock_threshold();

  // @@protoc_insertion_point(class_scope:minknow_api.device.SaturationConfig.Thresholds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* general_threshold_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unblock_threshold_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_general_threshold_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_unblock_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SaturationConfig_SoftwareSaturation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SaturationConfig.SoftwareSaturation) */ {
 public:
  inline SaturationConfig_SoftwareSaturation() : SaturationConfig_SoftwareSaturation(nullptr) {}
  ~SaturationConfig_SoftwareSaturation() override;
  explicit constexpr SaturationConfig_SoftwareSaturation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaturationConfig_SoftwareSaturation(const SaturationConfig_SoftwareSaturation& from);
  SaturationConfig_SoftwareSaturation(SaturationConfig_SoftwareSaturation&& from) noexcept
    : SaturationConfig_SoftwareSaturation() {
    *this = ::std::move(from);
  }

  inline SaturationConfig_SoftwareSaturation& operator=(const SaturationConfig_SoftwareSaturation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaturationConfig_SoftwareSaturation& operator=(SaturationConfig_SoftwareSaturation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaturationConfig_SoftwareSaturation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaturationConfig_SoftwareSaturation* internal_default_instance() {
    return reinterpret_cast<const SaturationConfig_SoftwareSaturation*>(
               &_SaturationConfig_SoftwareSaturation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SaturationConfig_SoftwareSaturation& a, SaturationConfig_SoftwareSaturation& b) {
    a.Swap(&b);
  }
  inline void Swap(SaturationConfig_SoftwareSaturation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaturationConfig_SoftwareSaturation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaturationConfig_SoftwareSaturation* New() const final {
    return new SaturationConfig_SoftwareSaturation();
  }

  SaturationConfig_SoftwareSaturation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaturationConfig_SoftwareSaturation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaturationConfig_SoftwareSaturation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaturationConfig_SoftwareSaturation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaturationConfig_SoftwareSaturation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SaturationConfig.SoftwareSaturation";
  }
  protected:
  explicit SaturationConfig_SoftwareSaturation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoftwareMinAdcFieldNumber = 2,
    kSoftwareMaxAdcFieldNumber = 3,
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.Int32Value software_min_adc = 2;
  bool has_software_min_adc() const;
  private:
  bool _internal_has_software_min_adc() const;
  public:
  void clear_software_min_adc();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& software_min_adc() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Int32Value* release_software_min_adc();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_software_min_adc();
  void set_allocated_software_min_adc(::PROTOBUF_NAMESPACE_ID::Int32Value* software_min_adc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_software_min_adc() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_software_min_adc();
  public:
  void unsafe_arena_set_allocated_software_min_adc(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* software_min_adc);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_software_min_adc();

  // .google.protobuf.Int32Value software_max_adc = 3;
  bool has_software_max_adc() const;
  private:
  bool _internal_has_software_max_adc() const;
  public:
  void clear_software_max_adc();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& software_max_adc() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Int32Value* release_software_max_adc();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_software_max_adc();
  void set_allocated_software_max_adc(::PROTOBUF_NAMESPACE_ID::Int32Value* software_max_adc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_software_max_adc() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_software_max_adc();
  public:
  void unsafe_arena_set_allocated_software_max_adc(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* software_max_adc);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_software_max_adc();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SaturationConfig.SoftwareSaturation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* software_min_adc_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* software_max_adc_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SaturationConfig_UserThresholdSaturation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SaturationConfig.UserThresholdSaturation) */ {
 public:
  inline SaturationConfig_UserThresholdSaturation() : SaturationConfig_UserThresholdSaturation(nullptr) {}
  ~SaturationConfig_UserThresholdSaturation() override;
  explicit constexpr SaturationConfig_UserThresholdSaturation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaturationConfig_UserThresholdSaturation(const SaturationConfig_UserThresholdSaturation& from);
  SaturationConfig_UserThresholdSaturation(SaturationConfig_UserThresholdSaturation&& from) noexcept
    : SaturationConfig_UserThresholdSaturation() {
    *this = ::std::move(from);
  }

  inline SaturationConfig_UserThresholdSaturation& operator=(const SaturationConfig_UserThresholdSaturation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaturationConfig_UserThresholdSaturation& operator=(SaturationConfig_UserThresholdSaturation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaturationConfig_UserThresholdSaturation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaturationConfig_UserThresholdSaturation* internal_default_instance() {
    return reinterpret_cast<const SaturationConfig_UserThresholdSaturation*>(
               &_SaturationConfig_UserThresholdSaturation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SaturationConfig_UserThresholdSaturation& a, SaturationConfig_UserThresholdSaturation& b) {
    a.Swap(&b);
  }
  inline void Swap(SaturationConfig_UserThresholdSaturation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaturationConfig_UserThresholdSaturation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaturationConfig_UserThresholdSaturation* New() const final {
    return new SaturationConfig_UserThresholdSaturation();
  }

  SaturationConfig_UserThresholdSaturation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaturationConfig_UserThresholdSaturation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaturationConfig_UserThresholdSaturation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaturationConfig_UserThresholdSaturation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaturationConfig_UserThresholdSaturation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SaturationConfig.UserThresholdSaturation";
  }
  protected:
  explicit SaturationConfig_UserThresholdSaturation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserThresholdMinPaFieldNumber = 2,
    kUserThresholdMaxPaFieldNumber = 3,
    kEnabledFieldNumber = 1,
  };
  // .google.protobuf.FloatValue user_threshold_min_pa = 2;
  bool has_user_threshold_min_pa() const;
  private:
  bool _internal_has_user_threshold_min_pa() const;
  public:
  void clear_user_threshold_min_pa();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& user_threshold_min_pa() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_user_threshold_min_pa();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_user_threshold_min_pa();
  void set_allocated_user_threshold_min_pa(::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_min_pa);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_user_threshold_min_pa() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_user_threshold_min_pa();
  public:
  void unsafe_arena_set_allocated_user_threshold_min_pa(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_min_pa);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_user_threshold_min_pa();

  // .google.protobuf.FloatValue user_threshold_max_pa = 3;
  bool has_user_threshold_max_pa() const;
  private:
  bool _internal_has_user_threshold_max_pa() const;
  public:
  void clear_user_threshold_max_pa();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& user_threshold_max_pa() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::FloatValue* release_user_threshold_max_pa();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_user_threshold_max_pa();
  void set_allocated_user_threshold_max_pa(::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_max_pa);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_user_threshold_max_pa() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_user_threshold_max_pa();
  public:
  void unsafe_arena_set_allocated_user_threshold_max_pa(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_max_pa);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_user_threshold_max_pa();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SaturationConfig.UserThresholdSaturation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_min_pa_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_max_pa_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SaturationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SaturationConfig) */ {
 public:
  inline SaturationConfig() : SaturationConfig(nullptr) {}
  ~SaturationConfig() override;
  explicit constexpr SaturationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaturationConfig(const SaturationConfig& from);
  SaturationConfig(SaturationConfig&& from) noexcept
    : SaturationConfig() {
    *this = ::std::move(from);
  }

  inline SaturationConfig& operator=(const SaturationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaturationConfig& operator=(SaturationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaturationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaturationConfig* internal_default_instance() {
    return reinterpret_cast<const SaturationConfig*>(
               &_SaturationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SaturationConfig& a, SaturationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SaturationConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaturationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaturationConfig* New() const final {
    return new SaturationConfig();
  }

  SaturationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaturationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaturationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaturationConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaturationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SaturationConfig";
  }
  protected:
  explicit SaturationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SaturationConfig_Thresholds Thresholds;
  typedef SaturationConfig_SoftwareSaturation SoftwareSaturation;
  typedef SaturationConfig_UserThresholdSaturation UserThresholdSaturation;

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdsFieldNumber = 1,
    kSoftwareSaturationFieldNumber = 2,
    kUserThresholdSaturationFieldNumber = 3,
  };
  // .minknow_api.device.SaturationConfig.Thresholds thresholds = 1;
  bool has_thresholds() const;
  private:
  bool _internal_has_thresholds() const;
  public:
  void clear_thresholds();
  const ::minknow_api::device::SaturationConfig_Thresholds& thresholds() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SaturationConfig_Thresholds* release_thresholds();
  ::minknow_api::device::SaturationConfig_Thresholds* mutable_thresholds();
  void set_allocated_thresholds(::minknow_api::device::SaturationConfig_Thresholds* thresholds);
  private:
  const ::minknow_api::device::SaturationConfig_Thresholds& _internal_thresholds() const;
  ::minknow_api::device::SaturationConfig_Thresholds* _internal_mutable_thresholds();
  public:
  void unsafe_arena_set_allocated_thresholds(
      ::minknow_api::device::SaturationConfig_Thresholds* thresholds);
  ::minknow_api::device::SaturationConfig_Thresholds* unsafe_arena_release_thresholds();

  // .minknow_api.device.SaturationConfig.SoftwareSaturation software_saturation = 2;
  bool has_software_saturation() const;
  private:
  bool _internal_has_software_saturation() const;
  public:
  void clear_software_saturation();
  const ::minknow_api::device::SaturationConfig_SoftwareSaturation& software_saturation() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SaturationConfig_SoftwareSaturation* release_software_saturation();
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* mutable_software_saturation();
  void set_allocated_software_saturation(::minknow_api::device::SaturationConfig_SoftwareSaturation* software_saturation);
  private:
  const ::minknow_api::device::SaturationConfig_SoftwareSaturation& _internal_software_saturation() const;
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* _internal_mutable_software_saturation();
  public:
  void unsafe_arena_set_allocated_software_saturation(
      ::minknow_api::device::SaturationConfig_SoftwareSaturation* software_saturation);
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* unsafe_arena_release_software_saturation();

  // .minknow_api.device.SaturationConfig.UserThresholdSaturation user_threshold_saturation = 3;
  bool has_user_threshold_saturation() const;
  private:
  bool _internal_has_user_threshold_saturation() const;
  public:
  void clear_user_threshold_saturation();
  const ::minknow_api::device::SaturationConfig_UserThresholdSaturation& user_threshold_saturation() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SaturationConfig_UserThresholdSaturation* release_user_threshold_saturation();
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* mutable_user_threshold_saturation();
  void set_allocated_user_threshold_saturation(::minknow_api::device::SaturationConfig_UserThresholdSaturation* user_threshold_saturation);
  private:
  const ::minknow_api::device::SaturationConfig_UserThresholdSaturation& _internal_user_threshold_saturation() const;
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* _internal_mutable_user_threshold_saturation();
  public:
  void unsafe_arena_set_allocated_user_threshold_saturation(
      ::minknow_api::device::SaturationConfig_UserThresholdSaturation* user_threshold_saturation);
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* unsafe_arena_release_user_threshold_saturation();

  // @@protoc_insertion_point(class_scope:minknow_api.device.SaturationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::device::SaturationConfig_Thresholds* thresholds_;
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* software_saturation_;
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* user_threshold_saturation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetSaturationConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetSaturationConfigRequest) */ {
 public:
  inline SetSaturationConfigRequest() : SetSaturationConfigRequest(nullptr) {}
  ~SetSaturationConfigRequest() override;
  explicit constexpr SetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSaturationConfigRequest(const SetSaturationConfigRequest& from);
  SetSaturationConfigRequest(SetSaturationConfigRequest&& from) noexcept
    : SetSaturationConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetSaturationConfigRequest& operator=(const SetSaturationConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSaturationConfigRequest& operator=(SetSaturationConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSaturationConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSaturationConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetSaturationConfigRequest*>(
               &_SetSaturationConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SetSaturationConfigRequest& a, SetSaturationConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSaturationConfigRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSaturationConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSaturationConfigRequest* New() const final {
    return new SetSaturationConfigRequest();
  }

  SetSaturationConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSaturationConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSaturationConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSaturationConfigRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSaturationConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetSaturationConfigRequest";
  }
  protected:
  explicit SetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::minknow_api::device::SaturationConfig& settings() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SaturationConfig* release_settings();
  ::minknow_api::device::SaturationConfig* mutable_settings();
  void set_allocated_settings(::minknow_api::device::SaturationConfig* settings);
  private:
  const ::minknow_api::device::SaturationConfig& _internal_settings() const;
  ::minknow_api::device::SaturationConfig* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::minknow_api::device::SaturationConfig* settings);
  ::minknow_api::device::SaturationConfig* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetSaturationConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::device::SaturationConfig* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetSaturationConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetSaturationConfigResponse) */ {
 public:
  inline SetSaturationConfigResponse() : SetSaturationConfigResponse(nullptr) {}
  explicit constexpr SetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSaturationConfigResponse(const SetSaturationConfigResponse& from);
  SetSaturationConfigResponse(SetSaturationConfigResponse&& from) noexcept
    : SetSaturationConfigResponse() {
    *this = ::std::move(from);
  }

  inline SetSaturationConfigResponse& operator=(const SetSaturationConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSaturationConfigResponse& operator=(SetSaturationConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSaturationConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSaturationConfigResponse* internal_default_instance() {
    return reinterpret_cast<const SetSaturationConfigResponse*>(
               &_SetSaturationConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SetSaturationConfigResponse& a, SetSaturationConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSaturationConfigResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSaturationConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSaturationConfigResponse* New() const final {
    return new SetSaturationConfigResponse();
  }

  SetSaturationConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSaturationConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetSaturationConfigResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetSaturationConfigResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetSaturationConfigResponse";
  }
  protected:
  explicit SetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetSaturationConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetSaturationConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetSaturationConfigRequest) */ {
 public:
  inline GetSaturationConfigRequest() : GetSaturationConfigRequest(nullptr) {}
  explicit constexpr GetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSaturationConfigRequest(const GetSaturationConfigRequest& from);
  GetSaturationConfigRequest(GetSaturationConfigRequest&& from) noexcept
    : GetSaturationConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetSaturationConfigRequest& operator=(const GetSaturationConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSaturationConfigRequest& operator=(GetSaturationConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSaturationConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSaturationConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetSaturationConfigRequest*>(
               &_GetSaturationConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetSaturationConfigRequest& a, GetSaturationConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSaturationConfigRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSaturationConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSaturationConfigRequest* New() const final {
    return new GetSaturationConfigRequest();
  }

  GetSaturationConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSaturationConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSaturationConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSaturationConfigRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetSaturationConfigRequest";
  }
  protected:
  explicit GetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetSaturationConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetSaturationConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetSaturationConfigResponse) */ {
 public:
  inline GetSaturationConfigResponse() : GetSaturationConfigResponse(nullptr) {}
  ~GetSaturationConfigResponse() override;
  explicit constexpr GetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSaturationConfigResponse(const GetSaturationConfigResponse& from);
  GetSaturationConfigResponse(GetSaturationConfigResponse&& from) noexcept
    : GetSaturationConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetSaturationConfigResponse& operator=(const GetSaturationConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSaturationConfigResponse& operator=(GetSaturationConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSaturationConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSaturationConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetSaturationConfigResponse*>(
               &_GetSaturationConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetSaturationConfigResponse& a, GetSaturationConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSaturationConfigResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSaturationConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSaturationConfigResponse* New() const final {
    return new GetSaturationConfigResponse();
  }

  GetSaturationConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSaturationConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSaturationConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSaturationConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSaturationConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetSaturationConfigResponse";
  }
  protected:
  explicit GetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::minknow_api::device::SaturationConfig& settings() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::SaturationConfig* release_settings();
  ::minknow_api::device::SaturationConfig* mutable_settings();
  void set_allocated_settings(::minknow_api::device::SaturationConfig* settings);
  private:
  const ::minknow_api::device::SaturationConfig& _internal_settings() const;
  ::minknow_api::device::SaturationConfig* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::minknow_api::device::SaturationConfig* settings);
  ::minknow_api::device::SaturationConfig* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetSaturationConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::device::SaturationConfig* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetSampleRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetSampleRateRequest) */ {
 public:
  inline GetSampleRateRequest() : GetSampleRateRequest(nullptr) {}
  explicit constexpr GetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSampleRateRequest(const GetSampleRateRequest& from);
  GetSampleRateRequest(GetSampleRateRequest&& from) noexcept
    : GetSampleRateRequest() {
    *this = ::std::move(from);
  }

  inline GetSampleRateRequest& operator=(const GetSampleRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSampleRateRequest& operator=(GetSampleRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSampleRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSampleRateRequest* internal_default_instance() {
    return reinterpret_cast<const GetSampleRateRequest*>(
               &_GetSampleRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetSampleRateRequest& a, GetSampleRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSampleRateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSampleRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSampleRateRequest* New() const final {
    return new GetSampleRateRequest();
  }

  GetSampleRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSampleRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSampleRateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSampleRateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetSampleRateRequest";
  }
  protected:
  explicit GetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetSampleRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetSampleRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetSampleRateResponse) */ {
 public:
  inline GetSampleRateResponse() : GetSampleRateResponse(nullptr) {}
  ~GetSampleRateResponse() override;
  explicit constexpr GetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSampleRateResponse(const GetSampleRateResponse& from);
  GetSampleRateResponse(GetSampleRateResponse&& from) noexcept
    : GetSampleRateResponse() {
    *this = ::std::move(from);
  }

  inline GetSampleRateResponse& operator=(const GetSampleRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSampleRateResponse& operator=(GetSampleRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSampleRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSampleRateResponse* internal_default_instance() {
    return reinterpret_cast<const GetSampleRateResponse*>(
               &_GetSampleRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetSampleRateResponse& a, GetSampleRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSampleRateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSampleRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSampleRateResponse* New() const final {
    return new GetSampleRateResponse();
  }

  GetSampleRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSampleRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSampleRateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSampleRateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSampleRateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetSampleRateResponse";
  }
  protected:
  explicit GetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 1,
  };
  // uint32 sample_rate = 1;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetSampleRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetSampleRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetSampleRateRequest) */ {
 public:
  inline SetSampleRateRequest() : SetSampleRateRequest(nullptr) {}
  ~SetSampleRateRequest() override;
  explicit constexpr SetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSampleRateRequest(const SetSampleRateRequest& from);
  SetSampleRateRequest(SetSampleRateRequest&& from) noexcept
    : SetSampleRateRequest() {
    *this = ::std::move(from);
  }

  inline SetSampleRateRequest& operator=(const SetSampleRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSampleRateRequest& operator=(SetSampleRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSampleRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSampleRateRequest* internal_default_instance() {
    return reinterpret_cast<const SetSampleRateRequest*>(
               &_SetSampleRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SetSampleRateRequest& a, SetSampleRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSampleRateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSampleRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSampleRateRequest* New() const final {
    return new SetSampleRateRequest();
  }

  SetSampleRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSampleRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSampleRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSampleRateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSampleRateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetSampleRateRequest";
  }
  protected:
  explicit SetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 1,
  };
  // uint32 sample_rate = 1 [(.minknow_api.rpc_required) = true];
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetSampleRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetSampleRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetSampleRateResponse) */ {
 public:
  inline SetSampleRateResponse() : SetSampleRateResponse(nullptr) {}
  ~SetSampleRateResponse() override;
  explicit constexpr SetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSampleRateResponse(const SetSampleRateResponse& from);
  SetSampleRateResponse(SetSampleRateResponse&& from) noexcept
    : SetSampleRateResponse() {
    *this = ::std::move(from);
  }

  inline SetSampleRateResponse& operator=(const SetSampleRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSampleRateResponse& operator=(SetSampleRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetSampleRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSampleRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetSampleRateResponse*>(
               &_SetSampleRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SetSampleRateResponse& a, SetSampleRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSampleRateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSampleRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSampleRateResponse* New() const final {
    return new SetSampleRateResponse();
  }

  SetSampleRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSampleRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetSampleRateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetSampleRateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSampleRateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetSampleRateResponse";
  }
  protected:
  explicit SetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealSampleRateFieldNumber = 1,
  };
  // uint32 real_sample_rate = 1;
  void clear_real_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 real_sample_rate() const;
  void set_real_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_real_sample_rate() const;
  void _internal_set_real_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetSampleRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 real_sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetBiasVoltageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.GetBiasVoltageRequest) */ {
 public:
  inline GetBiasVoltageRequest() : GetBiasVoltageRequest(nullptr) {}
  explicit constexpr GetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBiasVoltageRequest(const GetBiasVoltageRequest& from);
  GetBiasVoltageRequest(GetBiasVoltageRequest&& from) noexcept
    : GetBiasVoltageRequest() {
    *this = ::std::move(from);
  }

  inline GetBiasVoltageRequest& operator=(const GetBiasVoltageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBiasVoltageRequest& operator=(GetBiasVoltageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBiasVoltageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBiasVoltageRequest* internal_default_instance() {
    return reinterpret_cast<const GetBiasVoltageRequest*>(
               &_GetBiasVoltageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetBiasVoltageRequest& a, GetBiasVoltageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBiasVoltageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBiasVoltageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBiasVoltageRequest* New() const final {
    return new GetBiasVoltageRequest();
  }

  GetBiasVoltageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBiasVoltageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBiasVoltageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBiasVoltageRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetBiasVoltageRequest";
  }
  protected:
  explicit GetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetBiasVoltageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class GetBiasVoltageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.GetBiasVoltageResponse) */ {
 public:
  inline GetBiasVoltageResponse() : GetBiasVoltageResponse(nullptr) {}
  ~GetBiasVoltageResponse() override;
  explicit constexpr GetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBiasVoltageResponse(const GetBiasVoltageResponse& from);
  GetBiasVoltageResponse(GetBiasVoltageResponse&& from) noexcept
    : GetBiasVoltageResponse() {
    *this = ::std::move(from);
  }

  inline GetBiasVoltageResponse& operator=(const GetBiasVoltageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBiasVoltageResponse& operator=(GetBiasVoltageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBiasVoltageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBiasVoltageResponse* internal_default_instance() {
    return reinterpret_cast<const GetBiasVoltageResponse*>(
               &_GetBiasVoltageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetBiasVoltageResponse& a, GetBiasVoltageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBiasVoltageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBiasVoltageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBiasVoltageResponse* New() const final {
    return new GetBiasVoltageResponse();
  }

  GetBiasVoltageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBiasVoltageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBiasVoltageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBiasVoltageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBiasVoltageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.GetBiasVoltageResponse";
  }
  protected:
  explicit GetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasVoltageFieldNumber = 1,
  };
  // double bias_voltage = 1;
  void clear_bias_voltage();
  double bias_voltage() const;
  void set_bias_voltage(double value);
  private:
  double _internal_bias_voltage() const;
  void _internal_set_bias_voltage(double value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.GetBiasVoltageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bias_voltage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetBiasVoltageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.device.SetBiasVoltageRequest) */ {
 public:
  inline SetBiasVoltageRequest() : SetBiasVoltageRequest(nullptr) {}
  ~SetBiasVoltageRequest() override;
  explicit constexpr SetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBiasVoltageRequest(const SetBiasVoltageRequest& from);
  SetBiasVoltageRequest(SetBiasVoltageRequest&& from) noexcept
    : SetBiasVoltageRequest() {
    *this = ::std::move(from);
  }

  inline SetBiasVoltageRequest& operator=(const SetBiasVoltageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBiasVoltageRequest& operator=(SetBiasVoltageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBiasVoltageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBiasVoltageRequest* internal_default_instance() {
    return reinterpret_cast<const SetBiasVoltageRequest*>(
               &_SetBiasVoltageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SetBiasVoltageRequest& a, SetBiasVoltageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBiasVoltageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBiasVoltageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBiasVoltageRequest* New() const final {
    return new SetBiasVoltageRequest();
  }

  SetBiasVoltageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBiasVoltageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBiasVoltageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetBiasVoltageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBiasVoltageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetBiasVoltageRequest";
  }
  protected:
  explicit SetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasVoltageFieldNumber = 1,
  };
  // double bias_voltage = 1 [(.minknow_api.rpc_required) = true];
  void clear_bias_voltage();
  double bias_voltage() const;
  void set_bias_voltage(double value);
  private:
  double _internal_bias_voltage() const;
  void _internal_set_bias_voltage(double value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetBiasVoltageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bias_voltage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class SetBiasVoltageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.device.SetBiasVoltageResponse) */ {
 public:
  inline SetBiasVoltageResponse() : SetBiasVoltageResponse(nullptr) {}
  explicit constexpr SetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBiasVoltageResponse(const SetBiasVoltageResponse& from);
  SetBiasVoltageResponse(SetBiasVoltageResponse&& from) noexcept
    : SetBiasVoltageResponse() {
    *this = ::std::move(from);
  }

  inline SetBiasVoltageResponse& operator=(const SetBiasVoltageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBiasVoltageResponse& operator=(SetBiasVoltageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBiasVoltageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBiasVoltageResponse* internal_default_instance() {
    return reinterpret_cast<const SetBiasVoltageResponse*>(
               &_SetBiasVoltageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SetBiasVoltageResponse& a, SetBiasVoltageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBiasVoltageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBiasVoltageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBiasVoltageResponse* New() const final {
    return new SetBiasVoltageResponse();
  }

  SetBiasVoltageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBiasVoltageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetBiasVoltageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetBiasVoltageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.device.SetBiasVoltageResponse";
  }
  protected:
  explicit SetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.device.SetBiasVoltageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelConfiguration

// uint32 well = 1;
inline void ChannelConfiguration::clear_well() {
  well_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConfiguration::_internal_well() const {
  return well_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConfiguration::well() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelConfiguration.well)
  return _internal_well();
}
inline void ChannelConfiguration::_internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  well_ = value;
}
inline void ChannelConfiguration::set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_well(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelConfiguration.well)
}

// bool test_current = 2;
inline void ChannelConfiguration::clear_test_current() {
  test_current_ = false;
}
inline bool ChannelConfiguration::_internal_test_current() const {
  return test_current_;
}
inline bool ChannelConfiguration::test_current() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelConfiguration.test_current)
  return _internal_test_current();
}
inline void ChannelConfiguration::_internal_set_test_current(bool value) {
  
  test_current_ = value;
}
inline void ChannelConfiguration::set_test_current(bool value) {
  _internal_set_test_current(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelConfiguration.test_current)
}

// -------------------------------------------------------------------

// ReturnedChannelConfiguration

// uint32 well = 1;
inline void ReturnedChannelConfiguration::clear_well() {
  well_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnedChannelConfiguration::_internal_well() const {
  return well_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReturnedChannelConfiguration::well() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ReturnedChannelConfiguration.well)
  return _internal_well();
}
inline void ReturnedChannelConfiguration::_internal_set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  well_ = value;
}
inline void ReturnedChannelConfiguration::set_well(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_well(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ReturnedChannelConfiguration.well)
}

// bool test_current = 2;
inline void ReturnedChannelConfiguration::clear_test_current() {
  test_current_ = false;
}
inline bool ReturnedChannelConfiguration::_internal_test_current() const {
  return test_current_;
}
inline bool ReturnedChannelConfiguration::test_current() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ReturnedChannelConfiguration.test_current)
  return _internal_test_current();
}
inline void ReturnedChannelConfiguration::_internal_set_test_current(bool value) {
  
  test_current_ = value;
}
inline void ReturnedChannelConfiguration::set_test_current(bool value) {
  _internal_set_test_current(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ReturnedChannelConfiguration.test_current)
}

// bool unblock = 4;
inline void ReturnedChannelConfiguration::clear_unblock() {
  unblock_ = false;
}
inline bool ReturnedChannelConfiguration::_internal_unblock() const {
  return unblock_;
}
inline bool ReturnedChannelConfiguration::unblock() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ReturnedChannelConfiguration.unblock)
  return _internal_unblock();
}
inline void ReturnedChannelConfiguration::_internal_set_unblock(bool value) {
  
  unblock_ = value;
}
inline void ReturnedChannelConfiguration::set_unblock(bool value) {
  _internal_set_unblock(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ReturnedChannelConfiguration.unblock)
}

// -------------------------------------------------------------------

// GetDeviceInfoRequest

// -------------------------------------------------------------------

// GetDeviceInfoResponse_ComponentVersion

// string component = 1;
inline void GetDeviceInfoResponse_ComponentVersion::clear_component() {
  component_.ClearToEmpty();
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::component() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component)
  return _internal_component();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceInfoResponse_ComponentVersion::set_component(ArgT0&& arg0, ArgT... args) {
 
 component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component)
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::mutable_component() {
  std::string* _s = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component)
  return _s;
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::_internal_component() const {
  return component_.Get();
}
inline void GetDeviceInfoResponse_ComponentVersion::_internal_set_component(const std::string& value) {
  
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::_internal_mutable_component() {
  
  return component_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::release_component() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component)
  return component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceInfoResponse_ComponentVersion::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component)
}

// string version = 2;
inline void GetDeviceInfoResponse_ComponentVersion::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::version() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceInfoResponse_ComponentVersion::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version)
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version)
  return _s;
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::_internal_version() const {
  return version_.Get();
}
inline void GetDeviceInfoResponse_ComponentVersion::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::release_version() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceInfoResponse_ComponentVersion::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version)
}

// string serial_number = 3;
inline void GetDeviceInfoResponse_ComponentVersion::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::serial_number() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceInfoResponse_ComponentVersion::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number)
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number)
  return _s;
}
inline const std::string& GetDeviceInfoResponse_ComponentVersion::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void GetDeviceInfoResponse_ComponentVersion::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse_ComponentVersion::release_serial_number() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceInfoResponse_ComponentVersion::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number)
}

// -------------------------------------------------------------------

// GetDeviceInfoResponse

// string device_id = 1;
inline void GetDeviceInfoResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& GetDeviceInfoResponse::device_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceInfoResponse::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.device_id)
}
inline std::string* GetDeviceInfoResponse::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetDeviceInfoResponse.device_id)
  return _s;
}
inline const std::string& GetDeviceInfoResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void GetDeviceInfoResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceInfoResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetDeviceInfoResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceInfoResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetDeviceInfoResponse.device_id)
}

// .minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 2;
inline void GetDeviceInfoResponse::clear_device_type() {
  device_type_ = 0;
}
inline ::minknow_api::device::GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::_internal_device_type() const {
  return static_cast< ::minknow_api::device::GetDeviceInfoResponse_DeviceType >(device_type_);
}
inline ::minknow_api::device::GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::device_type() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.device_type)
  return _internal_device_type();
}
inline void GetDeviceInfoResponse::_internal_set_device_type(::minknow_api::device::GetDeviceInfoResponse_DeviceType value) {
  
  device_type_ = value;
}
inline void GetDeviceInfoResponse::set_device_type(::minknow_api::device::GetDeviceInfoResponse_DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.device_type)
}

// bool is_simulated = 3;
inline void GetDeviceInfoResponse::clear_is_simulated() {
  is_simulated_ = false;
}
inline bool GetDeviceInfoResponse::_internal_is_simulated() const {
  return is_simulated_;
}
inline bool GetDeviceInfoResponse::is_simulated() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.is_simulated)
  return _internal_is_simulated();
}
inline void GetDeviceInfoResponse::_internal_set_is_simulated(bool value) {
  
  is_simulated_ = value;
}
inline void GetDeviceInfoResponse::set_is_simulated(bool value) {
  _internal_set_is_simulated(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.is_simulated)
}

// uint32 max_channel_count = 4;
inline void GetDeviceInfoResponse::clear_max_channel_count() {
  max_channel_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::_internal_max_channel_count() const {
  return max_channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::max_channel_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.max_channel_count)
  return _internal_max_channel_count();
}
inline void GetDeviceInfoResponse::_internal_set_max_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_channel_count_ = value;
}
inline void GetDeviceInfoResponse::set_max_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_channel_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.max_channel_count)
}

// uint32 max_wells_per_channel = 5;
inline void GetDeviceInfoResponse::clear_max_wells_per_channel() {
  max_wells_per_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::_internal_max_wells_per_channel() const {
  return max_wells_per_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::max_wells_per_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.max_wells_per_channel)
  return _internal_max_wells_per_channel();
}
inline void GetDeviceInfoResponse::_internal_set_max_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_wells_per_channel_ = value;
}
inline void GetDeviceInfoResponse::set_max_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_wells_per_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.max_wells_per_channel)
}

// bool can_set_temperature = 6;
inline void GetDeviceInfoResponse::clear_can_set_temperature() {
  can_set_temperature_ = false;
}
inline bool GetDeviceInfoResponse::_internal_can_set_temperature() const {
  return can_set_temperature_;
}
inline bool GetDeviceInfoResponse::can_set_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.can_set_temperature)
  return _internal_can_set_temperature();
}
inline void GetDeviceInfoResponse::_internal_set_can_set_temperature(bool value) {
  
  can_set_temperature_ = value;
}
inline void GetDeviceInfoResponse::set_can_set_temperature(bool value) {
  _internal_set_can_set_temperature(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.can_set_temperature)
}

// uint32 digitisation = 7;
inline void GetDeviceInfoResponse::clear_digitisation() {
  digitisation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::_internal_digitisation() const {
  return digitisation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDeviceInfoResponse::digitisation() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.digitisation)
  return _internal_digitisation();
}
inline void GetDeviceInfoResponse::_internal_set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  digitisation_ = value;
}
inline void GetDeviceInfoResponse::set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_digitisation(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceInfoResponse.digitisation)
}

// repeated .minknow_api.device.GetDeviceInfoResponse.ComponentVersion firmware_version = 10;
inline int GetDeviceInfoResponse::_internal_firmware_version_size() const {
  return firmware_version_.size();
}
inline int GetDeviceInfoResponse::firmware_version_size() const {
  return _internal_firmware_version_size();
}
inline void GetDeviceInfoResponse::clear_firmware_version() {
  firmware_version_.Clear();
}
inline ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* GetDeviceInfoResponse::mutable_firmware_version(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetDeviceInfoResponse.firmware_version)
  return firmware_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >*
GetDeviceInfoResponse::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetDeviceInfoResponse.firmware_version)
  return &firmware_version_;
}
inline const ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion& GetDeviceInfoResponse::_internal_firmware_version(int index) const {
  return firmware_version_.Get(index);
}
inline const ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion& GetDeviceInfoResponse::firmware_version(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceInfoResponse.firmware_version)
  return _internal_firmware_version(index);
}
inline ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* GetDeviceInfoResponse::_internal_add_firmware_version() {
  return firmware_version_.Add();
}
inline ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* GetDeviceInfoResponse::add_firmware_version() {
  ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* _add = _internal_add_firmware_version();
  // @@protoc_insertion_point(field_add:minknow_api.device.GetDeviceInfoResponse.firmware_version)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >&
GetDeviceInfoResponse::firmware_version() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetDeviceInfoResponse.firmware_version)
  return firmware_version_;
}

// -------------------------------------------------------------------

// GetDeviceStateRequest

// -------------------------------------------------------------------

// GetDeviceStateResponse

// .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
inline void GetDeviceStateResponse::clear_device_state() {
  device_state_ = 0;
}
inline ::minknow_api::device::GetDeviceStateResponse_DeviceState GetDeviceStateResponse::_internal_device_state() const {
  return static_cast< ::minknow_api::device::GetDeviceStateResponse_DeviceState >(device_state_);
}
inline ::minknow_api::device::GetDeviceStateResponse_DeviceState GetDeviceStateResponse::device_state() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceStateResponse.device_state)
  return _internal_device_state();
}
inline void GetDeviceStateResponse::_internal_set_device_state(::minknow_api::device::GetDeviceStateResponse_DeviceState value) {
  
  device_state_ = value;
}
inline void GetDeviceStateResponse::set_device_state(::minknow_api::device::GetDeviceStateResponse_DeviceState value) {
  _internal_set_device_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceStateResponse.device_state)
}

// .minknow_api.device.FlowCellConnectorType flow_cell_connector = 2;
inline void GetDeviceStateResponse::clear_flow_cell_connector() {
  flow_cell_connector_ = 0;
}
inline ::minknow_api::device::FlowCellConnectorType GetDeviceStateResponse::_internal_flow_cell_connector() const {
  return static_cast< ::minknow_api::device::FlowCellConnectorType >(flow_cell_connector_);
}
inline ::minknow_api::device::FlowCellConnectorType GetDeviceStateResponse::flow_cell_connector() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetDeviceStateResponse.flow_cell_connector)
  return _internal_flow_cell_connector();
}
inline void GetDeviceStateResponse::_internal_set_flow_cell_connector(::minknow_api::device::FlowCellConnectorType value) {
  
  flow_cell_connector_ = value;
}
inline void GetDeviceStateResponse::set_flow_cell_connector(::minknow_api::device::FlowCellConnectorType value) {
  _internal_set_flow_cell_connector(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetDeviceStateResponse.flow_cell_connector)
}

// -------------------------------------------------------------------

// StreamDeviceStateRequest

// -------------------------------------------------------------------

// GetFlowCellInfoRequest

// -------------------------------------------------------------------

// GetFlowCellInfoResponse

// bool has_flow_cell = 1;
inline void GetFlowCellInfoResponse::clear_has_flow_cell() {
  has_flow_cell_ = false;
}
inline bool GetFlowCellInfoResponse::_internal_has_flow_cell() const {
  return has_flow_cell_;
}
inline bool GetFlowCellInfoResponse::has_flow_cell() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.has_flow_cell)
  return _internal_has_flow_cell();
}
inline void GetFlowCellInfoResponse::_internal_set_has_flow_cell(bool value) {
  
  has_flow_cell_ = value;
}
inline void GetFlowCellInfoResponse::set_has_flow_cell(bool value) {
  _internal_set_has_flow_cell(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.has_flow_cell)
}

// uint32 channel_count = 2;
inline void GetFlowCellInfoResponse::clear_channel_count() {
  channel_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFlowCellInfoResponse::_internal_channel_count() const {
  return channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFlowCellInfoResponse::channel_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.channel_count)
  return _internal_channel_count();
}
inline void GetFlowCellInfoResponse::_internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_count_ = value;
}
inline void GetFlowCellInfoResponse::set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.channel_count)
}

// uint32 wells_per_channel = 3;
inline void GetFlowCellInfoResponse::clear_wells_per_channel() {
  wells_per_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFlowCellInfoResponse::_internal_wells_per_channel() const {
  return wells_per_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetFlowCellInfoResponse::wells_per_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.wells_per_channel)
  return _internal_wells_per_channel();
}
inline void GetFlowCellInfoResponse::_internal_set_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wells_per_channel_ = value;
}
inline void GetFlowCellInfoResponse::set_wells_per_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wells_per_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.wells_per_channel)
}

// string flow_cell_id = 4;
inline void GetFlowCellInfoResponse::clear_flow_cell_id() {
  flow_cell_id_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::flow_cell_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.flow_cell_id)
  return _internal_flow_cell_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_flow_cell_id(ArgT0&& arg0, ArgT... args) {
 
 flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.flow_cell_id)
}
inline std::string* GetFlowCellInfoResponse::mutable_flow_cell_id() {
  std::string* _s = _internal_mutable_flow_cell_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.flow_cell_id)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_flow_cell_id() const {
  return flow_cell_id_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_flow_cell_id(const std::string& value) {
  
  flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_flow_cell_id() {
  
  return flow_cell_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_flow_cell_id() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.flow_cell_id)
  return flow_cell_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_flow_cell_id(std::string* flow_cell_id) {
  if (flow_cell_id != nullptr) {
    
  } else {
    
  }
  flow_cell_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_cell_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.flow_cell_id)
}

// string asic_id_str = 13;
inline void GetFlowCellInfoResponse::clear_asic_id_str() {
  asic_id_str_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::asic_id_str() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.asic_id_str)
  return _internal_asic_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_asic_id_str(ArgT0&& arg0, ArgT... args) {
 
 asic_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.asic_id_str)
}
inline std::string* GetFlowCellInfoResponse::mutable_asic_id_str() {
  std::string* _s = _internal_mutable_asic_id_str();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.asic_id_str)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_asic_id_str() const {
  return asic_id_str_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_asic_id_str(const std::string& value) {
  
  asic_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_asic_id_str() {
  
  return asic_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_asic_id_str() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.asic_id_str)
  return asic_id_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_asic_id_str(std::string* asic_id_str) {
  if (asic_id_str != nullptr) {
    
  } else {
    
  }
  asic_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asic_id_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.asic_id_str)
}

// string product_code = 6;
inline void GetFlowCellInfoResponse::clear_product_code() {
  product_code_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::product_code() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.product_code)
  return _internal_product_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_product_code(ArgT0&& arg0, ArgT... args) {
 
 product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.product_code)
}
inline std::string* GetFlowCellInfoResponse::mutable_product_code() {
  std::string* _s = _internal_mutable_product_code();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.product_code)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_product_code() const {
  return product_code_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_product_code(const std::string& value) {
  
  product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_product_code() {
  
  return product_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_product_code() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.product_code)
  return product_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_product_code(std::string* product_code) {
  if (product_code != nullptr) {
    
  } else {
    
  }
  product_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.product_code)
}

// string user_specified_flow_cell_id = 7;
inline void GetFlowCellInfoResponse::clear_user_specified_flow_cell_id() {
  user_specified_flow_cell_id_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::user_specified_flow_cell_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id)
  return _internal_user_specified_flow_cell_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_user_specified_flow_cell_id(ArgT0&& arg0, ArgT... args) {
 
 user_specified_flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id)
}
inline std::string* GetFlowCellInfoResponse::mutable_user_specified_flow_cell_id() {
  std::string* _s = _internal_mutable_user_specified_flow_cell_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_user_specified_flow_cell_id() const {
  return user_specified_flow_cell_id_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_user_specified_flow_cell_id(const std::string& value) {
  
  user_specified_flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_user_specified_flow_cell_id() {
  
  return user_specified_flow_cell_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_user_specified_flow_cell_id() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id)
  return user_specified_flow_cell_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_user_specified_flow_cell_id(std::string* user_specified_flow_cell_id) {
  if (user_specified_flow_cell_id != nullptr) {
    
  } else {
    
  }
  user_specified_flow_cell_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_specified_flow_cell_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id)
}

// string user_specified_product_code = 8;
inline void GetFlowCellInfoResponse::clear_user_specified_product_code() {
  user_specified_product_code_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::user_specified_product_code() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code)
  return _internal_user_specified_product_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_user_specified_product_code(ArgT0&& arg0, ArgT... args) {
 
 user_specified_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code)
}
inline std::string* GetFlowCellInfoResponse::mutable_user_specified_product_code() {
  std::string* _s = _internal_mutable_user_specified_product_code();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_user_specified_product_code() const {
  return user_specified_product_code_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_user_specified_product_code(const std::string& value) {
  
  user_specified_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_user_specified_product_code() {
  
  return user_specified_product_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_user_specified_product_code() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code)
  return user_specified_product_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_user_specified_product_code(std::string* user_specified_product_code) {
  if (user_specified_product_code != nullptr) {
    
  } else {
    
  }
  user_specified_product_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_specified_product_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code)
}

// bool has_adapter = 9;
inline void GetFlowCellInfoResponse::clear_has_adapter() {
  has_adapter_ = false;
}
inline bool GetFlowCellInfoResponse::_internal_has_adapter() const {
  return has_adapter_;
}
inline bool GetFlowCellInfoResponse::has_adapter() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.has_adapter)
  return _internal_has_adapter();
}
inline void GetFlowCellInfoResponse::_internal_set_has_adapter(bool value) {
  
  has_adapter_ = value;
}
inline void GetFlowCellInfoResponse::set_has_adapter(bool value) {
  _internal_set_has_adapter(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.has_adapter)
}

// string adapter_id = 10;
inline void GetFlowCellInfoResponse::clear_adapter_id() {
  adapter_id_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::adapter_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.adapter_id)
  return _internal_adapter_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_adapter_id(ArgT0&& arg0, ArgT... args) {
 
 adapter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.adapter_id)
}
inline std::string* GetFlowCellInfoResponse::mutable_adapter_id() {
  std::string* _s = _internal_mutable_adapter_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.adapter_id)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_adapter_id() const {
  return adapter_id_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_adapter_id(const std::string& value) {
  
  adapter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_adapter_id() {
  
  return adapter_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_adapter_id() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.adapter_id)
  return adapter_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_adapter_id(std::string* adapter_id) {
  if (adapter_id != nullptr) {
    
  } else {
    
  }
  adapter_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adapter_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.adapter_id)
}

// float temperature_offset = 11;
inline bool GetFlowCellInfoResponse::_internal_has_temperature_offset() const {
  return temperature_offset_nullable_case() == kTemperatureOffset;
}
inline bool GetFlowCellInfoResponse::has_temperature_offset() const {
  return _internal_has_temperature_offset();
}
inline void GetFlowCellInfoResponse::set_has_temperature_offset() {
  _oneof_case_[0] = kTemperatureOffset;
}
inline void GetFlowCellInfoResponse::clear_temperature_offset() {
  if (_internal_has_temperature_offset()) {
    temperature_offset_nullable_.temperature_offset_ = 0;
    clear_has_temperature_offset_nullable();
  }
}
inline float GetFlowCellInfoResponse::_internal_temperature_offset() const {
  if (_internal_has_temperature_offset()) {
    return temperature_offset_nullable_.temperature_offset_;
  }
  return 0;
}
inline void GetFlowCellInfoResponse::_internal_set_temperature_offset(float value) {
  if (!_internal_has_temperature_offset()) {
    clear_temperature_offset_nullable();
    set_has_temperature_offset();
  }
  temperature_offset_nullable_.temperature_offset_ = value;
}
inline float GetFlowCellInfoResponse::temperature_offset() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.temperature_offset)
  return _internal_temperature_offset();
}
inline void GetFlowCellInfoResponse::set_temperature_offset(float value) {
  _internal_set_temperature_offset(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.temperature_offset)
}

// string asic_version = 12;
inline void GetFlowCellInfoResponse::clear_asic_version() {
  asic_version_.ClearToEmpty();
}
inline const std::string& GetFlowCellInfoResponse::asic_version() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetFlowCellInfoResponse.asic_version)
  return _internal_asic_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlowCellInfoResponse::set_asic_version(ArgT0&& arg0, ArgT... args) {
 
 asic_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.GetFlowCellInfoResponse.asic_version)
}
inline std::string* GetFlowCellInfoResponse::mutable_asic_version() {
  std::string* _s = _internal_mutable_asic_version();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetFlowCellInfoResponse.asic_version)
  return _s;
}
inline const std::string& GetFlowCellInfoResponse::_internal_asic_version() const {
  return asic_version_.Get();
}
inline void GetFlowCellInfoResponse::_internal_set_asic_version(const std::string& value) {
  
  asic_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::_internal_mutable_asic_version() {
  
  return asic_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlowCellInfoResponse::release_asic_version() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetFlowCellInfoResponse.asic_version)
  return asic_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlowCellInfoResponse::set_allocated_asic_version(std::string* asic_version) {
  if (asic_version != nullptr) {
    
  } else {
    
  }
  asic_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asic_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetFlowCellInfoResponse.asic_version)
}

inline bool GetFlowCellInfoResponse::has_temperature_offset_nullable() const {
  return temperature_offset_nullable_case() != TEMPERATURE_OFFSET_NULLABLE_NOT_SET;
}
inline void GetFlowCellInfoResponse::clear_has_temperature_offset_nullable() {
  _oneof_case_[0] = TEMPERATURE_OFFSET_NULLABLE_NOT_SET;
}
inline GetFlowCellInfoResponse::TemperatureOffsetNullableCase GetFlowCellInfoResponse::temperature_offset_nullable_case() const {
  return GetFlowCellInfoResponse::TemperatureOffsetNullableCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamFlowCellInfoRequest

// -------------------------------------------------------------------

// SetUserSpecifiedFlowCellIdRequest

// string id = 1 [(.minknow_api.rpc_required) = true];
inline void SetUserSpecifiedFlowCellIdRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SetUserSpecifiedFlowCellIdRequest::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserSpecifiedFlowCellIdRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id)
}
inline std::string* SetUserSpecifiedFlowCellIdRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id)
  return _s;
}
inline const std::string& SetUserSpecifiedFlowCellIdRequest::_internal_id() const {
  return id_.Get();
}
inline void SetUserSpecifiedFlowCellIdRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserSpecifiedFlowCellIdRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserSpecifiedFlowCellIdRequest::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserSpecifiedFlowCellIdRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id)
}

// -------------------------------------------------------------------

// SetUserSpecifiedFlowCellIdResponse

// -------------------------------------------------------------------

// SetUserSpecifiedProductCodeRequest

// string code = 1 [(.minknow_api.rpc_required) = true];
inline void SetUserSpecifiedProductCodeRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& SetUserSpecifiedProductCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetUserSpecifiedProductCodeRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserSpecifiedProductCodeRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.SetUserSpecifiedProductCodeRequest.code)
}
inline std::string* SetUserSpecifiedProductCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SetUserSpecifiedProductCodeRequest.code)
  return _s;
}
inline const std::string& SetUserSpecifiedProductCodeRequest::_internal_code() const {
  return code_.Get();
}
inline void SetUserSpecifiedProductCodeRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserSpecifiedProductCodeRequest::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserSpecifiedProductCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SetUserSpecifiedProductCodeRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserSpecifiedProductCodeRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SetUserSpecifiedProductCodeRequest.code)
}

// -------------------------------------------------------------------

// SetUserSpecifiedProductCodeResponse

// -------------------------------------------------------------------

// GetChannelsLayoutRequest

// -------------------------------------------------------------------

// GetChannelsLayoutResponse

// repeated .minknow_api.device.ChannelRecord channel_records = 1;
inline int GetChannelsLayoutResponse::_internal_channel_records_size() const {
  return channel_records_.size();
}
inline int GetChannelsLayoutResponse::channel_records_size() const {
  return _internal_channel_records_size();
}
inline void GetChannelsLayoutResponse::clear_channel_records() {
  channel_records_.Clear();
}
inline ::minknow_api::device::ChannelRecord* GetChannelsLayoutResponse::mutable_channel_records(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetChannelsLayoutResponse.channel_records)
  return channel_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord >*
GetChannelsLayoutResponse::mutable_channel_records() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetChannelsLayoutResponse.channel_records)
  return &channel_records_;
}
inline const ::minknow_api::device::ChannelRecord& GetChannelsLayoutResponse::_internal_channel_records(int index) const {
  return channel_records_.Get(index);
}
inline const ::minknow_api::device::ChannelRecord& GetChannelsLayoutResponse::channel_records(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetChannelsLayoutResponse.channel_records)
  return _internal_channel_records(index);
}
inline ::minknow_api::device::ChannelRecord* GetChannelsLayoutResponse::_internal_add_channel_records() {
  return channel_records_.Add();
}
inline ::minknow_api::device::ChannelRecord* GetChannelsLayoutResponse::add_channel_records() {
  ::minknow_api::device::ChannelRecord* _add = _internal_add_channel_records();
  // @@protoc_insertion_point(field_add:minknow_api.device.GetChannelsLayoutResponse.channel_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord >&
GetChannelsLayoutResponse::channel_records() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetChannelsLayoutResponse.channel_records)
  return channel_records_;
}

// -------------------------------------------------------------------

// ChannelRecord_MuxRecord

// uint32 id = 1;
inline void ChannelRecord_MuxRecord::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.MuxRecord.id)
  return _internal_id();
}
inline void ChannelRecord_MuxRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ChannelRecord_MuxRecord::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelRecord.MuxRecord.id)
}

// uint32 phys_x = 2;
inline void ChannelRecord_MuxRecord::clear_phys_x() {
  phys_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::_internal_phys_x() const {
  return phys_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::phys_x() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.MuxRecord.phys_x)
  return _internal_phys_x();
}
inline void ChannelRecord_MuxRecord::_internal_set_phys_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phys_x_ = value;
}
inline void ChannelRecord_MuxRecord::set_phys_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phys_x(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelRecord.MuxRecord.phys_x)
}

// uint32 phys_y = 3;
inline void ChannelRecord_MuxRecord::clear_phys_y() {
  phys_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::_internal_phys_y() const {
  return phys_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord_MuxRecord::phys_y() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.MuxRecord.phys_y)
  return _internal_phys_y();
}
inline void ChannelRecord_MuxRecord::_internal_set_phys_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phys_y_ = value;
}
inline void ChannelRecord_MuxRecord::set_phys_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phys_y(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelRecord.MuxRecord.phys_y)
}

// -------------------------------------------------------------------

// ChannelRecord

// uint32 id = 1;
inline void ChannelRecord::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelRecord::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.id)
  return _internal_id();
}
inline void ChannelRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ChannelRecord::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelRecord.id)
}

// string name = 2;
inline void ChannelRecord::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChannelRecord::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelRecord::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.device.ChannelRecord.name)
}
inline std::string* ChannelRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.ChannelRecord.name)
  return _s;
}
inline const std::string& ChannelRecord::_internal_name() const {
  return name_.Get();
}
inline void ChannelRecord::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChannelRecord::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChannelRecord::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.device.ChannelRecord.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChannelRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.ChannelRecord.name)
}

// repeated .minknow_api.device.ChannelRecord.MuxRecord mux_records = 3;
inline int ChannelRecord::_internal_mux_records_size() const {
  return mux_records_.size();
}
inline int ChannelRecord::mux_records_size() const {
  return _internal_mux_records_size();
}
inline void ChannelRecord::clear_mux_records() {
  mux_records_.Clear();
}
inline ::minknow_api::device::ChannelRecord_MuxRecord* ChannelRecord::mutable_mux_records(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.device.ChannelRecord.mux_records)
  return mux_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord_MuxRecord >*
ChannelRecord::mutable_mux_records() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.ChannelRecord.mux_records)
  return &mux_records_;
}
inline const ::minknow_api::device::ChannelRecord_MuxRecord& ChannelRecord::_internal_mux_records(int index) const {
  return mux_records_.Get(index);
}
inline const ::minknow_api::device::ChannelRecord_MuxRecord& ChannelRecord::mux_records(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.ChannelRecord.mux_records)
  return _internal_mux_records(index);
}
inline ::minknow_api::device::ChannelRecord_MuxRecord* ChannelRecord::_internal_add_mux_records() {
  return mux_records_.Add();
}
inline ::minknow_api::device::ChannelRecord_MuxRecord* ChannelRecord::add_mux_records() {
  ::minknow_api::device::ChannelRecord_MuxRecord* _add = _internal_add_mux_records();
  // @@protoc_insertion_point(field_add:minknow_api.device.ChannelRecord.mux_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ChannelRecord_MuxRecord >&
ChannelRecord::mux_records() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.ChannelRecord.mux_records)
  return mux_records_;
}

// -------------------------------------------------------------------

// ResetDeviceSettingsRequest

// -------------------------------------------------------------------

// ResetDeviceSettingsResponse

// -------------------------------------------------------------------

// SetCalibrationRequest

// uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
inline void SetCalibrationRequest::clear_first_channel() {
  first_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetCalibrationRequest::_internal_first_channel() const {
  return first_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetCalibrationRequest::first_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetCalibrationRequest.first_channel)
  return _internal_first_channel();
}
inline void SetCalibrationRequest::_internal_set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_channel_ = value;
}
inline void SetCalibrationRequest::set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetCalibrationRequest.first_channel)
}

// uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
inline void SetCalibrationRequest::clear_last_channel() {
  last_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetCalibrationRequest::_internal_last_channel() const {
  return last_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetCalibrationRequest::last_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetCalibrationRequest.last_channel)
  return _internal_last_channel();
}
inline void SetCalibrationRequest::_internal_set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_channel_ = value;
}
inline void SetCalibrationRequest::set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetCalibrationRequest.last_channel)
}

// repeated float offsets = 3 [(.minknow_api.rpc_required) = true];
inline int SetCalibrationRequest::_internal_offsets_size() const {
  return offsets_.size();
}
inline int SetCalibrationRequest::offsets_size() const {
  return _internal_offsets_size();
}
inline void SetCalibrationRequest::clear_offsets() {
  offsets_.Clear();
}
inline float SetCalibrationRequest::_internal_offsets(int index) const {
  return offsets_.Get(index);
}
inline float SetCalibrationRequest::offsets(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetCalibrationRequest.offsets)
  return _internal_offsets(index);
}
inline void SetCalibrationRequest::set_offsets(int index, float value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetCalibrationRequest.offsets)
}
inline void SetCalibrationRequest::_internal_add_offsets(float value) {
  offsets_.Add(value);
}
inline void SetCalibrationRequest::add_offsets(float value) {
  _internal_add_offsets(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.SetCalibrationRequest.offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCalibrationRequest::_internal_offsets() const {
  return offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCalibrationRequest::offsets() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.SetCalibrationRequest.offsets)
  return _internal_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCalibrationRequest::_internal_mutable_offsets() {
  return &offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCalibrationRequest::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.SetCalibrationRequest.offsets)
  return _internal_mutable_offsets();
}

// repeated float pa_ranges = 4 [(.minknow_api.rpc_required) = true];
inline int SetCalibrationRequest::_internal_pa_ranges_size() const {
  return pa_ranges_.size();
}
inline int SetCalibrationRequest::pa_ranges_size() const {
  return _internal_pa_ranges_size();
}
inline void SetCalibrationRequest::clear_pa_ranges() {
  pa_ranges_.Clear();
}
inline float SetCalibrationRequest::_internal_pa_ranges(int index) const {
  return pa_ranges_.Get(index);
}
inline float SetCalibrationRequest::pa_ranges(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetCalibrationRequest.pa_ranges)
  return _internal_pa_ranges(index);
}
inline void SetCalibrationRequest::set_pa_ranges(int index, float value) {
  pa_ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetCalibrationRequest.pa_ranges)
}
inline void SetCalibrationRequest::_internal_add_pa_ranges(float value) {
  pa_ranges_.Add(value);
}
inline void SetCalibrationRequest::add_pa_ranges(float value) {
  _internal_add_pa_ranges(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.SetCalibrationRequest.pa_ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCalibrationRequest::_internal_pa_ranges() const {
  return pa_ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCalibrationRequest::pa_ranges() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.SetCalibrationRequest.pa_ranges)
  return _internal_pa_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCalibrationRequest::_internal_mutable_pa_ranges() {
  return &pa_ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCalibrationRequest::mutable_pa_ranges() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.SetCalibrationRequest.pa_ranges)
  return _internal_mutable_pa_ranges();
}

// -------------------------------------------------------------------

// SetCalibrationResponse

// -------------------------------------------------------------------

// ClearCalibrationRequest

// -------------------------------------------------------------------

// ClearCalibrationResponse

// -------------------------------------------------------------------

// GetCalibrationRequest

// uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
inline void GetCalibrationRequest::clear_first_channel() {
  first_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationRequest::_internal_first_channel() const {
  return first_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationRequest::first_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationRequest.first_channel)
  return _internal_first_channel();
}
inline void GetCalibrationRequest::_internal_set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_channel_ = value;
}
inline void GetCalibrationRequest::set_first_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationRequest.first_channel)
}

// uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
inline void GetCalibrationRequest::clear_last_channel() {
  last_channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationRequest::_internal_last_channel() const {
  return last_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationRequest::last_channel() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationRequest.last_channel)
  return _internal_last_channel();
}
inline void GetCalibrationRequest::_internal_set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_channel_ = value;
}
inline void GetCalibrationRequest::set_last_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_channel(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationRequest.last_channel)
}

// -------------------------------------------------------------------

// GetCalibrationResponse

// uint32 digitisation = 1;
inline void GetCalibrationResponse::clear_digitisation() {
  digitisation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationResponse::_internal_digitisation() const {
  return digitisation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetCalibrationResponse::digitisation() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationResponse.digitisation)
  return _internal_digitisation();
}
inline void GetCalibrationResponse::_internal_set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  digitisation_ = value;
}
inline void GetCalibrationResponse::set_digitisation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_digitisation(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationResponse.digitisation)
}

// repeated float offsets = 2;
inline int GetCalibrationResponse::_internal_offsets_size() const {
  return offsets_.size();
}
inline int GetCalibrationResponse::offsets_size() const {
  return _internal_offsets_size();
}
inline void GetCalibrationResponse::clear_offsets() {
  offsets_.Clear();
}
inline float GetCalibrationResponse::_internal_offsets(int index) const {
  return offsets_.Get(index);
}
inline float GetCalibrationResponse::offsets(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationResponse.offsets)
  return _internal_offsets(index);
}
inline void GetCalibrationResponse::set_offsets(int index, float value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationResponse.offsets)
}
inline void GetCalibrationResponse::_internal_add_offsets(float value) {
  offsets_.Add(value);
}
inline void GetCalibrationResponse::add_offsets(float value) {
  _internal_add_offsets(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.GetCalibrationResponse.offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCalibrationResponse::_internal_offsets() const {
  return offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCalibrationResponse::offsets() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetCalibrationResponse.offsets)
  return _internal_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCalibrationResponse::_internal_mutable_offsets() {
  return &offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCalibrationResponse::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetCalibrationResponse.offsets)
  return _internal_mutable_offsets();
}

// repeated float pa_ranges = 3;
inline int GetCalibrationResponse::_internal_pa_ranges_size() const {
  return pa_ranges_.size();
}
inline int GetCalibrationResponse::pa_ranges_size() const {
  return _internal_pa_ranges_size();
}
inline void GetCalibrationResponse::clear_pa_ranges() {
  pa_ranges_.Clear();
}
inline float GetCalibrationResponse::_internal_pa_ranges(int index) const {
  return pa_ranges_.Get(index);
}
inline float GetCalibrationResponse::pa_ranges(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationResponse.pa_ranges)
  return _internal_pa_ranges(index);
}
inline void GetCalibrationResponse::set_pa_ranges(int index, float value) {
  pa_ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationResponse.pa_ranges)
}
inline void GetCalibrationResponse::_internal_add_pa_ranges(float value) {
  pa_ranges_.Add(value);
}
inline void GetCalibrationResponse::add_pa_ranges(float value) {
  _internal_add_pa_ranges(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.GetCalibrationResponse.pa_ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCalibrationResponse::_internal_pa_ranges() const {
  return pa_ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCalibrationResponse::pa_ranges() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetCalibrationResponse.pa_ranges)
  return _internal_pa_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCalibrationResponse::_internal_mutable_pa_ranges() {
  return &pa_ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCalibrationResponse::mutable_pa_ranges() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetCalibrationResponse.pa_ranges)
  return _internal_mutable_pa_ranges();
}

// bool has_calibration = 4;
inline void GetCalibrationResponse::clear_has_calibration() {
  has_calibration_ = false;
}
inline bool GetCalibrationResponse::_internal_has_calibration() const {
  return has_calibration_;
}
inline bool GetCalibrationResponse::has_calibration() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetCalibrationResponse.has_calibration)
  return _internal_has_calibration();
}
inline void GetCalibrationResponse::_internal_set_has_calibration(bool value) {
  
  has_calibration_ = value;
}
inline void GetCalibrationResponse::set_has_calibration(bool value) {
  _internal_set_has_calibration(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetCalibrationResponse.has_calibration)
}

// -------------------------------------------------------------------

// SetTemperatureRequest_WaitForTemperatureSettings

// uint32 timeout = 1;
inline void SetTemperatureRequest_WaitForTemperatureSettings::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTemperatureRequest_WaitForTemperatureSettings::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTemperatureRequest_WaitForTemperatureSettings::timeout() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.timeout)
  return _internal_timeout();
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.timeout)
}

// uint32 min_stable_duration = 3;
inline void SetTemperatureRequest_WaitForTemperatureSettings::clear_min_stable_duration() {
  min_stable_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTemperatureRequest_WaitForTemperatureSettings::_internal_min_stable_duration() const {
  return min_stable_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTemperatureRequest_WaitForTemperatureSettings::min_stable_duration() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.min_stable_duration)
  return _internal_min_stable_duration();
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::_internal_set_min_stable_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_stable_duration_ = value;
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::set_min_stable_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_stable_duration(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.min_stable_duration)
}

// float tolerance = 2;
inline void SetTemperatureRequest_WaitForTemperatureSettings::clear_tolerance() {
  tolerance_ = 0;
}
inline float SetTemperatureRequest_WaitForTemperatureSettings::_internal_tolerance() const {
  return tolerance_;
}
inline float SetTemperatureRequest_WaitForTemperatureSettings::tolerance() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.tolerance)
  return _internal_tolerance();
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::_internal_set_tolerance(float value) {
  
  tolerance_ = value;
}
inline void SetTemperatureRequest_WaitForTemperatureSettings::set_tolerance(float value) {
  _internal_set_tolerance(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings.tolerance)
}

// -------------------------------------------------------------------

// SetTemperatureRequest

// float temperature = 1;
inline void SetTemperatureRequest::clear_temperature() {
  temperature_ = 0;
}
inline float SetTemperatureRequest::_internal_temperature() const {
  return temperature_;
}
inline float SetTemperatureRequest::temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureRequest.temperature)
  return _internal_temperature();
}
inline void SetTemperatureRequest::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void SetTemperatureRequest::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetTemperatureRequest.temperature)
}

// .minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings wait_for_temperature = 2;
inline bool SetTemperatureRequest::_internal_has_wait_for_temperature() const {
  return this != internal_default_instance() && wait_for_temperature_ != nullptr;
}
inline bool SetTemperatureRequest::has_wait_for_temperature() const {
  return _internal_has_wait_for_temperature();
}
inline void SetTemperatureRequest::clear_wait_for_temperature() {
  if (GetArenaForAllocation() == nullptr && wait_for_temperature_ != nullptr) {
    delete wait_for_temperature_;
  }
  wait_for_temperature_ = nullptr;
}
inline const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings& SetTemperatureRequest::_internal_wait_for_temperature() const {
  const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* p = wait_for_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings&>(
      ::minknow_api::device::_SetTemperatureRequest_WaitForTemperatureSettings_default_instance_);
}
inline const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings& SetTemperatureRequest::wait_for_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureRequest.wait_for_temperature)
  return _internal_wait_for_temperature();
}
inline void SetTemperatureRequest::unsafe_arena_set_allocated_wait_for_temperature(
    ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* wait_for_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wait_for_temperature_);
  }
  wait_for_temperature_ = wait_for_temperature;
  if (wait_for_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SetTemperatureRequest.wait_for_temperature)
}
inline ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* SetTemperatureRequest::release_wait_for_temperature() {
  
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* temp = wait_for_temperature_;
  wait_for_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* SetTemperatureRequest::unsafe_arena_release_wait_for_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SetTemperatureRequest.wait_for_temperature)
  
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* temp = wait_for_temperature_;
  wait_for_temperature_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* SetTemperatureRequest::_internal_mutable_wait_for_temperature() {
  
  if (wait_for_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings>(GetArenaForAllocation());
    wait_for_temperature_ = p;
  }
  return wait_for_temperature_;
}
inline ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* SetTemperatureRequest::mutable_wait_for_temperature() {
  ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* _msg = _internal_mutable_wait_for_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SetTemperatureRequest.wait_for_temperature)
  return _msg;
}
inline void SetTemperatureRequest::set_allocated_wait_for_temperature(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* wait_for_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete wait_for_temperature_;
  }
  if (wait_for_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings>::GetOwningArena(wait_for_temperature);
    if (message_arena != submessage_arena) {
      wait_for_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_for_temperature, submessage_arena);
    }
    
  } else {
    
  }
  wait_for_temperature_ = wait_for_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SetTemperatureRequest.wait_for_temperature)
}

// -------------------------------------------------------------------

// SetTemperatureResponse

// bool timed_out_waiting_for_temperature = 1;
inline void SetTemperatureResponse::clear_timed_out_waiting_for_temperature() {
  timed_out_waiting_for_temperature_ = false;
}
inline bool SetTemperatureResponse::_internal_timed_out_waiting_for_temperature() const {
  return timed_out_waiting_for_temperature_;
}
inline bool SetTemperatureResponse::timed_out_waiting_for_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetTemperatureResponse.timed_out_waiting_for_temperature)
  return _internal_timed_out_waiting_for_temperature();
}
inline void SetTemperatureResponse::_internal_set_timed_out_waiting_for_temperature(bool value) {
  
  timed_out_waiting_for_temperature_ = value;
}
inline void SetTemperatureResponse::set_timed_out_waiting_for_temperature(bool value) {
  _internal_set_timed_out_waiting_for_temperature(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetTemperatureResponse.timed_out_waiting_for_temperature)
}

// -------------------------------------------------------------------

// GetTemperatureRequest

// -------------------------------------------------------------------

// GetTemperatureResponse_MinIONTemperature

// .google.protobuf.FloatValue asic_temperature = 1;
inline bool GetTemperatureResponse_MinIONTemperature::_internal_has_asic_temperature() const {
  return this != internal_default_instance() && asic_temperature_ != nullptr;
}
inline bool GetTemperatureResponse_MinIONTemperature::has_asic_temperature() const {
  return _internal_has_asic_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_MinIONTemperature::_internal_asic_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = asic_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_MinIONTemperature::asic_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature)
  return _internal_asic_temperature();
}
inline void GetTemperatureResponse_MinIONTemperature::unsafe_arena_set_allocated_asic_temperature(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* asic_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asic_temperature_);
  }
  asic_temperature_ = asic_temperature;
  if (asic_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::release_asic_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = asic_temperature_;
  asic_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::unsafe_arena_release_asic_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = asic_temperature_;
  asic_temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::_internal_mutable_asic_temperature() {
  
  if (asic_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    asic_temperature_ = p;
  }
  return asic_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::mutable_asic_temperature() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_asic_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature)
  return _msg;
}
inline void GetTemperatureResponse_MinIONTemperature::set_allocated_asic_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* asic_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(asic_temperature_);
  }
  if (asic_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asic_temperature));
    if (message_arena != submessage_arena) {
      asic_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asic_temperature, submessage_arena);
    }
    
  } else {
    
  }
  asic_temperature_ = asic_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.MinIONTemperature.asic_temperature)
}

// .google.protobuf.FloatValue heatsink_temperature = 2;
inline bool GetTemperatureResponse_MinIONTemperature::_internal_has_heatsink_temperature() const {
  return this != internal_default_instance() && heatsink_temperature_ != nullptr;
}
inline bool GetTemperatureResponse_MinIONTemperature::has_heatsink_temperature() const {
  return _internal_has_heatsink_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_MinIONTemperature::_internal_heatsink_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = heatsink_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_MinIONTemperature::heatsink_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature)
  return _internal_heatsink_temperature();
}
inline void GetTemperatureResponse_MinIONTemperature::unsafe_arena_set_allocated_heatsink_temperature(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* heatsink_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatsink_temperature_);
  }
  heatsink_temperature_ = heatsink_temperature;
  if (heatsink_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::release_heatsink_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = heatsink_temperature_;
  heatsink_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::unsafe_arena_release_heatsink_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = heatsink_temperature_;
  heatsink_temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::_internal_mutable_heatsink_temperature() {
  
  if (heatsink_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    heatsink_temperature_ = p;
  }
  return heatsink_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_MinIONTemperature::mutable_heatsink_temperature() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_heatsink_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature)
  return _msg;
}
inline void GetTemperatureResponse_MinIONTemperature::set_allocated_heatsink_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* heatsink_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatsink_temperature_);
  }
  if (heatsink_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatsink_temperature));
    if (message_arena != submessage_arena) {
      heatsink_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heatsink_temperature, submessage_arena);
    }
    
  } else {
    
  }
  heatsink_temperature_ = heatsink_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.MinIONTemperature.heatsink_temperature)
}

// -------------------------------------------------------------------

// GetTemperatureResponse_PromethIONTemperature

// .google.protobuf.FloatValue flowcell_temperature = 1;
inline bool GetTemperatureResponse_PromethIONTemperature::_internal_has_flowcell_temperature() const {
  return this != internal_default_instance() && flowcell_temperature_ != nullptr;
}
inline bool GetTemperatureResponse_PromethIONTemperature::has_flowcell_temperature() const {
  return _internal_has_flowcell_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_PromethIONTemperature::_internal_flowcell_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = flowcell_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_PromethIONTemperature::flowcell_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature)
  return _internal_flowcell_temperature();
}
inline void GetTemperatureResponse_PromethIONTemperature::unsafe_arena_set_allocated_flowcell_temperature(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* flowcell_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowcell_temperature_);
  }
  flowcell_temperature_ = flowcell_temperature;
  if (flowcell_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::release_flowcell_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = flowcell_temperature_;
  flowcell_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::unsafe_arena_release_flowcell_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = flowcell_temperature_;
  flowcell_temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::_internal_mutable_flowcell_temperature() {
  
  if (flowcell_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    flowcell_temperature_ = p;
  }
  return flowcell_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::mutable_flowcell_temperature() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_flowcell_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature)
  return _msg;
}
inline void GetTemperatureResponse_PromethIONTemperature::set_allocated_flowcell_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* flowcell_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowcell_temperature_);
  }
  if (flowcell_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowcell_temperature));
    if (message_arena != submessage_arena) {
      flowcell_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flowcell_temperature, submessage_arena);
    }
    
  } else {
    
  }
  flowcell_temperature_ = flowcell_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.flowcell_temperature)
}

// .google.protobuf.FloatValue chamber_temperature = 2;
inline bool GetTemperatureResponse_PromethIONTemperature::_internal_has_chamber_temperature() const {
  return this != internal_default_instance() && chamber_temperature_ != nullptr;
}
inline bool GetTemperatureResponse_PromethIONTemperature::has_chamber_temperature() const {
  return _internal_has_chamber_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_PromethIONTemperature::_internal_chamber_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = chamber_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse_PromethIONTemperature::chamber_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature)
  return _internal_chamber_temperature();
}
inline void GetTemperatureResponse_PromethIONTemperature::unsafe_arena_set_allocated_chamber_temperature(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* chamber_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chamber_temperature_);
  }
  chamber_temperature_ = chamber_temperature;
  if (chamber_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::release_chamber_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = chamber_temperature_;
  chamber_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::unsafe_arena_release_chamber_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = chamber_temperature_;
  chamber_temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::_internal_mutable_chamber_temperature() {
  
  if (chamber_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    chamber_temperature_ = p;
  }
  return chamber_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse_PromethIONTemperature::mutable_chamber_temperature() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_chamber_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature)
  return _msg;
}
inline void GetTemperatureResponse_PromethIONTemperature::set_allocated_chamber_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* chamber_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chamber_temperature_);
  }
  if (chamber_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chamber_temperature));
    if (message_arena != submessage_arena) {
      chamber_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chamber_temperature, submessage_arena);
    }
    
  } else {
    
  }
  chamber_temperature_ = chamber_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.PromethIONTemperature.chamber_temperature)
}

// -------------------------------------------------------------------

// GetTemperatureResponse

// .minknow_api.device.GetTemperatureResponse.MinIONTemperature minion = 1;
inline bool GetTemperatureResponse::_internal_has_minion() const {
  return temperature_case() == kMinion;
}
inline bool GetTemperatureResponse::has_minion() const {
  return _internal_has_minion();
}
inline void GetTemperatureResponse::set_has_minion() {
  _oneof_case_[0] = kMinion;
}
inline void GetTemperatureResponse::clear_minion() {
  if (_internal_has_minion()) {
    if (GetArenaForAllocation() == nullptr) {
      delete temperature_.minion_;
    }
    clear_has_temperature();
  }
}
inline ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* GetTemperatureResponse::release_minion() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.minion)
  if (_internal_has_minion()) {
    clear_has_temperature();
      ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* temp = temperature_.minion_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temperature_.minion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature& GetTemperatureResponse::_internal_minion() const {
  return _internal_has_minion()
      ? *temperature_.minion_
      : reinterpret_cast< ::minknow_api::device::GetTemperatureResponse_MinIONTemperature&>(::minknow_api::device::_GetTemperatureResponse_MinIONTemperature_default_instance_);
}
inline const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature& GetTemperatureResponse::minion() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.minion)
  return _internal_minion();
}
inline ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* GetTemperatureResponse::unsafe_arena_release_minion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.device.GetTemperatureResponse.minion)
  if (_internal_has_minion()) {
    clear_has_temperature();
    ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* temp = temperature_.minion_;
    temperature_.minion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetTemperatureResponse::unsafe_arena_set_allocated_minion(::minknow_api::device::GetTemperatureResponse_MinIONTemperature* minion) {
  clear_temperature();
  if (minion) {
    set_has_minion();
    temperature_.minion_ = minion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.minion)
}
inline ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* GetTemperatureResponse::_internal_mutable_minion() {
  if (!_internal_has_minion()) {
    clear_temperature();
    set_has_minion();
    temperature_.minion_ = CreateMaybeMessage< ::minknow_api::device::GetTemperatureResponse_MinIONTemperature >(GetArenaForAllocation());
  }
  return temperature_.minion_;
}
inline ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* GetTemperatureResponse::mutable_minion() {
  ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* _msg = _internal_mutable_minion();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.minion)
  return _msg;
}

// .minknow_api.device.GetTemperatureResponse.PromethIONTemperature promethion = 2;
inline bool GetTemperatureResponse::_internal_has_promethion() const {
  return temperature_case() == kPromethion;
}
inline bool GetTemperatureResponse::has_promethion() const {
  return _internal_has_promethion();
}
inline void GetTemperatureResponse::set_has_promethion() {
  _oneof_case_[0] = kPromethion;
}
inline void GetTemperatureResponse::clear_promethion() {
  if (_internal_has_promethion()) {
    if (GetArenaForAllocation() == nullptr) {
      delete temperature_.promethion_;
    }
    clear_has_temperature();
  }
}
inline ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* GetTemperatureResponse::release_promethion() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.promethion)
  if (_internal_has_promethion()) {
    clear_has_temperature();
      ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* temp = temperature_.promethion_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    temperature_.promethion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature& GetTemperatureResponse::_internal_promethion() const {
  return _internal_has_promethion()
      ? *temperature_.promethion_
      : reinterpret_cast< ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature&>(::minknow_api::device::_GetTemperatureResponse_PromethIONTemperature_default_instance_);
}
inline const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature& GetTemperatureResponse::promethion() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.promethion)
  return _internal_promethion();
}
inline ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* GetTemperatureResponse::unsafe_arena_release_promethion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.device.GetTemperatureResponse.promethion)
  if (_internal_has_promethion()) {
    clear_has_temperature();
    ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* temp = temperature_.promethion_;
    temperature_.promethion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetTemperatureResponse::unsafe_arena_set_allocated_promethion(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* promethion) {
  clear_temperature();
  if (promethion) {
    set_has_promethion();
    temperature_.promethion_ = promethion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.promethion)
}
inline ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* GetTemperatureResponse::_internal_mutable_promethion() {
  if (!_internal_has_promethion()) {
    clear_temperature();
    set_has_promethion();
    temperature_.promethion_ = CreateMaybeMessage< ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature >(GetArenaForAllocation());
  }
  return temperature_.promethion_;
}
inline ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* GetTemperatureResponse::mutable_promethion() {
  ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* _msg = _internal_mutable_promethion();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.promethion)
  return _msg;
}

// .google.protobuf.FloatValue target_temperature = 3;
inline bool GetTemperatureResponse::_internal_has_target_temperature() const {
  return this != internal_default_instance() && target_temperature_ != nullptr;
}
inline bool GetTemperatureResponse::has_target_temperature() const {
  return _internal_has_target_temperature();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse::_internal_target_temperature() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = target_temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& GetTemperatureResponse::target_temperature() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetTemperatureResponse.target_temperature)
  return _internal_target_temperature();
}
inline void GetTemperatureResponse::unsafe_arena_set_allocated_target_temperature(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* target_temperature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_temperature_);
  }
  target_temperature_ = target_temperature;
  if (target_temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetTemperatureResponse.target_temperature)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse::release_target_temperature() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = target_temperature_;
  target_temperature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse::unsafe_arena_release_target_temperature() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetTemperatureResponse.target_temperature)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = target_temperature_;
  target_temperature_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse::_internal_mutable_target_temperature() {
  
  if (target_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    target_temperature_ = p;
  }
  return target_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* GetTemperatureResponse::mutable_target_temperature() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_target_temperature();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetTemperatureResponse.target_temperature)
  return _msg;
}
inline void GetTemperatureResponse::set_allocated_target_temperature(::PROTOBUF_NAMESPACE_ID::FloatValue* target_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_temperature_);
  }
  if (target_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_temperature));
    if (message_arena != submessage_arena) {
      target_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_temperature, submessage_arena);
    }
    
  } else {
    
  }
  target_temperature_ = target_temperature;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.target_temperature)
}

inline bool GetTemperatureResponse::has_temperature() const {
  return temperature_case() != TEMPERATURE_NOT_SET;
}
inline void GetTemperatureResponse::clear_has_temperature() {
  _oneof_case_[0] = TEMPERATURE_NOT_SET;
}
inline GetTemperatureResponse::TemperatureCase GetTemperatureResponse::temperature_case() const {
  return GetTemperatureResponse::TemperatureCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamTemperatureRequest

// uint32 period_seconds = 1;
inline void StreamTemperatureRequest::clear_period_seconds() {
  period_seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamTemperatureRequest::_internal_period_seconds() const {
  return period_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamTemperatureRequest::period_seconds() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.StreamTemperatureRequest.period_seconds)
  return _internal_period_seconds();
}
inline void StreamTemperatureRequest::_internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_seconds_ = value;
}
inline void StreamTemperatureRequest::set_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period_seconds(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.StreamTemperatureRequest.period_seconds)
}

// -------------------------------------------------------------------

// UnblockRequest

// repeated uint32 channels = 1;
inline int UnblockRequest::_internal_channels_size() const {
  return channels_.size();
}
inline int UnblockRequest::channels_size() const {
  return _internal_channels_size();
}
inline void UnblockRequest::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::channels(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.UnblockRequest.channels)
  return _internal_channels(index);
}
inline void UnblockRequest::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.UnblockRequest.channels)
}
inline void UnblockRequest::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void UnblockRequest::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.UnblockRequest.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnblockRequest::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnblockRequest::channels() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.UnblockRequest.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnblockRequest::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnblockRequest::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.UnblockRequest.channels)
  return _internal_mutable_channels();
}

// uint32 duration_in_seconds = 2;
inline bool UnblockRequest::_internal_has_duration_in_seconds() const {
  return duration_case() == kDurationInSeconds;
}
inline bool UnblockRequest::has_duration_in_seconds() const {
  return _internal_has_duration_in_seconds();
}
inline void UnblockRequest::set_has_duration_in_seconds() {
  _oneof_case_[0] = kDurationInSeconds;
}
inline void UnblockRequest::clear_duration_in_seconds() {
  if (_internal_has_duration_in_seconds()) {
    duration_.duration_in_seconds_ = 0u;
    clear_has_duration();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::_internal_duration_in_seconds() const {
  if (_internal_has_duration_in_seconds()) {
    return duration_.duration_in_seconds_;
  }
  return 0u;
}
inline void UnblockRequest::_internal_set_duration_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_duration_in_seconds()) {
    clear_duration();
    set_has_duration_in_seconds();
  }
  duration_.duration_in_seconds_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::duration_in_seconds() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.UnblockRequest.duration_in_seconds)
  return _internal_duration_in_seconds();
}
inline void UnblockRequest::set_duration_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_in_seconds(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.UnblockRequest.duration_in_seconds)
}

// uint32 duration_in_milliseconds = 3;
inline bool UnblockRequest::_internal_has_duration_in_milliseconds() const {
  return duration_case() == kDurationInMilliseconds;
}
inline bool UnblockRequest::has_duration_in_milliseconds() const {
  return _internal_has_duration_in_milliseconds();
}
inline void UnblockRequest::set_has_duration_in_milliseconds() {
  _oneof_case_[0] = kDurationInMilliseconds;
}
inline void UnblockRequest::clear_duration_in_milliseconds() {
  if (_internal_has_duration_in_milliseconds()) {
    duration_.duration_in_milliseconds_ = 0u;
    clear_has_duration();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::_internal_duration_in_milliseconds() const {
  if (_internal_has_duration_in_milliseconds()) {
    return duration_.duration_in_milliseconds_;
  }
  return 0u;
}
inline void UnblockRequest::_internal_set_duration_in_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_duration_in_milliseconds()) {
    clear_duration();
    set_has_duration_in_milliseconds();
  }
  duration_.duration_in_milliseconds_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnblockRequest::duration_in_milliseconds() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.UnblockRequest.duration_in_milliseconds)
  return _internal_duration_in_milliseconds();
}
inline void UnblockRequest::set_duration_in_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_in_milliseconds(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.UnblockRequest.duration_in_milliseconds)
}

inline bool UnblockRequest::has_duration() const {
  return duration_case() != DURATION_NOT_SET;
}
inline void UnblockRequest::clear_has_duration() {
  _oneof_case_[0] = DURATION_NOT_SET;
}
inline UnblockRequest::DurationCase UnblockRequest::duration_case() const {
  return UnblockRequest::DurationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UnblockResponse

// -------------------------------------------------------------------

// CancelUnblocksRequest

// -------------------------------------------------------------------

// CancelUnblocksResponse

// uint32 cancelled_unblocks = 1;
inline void CancelUnblocksResponse::clear_cancelled_unblocks() {
  cancelled_unblocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelUnblocksResponse::_internal_cancelled_unblocks() const {
  return cancelled_unblocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CancelUnblocksResponse::cancelled_unblocks() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.CancelUnblocksResponse.cancelled_unblocks)
  return _internal_cancelled_unblocks();
}
inline void CancelUnblocksResponse::_internal_set_cancelled_unblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cancelled_unblocks_ = value;
}
inline void CancelUnblocksResponse::set_cancelled_unblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cancelled_unblocks(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.CancelUnblocksResponse.cancelled_unblocks)
}

// -------------------------------------------------------------------

// GetChannelConfigurationRequest

// repeated uint32 channels = 1;
inline int GetChannelConfigurationRequest::_internal_channels_size() const {
  return channels_.size();
}
inline int GetChannelConfigurationRequest::channels_size() const {
  return _internal_channels_size();
}
inline void GetChannelConfigurationRequest::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelConfigurationRequest::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChannelConfigurationRequest::channels(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetChannelConfigurationRequest.channels)
  return _internal_channels(index);
}
inline void GetChannelConfigurationRequest::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetChannelConfigurationRequest.channels)
}
inline void GetChannelConfigurationRequest::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void GetChannelConfigurationRequest::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:minknow_api.device.GetChannelConfigurationRequest.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetChannelConfigurationRequest::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GetChannelConfigurationRequest::channels() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetChannelConfigurationRequest.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetChannelConfigurationRequest::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GetChannelConfigurationRequest::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetChannelConfigurationRequest.channels)
  return _internal_mutable_channels();
}

// -------------------------------------------------------------------

// GetChannelConfigurationResponse

// repeated .minknow_api.device.ReturnedChannelConfiguration channel_configurations = 1;
inline int GetChannelConfigurationResponse::_internal_channel_configurations_size() const {
  return channel_configurations_.size();
}
inline int GetChannelConfigurationResponse::channel_configurations_size() const {
  return _internal_channel_configurations_size();
}
inline void GetChannelConfigurationResponse::clear_channel_configurations() {
  channel_configurations_.Clear();
}
inline ::minknow_api::device::ReturnedChannelConfiguration* GetChannelConfigurationResponse::mutable_channel_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetChannelConfigurationResponse.channel_configurations)
  return channel_configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ReturnedChannelConfiguration >*
GetChannelConfigurationResponse::mutable_channel_configurations() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.device.GetChannelConfigurationResponse.channel_configurations)
  return &channel_configurations_;
}
inline const ::minknow_api::device::ReturnedChannelConfiguration& GetChannelConfigurationResponse::_internal_channel_configurations(int index) const {
  return channel_configurations_.Get(index);
}
inline const ::minknow_api::device::ReturnedChannelConfiguration& GetChannelConfigurationResponse::channel_configurations(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetChannelConfigurationResponse.channel_configurations)
  return _internal_channel_configurations(index);
}
inline ::minknow_api::device::ReturnedChannelConfiguration* GetChannelConfigurationResponse::_internal_add_channel_configurations() {
  return channel_configurations_.Add();
}
inline ::minknow_api::device::ReturnedChannelConfiguration* GetChannelConfigurationResponse::add_channel_configurations() {
  ::minknow_api::device::ReturnedChannelConfiguration* _add = _internal_add_channel_configurations();
  // @@protoc_insertion_point(field_add:minknow_api.device.GetChannelConfigurationResponse.channel_configurations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::device::ReturnedChannelConfiguration >&
GetChannelConfigurationResponse::channel_configurations() const {
  // @@protoc_insertion_point(field_list:minknow_api.device.GetChannelConfigurationResponse.channel_configurations)
  return channel_configurations_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetChannelConfigurationRequest

// map<uint32, .minknow_api.device.ChannelConfiguration> channel_configurations = 1;
inline int SetChannelConfigurationRequest::_internal_channel_configurations_size() const {
  return channel_configurations_.size();
}
inline int SetChannelConfigurationRequest::channel_configurations_size() const {
  return _internal_channel_configurations_size();
}
inline void SetChannelConfigurationRequest::clear_channel_configurations() {
  channel_configurations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >&
SetChannelConfigurationRequest::_internal_channel_configurations() const {
  return channel_configurations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >&
SetChannelConfigurationRequest::channel_configurations() const {
  // @@protoc_insertion_point(field_map:minknow_api.device.SetChannelConfigurationRequest.channel_configurations)
  return _internal_channel_configurations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >*
SetChannelConfigurationRequest::_internal_mutable_channel_configurations() {
  return channel_configurations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >*
SetChannelConfigurationRequest::mutable_channel_configurations() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.device.SetChannelConfigurationRequest.channel_configurations)
  return _internal_mutable_channel_configurations();
}

// -------------------------------------------------------------------

// SetChannelConfigurationResponse

// -------------------------------------------------------------------

// SetChannelConfigurationAllRequest

// .minknow_api.device.ChannelConfiguration channel_configuration = 1 [(.minknow_api.rpc_unwrap) = true];
inline bool SetChannelConfigurationAllRequest::_internal_has_channel_configuration() const {
  return this != internal_default_instance() && channel_configuration_ != nullptr;
}
inline bool SetChannelConfigurationAllRequest::has_channel_configuration() const {
  return _internal_has_channel_configuration();
}
inline void SetChannelConfigurationAllRequest::clear_channel_configuration() {
  if (GetArenaForAllocation() == nullptr && channel_configuration_ != nullptr) {
    delete channel_configuration_;
  }
  channel_configuration_ = nullptr;
}
inline const ::minknow_api::device::ChannelConfiguration& SetChannelConfigurationAllRequest::_internal_channel_configuration() const {
  const ::minknow_api::device::ChannelConfiguration* p = channel_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::ChannelConfiguration&>(
      ::minknow_api::device::_ChannelConfiguration_default_instance_);
}
inline const ::minknow_api::device::ChannelConfiguration& SetChannelConfigurationAllRequest::channel_configuration() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration)
  return _internal_channel_configuration();
}
inline void SetChannelConfigurationAllRequest::unsafe_arena_set_allocated_channel_configuration(
    ::minknow_api::device::ChannelConfiguration* channel_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_configuration_);
  }
  channel_configuration_ = channel_configuration;
  if (channel_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration)
}
inline ::minknow_api::device::ChannelConfiguration* SetChannelConfigurationAllRequest::release_channel_configuration() {
  
  ::minknow_api::device::ChannelConfiguration* temp = channel_configuration_;
  channel_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::ChannelConfiguration* SetChannelConfigurationAllRequest::unsafe_arena_release_channel_configuration() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration)
  
  ::minknow_api::device::ChannelConfiguration* temp = channel_configuration_;
  channel_configuration_ = nullptr;
  return temp;
}
inline ::minknow_api::device::ChannelConfiguration* SetChannelConfigurationAllRequest::_internal_mutable_channel_configuration() {
  
  if (channel_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::ChannelConfiguration>(GetArenaForAllocation());
    channel_configuration_ = p;
  }
  return channel_configuration_;
}
inline ::minknow_api::device::ChannelConfiguration* SetChannelConfigurationAllRequest::mutable_channel_configuration() {
  ::minknow_api::device::ChannelConfiguration* _msg = _internal_mutable_channel_configuration();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration)
  return _msg;
}
inline void SetChannelConfigurationAllRequest::set_allocated_channel_configuration(::minknow_api::device::ChannelConfiguration* channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_configuration_;
  }
  if (channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::ChannelConfiguration>::GetOwningArena(channel_configuration);
    if (message_arena != submessage_arena) {
      channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_configuration, submessage_arena);
    }
    
  } else {
    
  }
  channel_configuration_ = channel_configuration;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SetChannelConfigurationAllRequest.channel_configuration)
}

// -------------------------------------------------------------------

// SetChannelConfigurationAllResponse

// -------------------------------------------------------------------

// SaturationConfig_Thresholds

// .google.protobuf.UInt32Value general_threshold = 1;
inline bool SaturationConfig_Thresholds::_internal_has_general_threshold() const {
  return this != internal_default_instance() && general_threshold_ != nullptr;
}
inline bool SaturationConfig_Thresholds::has_general_threshold() const {
  return _internal_has_general_threshold();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::_internal_general_threshold() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = general_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::general_threshold() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.Thresholds.general_threshold)
  return _internal_general_threshold();
}
inline void SaturationConfig_Thresholds::unsafe_arena_set_allocated_general_threshold(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* general_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_threshold_);
  }
  general_threshold_ = general_threshold;
  if (general_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.Thresholds.general_threshold)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::release_general_threshold() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = general_threshold_;
  general_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::unsafe_arena_release_general_threshold() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.Thresholds.general_threshold)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = general_threshold_;
  general_threshold_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::_internal_mutable_general_threshold() {
  
  if (general_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    general_threshold_ = p;
  }
  return general_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::mutable_general_threshold() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_general_threshold();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.Thresholds.general_threshold)
  return _msg;
}
inline void SaturationConfig_Thresholds::set_allocated_general_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* general_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_threshold_);
  }
  if (general_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_threshold));
    if (message_arena != submessage_arena) {
      general_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_threshold, submessage_arena);
    }
    
  } else {
    
  }
  general_threshold_ = general_threshold;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.Thresholds.general_threshold)
}

// .google.protobuf.UInt32Value unblock_threshold = 2;
inline bool SaturationConfig_Thresholds::_internal_has_unblock_threshold() const {
  return this != internal_default_instance() && unblock_threshold_ != nullptr;
}
inline bool SaturationConfig_Thresholds::has_unblock_threshold() const {
  return _internal_has_unblock_threshold();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::_internal_unblock_threshold() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = unblock_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::unblock_threshold() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.Thresholds.unblock_threshold)
  return _internal_unblock_threshold();
}
inline void SaturationConfig_Thresholds::unsafe_arena_set_allocated_unblock_threshold(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* unblock_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unblock_threshold_);
  }
  unblock_threshold_ = unblock_threshold;
  if (unblock_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.Thresholds.unblock_threshold)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::release_unblock_threshold() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = unblock_threshold_;
  unblock_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::unsafe_arena_release_unblock_threshold() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.Thresholds.unblock_threshold)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = unblock_threshold_;
  unblock_threshold_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::_internal_mutable_unblock_threshold() {
  
  if (unblock_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    unblock_threshold_ = p;
  }
  return unblock_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::mutable_unblock_threshold() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_unblock_threshold();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.Thresholds.unblock_threshold)
  return _msg;
}
inline void SaturationConfig_Thresholds::set_allocated_unblock_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* unblock_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unblock_threshold_);
  }
  if (unblock_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unblock_threshold));
    if (message_arena != submessage_arena) {
      unblock_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unblock_threshold, submessage_arena);
    }
    
  } else {
    
  }
  unblock_threshold_ = unblock_threshold;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.Thresholds.unblock_threshold)
}

// .google.protobuf.UInt32Value user_general_threshold = 3;
inline bool SaturationConfig_Thresholds::_internal_has_user_general_threshold() const {
  return this != internal_default_instance() && user_general_threshold_ != nullptr;
}
inline bool SaturationConfig_Thresholds::has_user_general_threshold() const {
  return _internal_has_user_general_threshold();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::_internal_user_general_threshold() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = user_general_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::user_general_threshold() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.Thresholds.user_general_threshold)
  return _internal_user_general_threshold();
}
inline void SaturationConfig_Thresholds::unsafe_arena_set_allocated_user_general_threshold(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_general_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_general_threshold_);
  }
  user_general_threshold_ = user_general_threshold;
  if (user_general_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.Thresholds.user_general_threshold)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::release_user_general_threshold() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = user_general_threshold_;
  user_general_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::unsafe_arena_release_user_general_threshold() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.Thresholds.user_general_threshold)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = user_general_threshold_;
  user_general_threshold_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::_internal_mutable_user_general_threshold() {
  
  if (user_general_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    user_general_threshold_ = p;
  }
  return user_general_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::mutable_user_general_threshold() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_user_general_threshold();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.Thresholds.user_general_threshold)
  return _msg;
}
inline void SaturationConfig_Thresholds::set_allocated_user_general_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* user_general_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_general_threshold_);
  }
  if (user_general_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_general_threshold));
    if (message_arena != submessage_arena) {
      user_general_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_general_threshold, submessage_arena);
    }
    
  } else {
    
  }
  user_general_threshold_ = user_general_threshold;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.Thresholds.user_general_threshold)
}

// .google.protobuf.UInt32Value user_unblock_threshold = 4;
inline bool SaturationConfig_Thresholds::_internal_has_user_unblock_threshold() const {
  return this != internal_default_instance() && user_unblock_threshold_ != nullptr;
}
inline bool SaturationConfig_Thresholds::has_user_unblock_threshold() const {
  return _internal_has_user_unblock_threshold();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::_internal_user_unblock_threshold() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = user_unblock_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& SaturationConfig_Thresholds::user_unblock_threshold() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold)
  return _internal_user_unblock_threshold();
}
inline void SaturationConfig_Thresholds::unsafe_arena_set_allocated_user_unblock_threshold(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* user_unblock_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_unblock_threshold_);
  }
  user_unblock_threshold_ = user_unblock_threshold;
  if (user_unblock_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::release_user_unblock_threshold() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = user_unblock_threshold_;
  user_unblock_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::unsafe_arena_release_user_unblock_threshold() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = user_unblock_threshold_;
  user_unblock_threshold_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::_internal_mutable_user_unblock_threshold() {
  
  if (user_unblock_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    user_unblock_threshold_ = p;
  }
  return user_unblock_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* SaturationConfig_Thresholds::mutable_user_unblock_threshold() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_user_unblock_threshold();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold)
  return _msg;
}
inline void SaturationConfig_Thresholds::set_allocated_user_unblock_threshold(::PROTOBUF_NAMESPACE_ID::UInt32Value* user_unblock_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_unblock_threshold_);
  }
  if (user_unblock_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_unblock_threshold));
    if (message_arena != submessage_arena) {
      user_unblock_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_unblock_threshold, submessage_arena);
    }
    
  } else {
    
  }
  user_unblock_threshold_ = user_unblock_threshold;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.Thresholds.user_unblock_threshold)
}

// -------------------------------------------------------------------

// SaturationConfig_SoftwareSaturation

// bool enabled = 1;
inline void SaturationConfig_SoftwareSaturation::clear_enabled() {
  enabled_ = false;
}
inline bool SaturationConfig_SoftwareSaturation::_internal_enabled() const {
  return enabled_;
}
inline bool SaturationConfig_SoftwareSaturation::enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.SoftwareSaturation.enabled)
  return _internal_enabled();
}
inline void SaturationConfig_SoftwareSaturation::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void SaturationConfig_SoftwareSaturation::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SaturationConfig.SoftwareSaturation.enabled)
}

// .google.protobuf.Int32Value software_min_adc = 2;
inline bool SaturationConfig_SoftwareSaturation::_internal_has_software_min_adc() const {
  return this != internal_default_instance() && software_min_adc_ != nullptr;
}
inline bool SaturationConfig_SoftwareSaturation::has_software_min_adc() const {
  return _internal_has_software_min_adc();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& SaturationConfig_SoftwareSaturation::_internal_software_min_adc() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = software_min_adc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& SaturationConfig_SoftwareSaturation::software_min_adc() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc)
  return _internal_software_min_adc();
}
inline void SaturationConfig_SoftwareSaturation::unsafe_arena_set_allocated_software_min_adc(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* software_min_adc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_min_adc_);
  }
  software_min_adc_ = software_min_adc;
  if (software_min_adc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::release_software_min_adc() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = software_min_adc_;
  software_min_adc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::unsafe_arena_release_software_min_adc() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = software_min_adc_;
  software_min_adc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::_internal_mutable_software_min_adc() {
  
  if (software_min_adc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    software_min_adc_ = p;
  }
  return software_min_adc_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::mutable_software_min_adc() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_software_min_adc();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc)
  return _msg;
}
inline void SaturationConfig_SoftwareSaturation::set_allocated_software_min_adc(::PROTOBUF_NAMESPACE_ID::Int32Value* software_min_adc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_min_adc_);
  }
  if (software_min_adc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_min_adc));
    if (message_arena != submessage_arena) {
      software_min_adc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software_min_adc, submessage_arena);
    }
    
  } else {
    
  }
  software_min_adc_ = software_min_adc;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.SoftwareSaturation.software_min_adc)
}

// .google.protobuf.Int32Value software_max_adc = 3;
inline bool SaturationConfig_SoftwareSaturation::_internal_has_software_max_adc() const {
  return this != internal_default_instance() && software_max_adc_ != nullptr;
}
inline bool SaturationConfig_SoftwareSaturation::has_software_max_adc() const {
  return _internal_has_software_max_adc();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& SaturationConfig_SoftwareSaturation::_internal_software_max_adc() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = software_max_adc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& SaturationConfig_SoftwareSaturation::software_max_adc() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc)
  return _internal_software_max_adc();
}
inline void SaturationConfig_SoftwareSaturation::unsafe_arena_set_allocated_software_max_adc(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* software_max_adc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_max_adc_);
  }
  software_max_adc_ = software_max_adc;
  if (software_max_adc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::release_software_max_adc() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = software_max_adc_;
  software_max_adc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::unsafe_arena_release_software_max_adc() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = software_max_adc_;
  software_max_adc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::_internal_mutable_software_max_adc() {
  
  if (software_max_adc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    software_max_adc_ = p;
  }
  return software_max_adc_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* SaturationConfig_SoftwareSaturation::mutable_software_max_adc() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_software_max_adc();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc)
  return _msg;
}
inline void SaturationConfig_SoftwareSaturation::set_allocated_software_max_adc(::PROTOBUF_NAMESPACE_ID::Int32Value* software_max_adc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_max_adc_);
  }
  if (software_max_adc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_max_adc));
    if (message_arena != submessage_arena) {
      software_max_adc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software_max_adc, submessage_arena);
    }
    
  } else {
    
  }
  software_max_adc_ = software_max_adc;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.SoftwareSaturation.software_max_adc)
}

// -------------------------------------------------------------------

// SaturationConfig_UserThresholdSaturation

// bool enabled = 1;
inline void SaturationConfig_UserThresholdSaturation::clear_enabled() {
  enabled_ = false;
}
inline bool SaturationConfig_UserThresholdSaturation::_internal_enabled() const {
  return enabled_;
}
inline bool SaturationConfig_UserThresholdSaturation::enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.UserThresholdSaturation.enabled)
  return _internal_enabled();
}
inline void SaturationConfig_UserThresholdSaturation::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void SaturationConfig_UserThresholdSaturation::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SaturationConfig.UserThresholdSaturation.enabled)
}

// .google.protobuf.FloatValue user_threshold_min_pa = 2;
inline bool SaturationConfig_UserThresholdSaturation::_internal_has_user_threshold_min_pa() const {
  return this != internal_default_instance() && user_threshold_min_pa_ != nullptr;
}
inline bool SaturationConfig_UserThresholdSaturation::has_user_threshold_min_pa() const {
  return _internal_has_user_threshold_min_pa();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& SaturationConfig_UserThresholdSaturation::_internal_user_threshold_min_pa() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = user_threshold_min_pa_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& SaturationConfig_UserThresholdSaturation::user_threshold_min_pa() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa)
  return _internal_user_threshold_min_pa();
}
inline void SaturationConfig_UserThresholdSaturation::unsafe_arena_set_allocated_user_threshold_min_pa(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_min_pa) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_min_pa_);
  }
  user_threshold_min_pa_ = user_threshold_min_pa;
  if (user_threshold_min_pa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::release_user_threshold_min_pa() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = user_threshold_min_pa_;
  user_threshold_min_pa_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::unsafe_arena_release_user_threshold_min_pa() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = user_threshold_min_pa_;
  user_threshold_min_pa_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::_internal_mutable_user_threshold_min_pa() {
  
  if (user_threshold_min_pa_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    user_threshold_min_pa_ = p;
  }
  return user_threshold_min_pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::mutable_user_threshold_min_pa() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_user_threshold_min_pa();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa)
  return _msg;
}
inline void SaturationConfig_UserThresholdSaturation::set_allocated_user_threshold_min_pa(::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_min_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_min_pa_);
  }
  if (user_threshold_min_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_min_pa));
    if (message_arena != submessage_arena) {
      user_threshold_min_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_threshold_min_pa, submessage_arena);
    }
    
  } else {
    
  }
  user_threshold_min_pa_ = user_threshold_min_pa;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_min_pa)
}

// .google.protobuf.FloatValue user_threshold_max_pa = 3;
inline bool SaturationConfig_UserThresholdSaturation::_internal_has_user_threshold_max_pa() const {
  return this != internal_default_instance() && user_threshold_max_pa_ != nullptr;
}
inline bool SaturationConfig_UserThresholdSaturation::has_user_threshold_max_pa() const {
  return _internal_has_user_threshold_max_pa();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& SaturationConfig_UserThresholdSaturation::_internal_user_threshold_max_pa() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = user_threshold_max_pa_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& SaturationConfig_UserThresholdSaturation::user_threshold_max_pa() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa)
  return _internal_user_threshold_max_pa();
}
inline void SaturationConfig_UserThresholdSaturation::unsafe_arena_set_allocated_user_threshold_max_pa(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_max_pa) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_max_pa_);
  }
  user_threshold_max_pa_ = user_threshold_max_pa;
  if (user_threshold_max_pa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::release_user_threshold_max_pa() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = user_threshold_max_pa_;
  user_threshold_max_pa_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::unsafe_arena_release_user_threshold_max_pa() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = user_threshold_max_pa_;
  user_threshold_max_pa_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::_internal_mutable_user_threshold_max_pa() {
  
  if (user_threshold_max_pa_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    user_threshold_max_pa_ = p;
  }
  return user_threshold_max_pa_;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* SaturationConfig_UserThresholdSaturation::mutable_user_threshold_max_pa() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_user_threshold_max_pa();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa)
  return _msg;
}
inline void SaturationConfig_UserThresholdSaturation::set_allocated_user_threshold_max_pa(::PROTOBUF_NAMESPACE_ID::FloatValue* user_threshold_max_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_max_pa_);
  }
  if (user_threshold_max_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_max_pa));
    if (message_arena != submessage_arena) {
      user_threshold_max_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_threshold_max_pa, submessage_arena);
    }
    
  } else {
    
  }
  user_threshold_max_pa_ = user_threshold_max_pa;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.UserThresholdSaturation.user_threshold_max_pa)
}

// -------------------------------------------------------------------

// SaturationConfig

// .minknow_api.device.SaturationConfig.Thresholds thresholds = 1;
inline bool SaturationConfig::_internal_has_thresholds() const {
  return this != internal_default_instance() && thresholds_ != nullptr;
}
inline bool SaturationConfig::has_thresholds() const {
  return _internal_has_thresholds();
}
inline void SaturationConfig::clear_thresholds() {
  if (GetArenaForAllocation() == nullptr && thresholds_ != nullptr) {
    delete thresholds_;
  }
  thresholds_ = nullptr;
}
inline const ::minknow_api::device::SaturationConfig_Thresholds& SaturationConfig::_internal_thresholds() const {
  const ::minknow_api::device::SaturationConfig_Thresholds* p = thresholds_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SaturationConfig_Thresholds&>(
      ::minknow_api::device::_SaturationConfig_Thresholds_default_instance_);
}
inline const ::minknow_api::device::SaturationConfig_Thresholds& SaturationConfig::thresholds() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.thresholds)
  return _internal_thresholds();
}
inline void SaturationConfig::unsafe_arena_set_allocated_thresholds(
    ::minknow_api::device::SaturationConfig_Thresholds* thresholds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thresholds_);
  }
  thresholds_ = thresholds;
  if (thresholds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.thresholds)
}
inline ::minknow_api::device::SaturationConfig_Thresholds* SaturationConfig::release_thresholds() {
  
  ::minknow_api::device::SaturationConfig_Thresholds* temp = thresholds_;
  thresholds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SaturationConfig_Thresholds* SaturationConfig::unsafe_arena_release_thresholds() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.thresholds)
  
  ::minknow_api::device::SaturationConfig_Thresholds* temp = thresholds_;
  thresholds_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SaturationConfig_Thresholds* SaturationConfig::_internal_mutable_thresholds() {
  
  if (thresholds_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SaturationConfig_Thresholds>(GetArenaForAllocation());
    thresholds_ = p;
  }
  return thresholds_;
}
inline ::minknow_api::device::SaturationConfig_Thresholds* SaturationConfig::mutable_thresholds() {
  ::minknow_api::device::SaturationConfig_Thresholds* _msg = _internal_mutable_thresholds();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.thresholds)
  return _msg;
}
inline void SaturationConfig::set_allocated_thresholds(::minknow_api::device::SaturationConfig_Thresholds* thresholds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete thresholds_;
  }
  if (thresholds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SaturationConfig_Thresholds>::GetOwningArena(thresholds);
    if (message_arena != submessage_arena) {
      thresholds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thresholds, submessage_arena);
    }
    
  } else {
    
  }
  thresholds_ = thresholds;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.thresholds)
}

// .minknow_api.device.SaturationConfig.SoftwareSaturation software_saturation = 2;
inline bool SaturationConfig::_internal_has_software_saturation() const {
  return this != internal_default_instance() && software_saturation_ != nullptr;
}
inline bool SaturationConfig::has_software_saturation() const {
  return _internal_has_software_saturation();
}
inline void SaturationConfig::clear_software_saturation() {
  if (GetArenaForAllocation() == nullptr && software_saturation_ != nullptr) {
    delete software_saturation_;
  }
  software_saturation_ = nullptr;
}
inline const ::minknow_api::device::SaturationConfig_SoftwareSaturation& SaturationConfig::_internal_software_saturation() const {
  const ::minknow_api::device::SaturationConfig_SoftwareSaturation* p = software_saturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SaturationConfig_SoftwareSaturation&>(
      ::minknow_api::device::_SaturationConfig_SoftwareSaturation_default_instance_);
}
inline const ::minknow_api::device::SaturationConfig_SoftwareSaturation& SaturationConfig::software_saturation() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.software_saturation)
  return _internal_software_saturation();
}
inline void SaturationConfig::unsafe_arena_set_allocated_software_saturation(
    ::minknow_api::device::SaturationConfig_SoftwareSaturation* software_saturation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_saturation_);
  }
  software_saturation_ = software_saturation;
  if (software_saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.software_saturation)
}
inline ::minknow_api::device::SaturationConfig_SoftwareSaturation* SaturationConfig::release_software_saturation() {
  
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* temp = software_saturation_;
  software_saturation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SaturationConfig_SoftwareSaturation* SaturationConfig::unsafe_arena_release_software_saturation() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.software_saturation)
  
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* temp = software_saturation_;
  software_saturation_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SaturationConfig_SoftwareSaturation* SaturationConfig::_internal_mutable_software_saturation() {
  
  if (software_saturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SaturationConfig_SoftwareSaturation>(GetArenaForAllocation());
    software_saturation_ = p;
  }
  return software_saturation_;
}
inline ::minknow_api::device::SaturationConfig_SoftwareSaturation* SaturationConfig::mutable_software_saturation() {
  ::minknow_api::device::SaturationConfig_SoftwareSaturation* _msg = _internal_mutable_software_saturation();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.software_saturation)
  return _msg;
}
inline void SaturationConfig::set_allocated_software_saturation(::minknow_api::device::SaturationConfig_SoftwareSaturation* software_saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete software_saturation_;
  }
  if (software_saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SaturationConfig_SoftwareSaturation>::GetOwningArena(software_saturation);
    if (message_arena != submessage_arena) {
      software_saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software_saturation, submessage_arena);
    }
    
  } else {
    
  }
  software_saturation_ = software_saturation;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.software_saturation)
}

// .minknow_api.device.SaturationConfig.UserThresholdSaturation user_threshold_saturation = 3;
inline bool SaturationConfig::_internal_has_user_threshold_saturation() const {
  return this != internal_default_instance() && user_threshold_saturation_ != nullptr;
}
inline bool SaturationConfig::has_user_threshold_saturation() const {
  return _internal_has_user_threshold_saturation();
}
inline void SaturationConfig::clear_user_threshold_saturation() {
  if (GetArenaForAllocation() == nullptr && user_threshold_saturation_ != nullptr) {
    delete user_threshold_saturation_;
  }
  user_threshold_saturation_ = nullptr;
}
inline const ::minknow_api::device::SaturationConfig_UserThresholdSaturation& SaturationConfig::_internal_user_threshold_saturation() const {
  const ::minknow_api::device::SaturationConfig_UserThresholdSaturation* p = user_threshold_saturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SaturationConfig_UserThresholdSaturation&>(
      ::minknow_api::device::_SaturationConfig_UserThresholdSaturation_default_instance_);
}
inline const ::minknow_api::device::SaturationConfig_UserThresholdSaturation& SaturationConfig::user_threshold_saturation() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SaturationConfig.user_threshold_saturation)
  return _internal_user_threshold_saturation();
}
inline void SaturationConfig::unsafe_arena_set_allocated_user_threshold_saturation(
    ::minknow_api::device::SaturationConfig_UserThresholdSaturation* user_threshold_saturation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_threshold_saturation_);
  }
  user_threshold_saturation_ = user_threshold_saturation;
  if (user_threshold_saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SaturationConfig.user_threshold_saturation)
}
inline ::minknow_api::device::SaturationConfig_UserThresholdSaturation* SaturationConfig::release_user_threshold_saturation() {
  
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* temp = user_threshold_saturation_;
  user_threshold_saturation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SaturationConfig_UserThresholdSaturation* SaturationConfig::unsafe_arena_release_user_threshold_saturation() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SaturationConfig.user_threshold_saturation)
  
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* temp = user_threshold_saturation_;
  user_threshold_saturation_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SaturationConfig_UserThresholdSaturation* SaturationConfig::_internal_mutable_user_threshold_saturation() {
  
  if (user_threshold_saturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SaturationConfig_UserThresholdSaturation>(GetArenaForAllocation());
    user_threshold_saturation_ = p;
  }
  return user_threshold_saturation_;
}
inline ::minknow_api::device::SaturationConfig_UserThresholdSaturation* SaturationConfig::mutable_user_threshold_saturation() {
  ::minknow_api::device::SaturationConfig_UserThresholdSaturation* _msg = _internal_mutable_user_threshold_saturation();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SaturationConfig.user_threshold_saturation)
  return _msg;
}
inline void SaturationConfig::set_allocated_user_threshold_saturation(::minknow_api::device::SaturationConfig_UserThresholdSaturation* user_threshold_saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_threshold_saturation_;
  }
  if (user_threshold_saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SaturationConfig_UserThresholdSaturation>::GetOwningArena(user_threshold_saturation);
    if (message_arena != submessage_arena) {
      user_threshold_saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_threshold_saturation, submessage_arena);
    }
    
  } else {
    
  }
  user_threshold_saturation_ = user_threshold_saturation;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SaturationConfig.user_threshold_saturation)
}

// -------------------------------------------------------------------

// SetSaturationConfigRequest

// .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
inline bool SetSaturationConfigRequest::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool SetSaturationConfigRequest::has_settings() const {
  return _internal_has_settings();
}
inline void SetSaturationConfigRequest::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::minknow_api::device::SaturationConfig& SetSaturationConfigRequest::_internal_settings() const {
  const ::minknow_api::device::SaturationConfig* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SaturationConfig&>(
      ::minknow_api::device::_SaturationConfig_default_instance_);
}
inline const ::minknow_api::device::SaturationConfig& SetSaturationConfigRequest::settings() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetSaturationConfigRequest.settings)
  return _internal_settings();
}
inline void SetSaturationConfigRequest::unsafe_arena_set_allocated_settings(
    ::minknow_api::device::SaturationConfig* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.SetSaturationConfigRequest.settings)
}
inline ::minknow_api::device::SaturationConfig* SetSaturationConfigRequest::release_settings() {
  
  ::minknow_api::device::SaturationConfig* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SaturationConfig* SetSaturationConfigRequest::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:minknow_api.device.SetSaturationConfigRequest.settings)
  
  ::minknow_api::device::SaturationConfig* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SaturationConfig* SetSaturationConfigRequest::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SaturationConfig>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::minknow_api::device::SaturationConfig* SetSaturationConfigRequest::mutable_settings() {
  ::minknow_api::device::SaturationConfig* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.SetSaturationConfigRequest.settings)
  return _msg;
}
inline void SetSaturationConfigRequest::set_allocated_settings(::minknow_api::device::SaturationConfig* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SaturationConfig>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.SetSaturationConfigRequest.settings)
}

// -------------------------------------------------------------------

// SetSaturationConfigResponse

// -------------------------------------------------------------------

// GetSaturationConfigRequest

// -------------------------------------------------------------------

// GetSaturationConfigResponse

// .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
inline bool GetSaturationConfigResponse::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool GetSaturationConfigResponse::has_settings() const {
  return _internal_has_settings();
}
inline void GetSaturationConfigResponse::clear_settings() {
  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::minknow_api::device::SaturationConfig& GetSaturationConfigResponse::_internal_settings() const {
  const ::minknow_api::device::SaturationConfig* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::SaturationConfig&>(
      ::minknow_api::device::_SaturationConfig_default_instance_);
}
inline const ::minknow_api::device::SaturationConfig& GetSaturationConfigResponse::settings() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetSaturationConfigResponse.settings)
  return _internal_settings();
}
inline void GetSaturationConfigResponse::unsafe_arena_set_allocated_settings(
    ::minknow_api::device::SaturationConfig* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.device.GetSaturationConfigResponse.settings)
}
inline ::minknow_api::device::SaturationConfig* GetSaturationConfigResponse::release_settings() {
  
  ::minknow_api::device::SaturationConfig* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::SaturationConfig* GetSaturationConfigResponse::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:minknow_api.device.GetSaturationConfigResponse.settings)
  
  ::minknow_api::device::SaturationConfig* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::minknow_api::device::SaturationConfig* GetSaturationConfigResponse::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::SaturationConfig>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::minknow_api::device::SaturationConfig* GetSaturationConfigResponse::mutable_settings() {
  ::minknow_api::device::SaturationConfig* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:minknow_api.device.GetSaturationConfigResponse.settings)
  return _msg;
}
inline void GetSaturationConfigResponse::set_allocated_settings(::minknow_api::device::SaturationConfig* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::SaturationConfig>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetSaturationConfigResponse.settings)
}

// -------------------------------------------------------------------

// GetSampleRateRequest

// -------------------------------------------------------------------

// GetSampleRateResponse

// uint32 sample_rate = 1;
inline void GetSampleRateResponse::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSampleRateResponse::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSampleRateResponse::sample_rate() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetSampleRateResponse.sample_rate)
  return _internal_sample_rate();
}
inline void GetSampleRateResponse::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void GetSampleRateResponse::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetSampleRateResponse.sample_rate)
}

// -------------------------------------------------------------------

// SetSampleRateRequest

// uint32 sample_rate = 1 [(.minknow_api.rpc_required) = true];
inline void SetSampleRateRequest::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetSampleRateRequest::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetSampleRateRequest::sample_rate() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetSampleRateRequest.sample_rate)
  return _internal_sample_rate();
}
inline void SetSampleRateRequest::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void SetSampleRateRequest::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetSampleRateRequest.sample_rate)
}

// -------------------------------------------------------------------

// SetSampleRateResponse

// uint32 real_sample_rate = 1;
inline void SetSampleRateResponse::clear_real_sample_rate() {
  real_sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetSampleRateResponse::_internal_real_sample_rate() const {
  return real_sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetSampleRateResponse::real_sample_rate() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetSampleRateResponse.real_sample_rate)
  return _internal_real_sample_rate();
}
inline void SetSampleRateResponse::_internal_set_real_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  real_sample_rate_ = value;
}
inline void SetSampleRateResponse::set_real_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_real_sample_rate(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetSampleRateResponse.real_sample_rate)
}

// -------------------------------------------------------------------

// GetBiasVoltageRequest

// -------------------------------------------------------------------

// GetBiasVoltageResponse

// double bias_voltage = 1;
inline void GetBiasVoltageResponse::clear_bias_voltage() {
  bias_voltage_ = 0;
}
inline double GetBiasVoltageResponse::_internal_bias_voltage() const {
  return bias_voltage_;
}
inline double GetBiasVoltageResponse::bias_voltage() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.GetBiasVoltageResponse.bias_voltage)
  return _internal_bias_voltage();
}
inline void GetBiasVoltageResponse::_internal_set_bias_voltage(double value) {
  
  bias_voltage_ = value;
}
inline void GetBiasVoltageResponse::set_bias_voltage(double value) {
  _internal_set_bias_voltage(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.GetBiasVoltageResponse.bias_voltage)
}

// -------------------------------------------------------------------

// SetBiasVoltageRequest

// double bias_voltage = 1 [(.minknow_api.rpc_required) = true];
inline void SetBiasVoltageRequest::clear_bias_voltage() {
  bias_voltage_ = 0;
}
inline double SetBiasVoltageRequest::_internal_bias_voltage() const {
  return bias_voltage_;
}
inline double SetBiasVoltageRequest::bias_voltage() const {
  // @@protoc_insertion_point(field_get:minknow_api.device.SetBiasVoltageRequest.bias_voltage)
  return _internal_bias_voltage();
}
inline void SetBiasVoltageRequest::_internal_set_bias_voltage(double value) {
  
  bias_voltage_ = value;
}
inline void SetBiasVoltageRequest::set_bias_voltage(double value) {
  _internal_set_bias_voltage(value);
  // @@protoc_insertion_point(field_set:minknow_api.device.SetBiasVoltageRequest.bias_voltage)
}

// -------------------------------------------------------------------

// SetBiasVoltageResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace device
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::device::GetDeviceInfoResponse_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::device::GetDeviceInfoResponse_DeviceType>() {
  return ::minknow_api::device::GetDeviceInfoResponse_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::device::GetDeviceStateResponse_DeviceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::device::GetDeviceStateResponse_DeviceState>() {
  return ::minknow_api::device::GetDeviceStateResponse_DeviceState_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::device::FlowCellConnectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::device::FlowCellConnectorType>() {
  return ::minknow_api::device::FlowCellConnectorType_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::device::SelectedWell> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::device::SelectedWell>() {
  return ::minknow_api::device::SelectedWell_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fdevice_2eproto
