// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/device.proto

#include "minknow_api/device.pb.h"
#include "minknow_api/device.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace device {

static const char* DeviceService_method_names[] = {
  "/minknow_api.device.DeviceService/get_device_info",
  "/minknow_api.device.DeviceService/get_device_state",
  "/minknow_api.device.DeviceService/stream_device_state",
  "/minknow_api.device.DeviceService/get_flow_cell_info",
  "/minknow_api.device.DeviceService/stream_flow_cell_info",
  "/minknow_api.device.DeviceService/set_user_specified_flow_cell_id",
  "/minknow_api.device.DeviceService/set_user_specified_product_code",
  "/minknow_api.device.DeviceService/get_channels_layout",
  "/minknow_api.device.DeviceService/reset_device_settings",
  "/minknow_api.device.DeviceService/set_calibration",
  "/minknow_api.device.DeviceService/clear_calibration",
  "/minknow_api.device.DeviceService/get_calibration",
  "/minknow_api.device.DeviceService/set_temperature",
  "/minknow_api.device.DeviceService/get_temperature",
  "/minknow_api.device.DeviceService/stream_temperature",
  "/minknow_api.device.DeviceService/unblock",
  "/minknow_api.device.DeviceService/cancel_unblocks",
  "/minknow_api.device.DeviceService/get_channel_configuration",
  "/minknow_api.device.DeviceService/set_channel_configuration",
  "/minknow_api.device.DeviceService/set_channel_configuration_all",
  "/minknow_api.device.DeviceService/set_saturation_config",
  "/minknow_api.device.DeviceService/get_saturation_config",
  "/minknow_api.device.DeviceService/get_sample_rate",
  "/minknow_api.device.DeviceService/set_sample_rate",
  "/minknow_api.device.DeviceService/get_bias_voltage",
  "/minknow_api.device.DeviceService/set_bias_voltage",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_device_info_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_device_state_(DeviceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_device_state_(DeviceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_get_flow_cell_info_(DeviceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_flow_cell_info_(DeviceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_set_user_specified_flow_cell_id_(DeviceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_user_specified_product_code_(DeviceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_channels_layout_(DeviceService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reset_device_settings_(DeviceService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_calibration_(DeviceService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_calibration_(DeviceService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_calibration_(DeviceService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_temperature_(DeviceService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_temperature_(DeviceService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_temperature_(DeviceService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_unblock_(DeviceService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cancel_unblocks_(DeviceService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_channel_configuration_(DeviceService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_channel_configuration_(DeviceService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_channel_configuration_all_(DeviceService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_saturation_config_(DeviceService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_saturation_config_(DeviceService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_sample_rate_(DeviceService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_sample_rate_(DeviceService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_bias_voltage_(DeviceService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_bias_voltage_(DeviceService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::get_device_info(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceInfoRequest& request, ::minknow_api::device::GetDeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetDeviceInfoRequest, ::minknow_api::device::GetDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_device_info_, context, request, response);
}

void DeviceService::Stub::async::get_device_info(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceInfoRequest* request, ::minknow_api::device::GetDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetDeviceInfoRequest, ::minknow_api::device::GetDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_device_info_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_device_info(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceInfoRequest* request, ::minknow_api::device::GetDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_device_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetDeviceInfoResponse>* DeviceService::Stub::PrepareAsyncget_device_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetDeviceInfoResponse, ::minknow_api::device::GetDeviceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_device_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetDeviceInfoResponse>* DeviceService::Stub::Asyncget_device_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_device_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_device_state(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceStateRequest& request, ::minknow_api::device::GetDeviceStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetDeviceStateRequest, ::minknow_api::device::GetDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_device_state_, context, request, response);
}

void DeviceService::Stub::async::get_device_state(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceStateRequest* request, ::minknow_api::device::GetDeviceStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetDeviceStateRequest, ::minknow_api::device::GetDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_device_state_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_device_state(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceStateRequest* request, ::minknow_api::device::GetDeviceStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_device_state_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetDeviceStateResponse>* DeviceService::Stub::PrepareAsyncget_device_stateRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetDeviceStateResponse, ::minknow_api::device::GetDeviceStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_device_state_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetDeviceStateResponse>* DeviceService::Stub::Asyncget_device_stateRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetDeviceStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_device_stateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::device::GetDeviceStateResponse>* DeviceService::Stub::stream_device_stateRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamDeviceStateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::device::GetDeviceStateResponse>::Create(channel_.get(), rpcmethod_stream_device_state_, context, request);
}

void DeviceService::Stub::async::stream_device_state(::grpc::ClientContext* context, const ::minknow_api::device::StreamDeviceStateRequest* request, ::grpc::ClientReadReactor< ::minknow_api::device::GetDeviceStateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::device::GetDeviceStateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_device_state_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetDeviceStateResponse>* DeviceService::Stub::Asyncstream_device_stateRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamDeviceStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetDeviceStateResponse>::Create(channel_.get(), cq, rpcmethod_stream_device_state_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetDeviceStateResponse>* DeviceService::Stub::PrepareAsyncstream_device_stateRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamDeviceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetDeviceStateResponse>::Create(channel_.get(), cq, rpcmethod_stream_device_state_, context, request, false, nullptr);
}

::grpc::Status DeviceService::Stub::get_flow_cell_info(::grpc::ClientContext* context, const ::minknow_api::device::GetFlowCellInfoRequest& request, ::minknow_api::device::GetFlowCellInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetFlowCellInfoRequest, ::minknow_api::device::GetFlowCellInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_flow_cell_info_, context, request, response);
}

void DeviceService::Stub::async::get_flow_cell_info(::grpc::ClientContext* context, const ::minknow_api::device::GetFlowCellInfoRequest* request, ::minknow_api::device::GetFlowCellInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetFlowCellInfoRequest, ::minknow_api::device::GetFlowCellInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_flow_cell_info_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_flow_cell_info(::grpc::ClientContext* context, const ::minknow_api::device::GetFlowCellInfoRequest* request, ::minknow_api::device::GetFlowCellInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_flow_cell_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetFlowCellInfoResponse>* DeviceService::Stub::PrepareAsyncget_flow_cell_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetFlowCellInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetFlowCellInfoResponse, ::minknow_api::device::GetFlowCellInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_flow_cell_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetFlowCellInfoResponse>* DeviceService::Stub::Asyncget_flow_cell_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetFlowCellInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_flow_cell_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::device::GetFlowCellInfoResponse>* DeviceService::Stub::stream_flow_cell_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamFlowCellInfoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::device::GetFlowCellInfoResponse>::Create(channel_.get(), rpcmethod_stream_flow_cell_info_, context, request);
}

void DeviceService::Stub::async::stream_flow_cell_info(::grpc::ClientContext* context, const ::minknow_api::device::StreamFlowCellInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::device::GetFlowCellInfoResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::device::GetFlowCellInfoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_flow_cell_info_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetFlowCellInfoResponse>* DeviceService::Stub::Asyncstream_flow_cell_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamFlowCellInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetFlowCellInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_flow_cell_info_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetFlowCellInfoResponse>* DeviceService::Stub::PrepareAsyncstream_flow_cell_infoRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamFlowCellInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetFlowCellInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_flow_cell_info_, context, request, false, nullptr);
}

::grpc::Status DeviceService::Stub::set_user_specified_flow_cell_id(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest& request, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_user_specified_flow_cell_id_, context, request, response);
}

void DeviceService::Stub::async::set_user_specified_flow_cell_id(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* request, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_user_specified_flow_cell_id_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_user_specified_flow_cell_id(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* request, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_user_specified_flow_cell_id_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse>* DeviceService::Stub::PrepareAsyncset_user_specified_flow_cell_idRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse, ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_user_specified_flow_cell_id_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse>* DeviceService::Stub::Asyncset_user_specified_flow_cell_idRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_user_specified_flow_cell_idRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_user_specified_product_code(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest& request, ::minknow_api::device::SetUserSpecifiedProductCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetUserSpecifiedProductCodeRequest, ::minknow_api::device::SetUserSpecifiedProductCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_user_specified_product_code_, context, request, response);
}

void DeviceService::Stub::async::set_user_specified_product_code(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest* request, ::minknow_api::device::SetUserSpecifiedProductCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetUserSpecifiedProductCodeRequest, ::minknow_api::device::SetUserSpecifiedProductCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_user_specified_product_code_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_user_specified_product_code(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest* request, ::minknow_api::device::SetUserSpecifiedProductCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_user_specified_product_code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetUserSpecifiedProductCodeResponse>* DeviceService::Stub::PrepareAsyncset_user_specified_product_codeRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetUserSpecifiedProductCodeResponse, ::minknow_api::device::SetUserSpecifiedProductCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_user_specified_product_code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetUserSpecifiedProductCodeResponse>* DeviceService::Stub::Asyncset_user_specified_product_codeRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_user_specified_product_codeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_channels_layout(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelsLayoutRequest& request, ::minknow_api::device::GetChannelsLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetChannelsLayoutRequest, ::minknow_api::device::GetChannelsLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_channels_layout_, context, request, response);
}

void DeviceService::Stub::async::get_channels_layout(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelsLayoutRequest* request, ::minknow_api::device::GetChannelsLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetChannelsLayoutRequest, ::minknow_api::device::GetChannelsLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channels_layout_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_channels_layout(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelsLayoutRequest* request, ::minknow_api::device::GetChannelsLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channels_layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetChannelsLayoutResponse>* DeviceService::Stub::PrepareAsyncget_channels_layoutRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelsLayoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetChannelsLayoutResponse, ::minknow_api::device::GetChannelsLayoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_channels_layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetChannelsLayoutResponse>* DeviceService::Stub::Asyncget_channels_layoutRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelsLayoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_channels_layoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::reset_device_settings(::grpc::ClientContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest& request, ::minknow_api::device::ResetDeviceSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::ResetDeviceSettingsRequest, ::minknow_api::device::ResetDeviceSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reset_device_settings_, context, request, response);
}

void DeviceService::Stub::async::reset_device_settings(::grpc::ClientContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest* request, ::minknow_api::device::ResetDeviceSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::ResetDeviceSettingsRequest, ::minknow_api::device::ResetDeviceSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_device_settings_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::reset_device_settings(::grpc::ClientContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest* request, ::minknow_api::device::ResetDeviceSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_device_settings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::ResetDeviceSettingsResponse>* DeviceService::Stub::PrepareAsyncreset_device_settingsRaw(::grpc::ClientContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::ResetDeviceSettingsResponse, ::minknow_api::device::ResetDeviceSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reset_device_settings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::ResetDeviceSettingsResponse>* DeviceService::Stub::Asyncreset_device_settingsRaw(::grpc::ClientContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreset_device_settingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_calibration(::grpc::ClientContext* context, const ::minknow_api::device::SetCalibrationRequest& request, ::minknow_api::device::SetCalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetCalibrationRequest, ::minknow_api::device::SetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_calibration_, context, request, response);
}

void DeviceService::Stub::async::set_calibration(::grpc::ClientContext* context, const ::minknow_api::device::SetCalibrationRequest* request, ::minknow_api::device::SetCalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetCalibrationRequest, ::minknow_api::device::SetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_calibration_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_calibration(::grpc::ClientContext* context, const ::minknow_api::device::SetCalibrationRequest* request, ::minknow_api::device::SetCalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_calibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetCalibrationResponse>* DeviceService::Stub::PrepareAsyncset_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetCalibrationResponse, ::minknow_api::device::SetCalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_calibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetCalibrationResponse>* DeviceService::Stub::Asyncset_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_calibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::clear_calibration(::grpc::ClientContext* context, const ::minknow_api::device::ClearCalibrationRequest& request, ::minknow_api::device::ClearCalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::ClearCalibrationRequest, ::minknow_api::device::ClearCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_calibration_, context, request, response);
}

void DeviceService::Stub::async::clear_calibration(::grpc::ClientContext* context, const ::minknow_api::device::ClearCalibrationRequest* request, ::minknow_api::device::ClearCalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::ClearCalibrationRequest, ::minknow_api::device::ClearCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_calibration_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::clear_calibration(::grpc::ClientContext* context, const ::minknow_api::device::ClearCalibrationRequest* request, ::minknow_api::device::ClearCalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_calibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::ClearCalibrationResponse>* DeviceService::Stub::PrepareAsyncclear_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::ClearCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::ClearCalibrationResponse, ::minknow_api::device::ClearCalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_calibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::ClearCalibrationResponse>* DeviceService::Stub::Asyncclear_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::ClearCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclear_calibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_calibration(::grpc::ClientContext* context, const ::minknow_api::device::GetCalibrationRequest& request, ::minknow_api::device::GetCalibrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetCalibrationRequest, ::minknow_api::device::GetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_calibration_, context, request, response);
}

void DeviceService::Stub::async::get_calibration(::grpc::ClientContext* context, const ::minknow_api::device::GetCalibrationRequest* request, ::minknow_api::device::GetCalibrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetCalibrationRequest, ::minknow_api::device::GetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_calibration_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_calibration(::grpc::ClientContext* context, const ::minknow_api::device::GetCalibrationRequest* request, ::minknow_api::device::GetCalibrationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_calibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetCalibrationResponse>* DeviceService::Stub::PrepareAsyncget_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetCalibrationResponse, ::minknow_api::device::GetCalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_calibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetCalibrationResponse>* DeviceService::Stub::Asyncget_calibrationRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_calibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_temperature(::grpc::ClientContext* context, const ::minknow_api::device::SetTemperatureRequest& request, ::minknow_api::device::SetTemperatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetTemperatureRequest, ::minknow_api::device::SetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_temperature_, context, request, response);
}

void DeviceService::Stub::async::set_temperature(::grpc::ClientContext* context, const ::minknow_api::device::SetTemperatureRequest* request, ::minknow_api::device::SetTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetTemperatureRequest, ::minknow_api::device::SetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_temperature_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_temperature(::grpc::ClientContext* context, const ::minknow_api::device::SetTemperatureRequest* request, ::minknow_api::device::SetTemperatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_temperature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetTemperatureResponse>* DeviceService::Stub::PrepareAsyncset_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetTemperatureResponse, ::minknow_api::device::SetTemperatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_temperature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetTemperatureResponse>* DeviceService::Stub::Asyncset_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_temperatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_temperature(::grpc::ClientContext* context, const ::minknow_api::device::GetTemperatureRequest& request, ::minknow_api::device::GetTemperatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetTemperatureRequest, ::minknow_api::device::GetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_temperature_, context, request, response);
}

void DeviceService::Stub::async::get_temperature(::grpc::ClientContext* context, const ::minknow_api::device::GetTemperatureRequest* request, ::minknow_api::device::GetTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetTemperatureRequest, ::minknow_api::device::GetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_temperature_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_temperature(::grpc::ClientContext* context, const ::minknow_api::device::GetTemperatureRequest* request, ::minknow_api::device::GetTemperatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_temperature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetTemperatureResponse>* DeviceService::Stub::PrepareAsyncget_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetTemperatureResponse, ::minknow_api::device::GetTemperatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_temperature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetTemperatureResponse>* DeviceService::Stub::Asyncget_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_temperatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::device::GetTemperatureResponse>* DeviceService::Stub::stream_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamTemperatureRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::device::GetTemperatureResponse>::Create(channel_.get(), rpcmethod_stream_temperature_, context, request);
}

void DeviceService::Stub::async::stream_temperature(::grpc::ClientContext* context, const ::minknow_api::device::StreamTemperatureRequest* request, ::grpc::ClientReadReactor< ::minknow_api::device::GetTemperatureResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::device::GetTemperatureResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_temperature_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetTemperatureResponse>* DeviceService::Stub::Asyncstream_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamTemperatureRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_stream_temperature_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::device::GetTemperatureResponse>* DeviceService::Stub::PrepareAsyncstream_temperatureRaw(::grpc::ClientContext* context, const ::minknow_api::device::StreamTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::device::GetTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_stream_temperature_, context, request, false, nullptr);
}

::grpc::Status DeviceService::Stub::unblock(::grpc::ClientContext* context, const ::minknow_api::device::UnblockRequest& request, ::minknow_api::device::UnblockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::UnblockRequest, ::minknow_api::device::UnblockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unblock_, context, request, response);
}

void DeviceService::Stub::async::unblock(::grpc::ClientContext* context, const ::minknow_api::device::UnblockRequest* request, ::minknow_api::device::UnblockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::UnblockRequest, ::minknow_api::device::UnblockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unblock_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::unblock(::grpc::ClientContext* context, const ::minknow_api::device::UnblockRequest* request, ::minknow_api::device::UnblockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unblock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::UnblockResponse>* DeviceService::Stub::PrepareAsyncunblockRaw(::grpc::ClientContext* context, const ::minknow_api::device::UnblockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::UnblockResponse, ::minknow_api::device::UnblockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unblock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::UnblockResponse>* DeviceService::Stub::AsyncunblockRaw(::grpc::ClientContext* context, const ::minknow_api::device::UnblockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunblockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::cancel_unblocks(::grpc::ClientContext* context, const ::minknow_api::device::CancelUnblocksRequest& request, ::minknow_api::device::CancelUnblocksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::CancelUnblocksRequest, ::minknow_api::device::CancelUnblocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cancel_unblocks_, context, request, response);
}

void DeviceService::Stub::async::cancel_unblocks(::grpc::ClientContext* context, const ::minknow_api::device::CancelUnblocksRequest* request, ::minknow_api::device::CancelUnblocksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::CancelUnblocksRequest, ::minknow_api::device::CancelUnblocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_unblocks_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::cancel_unblocks(::grpc::ClientContext* context, const ::minknow_api::device::CancelUnblocksRequest* request, ::minknow_api::device::CancelUnblocksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_unblocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::CancelUnblocksResponse>* DeviceService::Stub::PrepareAsynccancel_unblocksRaw(::grpc::ClientContext* context, const ::minknow_api::device::CancelUnblocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::CancelUnblocksResponse, ::minknow_api::device::CancelUnblocksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cancel_unblocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::CancelUnblocksResponse>* DeviceService::Stub::Asynccancel_unblocksRaw(::grpc::ClientContext* context, const ::minknow_api::device::CancelUnblocksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccancel_unblocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelConfigurationRequest& request, ::minknow_api::device::GetChannelConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetChannelConfigurationRequest, ::minknow_api::device::GetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_channel_configuration_, context, request, response);
}

void DeviceService::Stub::async::get_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelConfigurationRequest* request, ::minknow_api::device::GetChannelConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetChannelConfigurationRequest, ::minknow_api::device::GetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channel_configuration_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelConfigurationRequest* request, ::minknow_api::device::GetChannelConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channel_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetChannelConfigurationResponse>* DeviceService::Stub::PrepareAsyncget_channel_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetChannelConfigurationResponse, ::minknow_api::device::GetChannelConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_channel_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetChannelConfigurationResponse>* DeviceService::Stub::Asyncget_channel_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetChannelConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_channel_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationRequest& request, ::minknow_api::device::SetChannelConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetChannelConfigurationRequest, ::minknow_api::device::SetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_channel_configuration_, context, request, response);
}

void DeviceService::Stub::async::set_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationRequest* request, ::minknow_api::device::SetChannelConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetChannelConfigurationRequest, ::minknow_api::device::SetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_channel_configuration_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_channel_configuration(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationRequest* request, ::minknow_api::device::SetChannelConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_channel_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetChannelConfigurationResponse>* DeviceService::Stub::PrepareAsyncset_channel_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetChannelConfigurationResponse, ::minknow_api::device::SetChannelConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_channel_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetChannelConfigurationResponse>* DeviceService::Stub::Asyncset_channel_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_channel_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_channel_configuration_all(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest& request, ::minknow_api::device::SetChannelConfigurationAllResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetChannelConfigurationAllRequest, ::minknow_api::device::SetChannelConfigurationAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_channel_configuration_all_, context, request, response);
}

void DeviceService::Stub::async::set_channel_configuration_all(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest* request, ::minknow_api::device::SetChannelConfigurationAllResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetChannelConfigurationAllRequest, ::minknow_api::device::SetChannelConfigurationAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_channel_configuration_all_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_channel_configuration_all(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest* request, ::minknow_api::device::SetChannelConfigurationAllResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_channel_configuration_all_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetChannelConfigurationAllResponse>* DeviceService::Stub::PrepareAsyncset_channel_configuration_allRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetChannelConfigurationAllResponse, ::minknow_api::device::SetChannelConfigurationAllRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_channel_configuration_all_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetChannelConfigurationAllResponse>* DeviceService::Stub::Asyncset_channel_configuration_allRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_channel_configuration_allRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::SetSaturationConfigRequest& request, ::minknow_api::device::SetSaturationConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetSaturationConfigRequest, ::minknow_api::device::SetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_saturation_config_, context, request, response);
}

void DeviceService::Stub::async::set_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::SetSaturationConfigRequest* request, ::minknow_api::device::SetSaturationConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetSaturationConfigRequest, ::minknow_api::device::SetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_saturation_config_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::SetSaturationConfigRequest* request, ::minknow_api::device::SetSaturationConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_saturation_config_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetSaturationConfigResponse>* DeviceService::Stub::PrepareAsyncset_saturation_configRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetSaturationConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetSaturationConfigResponse, ::minknow_api::device::SetSaturationConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_saturation_config_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetSaturationConfigResponse>* DeviceService::Stub::Asyncset_saturation_configRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetSaturationConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_saturation_configRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::GetSaturationConfigRequest& request, ::minknow_api::device::GetSaturationConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetSaturationConfigRequest, ::minknow_api::device::GetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_saturation_config_, context, request, response);
}

void DeviceService::Stub::async::get_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::GetSaturationConfigRequest* request, ::minknow_api::device::GetSaturationConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetSaturationConfigRequest, ::minknow_api::device::GetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_saturation_config_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_saturation_config(::grpc::ClientContext* context, const ::minknow_api::device::GetSaturationConfigRequest* request, ::minknow_api::device::GetSaturationConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_saturation_config_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetSaturationConfigResponse>* DeviceService::Stub::PrepareAsyncget_saturation_configRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetSaturationConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetSaturationConfigResponse, ::minknow_api::device::GetSaturationConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_saturation_config_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetSaturationConfigResponse>* DeviceService::Stub::Asyncget_saturation_configRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetSaturationConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_saturation_configRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::GetSampleRateRequest& request, ::minknow_api::device::GetSampleRateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetSampleRateRequest, ::minknow_api::device::GetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_sample_rate_, context, request, response);
}

void DeviceService::Stub::async::get_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::GetSampleRateRequest* request, ::minknow_api::device::GetSampleRateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetSampleRateRequest, ::minknow_api::device::GetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_sample_rate_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::GetSampleRateRequest* request, ::minknow_api::device::GetSampleRateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_sample_rate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetSampleRateResponse>* DeviceService::Stub::PrepareAsyncget_sample_rateRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetSampleRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetSampleRateResponse, ::minknow_api::device::GetSampleRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_sample_rate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetSampleRateResponse>* DeviceService::Stub::Asyncget_sample_rateRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetSampleRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_sample_rateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::SetSampleRateRequest& request, ::minknow_api::device::SetSampleRateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetSampleRateRequest, ::minknow_api::device::SetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_sample_rate_, context, request, response);
}

void DeviceService::Stub::async::set_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::SetSampleRateRequest* request, ::minknow_api::device::SetSampleRateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetSampleRateRequest, ::minknow_api::device::SetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_sample_rate_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_sample_rate(::grpc::ClientContext* context, const ::minknow_api::device::SetSampleRateRequest* request, ::minknow_api::device::SetSampleRateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_sample_rate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetSampleRateResponse>* DeviceService::Stub::PrepareAsyncset_sample_rateRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetSampleRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetSampleRateResponse, ::minknow_api::device::SetSampleRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_sample_rate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetSampleRateResponse>* DeviceService::Stub::Asyncset_sample_rateRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetSampleRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_sample_rateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::get_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::GetBiasVoltageRequest& request, ::minknow_api::device::GetBiasVoltageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::GetBiasVoltageRequest, ::minknow_api::device::GetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_bias_voltage_, context, request, response);
}

void DeviceService::Stub::async::get_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::GetBiasVoltageRequest* request, ::minknow_api::device::GetBiasVoltageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::GetBiasVoltageRequest, ::minknow_api::device::GetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_bias_voltage_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::get_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::GetBiasVoltageRequest* request, ::minknow_api::device::GetBiasVoltageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_bias_voltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetBiasVoltageResponse>* DeviceService::Stub::PrepareAsyncget_bias_voltageRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetBiasVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::GetBiasVoltageResponse, ::minknow_api::device::GetBiasVoltageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_bias_voltage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::GetBiasVoltageResponse>* DeviceService::Stub::Asyncget_bias_voltageRaw(::grpc::ClientContext* context, const ::minknow_api::device::GetBiasVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_bias_voltageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::set_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::SetBiasVoltageRequest& request, ::minknow_api::device::SetBiasVoltageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::device::SetBiasVoltageRequest, ::minknow_api::device::SetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_bias_voltage_, context, request, response);
}

void DeviceService::Stub::async::set_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::SetBiasVoltageRequest* request, ::minknow_api::device::SetBiasVoltageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::device::SetBiasVoltageRequest, ::minknow_api::device::SetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_bias_voltage_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::set_bias_voltage(::grpc::ClientContext* context, const ::minknow_api::device::SetBiasVoltageRequest* request, ::minknow_api::device::SetBiasVoltageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_bias_voltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetBiasVoltageResponse>* DeviceService::Stub::PrepareAsyncset_bias_voltageRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetBiasVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::device::SetBiasVoltageResponse, ::minknow_api::device::SetBiasVoltageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_bias_voltage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::device::SetBiasVoltageResponse>* DeviceService::Stub::Asyncset_bias_voltageRaw(::grpc::ClientContext* context, const ::minknow_api::device::SetBiasVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_bias_voltageRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetDeviceInfoRequest, ::minknow_api::device::GetDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetDeviceInfoRequest* req,
             ::minknow_api::device::GetDeviceInfoResponse* resp) {
               return service->get_device_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetDeviceStateRequest, ::minknow_api::device::GetDeviceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetDeviceStateRequest* req,
             ::minknow_api::device::GetDeviceStateResponse* resp) {
               return service->get_device_state(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::minknow_api::device::StreamDeviceStateRequest, ::minknow_api::device::GetDeviceStateResponse>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::StreamDeviceStateRequest* req,
             ::grpc::ServerWriter<::minknow_api::device::GetDeviceStateResponse>* writer) {
               return service->stream_device_state(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetFlowCellInfoRequest, ::minknow_api::device::GetFlowCellInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetFlowCellInfoRequest* req,
             ::minknow_api::device::GetFlowCellInfoResponse* resp) {
               return service->get_flow_cell_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::minknow_api::device::StreamFlowCellInfoRequest, ::minknow_api::device::GetFlowCellInfoResponse>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::StreamFlowCellInfoRequest* req,
             ::grpc::ServerWriter<::minknow_api::device::GetFlowCellInfoResponse>* writer) {
               return service->stream_flow_cell_info(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* req,
             ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* resp) {
               return service->set_user_specified_flow_cell_id(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetUserSpecifiedProductCodeRequest, ::minknow_api::device::SetUserSpecifiedProductCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetUserSpecifiedProductCodeRequest* req,
             ::minknow_api::device::SetUserSpecifiedProductCodeResponse* resp) {
               return service->set_user_specified_product_code(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetChannelsLayoutRequest, ::minknow_api::device::GetChannelsLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetChannelsLayoutRequest* req,
             ::minknow_api::device::GetChannelsLayoutResponse* resp) {
               return service->get_channels_layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::ResetDeviceSettingsRequest, ::minknow_api::device::ResetDeviceSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::ResetDeviceSettingsRequest* req,
             ::minknow_api::device::ResetDeviceSettingsResponse* resp) {
               return service->reset_device_settings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetCalibrationRequest, ::minknow_api::device::SetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetCalibrationRequest* req,
             ::minknow_api::device::SetCalibrationResponse* resp) {
               return service->set_calibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::ClearCalibrationRequest, ::minknow_api::device::ClearCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::ClearCalibrationRequest* req,
             ::minknow_api::device::ClearCalibrationResponse* resp) {
               return service->clear_calibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetCalibrationRequest, ::minknow_api::device::GetCalibrationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetCalibrationRequest* req,
             ::minknow_api::device::GetCalibrationResponse* resp) {
               return service->get_calibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetTemperatureRequest, ::minknow_api::device::SetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetTemperatureRequest* req,
             ::minknow_api::device::SetTemperatureResponse* resp) {
               return service->set_temperature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetTemperatureRequest, ::minknow_api::device::GetTemperatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetTemperatureRequest* req,
             ::minknow_api::device::GetTemperatureResponse* resp) {
               return service->get_temperature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::minknow_api::device::StreamTemperatureRequest, ::minknow_api::device::GetTemperatureResponse>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::StreamTemperatureRequest* req,
             ::grpc::ServerWriter<::minknow_api::device::GetTemperatureResponse>* writer) {
               return service->stream_temperature(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::UnblockRequest, ::minknow_api::device::UnblockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::UnblockRequest* req,
             ::minknow_api::device::UnblockResponse* resp) {
               return service->unblock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::CancelUnblocksRequest, ::minknow_api::device::CancelUnblocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::CancelUnblocksRequest* req,
             ::minknow_api::device::CancelUnblocksResponse* resp) {
               return service->cancel_unblocks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetChannelConfigurationRequest, ::minknow_api::device::GetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetChannelConfigurationRequest* req,
             ::minknow_api::device::GetChannelConfigurationResponse* resp) {
               return service->get_channel_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetChannelConfigurationRequest, ::minknow_api::device::SetChannelConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetChannelConfigurationRequest* req,
             ::minknow_api::device::SetChannelConfigurationResponse* resp) {
               return service->set_channel_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetChannelConfigurationAllRequest, ::minknow_api::device::SetChannelConfigurationAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetChannelConfigurationAllRequest* req,
             ::minknow_api::device::SetChannelConfigurationAllResponse* resp) {
               return service->set_channel_configuration_all(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetSaturationConfigRequest, ::minknow_api::device::SetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetSaturationConfigRequest* req,
             ::minknow_api::device::SetSaturationConfigResponse* resp) {
               return service->set_saturation_config(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetSaturationConfigRequest, ::minknow_api::device::GetSaturationConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetSaturationConfigRequest* req,
             ::minknow_api::device::GetSaturationConfigResponse* resp) {
               return service->get_saturation_config(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetSampleRateRequest, ::minknow_api::device::GetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetSampleRateRequest* req,
             ::minknow_api::device::GetSampleRateResponse* resp) {
               return service->get_sample_rate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetSampleRateRequest, ::minknow_api::device::SetSampleRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetSampleRateRequest* req,
             ::minknow_api::device::SetSampleRateResponse* resp) {
               return service->set_sample_rate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::GetBiasVoltageRequest, ::minknow_api::device::GetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::GetBiasVoltageRequest* req,
             ::minknow_api::device::GetBiasVoltageResponse* resp) {
               return service->get_bias_voltage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::minknow_api::device::SetBiasVoltageRequest, ::minknow_api::device::SetBiasVoltageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::device::SetBiasVoltageRequest* req,
             ::minknow_api::device::SetBiasVoltageResponse* resp) {
               return service->set_bias_voltage(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::get_device_info(::grpc::ServerContext* context, const ::minknow_api::device::GetDeviceInfoRequest* request, ::minknow_api::device::GetDeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_device_state(::grpc::ServerContext* context, const ::minknow_api::device::GetDeviceStateRequest* request, ::minknow_api::device::GetDeviceStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::stream_device_state(::grpc::ServerContext* context, const ::minknow_api::device::StreamDeviceStateRequest* request, ::grpc::ServerWriter< ::minknow_api::device::GetDeviceStateResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_flow_cell_info(::grpc::ServerContext* context, const ::minknow_api::device::GetFlowCellInfoRequest* request, ::minknow_api::device::GetFlowCellInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::stream_flow_cell_info(::grpc::ServerContext* context, const ::minknow_api::device::StreamFlowCellInfoRequest* request, ::grpc::ServerWriter< ::minknow_api::device::GetFlowCellInfoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_user_specified_flow_cell_id(::grpc::ServerContext* context, const ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* request, ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_user_specified_product_code(::grpc::ServerContext* context, const ::minknow_api::device::SetUserSpecifiedProductCodeRequest* request, ::minknow_api::device::SetUserSpecifiedProductCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_channels_layout(::grpc::ServerContext* context, const ::minknow_api::device::GetChannelsLayoutRequest* request, ::minknow_api::device::GetChannelsLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::reset_device_settings(::grpc::ServerContext* context, const ::minknow_api::device::ResetDeviceSettingsRequest* request, ::minknow_api::device::ResetDeviceSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_calibration(::grpc::ServerContext* context, const ::minknow_api::device::SetCalibrationRequest* request, ::minknow_api::device::SetCalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::clear_calibration(::grpc::ServerContext* context, const ::minknow_api::device::ClearCalibrationRequest* request, ::minknow_api::device::ClearCalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_calibration(::grpc::ServerContext* context, const ::minknow_api::device::GetCalibrationRequest* request, ::minknow_api::device::GetCalibrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_temperature(::grpc::ServerContext* context, const ::minknow_api::device::SetTemperatureRequest* request, ::minknow_api::device::SetTemperatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_temperature(::grpc::ServerContext* context, const ::minknow_api::device::GetTemperatureRequest* request, ::minknow_api::device::GetTemperatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::stream_temperature(::grpc::ServerContext* context, const ::minknow_api::device::StreamTemperatureRequest* request, ::grpc::ServerWriter< ::minknow_api::device::GetTemperatureResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::unblock(::grpc::ServerContext* context, const ::minknow_api::device::UnblockRequest* request, ::minknow_api::device::UnblockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::cancel_unblocks(::grpc::ServerContext* context, const ::minknow_api::device::CancelUnblocksRequest* request, ::minknow_api::device::CancelUnblocksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_channel_configuration(::grpc::ServerContext* context, const ::minknow_api::device::GetChannelConfigurationRequest* request, ::minknow_api::device::GetChannelConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_channel_configuration(::grpc::ServerContext* context, const ::minknow_api::device::SetChannelConfigurationRequest* request, ::minknow_api::device::SetChannelConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_channel_configuration_all(::grpc::ServerContext* context, const ::minknow_api::device::SetChannelConfigurationAllRequest* request, ::minknow_api::device::SetChannelConfigurationAllResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_saturation_config(::grpc::ServerContext* context, const ::minknow_api::device::SetSaturationConfigRequest* request, ::minknow_api::device::SetSaturationConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_saturation_config(::grpc::ServerContext* context, const ::minknow_api::device::GetSaturationConfigRequest* request, ::minknow_api::device::GetSaturationConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_sample_rate(::grpc::ServerContext* context, const ::minknow_api::device::GetSampleRateRequest* request, ::minknow_api::device::GetSampleRateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_sample_rate(::grpc::ServerContext* context, const ::minknow_api::device::SetSampleRateRequest* request, ::minknow_api::device::SetSampleRateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::get_bias_voltage(::grpc::ServerContext* context, const ::minknow_api::device::GetBiasVoltageRequest* request, ::minknow_api::device::GetBiasVoltageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::set_bias_voltage(::grpc::ServerContext* context, const ::minknow_api::device::SetBiasVoltageRequest* request, ::minknow_api::device::SetBiasVoltageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace device

