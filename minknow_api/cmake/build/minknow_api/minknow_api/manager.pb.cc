// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/manager.proto

#include "minknow_api/manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace manager {
constexpr DescribeHostRequest::DescribeHostRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DescribeHostRequestDefaultTypeInternal {
  constexpr DescribeHostRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DescribeHostRequestDefaultTypeInternal() {}
  union {
    DescribeHostRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DescribeHostRequestDefaultTypeInternal _DescribeHostRequest_default_instance_;
constexpr DescribeHostResponse::DescribeHostResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , needs_association_(false)
  , can_sequence_offline_(false){}
struct DescribeHostResponseDefaultTypeInternal {
  constexpr DescribeHostResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DescribeHostResponseDefaultTypeInternal() {}
  union {
    DescribeHostResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DescribeHostResponseDefaultTypeInternal _DescribeHostResponse_default_instance_;
constexpr FlowCellPosition_Location::FlowCellPosition_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct FlowCellPosition_LocationDefaultTypeInternal {
  constexpr FlowCellPosition_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPosition_LocationDefaultTypeInternal() {}
  union {
    FlowCellPosition_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPosition_LocationDefaultTypeInternal _FlowCellPosition_Location_default_instance_;
constexpr FlowCellPosition_RpcPorts::FlowCellPosition_RpcPorts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secure_(0u)
  , insecure_(0u)
  , secure_grpc_web_(0u)
  , insecure_grpc_web_(0u){}
struct FlowCellPosition_RpcPortsDefaultTypeInternal {
  constexpr FlowCellPosition_RpcPortsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPosition_RpcPortsDefaultTypeInternal() {}
  union {
    FlowCellPosition_RpcPorts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPosition_RpcPortsDefaultTypeInternal _FlowCellPosition_RpcPorts_default_instance_;
constexpr FlowCellPosition_SharedHardwareGroup::FlowCellPosition_SharedHardwareGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(0u){}
struct FlowCellPosition_SharedHardwareGroupDefaultTypeInternal {
  constexpr FlowCellPosition_SharedHardwareGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPosition_SharedHardwareGroupDefaultTypeInternal() {}
  union {
    FlowCellPosition_SharedHardwareGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPosition_SharedHardwareGroupDefaultTypeInternal _FlowCellPosition_SharedHardwareGroup_default_instance_;
constexpr FlowCellPosition::FlowCellPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , rpc_ports_(nullptr)
  , shared_hardware_group_(nullptr)
  , state_(0)

  , is_integrated_(false)
  , can_sequence_offline_(false){}
struct FlowCellPositionDefaultTypeInternal {
  constexpr FlowCellPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPositionDefaultTypeInternal() {}
  union {
    FlowCellPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPositionDefaultTypeInternal _FlowCellPosition_default_instance_;
constexpr FlowCellPositionsRequest::FlowCellPositionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FlowCellPositionsRequestDefaultTypeInternal {
  constexpr FlowCellPositionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPositionsRequestDefaultTypeInternal() {}
  union {
    FlowCellPositionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPositionsRequestDefaultTypeInternal _FlowCellPositionsRequest_default_instance_;
constexpr FlowCellPositionsResponse::FlowCellPositionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_()
  , total_count_(0){}
struct FlowCellPositionsResponseDefaultTypeInternal {
  constexpr FlowCellPositionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowCellPositionsResponseDefaultTypeInternal() {}
  union {
    FlowCellPositionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowCellPositionsResponseDefaultTypeInternal _FlowCellPositionsResponse_default_instance_;
constexpr WatchFlowCellPositionsRequest::WatchFlowCellPositionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WatchFlowCellPositionsRequestDefaultTypeInternal {
  constexpr WatchFlowCellPositionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchFlowCellPositionsRequestDefaultTypeInternal() {}
  union {
    WatchFlowCellPositionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchFlowCellPositionsRequestDefaultTypeInternal _WatchFlowCellPositionsRequest_default_instance_;
constexpr WatchFlowCellPositionsResponse::WatchFlowCellPositionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additions_()
  , changes_()
  , removals_(){}
struct WatchFlowCellPositionsResponseDefaultTypeInternal {
  constexpr WatchFlowCellPositionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchFlowCellPositionsResponseDefaultTypeInternal() {}
  union {
    WatchFlowCellPositionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchFlowCellPositionsResponseDefaultTypeInternal _WatchFlowCellPositionsResponse_default_instance_;
constexpr ResetPositionRequest::ResetPositionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_()
  , force_(false){}
struct ResetPositionRequestDefaultTypeInternal {
  constexpr ResetPositionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetPositionRequestDefaultTypeInternal() {}
  union {
    ResetPositionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetPositionRequestDefaultTypeInternal _ResetPositionRequest_default_instance_;
constexpr ResetPositionResponse::ResetPositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetPositionResponseDefaultTypeInternal {
  constexpr ResetPositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetPositionResponseDefaultTypeInternal() {}
  union {
    ResetPositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetPositionResponseDefaultTypeInternal _ResetPositionResponse_default_instance_;
constexpr BasecallerApiRequest::BasecallerApiRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BasecallerApiRequestDefaultTypeInternal {
  constexpr BasecallerApiRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallerApiRequestDefaultTypeInternal() {}
  union {
    BasecallerApiRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallerApiRequestDefaultTypeInternal _BasecallerApiRequest_default_instance_;
constexpr BasecallerApiResponse::BasecallerApiResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secure_(0u)
  , insecure_(0u)
  , secure_grpc_web_(0u)
  , insecure_grpc_web_(0u){}
struct BasecallerApiResponseDefaultTypeInternal {
  constexpr BasecallerApiResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallerApiResponseDefaultTypeInternal() {}
  union {
    BasecallerApiResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallerApiResponseDefaultTypeInternal _BasecallerApiResponse_default_instance_;
constexpr GetGuppyInfoRequest::GetGuppyInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetGuppyInfoRequestDefaultTypeInternal {
  constexpr GetGuppyInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGuppyInfoRequestDefaultTypeInternal() {}
  union {
    GetGuppyInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGuppyInfoRequestDefaultTypeInternal _GetGuppyInfoRequest_default_instance_;
constexpr GetGuppyInfoResponse::GetGuppyInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u){}
struct GetGuppyInfoResponseDefaultTypeInternal {
  constexpr GetGuppyInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGuppyInfoResponseDefaultTypeInternal() {}
  union {
    GetGuppyInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGuppyInfoResponseDefaultTypeInternal _GetGuppyInfoResponse_default_instance_;
constexpr GetVersionInfoRequest::GetVersionInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetVersionInfoRequestDefaultTypeInternal {
  constexpr GetVersionInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionInfoRequestDefaultTypeInternal() {}
  union {
    GetVersionInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionInfoRequestDefaultTypeInternal _GetVersionInfoRequest_default_instance_;
constexpr GetVersionInfoResponse::GetVersionInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocols_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distribution_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guppy_build_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guppy_connected_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minknow_(nullptr)
  , distribution_status_(0)

  , installation_type_(0)
{}
struct GetVersionInfoResponseDefaultTypeInternal {
  constexpr GetVersionInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionInfoResponseDefaultTypeInternal() {}
  union {
    GetVersionInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionInfoResponseDefaultTypeInternal _GetVersionInfoResponse_default_instance_;
constexpr ListProtocolOutputDirFilesRequest::ListProtocolOutputDirFilesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListProtocolOutputDirFilesRequestDefaultTypeInternal {
  constexpr ListProtocolOutputDirFilesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolOutputDirFilesRequestDefaultTypeInternal() {}
  union {
    ListProtocolOutputDirFilesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolOutputDirFilesRequestDefaultTypeInternal _ListProtocolOutputDirFilesRequest_default_instance_;
constexpr ListProtocolOutputDirFilesResponse_DirectoryInfo::ListProtocolOutputDirFilesResponse_DirectoryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , directory_count_(0)
  , file_count_(0){}
struct ListProtocolOutputDirFilesResponse_DirectoryInfoDefaultTypeInternal {
  constexpr ListProtocolOutputDirFilesResponse_DirectoryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolOutputDirFilesResponse_DirectoryInfoDefaultTypeInternal() {}
  union {
    ListProtocolOutputDirFilesResponse_DirectoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolOutputDirFilesResponse_DirectoryInfoDefaultTypeInternal _ListProtocolOutputDirFilesResponse_DirectoryInfo_default_instance_;
constexpr ListProtocolOutputDirFilesResponse::ListProtocolOutputDirFilesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directories_()
  , files_()
  , current_listed_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListProtocolOutputDirFilesResponseDefaultTypeInternal {
  constexpr ListProtocolOutputDirFilesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolOutputDirFilesResponseDefaultTypeInternal() {}
  union {
    ListProtocolOutputDirFilesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolOutputDirFilesResponseDefaultTypeInternal _ListProtocolOutputDirFilesResponse_default_instance_;
constexpr CreateDirectoryRequest::CreateDirectoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateDirectoryRequestDefaultTypeInternal {
  constexpr CreateDirectoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDirectoryRequestDefaultTypeInternal() {}
  union {
    CreateDirectoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDirectoryRequestDefaultTypeInternal _CreateDirectoryRequest_default_instance_;
constexpr CreateDirectoryResponse::CreateDirectoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateDirectoryResponseDefaultTypeInternal {
  constexpr CreateDirectoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDirectoryResponseDefaultTypeInternal() {}
  union {
    CreateDirectoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDirectoryResponseDefaultTypeInternal _CreateDirectoryResponse_default_instance_;
constexpr FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_types_stored_()
  , filesystem_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_available_(uint64_t{0u})
  , bytes_capacity_(uint64_t{0u})
  , bytes_to_stop_cleanly_(uint64_t{0u})
  , bytes_when_alert_issued_(uint64_t{0u})
  , bytes_per_second_(int64_t{0})
  , recommend_alert_(false)
  , recommend_stop_(false){}
struct FilesystemDiskSpaceInfoDefaultTypeInternal {
  constexpr FilesystemDiskSpaceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilesystemDiskSpaceInfoDefaultTypeInternal() {}
  union {
    FilesystemDiskSpaceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilesystemDiskSpaceInfoDefaultTypeInternal _FilesystemDiskSpaceInfo_default_instance_;
constexpr GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDiskSpaceInfoRequestDefaultTypeInternal {
  constexpr GetDiskSpaceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDiskSpaceInfoRequestDefaultTypeInternal() {}
  union {
    GetDiskSpaceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDiskSpaceInfoRequestDefaultTypeInternal _GetDiskSpaceInfoRequest_default_instance_;
constexpr StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : period_(0u){}
struct StreamDiskSpaceInfoRequestDefaultTypeInternal {
  constexpr StreamDiskSpaceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDiskSpaceInfoRequestDefaultTypeInternal() {}
  union {
    StreamDiskSpaceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDiskSpaceInfoRequestDefaultTypeInternal _StreamDiskSpaceInfoRequest_default_instance_;
constexpr GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filesystem_disk_space_info_(){}
struct GetDiskSpaceInfoResponseDefaultTypeInternal {
  constexpr GetDiskSpaceInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDiskSpaceInfoResponseDefaultTypeInternal() {}
  union {
    GetDiskSpaceInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDiskSpaceInfoResponseDefaultTypeInternal _GetDiskSpaceInfoResponse_default_instance_;
constexpr GetBarcodeKitInfoRequest::GetBarcodeKitInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBarcodeKitInfoRequestDefaultTypeInternal {
  constexpr GetBarcodeKitInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKitInfoRequestDefaultTypeInternal() {}
  union {
    GetBarcodeKitInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKitInfoRequestDefaultTypeInternal _GetBarcodeKitInfoRequest_default_instance_;
constexpr GetBarcodeKitInfoResponse_BarcodeKitInfo::GetBarcodeKitInfoResponse_BarcodeKitInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_dual_(false)
  , is_both_ends_(false){}
struct GetBarcodeKitInfoResponse_BarcodeKitInfoDefaultTypeInternal {
  constexpr GetBarcodeKitInfoResponse_BarcodeKitInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKitInfoResponse_BarcodeKitInfoDefaultTypeInternal() {}
  union {
    GetBarcodeKitInfoResponse_BarcodeKitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKitInfoResponse_BarcodeKitInfoDefaultTypeInternal _GetBarcodeKitInfoResponse_BarcodeKitInfo_default_instance_;
constexpr GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUseDefaultTypeInternal _GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse_default_instance_;
constexpr GetBarcodeKitInfoResponse::GetBarcodeKitInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcode_kit_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct GetBarcodeKitInfoResponseDefaultTypeInternal {
  constexpr GetBarcodeKitInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKitInfoResponseDefaultTypeInternal() {}
  union {
    GetBarcodeKitInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKitInfoResponseDefaultTypeInternal _GetBarcodeKitInfoResponse_default_instance_;
constexpr GetLampKitInfoRequest::GetLampKitInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLampKitInfoRequestDefaultTypeInternal {
  constexpr GetLampKitInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLampKitInfoRequestDefaultTypeInternal() {}
  union {
    GetLampKitInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLampKitInfoRequestDefaultTypeInternal _GetLampKitInfoRequest_default_instance_;
constexpr GetLampKitInfoResponse::GetLampKitInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lamp_kits_(){}
struct GetLampKitInfoResponseDefaultTypeInternal {
  constexpr GetLampKitInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLampKitInfoResponseDefaultTypeInternal() {}
  union {
    GetLampKitInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLampKitInfoResponseDefaultTypeInternal _GetLampKitInfoResponse_default_instance_;
constexpr GetBarcodeKeysRequest::GetBarcodeKeysRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcode_kit_names_()
  , lamp_kit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetBarcodeKeysRequestDefaultTypeInternal {
  constexpr GetBarcodeKeysRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKeysRequestDefaultTypeInternal() {}
  union {
    GetBarcodeKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKeysRequestDefaultTypeInternal _GetBarcodeKeysRequest_default_instance_;
constexpr GetBarcodeKeysResponse::GetBarcodeKeysResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcode_keys_()
  , lamp_keys_()
  , combined_keys_(){}
struct GetBarcodeKeysResponseDefaultTypeInternal {
  constexpr GetBarcodeKeysResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBarcodeKeysResponseDefaultTypeInternal() {}
  union {
    GetBarcodeKeysResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBarcodeKeysResponseDefaultTypeInternal _GetBarcodeKeysResponse_default_instance_;
constexpr GetFlowCellTypesRequest::GetFlowCellTypesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetFlowCellTypesRequestDefaultTypeInternal {
  constexpr GetFlowCellTypesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlowCellTypesRequestDefaultTypeInternal() {}
  union {
    GetFlowCellTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlowCellTypesRequestDefaultTypeInternal _GetFlowCellTypesRequest_default_instance_;
constexpr GetFlowCellTypesResponse_Info::GetFlowCellTypesResponse_Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connector_type_(0)

  , cannot_live_basecall_(false){}
struct GetFlowCellTypesResponse_InfoDefaultTypeInternal {
  constexpr GetFlowCellTypesResponse_InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlowCellTypesResponse_InfoDefaultTypeInternal() {}
  union {
    GetFlowCellTypesResponse_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlowCellTypesResponse_InfoDefaultTypeInternal _GetFlowCellTypesResponse_Info_default_instance_;
constexpr GetFlowCellTypesResponse::GetFlowCellTypesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : types_(){}
struct GetFlowCellTypesResponseDefaultTypeInternal {
  constexpr GetFlowCellTypesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlowCellTypesResponseDefaultTypeInternal() {}
  union {
    GetFlowCellTypesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlowCellTypesResponseDefaultTypeInternal _GetFlowCellTypesResponse_default_instance_;
constexpr GetSequencingKitsRequest::GetSequencingKitsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_cell_product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSequencingKitsRequestDefaultTypeInternal {
  constexpr GetSequencingKitsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSequencingKitsRequestDefaultTypeInternal() {}
  union {
    GetSequencingKitsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSequencingKitsRequestDefaultTypeInternal _GetSequencingKitsRequest_default_instance_;
constexpr GetSequencingKitsResponse_Kit::GetSequencingKitsResponse_Kit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcoding_expansion_kits_()
  , _barcoding_expansion_kits_cached_byte_size_(0)
  , product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pcr_free_(false)
  , frequently_used_(false)
  , dna_(false)
  , rna_(false)
  , pcr_(false)
  , includes_barcoding_(false)
  , lamp_kit_(false)
  , has_control_protocol_(false)
  , no_sequencing_protocol_(false){}
struct GetSequencingKitsResponse_KitDefaultTypeInternal {
  constexpr GetSequencingKitsResponse_KitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSequencingKitsResponse_KitDefaultTypeInternal() {}
  union {
    GetSequencingKitsResponse_Kit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSequencingKitsResponse_KitDefaultTypeInternal _GetSequencingKitsResponse_Kit_default_instance_;
constexpr GetSequencingKitsResponse_BarcodingExpansionKit::GetSequencingKitsResponse_BarcodingExpansionKit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSequencingKitsResponse_BarcodingExpansionKitDefaultTypeInternal {
  constexpr GetSequencingKitsResponse_BarcodingExpansionKitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSequencingKitsResponse_BarcodingExpansionKitDefaultTypeInternal() {}
  union {
    GetSequencingKitsResponse_BarcodingExpansionKit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSequencingKitsResponse_BarcodingExpansionKitDefaultTypeInternal _GetSequencingKitsResponse_BarcodingExpansionKit_default_instance_;
constexpr GetSequencingKitsResponse::GetSequencingKitsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kits_()
  , barcoding_expansion_kits_(){}
struct GetSequencingKitsResponseDefaultTypeInternal {
  constexpr GetSequencingKitsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSequencingKitsResponseDefaultTypeInternal() {}
  union {
    GetSequencingKitsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSequencingKitsResponseDefaultTypeInternal _GetSequencingKitsResponse_default_instance_;
constexpr AddSimulatedDeviceRequest::AddSimulatedDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddSimulatedDeviceRequestDefaultTypeInternal {
  constexpr AddSimulatedDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddSimulatedDeviceRequestDefaultTypeInternal() {}
  union {
    AddSimulatedDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddSimulatedDeviceRequestDefaultTypeInternal _AddSimulatedDeviceRequest_default_instance_;
constexpr AddSimulatedDeviceResponse::AddSimulatedDeviceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddSimulatedDeviceResponseDefaultTypeInternal {
  constexpr AddSimulatedDeviceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddSimulatedDeviceResponseDefaultTypeInternal() {}
  union {
    AddSimulatedDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddSimulatedDeviceResponseDefaultTypeInternal _AddSimulatedDeviceResponse_default_instance_;
constexpr RemoveSimulatedDeviceRequest::RemoveSimulatedDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemoveSimulatedDeviceRequestDefaultTypeInternal {
  constexpr RemoveSimulatedDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveSimulatedDeviceRequestDefaultTypeInternal() {}
  union {
    RemoveSimulatedDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveSimulatedDeviceRequestDefaultTypeInternal _RemoveSimulatedDeviceRequest_default_instance_;
constexpr RemoveSimulatedDeviceResponse::RemoveSimulatedDeviceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RemoveSimulatedDeviceResponseDefaultTypeInternal {
  constexpr RemoveSimulatedDeviceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveSimulatedDeviceResponseDefaultTypeInternal() {}
  union {
    RemoveSimulatedDeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveSimulatedDeviceResponseDefaultTypeInternal _RemoveSimulatedDeviceResponse_default_instance_;
constexpr LocalAuthenticationTokenPathRequest::LocalAuthenticationTokenPathRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LocalAuthenticationTokenPathRequestDefaultTypeInternal {
  constexpr LocalAuthenticationTokenPathRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalAuthenticationTokenPathRequestDefaultTypeInternal() {}
  union {
    LocalAuthenticationTokenPathRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalAuthenticationTokenPathRequestDefaultTypeInternal _LocalAuthenticationTokenPathRequest_default_instance_;
constexpr LocalAuthenticationTokenPathResponse::LocalAuthenticationTokenPathResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocalAuthenticationTokenPathResponseDefaultTypeInternal {
  constexpr LocalAuthenticationTokenPathResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalAuthenticationTokenPathResponseDefaultTypeInternal() {}
  union {
    LocalAuthenticationTokenPathResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalAuthenticationTokenPathResponseDefaultTypeInternal _LocalAuthenticationTokenPathResponse_default_instance_;
constexpr GetAlignmentReferenceInformationRequest::GetAlignmentReferenceInformationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAlignmentReferenceInformationRequestDefaultTypeInternal {
  constexpr GetAlignmentReferenceInformationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAlignmentReferenceInformationRequestDefaultTypeInternal() {}
  union {
    GetAlignmentReferenceInformationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAlignmentReferenceInformationRequestDefaultTypeInternal _GetAlignmentReferenceInformationRequest_default_instance_;
constexpr GetAlignmentReferenceInformationResponse::GetAlignmentReferenceInformationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : estimated_reference_size_bases_(uint64_t{0u})
  , estimated_load_time_seconds_(0)
  , recommended_live_usage_(false){}
struct GetAlignmentReferenceInformationResponseDefaultTypeInternal {
  constexpr GetAlignmentReferenceInformationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAlignmentReferenceInformationResponseDefaultTypeInternal() {}
  union {
    GetAlignmentReferenceInformationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAlignmentReferenceInformationResponseDefaultTypeInternal _GetAlignmentReferenceInformationResponse_default_instance_;
constexpr AssociationDeviceCodeRequest::AssociationDeviceCodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offline_(false){}
struct AssociationDeviceCodeRequestDefaultTypeInternal {
  constexpr AssociationDeviceCodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociationDeviceCodeRequestDefaultTypeInternal() {}
  union {
    AssociationDeviceCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociationDeviceCodeRequestDefaultTypeInternal _AssociationDeviceCodeRequest_default_instance_;
constexpr AssociationDeviceCodeResponse::AssociationDeviceCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AssociationDeviceCodeResponseDefaultTypeInternal {
  constexpr AssociationDeviceCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociationDeviceCodeResponseDefaultTypeInternal() {}
  union {
    AssociationDeviceCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociationDeviceCodeResponseDefaultTypeInternal _AssociationDeviceCodeResponse_default_instance_;
constexpr ApplyOfflineAssociationUnlockCodeRequest::ApplyOfflineAssociationUnlockCodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unlock_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ApplyOfflineAssociationUnlockCodeRequestDefaultTypeInternal {
  constexpr ApplyOfflineAssociationUnlockCodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyOfflineAssociationUnlockCodeRequestDefaultTypeInternal() {}
  union {
    ApplyOfflineAssociationUnlockCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyOfflineAssociationUnlockCodeRequestDefaultTypeInternal _ApplyOfflineAssociationUnlockCodeRequest_default_instance_;
constexpr ApplyOfflineAssociationUnlockCodeResponse::ApplyOfflineAssociationUnlockCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : associated_(false){}
struct ApplyOfflineAssociationUnlockCodeResponseDefaultTypeInternal {
  constexpr ApplyOfflineAssociationUnlockCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplyOfflineAssociationUnlockCodeResponseDefaultTypeInternal() {}
  union {
    ApplyOfflineAssociationUnlockCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplyOfflineAssociationUnlockCodeResponseDefaultTypeInternal _ApplyOfflineAssociationUnlockCodeResponse_default_instance_;
constexpr ListDeveloperApiTokensRequest::ListDeveloperApiTokensRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListDeveloperApiTokensRequestDefaultTypeInternal {
  constexpr ListDeveloperApiTokensRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDeveloperApiTokensRequestDefaultTypeInternal() {}
  union {
    ListDeveloperApiTokensRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDeveloperApiTokensRequestDefaultTypeInternal _ListDeveloperApiTokensRequest_default_instance_;
constexpr ListDeveloperApiTokensResponse_DeveloperApiToken::ListDeveloperApiTokensResponse_DeveloperApiToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiry_(nullptr){}
struct ListDeveloperApiTokensResponse_DeveloperApiTokenDefaultTypeInternal {
  constexpr ListDeveloperApiTokensResponse_DeveloperApiTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDeveloperApiTokensResponse_DeveloperApiTokenDefaultTypeInternal() {}
  union {
    ListDeveloperApiTokensResponse_DeveloperApiToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDeveloperApiTokensResponse_DeveloperApiTokenDefaultTypeInternal _ListDeveloperApiTokensResponse_DeveloperApiToken_default_instance_;
constexpr ListDeveloperApiTokensResponse::ListDeveloperApiTokensResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tokens_(){}
struct ListDeveloperApiTokensResponseDefaultTypeInternal {
  constexpr ListDeveloperApiTokensResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDeveloperApiTokensResponseDefaultTypeInternal() {}
  union {
    ListDeveloperApiTokensResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDeveloperApiTokensResponseDefaultTypeInternal _ListDeveloperApiTokensResponse_default_instance_;
constexpr CreateDeveloperApiTokenRequest::CreateDeveloperApiTokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiry_(nullptr){}
struct CreateDeveloperApiTokenRequestDefaultTypeInternal {
  constexpr CreateDeveloperApiTokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDeveloperApiTokenRequestDefaultTypeInternal() {}
  union {
    CreateDeveloperApiTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDeveloperApiTokenRequestDefaultTypeInternal _CreateDeveloperApiTokenRequest_default_instance_;
constexpr CreateDeveloperApiTokenResponse::CreateDeveloperApiTokenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateDeveloperApiTokenResponseDefaultTypeInternal {
  constexpr CreateDeveloperApiTokenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDeveloperApiTokenResponseDefaultTypeInternal() {}
  union {
    CreateDeveloperApiTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDeveloperApiTokenResponseDefaultTypeInternal _CreateDeveloperApiTokenResponse_default_instance_;
constexpr RevokeDeveloperApiTokenRequest::RevokeDeveloperApiTokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RevokeDeveloperApiTokenRequestDefaultTypeInternal {
  constexpr RevokeDeveloperApiTokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RevokeDeveloperApiTokenRequestDefaultTypeInternal() {}
  union {
    RevokeDeveloperApiTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RevokeDeveloperApiTokenRequestDefaultTypeInternal _RevokeDeveloperApiTokenRequest_default_instance_;
constexpr RevokeDeveloperApiTokensResponse::RevokeDeveloperApiTokensResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RevokeDeveloperApiTokensResponseDefaultTypeInternal {
  constexpr RevokeDeveloperApiTokensResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RevokeDeveloperApiTokensResponseDefaultTypeInternal() {}
  union {
    RevokeDeveloperApiTokensResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RevokeDeveloperApiTokensResponseDefaultTypeInternal _RevokeDeveloperApiTokensResponse_default_instance_;
constexpr FindProtocolsRequest::FindProtocolsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_cell_product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequencing_kit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , experiment_type_(0)
{}
struct FindProtocolsRequestDefaultTypeInternal {
  constexpr FindProtocolsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindProtocolsRequestDefaultTypeInternal() {}
  union {
    FindProtocolsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindProtocolsRequestDefaultTypeInternal _FindProtocolsRequest_default_instance_;
constexpr FindProtocolsResponse_Protocol::FindProtocolsResponse_Protocol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requires_flow_cell_product_code_(false)
  , requires_sequencing_kit_(false){}
struct FindProtocolsResponse_ProtocolDefaultTypeInternal {
  constexpr FindProtocolsResponse_ProtocolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindProtocolsResponse_ProtocolDefaultTypeInternal() {}
  union {
    FindProtocolsResponse_Protocol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindProtocolsResponse_ProtocolDefaultTypeInternal _FindProtocolsResponse_Protocol_default_instance_;
constexpr FindProtocolsResponse::FindProtocolsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocols_(){}
struct FindProtocolsResponseDefaultTypeInternal {
  constexpr FindProtocolsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindProtocolsResponseDefaultTypeInternal() {}
  union {
    FindProtocolsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindProtocolsResponseDefaultTypeInternal _FindProtocolsResponse_default_instance_;
}  // namespace manager
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2fmanager_2eproto[64];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2fmanager_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2fmanager_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2fmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, description_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, serial_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, network_name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, needs_association_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::DescribeHostResponse, can_sequence_offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_Location, x_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_Location, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_RpcPorts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_RpcPorts, secure_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_RpcPorts, insecure_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_RpcPorts, secure_grpc_web_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_RpcPorts, insecure_grpc_web_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_SharedHardwareGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition_SharedHardwareGroup, group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, location_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, rpc_ports_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, error_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, shared_hardware_group_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, is_integrated_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPosition, can_sequence_offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPositionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPositionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPositionsResponse, total_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FlowCellPositionsResponse, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::WatchFlowCellPositionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::WatchFlowCellPositionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::WatchFlowCellPositionsResponse, additions_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::WatchFlowCellPositionsResponse, changes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::WatchFlowCellPositionsResponse, removals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ResetPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ResetPositionRequest, positions_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ResetPositionRequest, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ResetPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiResponse, secure_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiResponse, insecure_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiResponse, secure_grpc_web_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::BasecallerApiResponse, insecure_grpc_web_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetGuppyInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetGuppyInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetGuppyInfoResponse, port_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetGuppyInfoResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, minknow_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, protocols_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, distribution_version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, distribution_status_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, guppy_build_version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, guppy_connected_version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, configuration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetVersionInfoResponse, installation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo, directory_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo, file_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse, directories_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse, files_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListProtocolOutputDirFilesResponse, current_listed_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDirectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDirectoryRequest, parent_path_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDirectoryRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDirectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDirectoryResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, filesystem_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, bytes_available_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, bytes_capacity_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, file_types_stored_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, bytes_to_stop_cleanly_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, bytes_when_alert_issued_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, recommend_alert_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, recommend_stop_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FilesystemDiskSpaceInfo, bytes_per_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetDiskSpaceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::StreamDiskSpaceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::StreamDiskSpaceInfoRequest, period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetDiskSpaceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetDiskSpaceInfoResponse, filesystem_disk_space_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo, is_dual_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo, is_both_ends_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKitInfoResponse, barcode_kit_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetLampKitInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetLampKitInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetLampKitInfoResponse, lamp_kits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysRequest, barcode_kit_names_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysRequest, lamp_kit_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysResponse, barcode_keys_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysResponse, lamp_keys_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetBarcodeKeysResponse, combined_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse_Info, product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse_Info, connector_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse_Info, cannot_live_basecall_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetFlowCellTypesResponse, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsRequest, flow_cell_product_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, barcoding_expansion_kits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, includes_barcoding_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, lamp_kit_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, has_control_protocol_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, no_sequencing_protocol_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, frequently_used_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, dna_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, rna_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, pcr_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_Kit, pcr_free_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit, product_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse, kits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetSequencingKitsResponse, barcoding_expansion_kits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AddSimulatedDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AddSimulatedDeviceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AddSimulatedDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RemoveSimulatedDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RemoveSimulatedDeviceRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RemoveSimulatedDeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::LocalAuthenticationTokenPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::LocalAuthenticationTokenPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::LocalAuthenticationTokenPathResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationResponse, estimated_load_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationResponse, estimated_reference_size_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::GetAlignmentReferenceInformationResponse, recommended_live_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AssociationDeviceCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AssociationDeviceCodeRequest, position_name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AssociationDeviceCodeRequest, offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AssociationDeviceCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::AssociationDeviceCodeResponse, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, position_name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest, unlock_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse, associated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::ListDeveloperApiTokensResponse, tokens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenRequest, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenRequest, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenResponse, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::CreateDeveloperApiTokenResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RevokeDeveloperApiTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RevokeDeveloperApiTokenRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::RevokeDeveloperApiTokensResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsRequest, flow_cell_product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsRequest, sequencing_kit_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsRequest, experiment_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse_Protocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse_Protocol, identifier_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse_Protocol, requires_flow_cell_product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse_Protocol, requires_sequencing_kit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::manager::FindProtocolsResponse, protocols_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::manager::DescribeHostRequest)},
  { 6, -1, -1, sizeof(::minknow_api::manager::DescribeHostResponse)},
  { 18, -1, -1, sizeof(::minknow_api::manager::FlowCellPosition_Location)},
  { 26, -1, -1, sizeof(::minknow_api::manager::FlowCellPosition_RpcPorts)},
  { 36, -1, -1, sizeof(::minknow_api::manager::FlowCellPosition_SharedHardwareGroup)},
  { 43, -1, -1, sizeof(::minknow_api::manager::FlowCellPosition)},
  { 57, -1, -1, sizeof(::minknow_api::manager::FlowCellPositionsRequest)},
  { 63, -1, -1, sizeof(::minknow_api::manager::FlowCellPositionsResponse)},
  { 71, -1, -1, sizeof(::minknow_api::manager::WatchFlowCellPositionsRequest)},
  { 77, -1, -1, sizeof(::minknow_api::manager::WatchFlowCellPositionsResponse)},
  { 86, -1, -1, sizeof(::minknow_api::manager::ResetPositionRequest)},
  { 94, -1, -1, sizeof(::minknow_api::manager::ResetPositionResponse)},
  { 100, -1, -1, sizeof(::minknow_api::manager::BasecallerApiRequest)},
  { 106, -1, -1, sizeof(::minknow_api::manager::BasecallerApiResponse)},
  { 116, -1, -1, sizeof(::minknow_api::manager::GetGuppyInfoRequest)},
  { 122, -1, -1, sizeof(::minknow_api::manager::GetGuppyInfoResponse)},
  { 130, -1, -1, sizeof(::minknow_api::manager::GetVersionInfoRequest)},
  { 136, -1, -1, sizeof(::minknow_api::manager::GetVersionInfoResponse)},
  { 150, -1, -1, sizeof(::minknow_api::manager::ListProtocolOutputDirFilesRequest)},
  { 157, -1, -1, sizeof(::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo)},
  { 166, -1, -1, sizeof(::minknow_api::manager::ListProtocolOutputDirFilesResponse)},
  { 175, -1, -1, sizeof(::minknow_api::manager::CreateDirectoryRequest)},
  { 183, -1, -1, sizeof(::minknow_api::manager::CreateDirectoryResponse)},
  { 190, -1, -1, sizeof(::minknow_api::manager::FilesystemDiskSpaceInfo)},
  { 205, -1, -1, sizeof(::minknow_api::manager::GetDiskSpaceInfoRequest)},
  { 211, -1, -1, sizeof(::minknow_api::manager::StreamDiskSpaceInfoRequest)},
  { 218, -1, -1, sizeof(::minknow_api::manager::GetDiskSpaceInfoResponse)},
  { 225, -1, -1, sizeof(::minknow_api::manager::GetBarcodeKitInfoRequest)},
  { 231, -1, -1, sizeof(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo)},
  { 239, 247, -1, sizeof(::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse)},
  { 249, -1, -1, sizeof(::minknow_api::manager::GetBarcodeKitInfoResponse)},
  { 256, -1, -1, sizeof(::minknow_api::manager::GetLampKitInfoRequest)},
  { 262, -1, -1, sizeof(::minknow_api::manager::GetLampKitInfoResponse)},
  { 269, -1, -1, sizeof(::minknow_api::manager::GetBarcodeKeysRequest)},
  { 277, -1, -1, sizeof(::minknow_api::manager::GetBarcodeKeysResponse)},
  { 286, -1, -1, sizeof(::minknow_api::manager::GetFlowCellTypesRequest)},
  { 292, -1, -1, sizeof(::minknow_api::manager::GetFlowCellTypesResponse_Info)},
  { 301, -1, -1, sizeof(::minknow_api::manager::GetFlowCellTypesResponse)},
  { 308, -1, -1, sizeof(::minknow_api::manager::GetSequencingKitsRequest)},
  { 315, -1, -1, sizeof(::minknow_api::manager::GetSequencingKitsResponse_Kit)},
  { 332, -1, -1, sizeof(::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit)},
  { 339, -1, -1, sizeof(::minknow_api::manager::GetSequencingKitsResponse)},
  { 347, -1, -1, sizeof(::minknow_api::manager::AddSimulatedDeviceRequest)},
  { 354, -1, -1, sizeof(::minknow_api::manager::AddSimulatedDeviceResponse)},
  { 360, -1, -1, sizeof(::minknow_api::manager::RemoveSimulatedDeviceRequest)},
  { 367, -1, -1, sizeof(::minknow_api::manager::RemoveSimulatedDeviceResponse)},
  { 373, -1, -1, sizeof(::minknow_api::manager::LocalAuthenticationTokenPathRequest)},
  { 379, -1, -1, sizeof(::minknow_api::manager::LocalAuthenticationTokenPathResponse)},
  { 386, -1, -1, sizeof(::minknow_api::manager::GetAlignmentReferenceInformationRequest)},
  { 393, -1, -1, sizeof(::minknow_api::manager::GetAlignmentReferenceInformationResponse)},
  { 402, -1, -1, sizeof(::minknow_api::manager::AssociationDeviceCodeRequest)},
  { 410, -1, -1, sizeof(::minknow_api::manager::AssociationDeviceCodeResponse)},
  { 417, -1, -1, sizeof(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest)},
  { 425, -1, -1, sizeof(::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse)},
  { 432, -1, -1, sizeof(::minknow_api::manager::ListDeveloperApiTokensRequest)},
  { 438, -1, -1, sizeof(::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken)},
  { 447, -1, -1, sizeof(::minknow_api::manager::ListDeveloperApiTokensResponse)},
  { 454, -1, -1, sizeof(::minknow_api::manager::CreateDeveloperApiTokenRequest)},
  { 462, -1, -1, sizeof(::minknow_api::manager::CreateDeveloperApiTokenResponse)},
  { 470, -1, -1, sizeof(::minknow_api::manager::RevokeDeveloperApiTokenRequest)},
  { 477, -1, -1, sizeof(::minknow_api::manager::RevokeDeveloperApiTokensResponse)},
  { 483, -1, -1, sizeof(::minknow_api::manager::FindProtocolsRequest)},
  { 492, -1, -1, sizeof(::minknow_api::manager::FindProtocolsResponse_Protocol)},
  { 501, -1, -1, sizeof(::minknow_api::manager::FindProtocolsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_DescribeHostRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_DescribeHostResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPosition_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPosition_RpcPorts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPosition_SharedHardwareGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPositionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FlowCellPositionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_WatchFlowCellPositionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_WatchFlowCellPositionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ResetPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ResetPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_BasecallerApiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_BasecallerApiResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetGuppyInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetGuppyInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetVersionInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetVersionInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListProtocolOutputDirFilesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListProtocolOutputDirFilesResponse_DirectoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListProtocolOutputDirFilesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_CreateDirectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_CreateDirectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FilesystemDiskSpaceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetDiskSpaceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_StreamDiskSpaceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetDiskSpaceInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKitInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKitInfoResponse_BarcodeKitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKitInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetLampKitInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetLampKitInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetBarcodeKeysResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetFlowCellTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetFlowCellTypesResponse_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetFlowCellTypesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetSequencingKitsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetSequencingKitsResponse_Kit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetSequencingKitsResponse_BarcodingExpansionKit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetSequencingKitsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_AddSimulatedDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_AddSimulatedDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_RemoveSimulatedDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_RemoveSimulatedDeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_LocalAuthenticationTokenPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_LocalAuthenticationTokenPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetAlignmentReferenceInformationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_GetAlignmentReferenceInformationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_AssociationDeviceCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_AssociationDeviceCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ApplyOfflineAssociationUnlockCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ApplyOfflineAssociationUnlockCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListDeveloperApiTokensRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListDeveloperApiTokensResponse_DeveloperApiToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_ListDeveloperApiTokensResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_CreateDeveloperApiTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_CreateDeveloperApiTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_RevokeDeveloperApiTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_RevokeDeveloperApiTokensResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FindProtocolsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FindProtocolsResponse_Protocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::manager::_FindProtocolsResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2fmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031minknow_api/manager.proto\022\023minknow_api"
  ".manager\032\035minknow_api/rpc_options.proto\032"
  "\030minknow_api/device.proto\032\032minknow_api/i"
  "nstance.proto\032\037google/protobuf/timestamp"
  ".proto\"\025\n\023DescribeHostRequest\"\240\001\n\024Descri"
  "beHostResponse\022\024\n\014product_code\030\001 \001(\t\022\023\n\013"
  "description\030\002 \001(\t\022\016\n\006serial\030\003 \001(\t\022\024\n\014net"
  "work_name\030\004 \001(\t\022\031\n\021needs_association\030\020 \001"
  "(\010\022\034\n\024can_sequence_offline\030\005 \001(\010\"\350\005\n\020Flo"
  "wCellPosition\022\014\n\004name\030\001 \001(\t\022@\n\010location\030"
  "\002 \001(\0132..minknow_api.manager.FlowCellPosi"
  "tion.Location\022:\n\005state\030\003 \001(\0162+.minknow_a"
  "pi.manager.FlowCellPosition.State\022A\n\trpc"
  "_ports\030\004 \001(\0132..minknow_api.manager.FlowC"
  "ellPosition.RpcPorts\022\022\n\nerror_info\030\005 \001(\t"
  "\022X\n\025shared_hardware_group\030\006 \001(\01329.minkno"
  "w_api.manager.FlowCellPosition.SharedHar"
  "dwareGroup\022\025\n\ris_integrated\030\007 \001(\010\022\034\n\024can"
  "_sequence_offline\030\010 \001(\010\032 \n\010Location\022\t\n\001x"
  "\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032`\n\010RpcPorts\022\016\n\006secure\030"
  "\001 \001(\r\022\020\n\010insecure\030\002 \001(\r\022\027\n\017secure_grpc_w"
  "eb\030\003 \001(\r\022\031\n\021insecure_grpc_web\030\004 \001(\r\032\'\n\023S"
  "haredHardwareGroup\022\020\n\010group_id\030\001 \001(\r\"\264\001\n"
  "\005State\022\026\n\022STATE_INITIALISING\020\000\022\021\n\rSTATE_"
  "RUNNING\020\001\022\023\n\017STATE_RESETTING\020\002\022\032\n\026STATE_"
  "HARDWARE_REMOVED\020\003\022\030\n\024STATE_HARDWARE_ERR"
  "OR\020\004\022\030\n\024STATE_SOFTWARE_ERROR\020\005\022\033\n\027STATE_"
  "NEEDS_ASSOCIATION\020\006\"\032\n\030FlowCellPositions"
  "Request\"j\n\031FlowCellPositionsResponse\022\023\n\013"
  "total_count\030\001 \001(\005\0228\n\tpositions\030\002 \003(\0132%.m"
  "inknow_api.manager.FlowCellPosition\"\037\n\035W"
  "atchFlowCellPositionsRequest\"\244\001\n\036WatchFl"
  "owCellPositionsResponse\0228\n\tadditions\030\001 \003"
  "(\0132%.minknow_api.manager.FlowCellPositio"
  "n\0226\n\007changes\030\002 \003(\0132%.minknow_api.manager"
  ".FlowCellPosition\022\020\n\010removals\030\003 \003(\t\"8\n\024R"
  "esetPositionRequest\022\021\n\tpositions\030\003 \003(\t\022\r"
  "\n\005force\030\002 \001(\010\"\027\n\025ResetPositionResponse\"\026"
  "\n\024BasecallerApiRequest\"m\n\025BasecallerApiR"
  "esponse\022\016\n\006secure\030\001 \001(\r\022\020\n\010insecure\030\002 \001("
  "\r\022\027\n\017secure_grpc_web\030\003 \001(\r\022\031\n\021insecure_g"
  "rpc_web\030\004 \001(\r\"\025\n\023GetGuppyInfoRequest\"5\n\024"
  "GetGuppyInfoResponse\022\014\n\004port\030\001 \001(\r\022\017\n\007ve"
  "rsion\030\002 \001(\t\"\027\n\025GetVersionInfoRequest\"\362\003\n"
  "\026GetVersionInfoResponse\022L\n\007minknow\030\001 \001(\013"
  "2;.minknow_api.instance.GetVersionInfoRe"
  "sponse.MinknowVersion\022\021\n\tprotocols\030\002 \001(\t"
  "\022\034\n\024distribution_version\030\003 \001(\t\022\\\n\023distri"
  "bution_status\030\004 \001(\0162\?.minknow_api.instan"
  "ce.GetVersionInfoResponse.DistributionSt"
  "atus\022\033\n\023guppy_build_version\030\005 \001(\t\022\037\n\027gup"
  "py_connected_version\030\006 \001(\t\022\025\n\rconfigurat"
  "ion\030\007 \001(\t\022W\n\021installation_type\030\010 \001(\0162<.m"
  "inknow_api.manager.GetVersionInfoRespons"
  "e.InstallationType\"M\n\020InstallationType\022\007"
  "\n\003ONT\020\000\022\006\n\002NC\020\001\022\010\n\004PROD\020\002\022\r\n\tQ_RELEASE\020\003"
  "\022\017\n\013OND_RELEASE\020\004\"1\n!ListProtocolOutputD"
  "irFilesRequest\022\014\n\004path\030\001 \001(\t\"\370\001\n\"ListPro"
  "tocolOutputDirFilesResponse\022Z\n\013directori"
  "es\030\001 \003(\0132E.minknow_api.manager.ListProto"
  "colOutputDirFilesResponse.DirectoryInfo\022"
  "\r\n\005files\030\002 \003(\t\022\033\n\023current_listed_path\030\003 "
  "\001(\t\032J\n\rDirectoryInfo\022\014\n\004name\030\001 \001(\t\022\027\n\017di"
  "rectory_count\030\002 \001(\005\022\022\n\nfile_count\030\003 \001(\005\""
  ";\n\026CreateDirectoryRequest\022\023\n\013parent_path"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\'\n\027CreateDirectoryR"
  "esponse\022\014\n\004path\030\001 \001(\t\"\207\002\n\027FilesystemDisk"
  "SpaceInfo\022\025\n\rfilesystem_id\030\001 \001(\t\022\027\n\017byte"
  "s_available\030\002 \001(\004\022\026\n\016bytes_capacity\030\003 \001("
  "\004\022\031\n\021file_types_stored\030\004 \003(\t\022\035\n\025bytes_to"
  "_stop_cleanly\030\005 \001(\004\022\037\n\027bytes_when_alert_"
  "issued\030\006 \001(\004\022\027\n\017recommend_alert\030\007 \001(\010\022\026\n"
  "\016recommend_stop\030\010 \001(\010\022\030\n\020bytes_per_secon"
  "d\030\t \001(\003\"\031\n\027GetDiskSpaceInfoRequest\",\n\032St"
  "reamDiskSpaceInfoRequest\022\016\n\006period\030\001 \001(\r"
  "\"l\n\030GetDiskSpaceInfoResponse\022P\n\032filesyst"
  "em_disk_space_info\030\001 \003(\0132,.minknow_api.m"
  "anager.FilesystemDiskSpaceInfo\"\032\n\030GetBar"
  "codeKitInfoRequest\"\250\002\n\031GetBarcodeKitInfo"
  "Response\022\\\n\020barcode_kit_info\030\001 \003(\0132B.min"
  "know_api.manager.GetBarcodeKitInfoRespon"
  "se.BarcodeKitInfoEntry\0327\n\016BarcodeKitInfo"
  "\022\017\n\007is_dual\030\002 \001(\010\022\024\n\014is_both_ends\030\003 \001(\010\032"
  "t\n\023BarcodeKitInfoEntry\022\013\n\003key\030\001 \001(\t\022L\n\005v"
  "alue\030\002 \001(\0132=.minknow_api.manager.GetBarc"
  "odeKitInfoResponse.BarcodeKitInfo:\0028\001\"\027\n"
  "\025GetLampKitInfoRequest\"+\n\026GetLampKitInfo"
  "Response\022\021\n\tlamp_kits\030\002 \003(\t\"I\n\025GetBarcod"
  "eKeysRequest\022\031\n\021barcode_kit_names\030\001 \003(\t\022"
  "\025\n\rlamp_kit_name\030\002 \001(\t\"X\n\026GetBarcodeKeys"
  "Response\022\024\n\014barcode_keys\030\001 \003(\t\022\021\n\tlamp_k"
  "eys\030\002 \003(\t\022\025\n\rcombined_keys\030\003 \003(\t\"\031\n\027GetF"
  "lowCellTypesRequest\"\334\001\n\030GetFlowCellTypes"
  "Response\022A\n\005types\030\001 \003(\01322.minknow_api.ma"
  "nager.GetFlowCellTypesResponse.Info\032}\n\004I"
  "nfo\022\024\n\014product_code\030\001 \001(\t\022A\n\016connector_t"
  "ype\030\002 \001(\0162).minknow_api.device.FlowCellC"
  "onnectorType\022\034\n\024cannot_live_basecall\030\003 \001"
  "(\010\":\n\030GetSequencingKitsRequest\022\036\n\026flow_c"
  "ell_product_code\030\001 \001(\t\"\362\003\n\031GetSequencing"
  "KitsResponse\022@\n\004kits\030\001 \003(\01322.minknow_api"
  ".manager.GetSequencingKitsResponse.Kit\022f"
  "\n\030barcoding_expansion_kits\030\002 \003(\0132D.minkn"
  "ow_api.manager.GetSequencingKitsResponse"
  ".BarcodingExpansionKit\032\373\001\n\003Kit\022\024\n\014produc"
  "t_code\030\001 \001(\t\022 \n\030barcoding_expansion_kits"
  "\030\002 \003(\005\022\032\n\022includes_barcoding\030\003 \001(\010\022\020\n\010la"
  "mp_kit\030\020 \001(\010\022\034\n\024has_control_protocol\030\004 \001"
  "(\010\022\036\n\026no_sequencing_protocol\030\021 \001(\010\022\027\n\017fr"
  "equently_used\030\022 \001(\010\022\013\n\003dna\030\005 \001(\010\022\013\n\003rna\030"
  "\006 \001(\010\022\013\n\003pcr\030\007 \001(\010\022\020\n\010pcr_free\030\010 \001(\010\032-\n\025"
  "BarcodingExpansionKit\022\024\n\014product_code\030\001 "
  "\001(\t\"/\n\031AddSimulatedDeviceRequest\022\022\n\004name"
  "\030\001 \001(\tB\004\210\265\030\001\"\034\n\032AddSimulatedDeviceRespon"
  "se\"2\n\034RemoveSimulatedDeviceRequest\022\022\n\004na"
  "me\030\001 \001(\tB\004\210\265\030\001\"\037\n\035RemoveSimulatedDeviceR"
  "esponse\"%\n#LocalAuthenticationTokenPathR"
  "equest\"4\n$LocalAuthenticationTokenPathRe"
  "sponse\022\014\n\004path\030\001 \001(\t\"7\n\'GetAlignmentRefe"
  "renceInformationRequest\022\014\n\004path\030\001 \001(\t\"\227\001"
  "\n(GetAlignmentReferenceInformationRespon"
  "se\022#\n\033estimated_load_time_seconds\030\001 \001(\002\022"
  "&\n\036estimated_reference_size_bases\030\002 \001(\004\022"
  "\036\n\026recommended_live_usage\030\003 \001(\010\"F\n\034Assoc"
  "iationDeviceCodeRequest\022\025\n\rposition_name"
  "\030\001 \001(\t\022\017\n\007offline\030\002 \001(\010\"-\n\035AssociationDe"
  "viceCodeResponse\022\014\n\004code\030\001 \001(\t\"V\n(ApplyO"
  "fflineAssociationUnlockCodeRequest\022\025\n\rpo"
  "sition_name\030\001 \001(\t\022\023\n\013unlock_code\030\002 \001(\t\"\?"
  "\n)ApplyOfflineAssociationUnlockCodeRespo"
  "nse\022\022\n\nassociated\030\001 \001(\010\"\037\n\035ListDeveloper"
  "ApiTokensRequest\"\322\001\n\036ListDeveloperApiTok"
  "ensResponse\022U\n\006tokens\030\001 \003(\0132E.minknow_ap"
  "i.manager.ListDeveloperApiTokensResponse"
  ".DeveloperApiToken\032Y\n\021DeveloperApiToken\022"
  "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022*\n\006expiry\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\"Z\n\036CreateD"
  "eveloperApiTokenRequest\022\014\n\004name\030\002 \001(\t\022*\n"
  "\006expiry\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\"<\n\037CreateDeveloperApiTokenResponse\022\n\n\002"
  "id\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\",\n\036RevokeDevelop"
  "erApiTokenRequest\022\n\n\002id\030\001 \001(\t\"\"\n RevokeD"
  "eveloperApiTokensResponse\"\214\001\n\024FindProtoc"
  "olsRequest\022\036\n\026flow_cell_product_code\030\001 \001"
  "(\t\022\026\n\016sequencing_kit\030\002 \001(\t\022<\n\017experiment"
  "_type\030\003 \001(\0162#.minknow_api.manager.Experi"
  "mentType\"\311\001\n\025FindProtocolsResponse\022F\n\tpr"
  "otocols\030\001 \003(\01323.minknow_api.manager.Find"
  "ProtocolsResponse.Protocol\032h\n\010Protocol\022\022"
  "\n\nidentifier\030\001 \001(\t\022\'\n\037requires_flow_cell"
  "_product_code\030\002 \001(\010\022\037\n\027requires_sequenci"
  "ng_kit\030\003 \001(\010*j\n\016ExperimentType\022\016\n\nSEQUEN"
  "CING\020\000\022\013\n\007CONTROL\020\001\022\n\n\006CUSTOM\020\002\022\025\n\021ALL_E"
  "XCEPT_HIDDEN\020\003\022\030\n\024ALL_INCLUDING_HIDDEN\020\004"
  "2\303\033\n\016ManagerService\022i\n\rdescribe_host\022(.m"
  "inknow_api.manager.DescribeHostRequest\032)"
  ".minknow_api.manager.DescribeHostRespons"
  "e\"\003\220\002\001\022{\n\023flow_cell_positions\022-.minknow_"
  "api.manager.FlowCellPositionsRequest\032..m"
  "inknow_api.manager.FlowCellPositionsResp"
  "onse\"\003\220\002\0010\001\022\213\001\n\031watch_flow_cell_position"
  "s\0222.minknow_api.manager.WatchFlowCellPos"
  "itionsRequest\0323.minknow_api.manager.Watc"
  "hFlowCellPositionsResponse\"\003\220\002\0010\001\022i\n\016res"
  "et_position\022).minknow_api.manager.ResetP"
  "ositionRequest\032*.minknow_api.manager.Res"
  "etPositionResponse\"\000\022l\n\016basecaller_api\022)"
  ".minknow_api.manager.BasecallerApiReques"
  "t\032*.minknow_api.manager.BasecallerApiRes"
  "ponse\"\003\220\002\001\022j\n\016get_guppy_info\022(.minknow_a"
  "pi.manager.GetGuppyInfoRequest\032).minknow"
  "_api.manager.GetGuppyInfoResponse\"\003\220\002\001\022p"
  "\n\020get_version_info\022*.minknow_api.manager"
  ".GetVersionInfoRequest\032+.minknow_api.man"
  "ager.GetVersionInfoResponse\"\003\220\002\001\022\230\001\n\036lis"
  "t_protocol_output_dir_files\0226.minknow_ap"
  "i.manager.ListProtocolOutputDirFilesRequ"
  "est\0327.minknow_api.manager.ListProtocolOu"
  "tputDirFilesResponse\"\003\220\002\0010\001\022r\n\020create_di"
  "rectory\022+.minknow_api.manager.CreateDire"
  "ctoryRequest\032,.minknow_api.manager.Creat"
  "eDirectoryResponse\"\003\220\002\002\022w\n\023get_disk_spac"
  "e_info\022,.minknow_api.manager.GetDiskSpac"
  "eInfoRequest\032-.minknow_api.manager.GetDi"
  "skSpaceInfoResponse\"\003\220\002\001\022\210\001\n\036get_default"
  "_output_directories\0228.minknow_api.instan"
  "ce.GetDefaultOutputDirectoriesRequest\032\'."
  "minknow_api.instance.OutputDirectories\"\003"
  "\220\002\001\022\177\n\026stream_disk_space_info\022/.minknow_"
  "api.manager.StreamDiskSpaceInfoRequest\032-"
  ".minknow_api.manager.GetDiskSpaceInfoRes"
  "ponse\"\003\220\002\0010\001\022z\n\024get_barcode_kit_info\022-.m"
  "inknow_api.manager.GetBarcodeKitInfoRequ"
  "est\032..minknow_api.manager.GetBarcodeKitI"
  "nfoResponse\"\003\220\002\001\022q\n\021get_lamp_kit_info\022*."
  "minknow_api.manager.GetLampKitInfoReques"
  "t\032+.minknow_api.manager.GetLampKitInfoRe"
  "sponse\"\003\220\002\001\022p\n\020get_barcode_keys\022*.minkno"
  "w_api.manager.GetBarcodeKeysRequest\032+.mi"
  "nknow_api.manager.GetBarcodeKeysResponse"
  "\"\003\220\002\001\022{\n\023get_flow_cell_types\022,.minknow_a"
  "pi.manager.GetFlowCellTypesRequest\032-.min"
  "know_api.manager.GetFlowCellTypesRespons"
  "e\"\007\220\002\001\230\265\030\001\022}\n\023get_sequencing_kits\022-.mink"
  "now_api.manager.GetSequencingKitsRequest"
  "\032..minknow_api.manager.GetSequencingKits"
  "Response\"\007\220\002\001\230\265\030\001\022y\n\024add_simulated_devic"
  "e\022..minknow_api.manager.AddSimulatedDevi"
  "ceRequest\032/.minknow_api.manager.AddSimul"
  "atedDeviceResponse\"\000\022\205\001\n\027remove_simulate"
  "d_device\0221.minknow_api.manager.RemoveSim"
  "ulatedDeviceRequest\0322.minknow_api.manage"
  "r.RemoveSimulatedDeviceResponse\"\003\220\002\002\022\233\001\n"
  "\037local_authentication_token_path\0228.minkn"
  "ow_api.manager.LocalAuthenticationTokenP"
  "athRequest\0329.minknow_api.manager.LocalAu"
  "thenticationTokenPathResponse\"\003\220\002\001\022\247\001\n#g"
  "et_alignment_reference_information\022<.min"
  "know_api.manager.GetAlignmentReferenceIn"
  "formationRequest\032=.minknow_api.manager.G"
  "etAlignmentReferenceInformationResponse\""
  "\003\220\002\001\022\205\001\n\027association_device_code\0221.minkn"
  "ow_api.manager.AssociationDeviceCodeRequ"
  "est\0322.minknow_api.manager.AssociationDev"
  "iceCodeResponse\"\003\220\002\001\022\253\001\n%apply_offline_a"
  "ssociation_unlock_code\022=.minknow_api.man"
  "ager.ApplyOfflineAssociationUnlockCodeRe"
  "quest\032>.minknow_api.manager.ApplyOffline"
  "AssociationUnlockCodeResponse\"\003\220\002\002\022\211\001\n\031l"
  "ist_developer_api_tokens\0222.minknow_api.m"
  "anager.ListDeveloperApiTokensRequest\0323.m"
  "inknow_api.manager.ListDeveloperApiToken"
  "sResponse\"\003\220\002\002\022\211\001\n\032create_developer_api_"
  "token\0223.minknow_api.manager.CreateDevelo"
  "perApiTokenRequest\0324.minknow_api.manager"
  ".CreateDeveloperApiTokenResponse\"\000\022\212\001\n\032r"
  "evoke_developer_api_token\0223.minknow_api."
  "manager.RevokeDeveloperApiTokenRequest\0325"
  ".minknow_api.manager.RevokeDeveloperApiT"
  "okensResponse\"\000\022m\n\016find_protocols\022).mink"
  "now_api.manager.FindProtocolsRequest\032*.m"
  "inknow_api.manager.FindProtocolsResponse"
  "\"\004\230\265\030\001B&\n\034com.nanoporetech.minknow_api\242\002"
  "\005MKAPIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2fmanager_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_minknow_5fapi_2fdevice_2eproto,
  &::descriptor_table_minknow_5fapi_2finstance_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2fmanager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fmanager_2eproto = {
  false, false, 9734, descriptor_table_protodef_minknow_5fapi_2fmanager_2eproto, "minknow_api/manager.proto", 
  &descriptor_table_minknow_5fapi_2fmanager_2eproto_once, descriptor_table_minknow_5fapi_2fmanager_2eproto_deps, 4, 64,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2fmanager_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2fmanager_2eproto, file_level_enum_descriptors_minknow_5fapi_2fmanager_2eproto, file_level_service_descriptors_minknow_5fapi_2fmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2fmanager_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2fmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2fmanager_2eproto(&descriptor_table_minknow_5fapi_2fmanager_2eproto);
namespace minknow_api {
namespace manager {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowCellPosition_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fmanager_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fmanager_2eproto[0];
}
bool FlowCellPosition_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlowCellPosition_State FlowCellPosition::STATE_INITIALISING;
constexpr FlowCellPosition_State FlowCellPosition::STATE_RUNNING;
constexpr FlowCellPosition_State FlowCellPosition::STATE_RESETTING;
constexpr FlowCellPosition_State FlowCellPosition::STATE_HARDWARE_REMOVED;
constexpr FlowCellPosition_State FlowCellPosition::STATE_HARDWARE_ERROR;
constexpr FlowCellPosition_State FlowCellPosition::STATE_SOFTWARE_ERROR;
constexpr FlowCellPosition_State FlowCellPosition::STATE_NEEDS_ASSOCIATION;
constexpr FlowCellPosition_State FlowCellPosition::State_MIN;
constexpr FlowCellPosition_State FlowCellPosition::State_MAX;
constexpr int FlowCellPosition::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetVersionInfoResponse_InstallationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fmanager_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fmanager_2eproto[1];
}
bool GetVersionInfoResponse_InstallationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::ONT;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::NC;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::PROD;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::Q_RELEASE;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::OND_RELEASE;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::InstallationType_MIN;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::InstallationType_MAX;
constexpr int GetVersionInfoResponse::InstallationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExperimentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fmanager_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fmanager_2eproto[2];
}
bool ExperimentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DescribeHostRequest::_Internal {
 public:
};

DescribeHostRequest::DescribeHostRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.DescribeHostRequest)
}
DescribeHostRequest::DescribeHostRequest(const DescribeHostRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.DescribeHostRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeHostRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeHostRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DescribeHostRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[0]);
}

// ===================================================================

class DescribeHostResponse::_Internal {
 public:
};

DescribeHostResponse::DescribeHostResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.DescribeHostResponse)
}
DescribeHostResponse::DescribeHostResponse(const DescribeHostResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_code(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial().empty()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArenaForAllocation());
  }
  network_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network_name().empty()) {
    network_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&needs_association_, &from.needs_association_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_sequence_offline_) -
    reinterpret_cast<char*>(&needs_association_)) + sizeof(can_sequence_offline_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.DescribeHostResponse)
}

void DescribeHostResponse::SharedCtor() {
product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&needs_association_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_sequence_offline_) -
    reinterpret_cast<char*>(&needs_association_)) + sizeof(can_sequence_offline_));
}

DescribeHostResponse::~DescribeHostResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.DescribeHostResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DescribeHostResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribeHostResponse::ArenaDtor(void* object) {
  DescribeHostResponse* _this = reinterpret_cast< DescribeHostResponse* >(object);
  (void)_this;
}
void DescribeHostResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescribeHostResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DescribeHostResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.DescribeHostResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_code_.ClearToEmpty();
  description_.ClearToEmpty();
  serial_.ClearToEmpty();
  network_name_.ClearToEmpty();
  ::memset(&needs_association_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_sequence_offline_) -
      reinterpret_cast<char*>(&needs_association_)) + sizeof(can_sequence_offline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescribeHostResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.DescribeHostResponse.product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.DescribeHostResponse.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.DescribeHostResponse.serial"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string network_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_network_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.DescribeHostResponse.network_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_sequence_offline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          can_sequence_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool needs_association = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          needs_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribeHostResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.DescribeHostResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.DescribeHostResponse.product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_code(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.DescribeHostResponse.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string serial = 3;
  if (!this->_internal_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.DescribeHostResponse.serial");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serial(), target);
  }

  // string network_name = 4;
  if (!this->_internal_network_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network_name().data(), static_cast<int>(this->_internal_network_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.DescribeHostResponse.network_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_network_name(), target);
  }

  // bool can_sequence_offline = 5;
  if (this->_internal_can_sequence_offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_can_sequence_offline(), target);
  }

  // bool needs_association = 16;
  if (this->_internal_needs_association() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_needs_association(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.DescribeHostResponse)
  return target;
}

size_t DescribeHostResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.DescribeHostResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string serial = 3;
  if (!this->_internal_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string network_name = 4;
  if (!this->_internal_network_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network_name());
  }

  // bool needs_association = 16;
  if (this->_internal_needs_association() != 0) {
    total_size += 2 + 1;
  }

  // bool can_sequence_offline = 5;
  if (this->_internal_can_sequence_offline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DescribeHostResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DescribeHostResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DescribeHostResponse::GetClassData() const { return &_class_data_; }

void DescribeHostResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DescribeHostResponse *>(to)->MergeFrom(
      static_cast<const DescribeHostResponse &>(from));
}


void DescribeHostResponse::MergeFrom(const DescribeHostResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.DescribeHostResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_product_code().empty()) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_serial().empty()) {
    _internal_set_serial(from._internal_serial());
  }
  if (!from._internal_network_name().empty()) {
    _internal_set_network_name(from._internal_network_name());
  }
  if (from._internal_needs_association() != 0) {
    _internal_set_needs_association(from._internal_needs_association());
  }
  if (from._internal_can_sequence_offline() != 0) {
    _internal_set_can_sequence_offline(from._internal_can_sequence_offline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeHostResponse::CopyFrom(const DescribeHostResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.DescribeHostResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribeHostResponse::IsInitialized() const {
  return true;
}

void DescribeHostResponse::InternalSwap(DescribeHostResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_code_, lhs_arena,
      &other->product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_, lhs_arena,
      &other->serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_name_, lhs_arena,
      &other->network_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescribeHostResponse, can_sequence_offline_)
      + sizeof(DescribeHostResponse::can_sequence_offline_)
      - PROTOBUF_FIELD_OFFSET(DescribeHostResponse, needs_association_)>(
          reinterpret_cast<char*>(&needs_association_),
          reinterpret_cast<char*>(&other->needs_association_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribeHostResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[1]);
}

// ===================================================================

class FlowCellPosition_Location::_Internal {
 public:
};

FlowCellPosition_Location::FlowCellPosition_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPosition.Location)
}
FlowCellPosition_Location::FlowCellPosition_Location(const FlowCellPosition_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPosition.Location)
}

void FlowCellPosition_Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

FlowCellPosition_Location::~FlowCellPosition_Location() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FlowCellPosition.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowCellPosition_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowCellPosition_Location::ArenaDtor(void* object) {
  FlowCellPosition_Location* _this = reinterpret_cast< FlowCellPosition_Location* >(object);
  (void)_this;
}
void FlowCellPosition_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowCellPosition_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowCellPosition_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FlowCellPosition.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowCellPosition_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowCellPosition_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FlowCellPosition.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FlowCellPosition.Location)
  return target;
}

size_t FlowCellPosition_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FlowCellPosition.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPosition_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowCellPosition_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPosition_Location::GetClassData() const { return &_class_data_; }

void FlowCellPosition_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowCellPosition_Location *>(to)->MergeFrom(
      static_cast<const FlowCellPosition_Location &>(from));
}


void FlowCellPosition_Location::MergeFrom(const FlowCellPosition_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FlowCellPosition.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowCellPosition_Location::CopyFrom(const FlowCellPosition_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FlowCellPosition.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCellPosition_Location::IsInitialized() const {
  return true;
}

void FlowCellPosition_Location::InternalSwap(FlowCellPosition_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowCellPosition_Location, y_)
      + sizeof(FlowCellPosition_Location::y_)
      - PROTOBUF_FIELD_OFFSET(FlowCellPosition_Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPosition_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[2]);
}

// ===================================================================

class FlowCellPosition_RpcPorts::_Internal {
 public:
};

FlowCellPosition_RpcPorts::FlowCellPosition_RpcPorts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPosition.RpcPorts)
}
FlowCellPosition_RpcPorts::FlowCellPosition_RpcPorts(const FlowCellPosition_RpcPorts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secure_, &from.secure_,
    static_cast<size_t>(reinterpret_cast<char*>(&insecure_grpc_web_) -
    reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPosition.RpcPorts)
}

void FlowCellPosition_RpcPorts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insecure_grpc_web_) -
    reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
}

FlowCellPosition_RpcPorts::~FlowCellPosition_RpcPorts() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FlowCellPosition.RpcPorts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowCellPosition_RpcPorts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowCellPosition_RpcPorts::ArenaDtor(void* object) {
  FlowCellPosition_RpcPorts* _this = reinterpret_cast< FlowCellPosition_RpcPorts* >(object);
  (void)_this;
}
void FlowCellPosition_RpcPorts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowCellPosition_RpcPorts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowCellPosition_RpcPorts::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FlowCellPosition.RpcPorts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&secure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insecure_grpc_web_) -
      reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowCellPosition_RpcPorts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 secure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 insecure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          insecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 secure_grpc_web = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          secure_grpc_web_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 insecure_grpc_web = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          insecure_grpc_web_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowCellPosition_RpcPorts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FlowCellPosition.RpcPorts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 secure = 1;
  if (this->_internal_secure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secure(), target);
  }

  // uint32 insecure = 2;
  if (this->_internal_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_insecure(), target);
  }

  // uint32 secure_grpc_web = 3;
  if (this->_internal_secure_grpc_web() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_secure_grpc_web(), target);
  }

  // uint32 insecure_grpc_web = 4;
  if (this->_internal_insecure_grpc_web() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_insecure_grpc_web(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FlowCellPosition.RpcPorts)
  return target;
}

size_t FlowCellPosition_RpcPorts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FlowCellPosition.RpcPorts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 secure = 1;
  if (this->_internal_secure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_secure());
  }

  // uint32 insecure = 2;
  if (this->_internal_insecure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_insecure());
  }

  // uint32 secure_grpc_web = 3;
  if (this->_internal_secure_grpc_web() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_secure_grpc_web());
  }

  // uint32 insecure_grpc_web = 4;
  if (this->_internal_insecure_grpc_web() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_insecure_grpc_web());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPosition_RpcPorts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowCellPosition_RpcPorts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPosition_RpcPorts::GetClassData() const { return &_class_data_; }

void FlowCellPosition_RpcPorts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowCellPosition_RpcPorts *>(to)->MergeFrom(
      static_cast<const FlowCellPosition_RpcPorts &>(from));
}


void FlowCellPosition_RpcPorts::MergeFrom(const FlowCellPosition_RpcPorts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FlowCellPosition.RpcPorts)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_secure() != 0) {
    _internal_set_secure(from._internal_secure());
  }
  if (from._internal_insecure() != 0) {
    _internal_set_insecure(from._internal_insecure());
  }
  if (from._internal_secure_grpc_web() != 0) {
    _internal_set_secure_grpc_web(from._internal_secure_grpc_web());
  }
  if (from._internal_insecure_grpc_web() != 0) {
    _internal_set_insecure_grpc_web(from._internal_insecure_grpc_web());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowCellPosition_RpcPorts::CopyFrom(const FlowCellPosition_RpcPorts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FlowCellPosition.RpcPorts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCellPosition_RpcPorts::IsInitialized() const {
  return true;
}

void FlowCellPosition_RpcPorts::InternalSwap(FlowCellPosition_RpcPorts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowCellPosition_RpcPorts, insecure_grpc_web_)
      + sizeof(FlowCellPosition_RpcPorts::insecure_grpc_web_)
      - PROTOBUF_FIELD_OFFSET(FlowCellPosition_RpcPorts, secure_)>(
          reinterpret_cast<char*>(&secure_),
          reinterpret_cast<char*>(&other->secure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPosition_RpcPorts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[3]);
}

// ===================================================================

class FlowCellPosition_SharedHardwareGroup::_Internal {
 public:
};

FlowCellPosition_SharedHardwareGroup::FlowCellPosition_SharedHardwareGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
}
FlowCellPosition_SharedHardwareGroup::FlowCellPosition_SharedHardwareGroup(const FlowCellPosition_SharedHardwareGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
}

void FlowCellPosition_SharedHardwareGroup::SharedCtor() {
group_id_ = 0u;
}

FlowCellPosition_SharedHardwareGroup::~FlowCellPosition_SharedHardwareGroup() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowCellPosition_SharedHardwareGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowCellPosition_SharedHardwareGroup::ArenaDtor(void* object) {
  FlowCellPosition_SharedHardwareGroup* _this = reinterpret_cast< FlowCellPosition_SharedHardwareGroup* >(object);
  (void)_this;
}
void FlowCellPosition_SharedHardwareGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowCellPosition_SharedHardwareGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowCellPosition_SharedHardwareGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowCellPosition_SharedHardwareGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowCellPosition_SharedHardwareGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  return target;
}

size_t FlowCellPosition_SharedHardwareGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPosition_SharedHardwareGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowCellPosition_SharedHardwareGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPosition_SharedHardwareGroup::GetClassData() const { return &_class_data_; }

void FlowCellPosition_SharedHardwareGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowCellPosition_SharedHardwareGroup *>(to)->MergeFrom(
      static_cast<const FlowCellPosition_SharedHardwareGroup &>(from));
}


void FlowCellPosition_SharedHardwareGroup::MergeFrom(const FlowCellPosition_SharedHardwareGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowCellPosition_SharedHardwareGroup::CopyFrom(const FlowCellPosition_SharedHardwareGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FlowCellPosition.SharedHardwareGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCellPosition_SharedHardwareGroup::IsInitialized() const {
  return true;
}

void FlowCellPosition_SharedHardwareGroup::InternalSwap(FlowCellPosition_SharedHardwareGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPosition_SharedHardwareGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[4]);
}

// ===================================================================

class FlowCellPosition::_Internal {
 public:
  static const ::minknow_api::manager::FlowCellPosition_Location& location(const FlowCellPosition* msg);
  static const ::minknow_api::manager::FlowCellPosition_RpcPorts& rpc_ports(const FlowCellPosition* msg);
  static const ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup& shared_hardware_group(const FlowCellPosition* msg);
};

const ::minknow_api::manager::FlowCellPosition_Location&
FlowCellPosition::_Internal::location(const FlowCellPosition* msg) {
  return *msg->location_;
}
const ::minknow_api::manager::FlowCellPosition_RpcPorts&
FlowCellPosition::_Internal::rpc_ports(const FlowCellPosition* msg) {
  return *msg->rpc_ports_;
}
const ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup&
FlowCellPosition::_Internal::shared_hardware_group(const FlowCellPosition* msg) {
  return *msg->shared_hardware_group_;
}
FlowCellPosition::FlowCellPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPosition)
}
FlowCellPosition::FlowCellPosition(const FlowCellPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::minknow_api::manager::FlowCellPosition_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_rpc_ports()) {
    rpc_ports_ = new ::minknow_api::manager::FlowCellPosition_RpcPorts(*from.rpc_ports_);
  } else {
    rpc_ports_ = nullptr;
  }
  if (from._internal_has_shared_hardware_group()) {
    shared_hardware_group_ = new ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup(*from.shared_hardware_group_);
  } else {
    shared_hardware_group_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_sequence_offline_) -
    reinterpret_cast<char*>(&state_)) + sizeof(can_sequence_offline_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPosition)
}

void FlowCellPosition::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_sequence_offline_) -
    reinterpret_cast<char*>(&location_)) + sizeof(can_sequence_offline_));
}

FlowCellPosition::~FlowCellPosition() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FlowCellPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowCellPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rpc_ports_;
  if (this != internal_default_instance()) delete shared_hardware_group_;
}

void FlowCellPosition::ArenaDtor(void* object) {
  FlowCellPosition* _this = reinterpret_cast< FlowCellPosition* >(object);
  (void)_this;
}
void FlowCellPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowCellPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowCellPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FlowCellPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  error_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rpc_ports_ != nullptr) {
    delete rpc_ports_;
  }
  rpc_ports_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shared_hardware_group_ != nullptr) {
    delete shared_hardware_group_;
  }
  shared_hardware_group_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_sequence_offline_) -
      reinterpret_cast<char*>(&state_)) + sizeof(can_sequence_offline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowCellPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FlowCellPosition.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.FlowCellPosition.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.FlowCellPosition.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minknow_api::manager::FlowCellPosition_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.FlowCellPosition.RpcPorts rpc_ports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_ports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FlowCellPosition.error_info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.FlowCellPosition.SharedHardwareGroup shared_hardware_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shared_hardware_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_integrated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_integrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_sequence_offline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          can_sequence_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowCellPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FlowCellPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FlowCellPosition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .minknow_api.manager.FlowCellPosition.Location location = 2;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // .minknow_api.manager.FlowCellPosition.State state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .minknow_api.manager.FlowCellPosition.RpcPorts rpc_ports = 4;
  if (this->_internal_has_rpc_ports()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rpc_ports(this), target, stream);
  }

  // string error_info = 5;
  if (!this->_internal_error_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_info().data(), static_cast<int>(this->_internal_error_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FlowCellPosition.error_info");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_info(), target);
  }

  // .minknow_api.manager.FlowCellPosition.SharedHardwareGroup shared_hardware_group = 6;
  if (this->_internal_has_shared_hardware_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::shared_hardware_group(this), target, stream);
  }

  // bool is_integrated = 7;
  if (this->_internal_is_integrated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_integrated(), target);
  }

  // bool can_sequence_offline = 8;
  if (this->_internal_can_sequence_offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_can_sequence_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FlowCellPosition)
  return target;
}

size_t FlowCellPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FlowCellPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string error_info = 5;
  if (!this->_internal_error_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_info());
  }

  // .minknow_api.manager.FlowCellPosition.Location location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .minknow_api.manager.FlowCellPosition.RpcPorts rpc_ports = 4;
  if (this->_internal_has_rpc_ports()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpc_ports_);
  }

  // .minknow_api.manager.FlowCellPosition.SharedHardwareGroup shared_hardware_group = 6;
  if (this->_internal_has_shared_hardware_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shared_hardware_group_);
  }

  // .minknow_api.manager.FlowCellPosition.State state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_integrated = 7;
  if (this->_internal_is_integrated() != 0) {
    total_size += 1 + 1;
  }

  // bool can_sequence_offline = 8;
  if (this->_internal_can_sequence_offline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowCellPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPosition::GetClassData() const { return &_class_data_; }

void FlowCellPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowCellPosition *>(to)->MergeFrom(
      static_cast<const FlowCellPosition &>(from));
}


void FlowCellPosition::MergeFrom(const FlowCellPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FlowCellPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_error_info().empty()) {
    _internal_set_error_info(from._internal_error_info());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::minknow_api::manager::FlowCellPosition_Location::MergeFrom(from._internal_location());
  }
  if (from._internal_has_rpc_ports()) {
    _internal_mutable_rpc_ports()->::minknow_api::manager::FlowCellPosition_RpcPorts::MergeFrom(from._internal_rpc_ports());
  }
  if (from._internal_has_shared_hardware_group()) {
    _internal_mutable_shared_hardware_group()->::minknow_api::manager::FlowCellPosition_SharedHardwareGroup::MergeFrom(from._internal_shared_hardware_group());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_is_integrated() != 0) {
    _internal_set_is_integrated(from._internal_is_integrated());
  }
  if (from._internal_can_sequence_offline() != 0) {
    _internal_set_can_sequence_offline(from._internal_can_sequence_offline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowCellPosition::CopyFrom(const FlowCellPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FlowCellPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCellPosition::IsInitialized() const {
  return true;
}

void FlowCellPosition::InternalSwap(FlowCellPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_info_, lhs_arena,
      &other->error_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowCellPosition, can_sequence_offline_)
      + sizeof(FlowCellPosition::can_sequence_offline_)
      - PROTOBUF_FIELD_OFFSET(FlowCellPosition, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[5]);
}

// ===================================================================

class FlowCellPositionsRequest::_Internal {
 public:
};

FlowCellPositionsRequest::FlowCellPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPositionsRequest)
}
FlowCellPositionsRequest::FlowCellPositionsRequest(const FlowCellPositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPositionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPositionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPositionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[6]);
}

// ===================================================================

class FlowCellPositionsResponse::_Internal {
 public:
};

FlowCellPositionsResponse::FlowCellPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  positions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FlowCellPositionsResponse)
}
FlowCellPositionsResponse::FlowCellPositionsResponse(const FlowCellPositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FlowCellPositionsResponse)
}

void FlowCellPositionsResponse::SharedCtor() {
total_count_ = 0;
}

FlowCellPositionsResponse::~FlowCellPositionsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FlowCellPositionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowCellPositionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowCellPositionsResponse::ArenaDtor(void* object) {
  FlowCellPositionsResponse* _this = reinterpret_cast< FlowCellPositionsResponse* >(object);
  (void)_this;
}
void FlowCellPositionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowCellPositionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowCellPositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FlowCellPositionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowCellPositionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.manager.FlowCellPosition positions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowCellPositionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FlowCellPositionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .minknow_api.manager.FlowCellPosition positions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FlowCellPositionsResponse)
  return target;
}

size_t FlowCellPositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FlowCellPositionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FlowCellPosition positions = 2;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_count = 1;
  if (this->_internal_total_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowCellPositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowCellPositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowCellPositionsResponse::GetClassData() const { return &_class_data_; }

void FlowCellPositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowCellPositionsResponse *>(to)->MergeFrom(
      static_cast<const FlowCellPositionsResponse &>(from));
}


void FlowCellPositionsResponse::MergeFrom(const FlowCellPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FlowCellPositionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from._internal_total_count() != 0) {
    _internal_set_total_count(from._internal_total_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowCellPositionsResponse::CopyFrom(const FlowCellPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FlowCellPositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCellPositionsResponse::IsInitialized() const {
  return true;
}

void FlowCellPositionsResponse::InternalSwap(FlowCellPositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
  swap(total_count_, other->total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowCellPositionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[7]);
}

// ===================================================================

class WatchFlowCellPositionsRequest::_Internal {
 public:
};

WatchFlowCellPositionsRequest::WatchFlowCellPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.WatchFlowCellPositionsRequest)
}
WatchFlowCellPositionsRequest::WatchFlowCellPositionsRequest(const WatchFlowCellPositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.WatchFlowCellPositionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchFlowCellPositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchFlowCellPositionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WatchFlowCellPositionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[8]);
}

// ===================================================================

class WatchFlowCellPositionsResponse::_Internal {
 public:
};

WatchFlowCellPositionsResponse::WatchFlowCellPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additions_(arena),
  changes_(arena),
  removals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.WatchFlowCellPositionsResponse)
}
WatchFlowCellPositionsResponse::WatchFlowCellPositionsResponse(const WatchFlowCellPositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additions_(from.additions_),
      changes_(from.changes_),
      removals_(from.removals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.WatchFlowCellPositionsResponse)
}

void WatchFlowCellPositionsResponse::SharedCtor() {
}

WatchFlowCellPositionsResponse::~WatchFlowCellPositionsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.WatchFlowCellPositionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchFlowCellPositionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchFlowCellPositionsResponse::ArenaDtor(void* object) {
  WatchFlowCellPositionsResponse* _this = reinterpret_cast< WatchFlowCellPositionsResponse* >(object);
  (void)_this;
}
void WatchFlowCellPositionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchFlowCellPositionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchFlowCellPositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.WatchFlowCellPositionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additions_.Clear();
  changes_.Clear();
  removals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchFlowCellPositionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.FlowCellPosition additions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.manager.FlowCellPosition changes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string removals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_removals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.WatchFlowCellPositionsResponse.removals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchFlowCellPositionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.WatchFlowCellPositionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FlowCellPosition additions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additions(i), target, stream);
  }

  // repeated .minknow_api.manager.FlowCellPosition changes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_changes(i), target, stream);
  }

  // repeated string removals = 3;
  for (int i = 0, n = this->_internal_removals_size(); i < n; i++) {
    const auto& s = this->_internal_removals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.WatchFlowCellPositionsResponse.removals");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.WatchFlowCellPositionsResponse)
  return target;
}

size_t WatchFlowCellPositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.WatchFlowCellPositionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FlowCellPosition additions = 1;
  total_size += 1UL * this->_internal_additions_size();
  for (const auto& msg : this->additions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minknow_api.manager.FlowCellPosition changes = 2;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string removals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(removals_.size());
  for (int i = 0, n = removals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      removals_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchFlowCellPositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchFlowCellPositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchFlowCellPositionsResponse::GetClassData() const { return &_class_data_; }

void WatchFlowCellPositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchFlowCellPositionsResponse *>(to)->MergeFrom(
      static_cast<const WatchFlowCellPositionsResponse &>(from));
}


void WatchFlowCellPositionsResponse::MergeFrom(const WatchFlowCellPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.WatchFlowCellPositionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additions_.MergeFrom(from.additions_);
  changes_.MergeFrom(from.changes_);
  removals_.MergeFrom(from.removals_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchFlowCellPositionsResponse::CopyFrom(const WatchFlowCellPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.WatchFlowCellPositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchFlowCellPositionsResponse::IsInitialized() const {
  return true;
}

void WatchFlowCellPositionsResponse::InternalSwap(WatchFlowCellPositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additions_.InternalSwap(&other->additions_);
  changes_.InternalSwap(&other->changes_);
  removals_.InternalSwap(&other->removals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchFlowCellPositionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[9]);
}

// ===================================================================

class ResetPositionRequest::_Internal {
 public:
};

ResetPositionRequest::ResetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  positions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ResetPositionRequest)
}
ResetPositionRequest::ResetPositionRequest(const ResetPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ResetPositionRequest)
}

void ResetPositionRequest::SharedCtor() {
force_ = false;
}

ResetPositionRequest::~ResetPositionRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ResetPositionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResetPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResetPositionRequest::ArenaDtor(void* object) {
  ResetPositionRequest* _this = reinterpret_cast< ResetPositionRequest* >(object);
  (void)_this;
}
void ResetPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResetPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ResetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_positions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ResetPositionRequest.positions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ResetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 2;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // repeated string positions = 3;
  for (int i = 0, n = this->_internal_positions_size(); i < n; i++) {
    const auto& s = this->_internal_positions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ResetPositionRequest.positions");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ResetPositionRequest)
  return target;
}

size_t ResetPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ResetPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string positions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(positions_.size());
  for (int i = 0, n = positions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      positions_.Get(i));
  }

  // bool force = 2;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetPositionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResetPositionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetPositionRequest::GetClassData() const { return &_class_data_; }

void ResetPositionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResetPositionRequest *>(to)->MergeFrom(
      static_cast<const ResetPositionRequest &>(from));
}


void ResetPositionRequest::MergeFrom(const ResetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ResetPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetPositionRequest::CopyFrom(const ResetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ResetPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPositionRequest::IsInitialized() const {
  return true;
}

void ResetPositionRequest::InternalSwap(ResetPositionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
  swap(force_, other->force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetPositionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[10]);
}

// ===================================================================

class ResetPositionResponse::_Internal {
 public:
};

ResetPositionResponse::ResetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ResetPositionResponse)
}
ResetPositionResponse::ResetPositionResponse(const ResetPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ResetPositionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetPositionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetPositionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetPositionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[11]);
}

// ===================================================================

class BasecallerApiRequest::_Internal {
 public:
};

BasecallerApiRequest::BasecallerApiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.BasecallerApiRequest)
}
BasecallerApiRequest::BasecallerApiRequest(const BasecallerApiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.BasecallerApiRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallerApiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallerApiRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BasecallerApiRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[12]);
}

// ===================================================================

class BasecallerApiResponse::_Internal {
 public:
};

BasecallerApiResponse::BasecallerApiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.BasecallerApiResponse)
}
BasecallerApiResponse::BasecallerApiResponse(const BasecallerApiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secure_, &from.secure_,
    static_cast<size_t>(reinterpret_cast<char*>(&insecure_grpc_web_) -
    reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.BasecallerApiResponse)
}

void BasecallerApiResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insecure_grpc_web_) -
    reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
}

BasecallerApiResponse::~BasecallerApiResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.BasecallerApiResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasecallerApiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasecallerApiResponse::ArenaDtor(void* object) {
  BasecallerApiResponse* _this = reinterpret_cast< BasecallerApiResponse* >(object);
  (void)_this;
}
void BasecallerApiResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasecallerApiResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasecallerApiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.BasecallerApiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&secure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insecure_grpc_web_) -
      reinterpret_cast<char*>(&secure_)) + sizeof(insecure_grpc_web_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasecallerApiResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 secure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 insecure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          insecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 secure_grpc_web = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          secure_grpc_web_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 insecure_grpc_web = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          insecure_grpc_web_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasecallerApiResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.BasecallerApiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 secure = 1;
  if (this->_internal_secure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secure(), target);
  }

  // uint32 insecure = 2;
  if (this->_internal_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_insecure(), target);
  }

  // uint32 secure_grpc_web = 3;
  if (this->_internal_secure_grpc_web() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_secure_grpc_web(), target);
  }

  // uint32 insecure_grpc_web = 4;
  if (this->_internal_insecure_grpc_web() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_insecure_grpc_web(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.BasecallerApiResponse)
  return target;
}

size_t BasecallerApiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.BasecallerApiResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 secure = 1;
  if (this->_internal_secure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_secure());
  }

  // uint32 insecure = 2;
  if (this->_internal_insecure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_insecure());
  }

  // uint32 secure_grpc_web = 3;
  if (this->_internal_secure_grpc_web() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_secure_grpc_web());
  }

  // uint32 insecure_grpc_web = 4;
  if (this->_internal_insecure_grpc_web() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_insecure_grpc_web());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallerApiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasecallerApiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallerApiResponse::GetClassData() const { return &_class_data_; }

void BasecallerApiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasecallerApiResponse *>(to)->MergeFrom(
      static_cast<const BasecallerApiResponse &>(from));
}


void BasecallerApiResponse::MergeFrom(const BasecallerApiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.BasecallerApiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_secure() != 0) {
    _internal_set_secure(from._internal_secure());
  }
  if (from._internal_insecure() != 0) {
    _internal_set_insecure(from._internal_insecure());
  }
  if (from._internal_secure_grpc_web() != 0) {
    _internal_set_secure_grpc_web(from._internal_secure_grpc_web());
  }
  if (from._internal_insecure_grpc_web() != 0) {
    _internal_set_insecure_grpc_web(from._internal_insecure_grpc_web());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasecallerApiResponse::CopyFrom(const BasecallerApiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.BasecallerApiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasecallerApiResponse::IsInitialized() const {
  return true;
}

void BasecallerApiResponse::InternalSwap(BasecallerApiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasecallerApiResponse, insecure_grpc_web_)
      + sizeof(BasecallerApiResponse::insecure_grpc_web_)
      - PROTOBUF_FIELD_OFFSET(BasecallerApiResponse, secure_)>(
          reinterpret_cast<char*>(&secure_),
          reinterpret_cast<char*>(&other->secure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasecallerApiResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[13]);
}

// ===================================================================

class GetGuppyInfoRequest::_Internal {
 public:
};

GetGuppyInfoRequest::GetGuppyInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetGuppyInfoRequest)
}
GetGuppyInfoRequest::GetGuppyInfoRequest(const GetGuppyInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetGuppyInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGuppyInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGuppyInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetGuppyInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[14]);
}

// ===================================================================

class GetGuppyInfoResponse::_Internal {
 public:
};

GetGuppyInfoResponse::GetGuppyInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetGuppyInfoResponse)
}
GetGuppyInfoResponse::GetGuppyInfoResponse(const GetGuppyInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetGuppyInfoResponse)
}

void GetGuppyInfoResponse::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0u;
}

GetGuppyInfoResponse::~GetGuppyInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetGuppyInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetGuppyInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetGuppyInfoResponse::ArenaDtor(void* object) {
  GetGuppyInfoResponse* _this = reinterpret_cast< GetGuppyInfoResponse* >(object);
  (void)_this;
}
void GetGuppyInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuppyInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetGuppyInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetGuppyInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuppyInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetGuppyInfoResponse.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuppyInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetGuppyInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetGuppyInfoResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetGuppyInfoResponse)
  return target;
}

size_t GetGuppyInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetGuppyInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetGuppyInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetGuppyInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetGuppyInfoResponse::GetClassData() const { return &_class_data_; }

void GetGuppyInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetGuppyInfoResponse *>(to)->MergeFrom(
      static_cast<const GetGuppyInfoResponse &>(from));
}


void GetGuppyInfoResponse::MergeFrom(const GetGuppyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetGuppyInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetGuppyInfoResponse::CopyFrom(const GetGuppyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetGuppyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuppyInfoResponse::IsInitialized() const {
  return true;
}

void GetGuppyInfoResponse::InternalSwap(GetGuppyInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuppyInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[15]);
}

// ===================================================================

class GetVersionInfoRequest::_Internal {
 public:
};

GetVersionInfoRequest::GetVersionInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetVersionInfoRequest)
}
GetVersionInfoRequest::GetVersionInfoRequest(const GetVersionInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetVersionInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetVersionInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[16]);
}

// ===================================================================

class GetVersionInfoResponse::_Internal {
 public:
  static const ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion& minknow(const GetVersionInfoResponse* msg);
};

const ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion&
GetVersionInfoResponse::_Internal::minknow(const GetVersionInfoResponse* msg) {
  return *msg->minknow_;
}
void GetVersionInfoResponse::clear_minknow() {
  if (GetArenaForAllocation() == nullptr && minknow_ != nullptr) {
    delete minknow_;
  }
  minknow_ = nullptr;
}
GetVersionInfoResponse::GetVersionInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetVersionInfoResponse)
}
GetVersionInfoResponse::GetVersionInfoResponse(const GetVersionInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocols().empty()) {
    protocols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocols(), 
      GetArenaForAllocation());
  }
  distribution_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_distribution_version().empty()) {
    distribution_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_distribution_version(), 
      GetArenaForAllocation());
  }
  guppy_build_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guppy_build_version().empty()) {
    guppy_build_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guppy_build_version(), 
      GetArenaForAllocation());
  }
  guppy_connected_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guppy_connected_version().empty()) {
    guppy_connected_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guppy_connected_version(), 
      GetArenaForAllocation());
  }
  configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configuration().empty()) {
    configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configuration(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_minknow()) {
    minknow_ = new ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion(*from.minknow_);
  } else {
    minknow_ = nullptr;
  }
  ::memcpy(&distribution_status_, &from.distribution_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&installation_type_) -
    reinterpret_cast<char*>(&distribution_status_)) + sizeof(installation_type_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetVersionInfoResponse)
}

void GetVersionInfoResponse::SharedCtor() {
protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
distribution_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
guppy_build_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
guppy_connected_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minknow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&installation_type_) -
    reinterpret_cast<char*>(&minknow_)) + sizeof(installation_type_));
}

GetVersionInfoResponse::~GetVersionInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetVersionInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVersionInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distribution_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guppy_build_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guppy_connected_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete minknow_;
}

void GetVersionInfoResponse::ArenaDtor(void* object) {
  GetVersionInfoResponse* _this = reinterpret_cast< GetVersionInfoResponse* >(object);
  (void)_this;
}
void GetVersionInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVersionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetVersionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocols_.ClearToEmpty();
  distribution_version_.ClearToEmpty();
  guppy_build_version_.ClearToEmpty();
  guppy_connected_version_.ClearToEmpty();
  configuration_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && minknow_ != nullptr) {
    delete minknow_;
  }
  minknow_ = nullptr;
  ::memset(&distribution_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&installation_type_) -
      reinterpret_cast<char*>(&distribution_status_)) + sizeof(installation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_minknow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetVersionInfoResponse.protocols"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string distribution_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_distribution_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetVersionInfoResponse.distribution_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_distribution_status(static_cast<::minknow_api::instance::GetVersionInfoResponse_DistributionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string guppy_build_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_guppy_build_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetVersionInfoResponse.guppy_build_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string guppy_connected_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_guppy_connected_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetVersionInfoResponse.guppy_connected_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetVersionInfoResponse.configuration"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.GetVersionInfoResponse.InstallationType installation_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_installation_type(static_cast<::minknow_api::manager::GetVersionInfoResponse_InstallationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVersionInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetVersionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
  if (this->_internal_has_minknow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::minknow(this), target, stream);
  }

  // string protocols = 2;
  if (!this->_internal_protocols().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocols().data(), static_cast<int>(this->_internal_protocols().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetVersionInfoResponse.protocols");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocols(), target);
  }

  // string distribution_version = 3;
  if (!this->_internal_distribution_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distribution_version().data(), static_cast<int>(this->_internal_distribution_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetVersionInfoResponse.distribution_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_distribution_version(), target);
  }

  // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
  if (this->_internal_distribution_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_distribution_status(), target);
  }

  // string guppy_build_version = 5;
  if (!this->_internal_guppy_build_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guppy_build_version().data(), static_cast<int>(this->_internal_guppy_build_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetVersionInfoResponse.guppy_build_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guppy_build_version(), target);
  }

  // string guppy_connected_version = 6;
  if (!this->_internal_guppy_connected_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guppy_connected_version().data(), static_cast<int>(this->_internal_guppy_connected_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetVersionInfoResponse.guppy_connected_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_guppy_connected_version(), target);
  }

  // string configuration = 7;
  if (!this->_internal_configuration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configuration().data(), static_cast<int>(this->_internal_configuration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetVersionInfoResponse.configuration");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_configuration(), target);
  }

  // .minknow_api.manager.GetVersionInfoResponse.InstallationType installation_type = 8;
  if (this->_internal_installation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_installation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetVersionInfoResponse)
  return target;
}

size_t GetVersionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetVersionInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocols = 2;
  if (!this->_internal_protocols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocols());
  }

  // string distribution_version = 3;
  if (!this->_internal_distribution_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distribution_version());
  }

  // string guppy_build_version = 5;
  if (!this->_internal_guppy_build_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guppy_build_version());
  }

  // string guppy_connected_version = 6;
  if (!this->_internal_guppy_connected_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guppy_connected_version());
  }

  // string configuration = 7;
  if (!this->_internal_configuration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configuration());
  }

  // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
  if (this->_internal_has_minknow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minknow_);
  }

  // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
  if (this->_internal_distribution_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distribution_status());
  }

  // .minknow_api.manager.GetVersionInfoResponse.InstallationType installation_type = 8;
  if (this->_internal_installation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_installation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVersionInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionInfoResponse::GetClassData() const { return &_class_data_; }

void GetVersionInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVersionInfoResponse *>(to)->MergeFrom(
      static_cast<const GetVersionInfoResponse &>(from));
}


void GetVersionInfoResponse::MergeFrom(const GetVersionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetVersionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocols().empty()) {
    _internal_set_protocols(from._internal_protocols());
  }
  if (!from._internal_distribution_version().empty()) {
    _internal_set_distribution_version(from._internal_distribution_version());
  }
  if (!from._internal_guppy_build_version().empty()) {
    _internal_set_guppy_build_version(from._internal_guppy_build_version());
  }
  if (!from._internal_guppy_connected_version().empty()) {
    _internal_set_guppy_connected_version(from._internal_guppy_connected_version());
  }
  if (!from._internal_configuration().empty()) {
    _internal_set_configuration(from._internal_configuration());
  }
  if (from._internal_has_minknow()) {
    _internal_mutable_minknow()->::minknow_api::instance::GetVersionInfoResponse_MinknowVersion::MergeFrom(from._internal_minknow());
  }
  if (from._internal_distribution_status() != 0) {
    _internal_set_distribution_status(from._internal_distribution_status());
  }
  if (from._internal_installation_type() != 0) {
    _internal_set_installation_type(from._internal_installation_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVersionInfoResponse::CopyFrom(const GetVersionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetVersionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionInfoResponse::IsInitialized() const {
  return true;
}

void GetVersionInfoResponse::InternalSwap(GetVersionInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocols_, lhs_arena,
      &other->protocols_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &distribution_version_, lhs_arena,
      &other->distribution_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guppy_build_version_, lhs_arena,
      &other->guppy_build_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guppy_connected_version_, lhs_arena,
      &other->guppy_connected_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &configuration_, lhs_arena,
      &other->configuration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse, installation_type_)
      + sizeof(GetVersionInfoResponse::installation_type_)
      - PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse, minknow_)>(
          reinterpret_cast<char*>(&minknow_),
          reinterpret_cast<char*>(&other->minknow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[17]);
}

// ===================================================================

class ListProtocolOutputDirFilesRequest::_Internal {
 public:
};

ListProtocolOutputDirFilesRequest::ListProtocolOutputDirFilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListProtocolOutputDirFilesRequest)
}
ListProtocolOutputDirFilesRequest::ListProtocolOutputDirFilesRequest(const ListProtocolOutputDirFilesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListProtocolOutputDirFilesRequest)
}

void ListProtocolOutputDirFilesRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListProtocolOutputDirFilesRequest::~ListProtocolOutputDirFilesRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolOutputDirFilesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProtocolOutputDirFilesRequest::ArenaDtor(void* object) {
  ListProtocolOutputDirFilesRequest* _this = reinterpret_cast< ListProtocolOutputDirFilesRequest* >(object);
  (void)_this;
}
void ListProtocolOutputDirFilesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolOutputDirFilesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolOutputDirFilesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolOutputDirFilesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListProtocolOutputDirFilesRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolOutputDirFilesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListProtocolOutputDirFilesRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  return target;
}

size_t ListProtocolOutputDirFilesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolOutputDirFilesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolOutputDirFilesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolOutputDirFilesRequest::GetClassData() const { return &_class_data_; }

void ListProtocolOutputDirFilesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolOutputDirFilesRequest *>(to)->MergeFrom(
      static_cast<const ListProtocolOutputDirFilesRequest &>(from));
}


void ListProtocolOutputDirFilesRequest::MergeFrom(const ListProtocolOutputDirFilesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolOutputDirFilesRequest::CopyFrom(const ListProtocolOutputDirFilesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ListProtocolOutputDirFilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolOutputDirFilesRequest::IsInitialized() const {
  return true;
}

void ListProtocolOutputDirFilesRequest::InternalSwap(ListProtocolOutputDirFilesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolOutputDirFilesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[18]);
}

// ===================================================================

class ListProtocolOutputDirFilesResponse_DirectoryInfo::_Internal {
 public:
};

ListProtocolOutputDirFilesResponse_DirectoryInfo::ListProtocolOutputDirFilesResponse_DirectoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
}
ListProtocolOutputDirFilesResponse_DirectoryInfo::ListProtocolOutputDirFilesResponse_DirectoryInfo(const ListProtocolOutputDirFilesResponse_DirectoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&directory_count_, &from.directory_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_count_) -
    reinterpret_cast<char*>(&directory_count_)) + sizeof(file_count_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
}

void ListProtocolOutputDirFilesResponse_DirectoryInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&directory_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_count_) -
    reinterpret_cast<char*>(&directory_count_)) + sizeof(file_count_));
}

ListProtocolOutputDirFilesResponse_DirectoryInfo::~ListProtocolOutputDirFilesResponse_DirectoryInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolOutputDirFilesResponse_DirectoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProtocolOutputDirFilesResponse_DirectoryInfo::ArenaDtor(void* object) {
  ListProtocolOutputDirFilesResponse_DirectoryInfo* _this = reinterpret_cast< ListProtocolOutputDirFilesResponse_DirectoryInfo* >(object);
  (void)_this;
}
void ListProtocolOutputDirFilesResponse_DirectoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolOutputDirFilesResponse_DirectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolOutputDirFilesResponse_DirectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&directory_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_count_) -
      reinterpret_cast<char*>(&directory_count_)) + sizeof(file_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolOutputDirFilesResponse_DirectoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 directory_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          directory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolOutputDirFilesResponse_DirectoryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 directory_count = 2;
  if (this->_internal_directory_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_directory_count(), target);
  }

  // int32 file_count = 3;
  if (this->_internal_file_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_file_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  return target;
}

size_t ListProtocolOutputDirFilesResponse_DirectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 directory_count = 2;
  if (this->_internal_directory_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_directory_count());
  }

  // int32 file_count = 3;
  if (this->_internal_file_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_file_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolOutputDirFilesResponse_DirectoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolOutputDirFilesResponse_DirectoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolOutputDirFilesResponse_DirectoryInfo::GetClassData() const { return &_class_data_; }

void ListProtocolOutputDirFilesResponse_DirectoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolOutputDirFilesResponse_DirectoryInfo *>(to)->MergeFrom(
      static_cast<const ListProtocolOutputDirFilesResponse_DirectoryInfo &>(from));
}


void ListProtocolOutputDirFilesResponse_DirectoryInfo::MergeFrom(const ListProtocolOutputDirFilesResponse_DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_directory_count() != 0) {
    _internal_set_directory_count(from._internal_directory_count());
  }
  if (from._internal_file_count() != 0) {
    _internal_set_file_count(from._internal_file_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolOutputDirFilesResponse_DirectoryInfo::CopyFrom(const ListProtocolOutputDirFilesResponse_DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolOutputDirFilesResponse_DirectoryInfo::IsInitialized() const {
  return true;
}

void ListProtocolOutputDirFilesResponse_DirectoryInfo::InternalSwap(ListProtocolOutputDirFilesResponse_DirectoryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListProtocolOutputDirFilesResponse_DirectoryInfo, file_count_)
      + sizeof(ListProtocolOutputDirFilesResponse_DirectoryInfo::file_count_)
      - PROTOBUF_FIELD_OFFSET(ListProtocolOutputDirFilesResponse_DirectoryInfo, directory_count_)>(
          reinterpret_cast<char*>(&directory_count_),
          reinterpret_cast<char*>(&other->directory_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolOutputDirFilesResponse_DirectoryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[19]);
}

// ===================================================================

class ListProtocolOutputDirFilesResponse::_Internal {
 public:
};

ListProtocolOutputDirFilesResponse::ListProtocolOutputDirFilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  directories_(arena),
  files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListProtocolOutputDirFilesResponse)
}
ListProtocolOutputDirFilesResponse::ListProtocolOutputDirFilesResponse(const ListProtocolOutputDirFilesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      directories_(from.directories_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_listed_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_listed_path().empty()) {
    current_listed_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_listed_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListProtocolOutputDirFilesResponse)
}

void ListProtocolOutputDirFilesResponse::SharedCtor() {
current_listed_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListProtocolOutputDirFilesResponse::~ListProtocolOutputDirFilesResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolOutputDirFilesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_listed_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProtocolOutputDirFilesResponse::ArenaDtor(void* object) {
  ListProtocolOutputDirFilesResponse* _this = reinterpret_cast< ListProtocolOutputDirFilesResponse* >(object);
  (void)_this;
}
void ListProtocolOutputDirFilesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolOutputDirFilesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolOutputDirFilesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directories_.Clear();
  files_.Clear();
  current_listed_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolOutputDirFilesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo directories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_directories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListProtocolOutputDirFilesResponse.files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string current_listed_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_current_listed_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListProtocolOutputDirFilesResponse.current_listed_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolOutputDirFilesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo directories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_directories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_directories(i), target, stream);
  }

  // repeated string files = 2;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListProtocolOutputDirFilesResponse.files");
    target = stream->WriteString(2, s, target);
  }

  // string current_listed_path = 3;
  if (!this->_internal_current_listed_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_listed_path().data(), static_cast<int>(this->_internal_current_listed_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListProtocolOutputDirFilesResponse.current_listed_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_current_listed_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  return target;
}

size_t ListProtocolOutputDirFilesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.ListProtocolOutputDirFilesResponse.DirectoryInfo directories = 1;
  total_size += 1UL * this->_internal_directories_size();
  for (const auto& msg : this->directories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string files = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(files_.size());
  for (int i = 0, n = files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      files_.Get(i));
  }

  // string current_listed_path = 3;
  if (!this->_internal_current_listed_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_listed_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolOutputDirFilesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolOutputDirFilesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolOutputDirFilesResponse::GetClassData() const { return &_class_data_; }

void ListProtocolOutputDirFilesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolOutputDirFilesResponse *>(to)->MergeFrom(
      static_cast<const ListProtocolOutputDirFilesResponse &>(from));
}


void ListProtocolOutputDirFilesResponse::MergeFrom(const ListProtocolOutputDirFilesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directories_.MergeFrom(from.directories_);
  files_.MergeFrom(from.files_);
  if (!from._internal_current_listed_path().empty()) {
    _internal_set_current_listed_path(from._internal_current_listed_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolOutputDirFilesResponse::CopyFrom(const ListProtocolOutputDirFilesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ListProtocolOutputDirFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolOutputDirFilesResponse::IsInitialized() const {
  return true;
}

void ListProtocolOutputDirFilesResponse::InternalSwap(ListProtocolOutputDirFilesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  directories_.InternalSwap(&other->directories_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_listed_path_, lhs_arena,
      &other->current_listed_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolOutputDirFilesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[20]);
}

// ===================================================================

class CreateDirectoryRequest::_Internal {
 public:
};

CreateDirectoryRequest::CreateDirectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.CreateDirectoryRequest)
}
CreateDirectoryRequest::CreateDirectoryRequest(const CreateDirectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_path().empty()) {
    parent_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_path(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.CreateDirectoryRequest)
}

void CreateDirectoryRequest::SharedCtor() {
parent_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateDirectoryRequest::~CreateDirectoryRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.CreateDirectoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDirectoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryRequest::ArenaDtor(void* object) {
  CreateDirectoryRequest* _this = reinterpret_cast< CreateDirectoryRequest* >(object);
  (void)_this;
}
void CreateDirectoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDirectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.CreateDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_path_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDirectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDirectoryRequest.parent_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDirectoryRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDirectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.CreateDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_path().data(), static_cast<int>(this->_internal_parent_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDirectoryRequest.parent_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_path(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDirectoryRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.CreateDirectoryRequest)
  return target;
}

size_t CreateDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.CreateDirectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_path = 1;
  if (!this->_internal_parent_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_path());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDirectoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDirectoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDirectoryRequest::GetClassData() const { return &_class_data_; }

void CreateDirectoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDirectoryRequest *>(to)->MergeFrom(
      static_cast<const CreateDirectoryRequest &>(from));
}


void CreateDirectoryRequest::MergeFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.CreateDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_path().empty()) {
    _internal_set_parent_path(from._internal_parent_path());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDirectoryRequest::CopyFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.CreateDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryRequest::IsInitialized() const {
  return true;
}

void CreateDirectoryRequest::InternalSwap(CreateDirectoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_path_, lhs_arena,
      &other->parent_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDirectoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[21]);
}

// ===================================================================

class CreateDirectoryResponse::_Internal {
 public:
};

CreateDirectoryResponse::CreateDirectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.CreateDirectoryResponse)
}
CreateDirectoryResponse::CreateDirectoryResponse(const CreateDirectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.CreateDirectoryResponse)
}

void CreateDirectoryResponse::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateDirectoryResponse::~CreateDirectoryResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.CreateDirectoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDirectoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryResponse::ArenaDtor(void* object) {
  CreateDirectoryResponse* _this = reinterpret_cast< CreateDirectoryResponse* >(object);
  (void)_this;
}
void CreateDirectoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDirectoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDirectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.CreateDirectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDirectoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDirectoryResponse.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDirectoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.CreateDirectoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDirectoryResponse.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.CreateDirectoryResponse)
  return target;
}

size_t CreateDirectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.CreateDirectoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDirectoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDirectoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDirectoryResponse::GetClassData() const { return &_class_data_; }

void CreateDirectoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDirectoryResponse *>(to)->MergeFrom(
      static_cast<const CreateDirectoryResponse &>(from));
}


void CreateDirectoryResponse::MergeFrom(const CreateDirectoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.CreateDirectoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDirectoryResponse::CopyFrom(const CreateDirectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.CreateDirectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryResponse::IsInitialized() const {
  return true;
}

void CreateDirectoryResponse::InternalSwap(CreateDirectoryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDirectoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[22]);
}

// ===================================================================

class FilesystemDiskSpaceInfo::_Internal {
 public:
};

FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_types_stored_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FilesystemDiskSpaceInfo)
}
FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(const FilesystemDiskSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_types_stored_(from.file_types_stored_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filesystem_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filesystem_id().empty()) {
    filesystem_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filesystem_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bytes_available_, &from.bytes_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_stop_) -
    reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FilesystemDiskSpaceInfo)
}

void FilesystemDiskSpaceInfo::SharedCtor() {
filesystem_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bytes_available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recommend_stop_) -
    reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
}

FilesystemDiskSpaceInfo::~FilesystemDiskSpaceInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FilesystemDiskSpaceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilesystemDiskSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filesystem_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilesystemDiskSpaceInfo::ArenaDtor(void* object) {
  FilesystemDiskSpaceInfo* _this = reinterpret_cast< FilesystemDiskSpaceInfo* >(object);
  (void)_this;
}
void FilesystemDiskSpaceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilesystemDiskSpaceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilesystemDiskSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FilesystemDiskSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_types_stored_.Clear();
  filesystem_id_.ClearToEmpty();
  ::memset(&bytes_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_stop_) -
      reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilesystemDiskSpaceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filesystem_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filesystem_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FilesystemDiskSpaceInfo.filesystem_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bytes_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string file_types_stored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_types_stored();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FilesystemDiskSpaceInfo.file_types_stored"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_to_stop_cleanly = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_to_stop_cleanly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_when_alert_issued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bytes_when_alert_issued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recommend_alert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          recommend_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recommend_stop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          recommend_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_per_second = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bytes_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilesystemDiskSpaceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FilesystemDiskSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filesystem_id = 1;
  if (!this->_internal_filesystem_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filesystem_id().data(), static_cast<int>(this->_internal_filesystem_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FilesystemDiskSpaceInfo.filesystem_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filesystem_id(), target);
  }

  // uint64 bytes_available = 2;
  if (this->_internal_bytes_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_available(), target);
  }

  // uint64 bytes_capacity = 3;
  if (this->_internal_bytes_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bytes_capacity(), target);
  }

  // repeated string file_types_stored = 4;
  for (int i = 0, n = this->_internal_file_types_stored_size(); i < n; i++) {
    const auto& s = this->_internal_file_types_stored(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FilesystemDiskSpaceInfo.file_types_stored");
    target = stream->WriteString(4, s, target);
  }

  // uint64 bytes_to_stop_cleanly = 5;
  if (this->_internal_bytes_to_stop_cleanly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_to_stop_cleanly(), target);
  }

  // uint64 bytes_when_alert_issued = 6;
  if (this->_internal_bytes_when_alert_issued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_when_alert_issued(), target);
  }

  // bool recommend_alert = 7;
  if (this->_internal_recommend_alert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_recommend_alert(), target);
  }

  // bool recommend_stop = 8;
  if (this->_internal_recommend_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_recommend_stop(), target);
  }

  // int64 bytes_per_second = 9;
  if (this->_internal_bytes_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_bytes_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FilesystemDiskSpaceInfo)
  return target;
}

size_t FilesystemDiskSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FilesystemDiskSpaceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_types_stored = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_types_stored_.size());
  for (int i = 0, n = file_types_stored_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      file_types_stored_.Get(i));
  }

  // string filesystem_id = 1;
  if (!this->_internal_filesystem_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filesystem_id());
  }

  // uint64 bytes_available = 2;
  if (this->_internal_bytes_available() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_available());
  }

  // uint64 bytes_capacity = 3;
  if (this->_internal_bytes_capacity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_capacity());
  }

  // uint64 bytes_to_stop_cleanly = 5;
  if (this->_internal_bytes_to_stop_cleanly() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_stop_cleanly());
  }

  // uint64 bytes_when_alert_issued = 6;
  if (this->_internal_bytes_when_alert_issued() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_when_alert_issued());
  }

  // int64 bytes_per_second = 9;
  if (this->_internal_bytes_per_second() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_per_second());
  }

  // bool recommend_alert = 7;
  if (this->_internal_recommend_alert() != 0) {
    total_size += 1 + 1;
  }

  // bool recommend_stop = 8;
  if (this->_internal_recommend_stop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilesystemDiskSpaceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilesystemDiskSpaceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilesystemDiskSpaceInfo::GetClassData() const { return &_class_data_; }

void FilesystemDiskSpaceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilesystemDiskSpaceInfo *>(to)->MergeFrom(
      static_cast<const FilesystemDiskSpaceInfo &>(from));
}


void FilesystemDiskSpaceInfo::MergeFrom(const FilesystemDiskSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FilesystemDiskSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_types_stored_.MergeFrom(from.file_types_stored_);
  if (!from._internal_filesystem_id().empty()) {
    _internal_set_filesystem_id(from._internal_filesystem_id());
  }
  if (from._internal_bytes_available() != 0) {
    _internal_set_bytes_available(from._internal_bytes_available());
  }
  if (from._internal_bytes_capacity() != 0) {
    _internal_set_bytes_capacity(from._internal_bytes_capacity());
  }
  if (from._internal_bytes_to_stop_cleanly() != 0) {
    _internal_set_bytes_to_stop_cleanly(from._internal_bytes_to_stop_cleanly());
  }
  if (from._internal_bytes_when_alert_issued() != 0) {
    _internal_set_bytes_when_alert_issued(from._internal_bytes_when_alert_issued());
  }
  if (from._internal_bytes_per_second() != 0) {
    _internal_set_bytes_per_second(from._internal_bytes_per_second());
  }
  if (from._internal_recommend_alert() != 0) {
    _internal_set_recommend_alert(from._internal_recommend_alert());
  }
  if (from._internal_recommend_stop() != 0) {
    _internal_set_recommend_stop(from._internal_recommend_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilesystemDiskSpaceInfo::CopyFrom(const FilesystemDiskSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FilesystemDiskSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesystemDiskSpaceInfo::IsInitialized() const {
  return true;
}

void FilesystemDiskSpaceInfo::InternalSwap(FilesystemDiskSpaceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_types_stored_.InternalSwap(&other->file_types_stored_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filesystem_id_, lhs_arena,
      &other->filesystem_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilesystemDiskSpaceInfo, recommend_stop_)
      + sizeof(FilesystemDiskSpaceInfo::recommend_stop_)
      - PROTOBUF_FIELD_OFFSET(FilesystemDiskSpaceInfo, bytes_available_)>(
          reinterpret_cast<char*>(&bytes_available_),
          reinterpret_cast<char*>(&other->bytes_available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilesystemDiskSpaceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[23]);
}

// ===================================================================

class GetDiskSpaceInfoRequest::_Internal {
 public:
};

GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetDiskSpaceInfoRequest)
}
GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(const GetDiskSpaceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetDiskSpaceInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDiskSpaceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDiskSpaceInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDiskSpaceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[24]);
}

// ===================================================================

class StreamDiskSpaceInfoRequest::_Internal {
 public:
};

StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.StreamDiskSpaceInfoRequest)
}
StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(const StreamDiskSpaceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  period_ = from.period_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.StreamDiskSpaceInfoRequest)
}

void StreamDiskSpaceInfoRequest::SharedCtor() {
period_ = 0u;
}

StreamDiskSpaceInfoRequest::~StreamDiskSpaceInfoRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.StreamDiskSpaceInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamDiskSpaceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDiskSpaceInfoRequest::ArenaDtor(void* object) {
  StreamDiskSpaceInfoRequest* _this = reinterpret_cast< StreamDiskSpaceInfoRequest* >(object);
  (void)_this;
}
void StreamDiskSpaceInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamDiskSpaceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamDiskSpaceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.StreamDiskSpaceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  period_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDiskSpaceInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamDiskSpaceInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.StreamDiskSpaceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 period = 1;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.StreamDiskSpaceInfoRequest)
  return target;
}

size_t StreamDiskSpaceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.StreamDiskSpaceInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 period = 1;
  if (this->_internal_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDiskSpaceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamDiskSpaceInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDiskSpaceInfoRequest::GetClassData() const { return &_class_data_; }

void StreamDiskSpaceInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamDiskSpaceInfoRequest *>(to)->MergeFrom(
      static_cast<const StreamDiskSpaceInfoRequest &>(from));
}


void StreamDiskSpaceInfoRequest::MergeFrom(const StreamDiskSpaceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.StreamDiskSpaceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_period() != 0) {
    _internal_set_period(from._internal_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDiskSpaceInfoRequest::CopyFrom(const StreamDiskSpaceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.StreamDiskSpaceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDiskSpaceInfoRequest::IsInitialized() const {
  return true;
}

void StreamDiskSpaceInfoRequest::InternalSwap(StreamDiskSpaceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDiskSpaceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[25]);
}

// ===================================================================

class GetDiskSpaceInfoResponse::_Internal {
 public:
};

GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filesystem_disk_space_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetDiskSpaceInfoResponse)
}
GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(const GetDiskSpaceInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filesystem_disk_space_info_(from.filesystem_disk_space_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetDiskSpaceInfoResponse)
}

void GetDiskSpaceInfoResponse::SharedCtor() {
}

GetDiskSpaceInfoResponse::~GetDiskSpaceInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetDiskSpaceInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDiskSpaceInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDiskSpaceInfoResponse::ArenaDtor(void* object) {
  GetDiskSpaceInfoResponse* _this = reinterpret_cast< GetDiskSpaceInfoResponse* >(object);
  (void)_this;
}
void GetDiskSpaceInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDiskSpaceInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDiskSpaceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetDiskSpaceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filesystem_disk_space_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDiskSpaceInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filesystem_disk_space_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDiskSpaceInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetDiskSpaceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filesystem_disk_space_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filesystem_disk_space_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetDiskSpaceInfoResponse)
  return target;
}

size_t GetDiskSpaceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetDiskSpaceInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
  total_size += 1UL * this->_internal_filesystem_disk_space_info_size();
  for (const auto& msg : this->filesystem_disk_space_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDiskSpaceInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDiskSpaceInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDiskSpaceInfoResponse::GetClassData() const { return &_class_data_; }

void GetDiskSpaceInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDiskSpaceInfoResponse *>(to)->MergeFrom(
      static_cast<const GetDiskSpaceInfoResponse &>(from));
}


void GetDiskSpaceInfoResponse::MergeFrom(const GetDiskSpaceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetDiskSpaceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filesystem_disk_space_info_.MergeFrom(from.filesystem_disk_space_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDiskSpaceInfoResponse::CopyFrom(const GetDiskSpaceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetDiskSpaceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiskSpaceInfoResponse::IsInitialized() const {
  return true;
}

void GetDiskSpaceInfoResponse::InternalSwap(GetDiskSpaceInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filesystem_disk_space_info_.InternalSwap(&other->filesystem_disk_space_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDiskSpaceInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[26]);
}

// ===================================================================

class GetBarcodeKitInfoRequest::_Internal {
 public:
};

GetBarcodeKitInfoRequest::GetBarcodeKitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetBarcodeKitInfoRequest)
}
GetBarcodeKitInfoRequest::GetBarcodeKitInfoRequest(const GetBarcodeKitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetBarcodeKitInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBarcodeKitInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBarcodeKitInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKitInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[27]);
}

// ===================================================================

class GetBarcodeKitInfoResponse_BarcodeKitInfo::_Internal {
 public:
};

GetBarcodeKitInfoResponse_BarcodeKitInfo::GetBarcodeKitInfoResponse_BarcodeKitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
}
GetBarcodeKitInfoResponse_BarcodeKitInfo::GetBarcodeKitInfoResponse_BarcodeKitInfo(const GetBarcodeKitInfoResponse_BarcodeKitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_dual_, &from.is_dual_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_both_ends_) -
    reinterpret_cast<char*>(&is_dual_)) + sizeof(is_both_ends_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
}

void GetBarcodeKitInfoResponse_BarcodeKitInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_dual_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_both_ends_) -
    reinterpret_cast<char*>(&is_dual_)) + sizeof(is_both_ends_));
}

GetBarcodeKitInfoResponse_BarcodeKitInfo::~GetBarcodeKitInfoResponse_BarcodeKitInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBarcodeKitInfoResponse_BarcodeKitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBarcodeKitInfoResponse_BarcodeKitInfo::ArenaDtor(void* object) {
  GetBarcodeKitInfoResponse_BarcodeKitInfo* _this = reinterpret_cast< GetBarcodeKitInfoResponse_BarcodeKitInfo* >(object);
  (void)_this;
}
void GetBarcodeKitInfoResponse_BarcodeKitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBarcodeKitInfoResponse_BarcodeKitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBarcodeKitInfoResponse_BarcodeKitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_dual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_both_ends_) -
      reinterpret_cast<char*>(&is_dual_)) + sizeof(is_both_ends_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBarcodeKitInfoResponse_BarcodeKitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_dual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_dual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_both_ends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_both_ends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarcodeKitInfoResponse_BarcodeKitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_dual = 2;
  if (this->_internal_is_dual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_dual(), target);
  }

  // bool is_both_ends = 3;
  if (this->_internal_is_both_ends() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_both_ends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  return target;
}

size_t GetBarcodeKitInfoResponse_BarcodeKitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_dual = 2;
  if (this->_internal_is_dual() != 0) {
    total_size += 1 + 1;
  }

  // bool is_both_ends = 3;
  if (this->_internal_is_both_ends() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBarcodeKitInfoResponse_BarcodeKitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBarcodeKitInfoResponse_BarcodeKitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBarcodeKitInfoResponse_BarcodeKitInfo::GetClassData() const { return &_class_data_; }

void GetBarcodeKitInfoResponse_BarcodeKitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBarcodeKitInfoResponse_BarcodeKitInfo *>(to)->MergeFrom(
      static_cast<const GetBarcodeKitInfoResponse_BarcodeKitInfo &>(from));
}


void GetBarcodeKitInfoResponse_BarcodeKitInfo::MergeFrom(const GetBarcodeKitInfoResponse_BarcodeKitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_dual() != 0) {
    _internal_set_is_dual(from._internal_is_dual());
  }
  if (from._internal_is_both_ends() != 0) {
    _internal_set_is_both_ends(from._internal_is_both_ends());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBarcodeKitInfoResponse_BarcodeKitInfo::CopyFrom(const GetBarcodeKitInfoResponse_BarcodeKitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarcodeKitInfoResponse_BarcodeKitInfo::IsInitialized() const {
  return true;
}

void GetBarcodeKitInfoResponse_BarcodeKitInfo::InternalSwap(GetBarcodeKitInfoResponse_BarcodeKitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBarcodeKitInfoResponse_BarcodeKitInfo, is_both_ends_)
      + sizeof(GetBarcodeKitInfoResponse_BarcodeKitInfo::is_both_ends_)
      - PROTOBUF_FIELD_OFFSET(GetBarcodeKitInfoResponse_BarcodeKitInfo, is_dual_)>(
          reinterpret_cast<char*>(&is_dual_),
          reinterpret_cast<char*>(&other->is_dual_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKitInfoResponse_BarcodeKitInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[28]);
}

// ===================================================================

GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse() {}
GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::MergeFrom(const GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[29]);
}

// ===================================================================

class GetBarcodeKitInfoResponse::_Internal {
 public:
};

GetBarcodeKitInfoResponse::GetBarcodeKitInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcode_kit_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetBarcodeKitInfoResponse)
}
GetBarcodeKitInfoResponse::GetBarcodeKitInfoResponse(const GetBarcodeKitInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  barcode_kit_info_.MergeFrom(from.barcode_kit_info_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetBarcodeKitInfoResponse)
}

void GetBarcodeKitInfoResponse::SharedCtor() {
}

GetBarcodeKitInfoResponse::~GetBarcodeKitInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetBarcodeKitInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBarcodeKitInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBarcodeKitInfoResponse::ArenaDtor(void* object) {
  GetBarcodeKitInfoResponse* _this = reinterpret_cast< GetBarcodeKitInfoResponse* >(object);
  (void)_this;
  _this->barcode_kit_info_. ~MapField();
}
inline void GetBarcodeKitInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetBarcodeKitInfoResponse::ArenaDtor);
  }
}
void GetBarcodeKitInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBarcodeKitInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetBarcodeKitInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcode_kit_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBarcodeKitInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo> barcode_kit_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&barcode_kit_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarcodeKitInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetBarcodeKitInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo> barcode_kit_info = 1;
  if (!this->_internal_barcode_kit_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_barcode_kit_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_barcode_kit_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >::const_iterator
          it = this->_internal_barcode_kit_info().begin();
          it != this->_internal_barcode_kit_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >::const_iterator
          it = this->_internal_barcode_kit_info().begin();
          it != this->_internal_barcode_kit_info().end(); ++it) {
        target = GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetBarcodeKitInfoResponse)
  return target;
}

size_t GetBarcodeKitInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetBarcodeKitInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .minknow_api.manager.GetBarcodeKitInfoResponse.BarcodeKitInfo> barcode_kit_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_barcode_kit_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >::const_iterator
      it = this->_internal_barcode_kit_info().begin();
      it != this->_internal_barcode_kit_info().end(); ++it) {
    total_size += GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBarcodeKitInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBarcodeKitInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBarcodeKitInfoResponse::GetClassData() const { return &_class_data_; }

void GetBarcodeKitInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBarcodeKitInfoResponse *>(to)->MergeFrom(
      static_cast<const GetBarcodeKitInfoResponse &>(from));
}


void GetBarcodeKitInfoResponse::MergeFrom(const GetBarcodeKitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetBarcodeKitInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcode_kit_info_.MergeFrom(from.barcode_kit_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBarcodeKitInfoResponse::CopyFrom(const GetBarcodeKitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetBarcodeKitInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarcodeKitInfoResponse::IsInitialized() const {
  return true;
}

void GetBarcodeKitInfoResponse::InternalSwap(GetBarcodeKitInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcode_kit_info_.InternalSwap(&other->barcode_kit_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKitInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[30]);
}

// ===================================================================

class GetLampKitInfoRequest::_Internal {
 public:
};

GetLampKitInfoRequest::GetLampKitInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetLampKitInfoRequest)
}
GetLampKitInfoRequest::GetLampKitInfoRequest(const GetLampKitInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetLampKitInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLampKitInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLampKitInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetLampKitInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[31]);
}

// ===================================================================

class GetLampKitInfoResponse::_Internal {
 public:
};

GetLampKitInfoResponse::GetLampKitInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lamp_kits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetLampKitInfoResponse)
}
GetLampKitInfoResponse::GetLampKitInfoResponse(const GetLampKitInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lamp_kits_(from.lamp_kits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetLampKitInfoResponse)
}

void GetLampKitInfoResponse::SharedCtor() {
}

GetLampKitInfoResponse::~GetLampKitInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetLampKitInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLampKitInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLampKitInfoResponse::ArenaDtor(void* object) {
  GetLampKitInfoResponse* _this = reinterpret_cast< GetLampKitInfoResponse* >(object);
  (void)_this;
}
void GetLampKitInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLampKitInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLampKitInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetLampKitInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lamp_kits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLampKitInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string lamp_kits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lamp_kits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetLampKitInfoResponse.lamp_kits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLampKitInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetLampKitInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lamp_kits = 2;
  for (int i = 0, n = this->_internal_lamp_kits_size(); i < n; i++) {
    const auto& s = this->_internal_lamp_kits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetLampKitInfoResponse.lamp_kits");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetLampKitInfoResponse)
  return target;
}

size_t GetLampKitInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetLampKitInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lamp_kits = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lamp_kits_.size());
  for (int i = 0, n = lamp_kits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lamp_kits_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLampKitInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLampKitInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLampKitInfoResponse::GetClassData() const { return &_class_data_; }

void GetLampKitInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLampKitInfoResponse *>(to)->MergeFrom(
      static_cast<const GetLampKitInfoResponse &>(from));
}


void GetLampKitInfoResponse::MergeFrom(const GetLampKitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetLampKitInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lamp_kits_.MergeFrom(from.lamp_kits_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLampKitInfoResponse::CopyFrom(const GetLampKitInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetLampKitInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLampKitInfoResponse::IsInitialized() const {
  return true;
}

void GetLampKitInfoResponse::InternalSwap(GetLampKitInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lamp_kits_.InternalSwap(&other->lamp_kits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLampKitInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[32]);
}

// ===================================================================

class GetBarcodeKeysRequest::_Internal {
 public:
};

GetBarcodeKeysRequest::GetBarcodeKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcode_kit_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetBarcodeKeysRequest)
}
GetBarcodeKeysRequest::GetBarcodeKeysRequest(const GetBarcodeKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barcode_kit_names_(from.barcode_kit_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lamp_kit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lamp_kit_name().empty()) {
    lamp_kit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lamp_kit_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetBarcodeKeysRequest)
}

void GetBarcodeKeysRequest::SharedCtor() {
lamp_kit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBarcodeKeysRequest::~GetBarcodeKeysRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetBarcodeKeysRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBarcodeKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lamp_kit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBarcodeKeysRequest::ArenaDtor(void* object) {
  GetBarcodeKeysRequest* _this = reinterpret_cast< GetBarcodeKeysRequest* >(object);
  (void)_this;
}
void GetBarcodeKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBarcodeKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBarcodeKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetBarcodeKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcode_kit_names_.Clear();
  lamp_kit_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBarcodeKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string barcode_kit_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_barcode_kit_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetBarcodeKeysRequest.barcode_kit_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string lamp_kit_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lamp_kit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetBarcodeKeysRequest.lamp_kit_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarcodeKeysRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetBarcodeKeysRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string barcode_kit_names = 1;
  for (int i = 0, n = this->_internal_barcode_kit_names_size(); i < n; i++) {
    const auto& s = this->_internal_barcode_kit_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetBarcodeKeysRequest.barcode_kit_names");
    target = stream->WriteString(1, s, target);
  }

  // string lamp_kit_name = 2;
  if (!this->_internal_lamp_kit_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lamp_kit_name().data(), static_cast<int>(this->_internal_lamp_kit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetBarcodeKeysRequest.lamp_kit_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lamp_kit_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetBarcodeKeysRequest)
  return target;
}

size_t GetBarcodeKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetBarcodeKeysRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string barcode_kit_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(barcode_kit_names_.size());
  for (int i = 0, n = barcode_kit_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      barcode_kit_names_.Get(i));
  }

  // string lamp_kit_name = 2;
  if (!this->_internal_lamp_kit_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lamp_kit_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBarcodeKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBarcodeKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBarcodeKeysRequest::GetClassData() const { return &_class_data_; }

void GetBarcodeKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBarcodeKeysRequest *>(to)->MergeFrom(
      static_cast<const GetBarcodeKeysRequest &>(from));
}


void GetBarcodeKeysRequest::MergeFrom(const GetBarcodeKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetBarcodeKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcode_kit_names_.MergeFrom(from.barcode_kit_names_);
  if (!from._internal_lamp_kit_name().empty()) {
    _internal_set_lamp_kit_name(from._internal_lamp_kit_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBarcodeKeysRequest::CopyFrom(const GetBarcodeKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetBarcodeKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarcodeKeysRequest::IsInitialized() const {
  return true;
}

void GetBarcodeKeysRequest::InternalSwap(GetBarcodeKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcode_kit_names_.InternalSwap(&other->barcode_kit_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lamp_kit_name_, lhs_arena,
      &other->lamp_kit_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKeysRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[33]);
}

// ===================================================================

class GetBarcodeKeysResponse::_Internal {
 public:
};

GetBarcodeKeysResponse::GetBarcodeKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcode_keys_(arena),
  lamp_keys_(arena),
  combined_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetBarcodeKeysResponse)
}
GetBarcodeKeysResponse::GetBarcodeKeysResponse(const GetBarcodeKeysResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barcode_keys_(from.barcode_keys_),
      lamp_keys_(from.lamp_keys_),
      combined_keys_(from.combined_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetBarcodeKeysResponse)
}

void GetBarcodeKeysResponse::SharedCtor() {
}

GetBarcodeKeysResponse::~GetBarcodeKeysResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetBarcodeKeysResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBarcodeKeysResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBarcodeKeysResponse::ArenaDtor(void* object) {
  GetBarcodeKeysResponse* _this = reinterpret_cast< GetBarcodeKeysResponse* >(object);
  (void)_this;
}
void GetBarcodeKeysResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBarcodeKeysResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBarcodeKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetBarcodeKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcode_keys_.Clear();
  lamp_keys_.Clear();
  combined_keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBarcodeKeysResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string barcode_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_barcode_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetBarcodeKeysResponse.barcode_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string lamp_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lamp_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetBarcodeKeysResponse.lamp_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string combined_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_combined_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetBarcodeKeysResponse.combined_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarcodeKeysResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetBarcodeKeysResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string barcode_keys = 1;
  for (int i = 0, n = this->_internal_barcode_keys_size(); i < n; i++) {
    const auto& s = this->_internal_barcode_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetBarcodeKeysResponse.barcode_keys");
    target = stream->WriteString(1, s, target);
  }

  // repeated string lamp_keys = 2;
  for (int i = 0, n = this->_internal_lamp_keys_size(); i < n; i++) {
    const auto& s = this->_internal_lamp_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetBarcodeKeysResponse.lamp_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string combined_keys = 3;
  for (int i = 0, n = this->_internal_combined_keys_size(); i < n; i++) {
    const auto& s = this->_internal_combined_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetBarcodeKeysResponse.combined_keys");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetBarcodeKeysResponse)
  return target;
}

size_t GetBarcodeKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetBarcodeKeysResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string barcode_keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(barcode_keys_.size());
  for (int i = 0, n = barcode_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      barcode_keys_.Get(i));
  }

  // repeated string lamp_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lamp_keys_.size());
  for (int i = 0, n = lamp_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lamp_keys_.Get(i));
  }

  // repeated string combined_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(combined_keys_.size());
  for (int i = 0, n = combined_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      combined_keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBarcodeKeysResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBarcodeKeysResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBarcodeKeysResponse::GetClassData() const { return &_class_data_; }

void GetBarcodeKeysResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBarcodeKeysResponse *>(to)->MergeFrom(
      static_cast<const GetBarcodeKeysResponse &>(from));
}


void GetBarcodeKeysResponse::MergeFrom(const GetBarcodeKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetBarcodeKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcode_keys_.MergeFrom(from.barcode_keys_);
  lamp_keys_.MergeFrom(from.lamp_keys_);
  combined_keys_.MergeFrom(from.combined_keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBarcodeKeysResponse::CopyFrom(const GetBarcodeKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetBarcodeKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarcodeKeysResponse::IsInitialized() const {
  return true;
}

void GetBarcodeKeysResponse::InternalSwap(GetBarcodeKeysResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcode_keys_.InternalSwap(&other->barcode_keys_);
  lamp_keys_.InternalSwap(&other->lamp_keys_);
  combined_keys_.InternalSwap(&other->combined_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarcodeKeysResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[34]);
}

// ===================================================================

class GetFlowCellTypesRequest::_Internal {
 public:
};

GetFlowCellTypesRequest::GetFlowCellTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetFlowCellTypesRequest)
}
GetFlowCellTypesRequest::GetFlowCellTypesRequest(const GetFlowCellTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetFlowCellTypesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlowCellTypesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlowCellTypesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetFlowCellTypesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[35]);
}

// ===================================================================

class GetFlowCellTypesResponse_Info::_Internal {
 public:
};

GetFlowCellTypesResponse_Info::GetFlowCellTypesResponse_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetFlowCellTypesResponse.Info)
}
GetFlowCellTypesResponse_Info::GetFlowCellTypesResponse_Info(const GetFlowCellTypesResponse_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&connector_type_, &from.connector_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cannot_live_basecall_) -
    reinterpret_cast<char*>(&connector_type_)) + sizeof(cannot_live_basecall_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetFlowCellTypesResponse.Info)
}

void GetFlowCellTypesResponse_Info::SharedCtor() {
product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connector_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cannot_live_basecall_) -
    reinterpret_cast<char*>(&connector_type_)) + sizeof(cannot_live_basecall_));
}

GetFlowCellTypesResponse_Info::~GetFlowCellTypesResponse_Info() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetFlowCellTypesResponse.Info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFlowCellTypesResponse_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlowCellTypesResponse_Info::ArenaDtor(void* object) {
  GetFlowCellTypesResponse_Info* _this = reinterpret_cast< GetFlowCellTypesResponse_Info* >(object);
  (void)_this;
}
void GetFlowCellTypesResponse_Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlowCellTypesResponse_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFlowCellTypesResponse_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetFlowCellTypesResponse.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_code_.ClearToEmpty();
  ::memset(&connector_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cannot_live_basecall_) -
      reinterpret_cast<char*>(&connector_type_)) + sizeof(cannot_live_basecall_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlowCellTypesResponse_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetFlowCellTypesResponse.Info.product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.FlowCellConnectorType connector_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connector_type(static_cast<::minknow_api::device::FlowCellConnectorType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool cannot_live_basecall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cannot_live_basecall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlowCellTypesResponse_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetFlowCellTypesResponse.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetFlowCellTypesResponse.Info.product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_code(), target);
  }

  // .minknow_api.device.FlowCellConnectorType connector_type = 2;
  if (this->_internal_connector_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connector_type(), target);
  }

  // bool cannot_live_basecall = 3;
  if (this->_internal_cannot_live_basecall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cannot_live_basecall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetFlowCellTypesResponse.Info)
  return target;
}

size_t GetFlowCellTypesResponse_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetFlowCellTypesResponse.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // .minknow_api.device.FlowCellConnectorType connector_type = 2;
  if (this->_internal_connector_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connector_type());
  }

  // bool cannot_live_basecall = 3;
  if (this->_internal_cannot_live_basecall() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlowCellTypesResponse_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFlowCellTypesResponse_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlowCellTypesResponse_Info::GetClassData() const { return &_class_data_; }

void GetFlowCellTypesResponse_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFlowCellTypesResponse_Info *>(to)->MergeFrom(
      static_cast<const GetFlowCellTypesResponse_Info &>(from));
}


void GetFlowCellTypesResponse_Info::MergeFrom(const GetFlowCellTypesResponse_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetFlowCellTypesResponse.Info)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_product_code().empty()) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (from._internal_connector_type() != 0) {
    _internal_set_connector_type(from._internal_connector_type());
  }
  if (from._internal_cannot_live_basecall() != 0) {
    _internal_set_cannot_live_basecall(from._internal_cannot_live_basecall());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlowCellTypesResponse_Info::CopyFrom(const GetFlowCellTypesResponse_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetFlowCellTypesResponse.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlowCellTypesResponse_Info::IsInitialized() const {
  return true;
}

void GetFlowCellTypesResponse_Info::InternalSwap(GetFlowCellTypesResponse_Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_code_, lhs_arena,
      &other->product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlowCellTypesResponse_Info, cannot_live_basecall_)
      + sizeof(GetFlowCellTypesResponse_Info::cannot_live_basecall_)
      - PROTOBUF_FIELD_OFFSET(GetFlowCellTypesResponse_Info, connector_type_)>(
          reinterpret_cast<char*>(&connector_type_),
          reinterpret_cast<char*>(&other->connector_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlowCellTypesResponse_Info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[36]);
}

// ===================================================================

class GetFlowCellTypesResponse::_Internal {
 public:
};

GetFlowCellTypesResponse::GetFlowCellTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetFlowCellTypesResponse)
}
GetFlowCellTypesResponse::GetFlowCellTypesResponse(const GetFlowCellTypesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetFlowCellTypesResponse)
}

void GetFlowCellTypesResponse::SharedCtor() {
}

GetFlowCellTypesResponse::~GetFlowCellTypesResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetFlowCellTypesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFlowCellTypesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetFlowCellTypesResponse::ArenaDtor(void* object) {
  GetFlowCellTypesResponse* _this = reinterpret_cast< GetFlowCellTypesResponse* >(object);
  (void)_this;
}
void GetFlowCellTypesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlowCellTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFlowCellTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetFlowCellTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlowCellTypesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.GetFlowCellTypesResponse.Info types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlowCellTypesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetFlowCellTypesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.GetFlowCellTypesResponse.Info types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetFlowCellTypesResponse)
  return target;
}

size_t GetFlowCellTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetFlowCellTypesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.GetFlowCellTypesResponse.Info types = 1;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlowCellTypesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFlowCellTypesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlowCellTypesResponse::GetClassData() const { return &_class_data_; }

void GetFlowCellTypesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFlowCellTypesResponse *>(to)->MergeFrom(
      static_cast<const GetFlowCellTypesResponse &>(from));
}


void GetFlowCellTypesResponse::MergeFrom(const GetFlowCellTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetFlowCellTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlowCellTypesResponse::CopyFrom(const GetFlowCellTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetFlowCellTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlowCellTypesResponse::IsInitialized() const {
  return true;
}

void GetFlowCellTypesResponse::InternalSwap(GetFlowCellTypesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlowCellTypesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[37]);
}

// ===================================================================

class GetSequencingKitsRequest::_Internal {
 public:
};

GetSequencingKitsRequest::GetSequencingKitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetSequencingKitsRequest)
}
GetSequencingKitsRequest::GetSequencingKitsRequest(const GetSequencingKitsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_cell_product_code().empty()) {
    flow_cell_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_product_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetSequencingKitsRequest)
}

void GetSequencingKitsRequest::SharedCtor() {
flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSequencingKitsRequest::~GetSequencingKitsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetSequencingKitsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSequencingKitsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flow_cell_product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSequencingKitsRequest::ArenaDtor(void* object) {
  GetSequencingKitsRequest* _this = reinterpret_cast< GetSequencingKitsRequest* >(object);
  (void)_this;
}
void GetSequencingKitsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSequencingKitsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSequencingKitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetSequencingKitsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_cell_product_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSequencingKitsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string flow_cell_product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_flow_cell_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetSequencingKitsRequest.flow_cell_product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSequencingKitsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetSequencingKitsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flow_cell_product_code = 1;
  if (!this->_internal_flow_cell_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_product_code().data(), static_cast<int>(this->_internal_flow_cell_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetSequencingKitsRequest.flow_cell_product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flow_cell_product_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetSequencingKitsRequest)
  return target;
}

size_t GetSequencingKitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetSequencingKitsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flow_cell_product_code = 1;
  if (!this->_internal_flow_cell_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_product_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSequencingKitsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSequencingKitsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSequencingKitsRequest::GetClassData() const { return &_class_data_; }

void GetSequencingKitsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSequencingKitsRequest *>(to)->MergeFrom(
      static_cast<const GetSequencingKitsRequest &>(from));
}


void GetSequencingKitsRequest::MergeFrom(const GetSequencingKitsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetSequencingKitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flow_cell_product_code().empty()) {
    _internal_set_flow_cell_product_code(from._internal_flow_cell_product_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSequencingKitsRequest::CopyFrom(const GetSequencingKitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetSequencingKitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSequencingKitsRequest::IsInitialized() const {
  return true;
}

void GetSequencingKitsRequest::InternalSwap(GetSequencingKitsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_product_code_, lhs_arena,
      &other->flow_cell_product_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSequencingKitsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[38]);
}

// ===================================================================

class GetSequencingKitsResponse_Kit::_Internal {
 public:
};

GetSequencingKitsResponse_Kit::GetSequencingKitsResponse_Kit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcoding_expansion_kits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetSequencingKitsResponse.Kit)
}
GetSequencingKitsResponse_Kit::GetSequencingKitsResponse_Kit(const GetSequencingKitsResponse_Kit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barcoding_expansion_kits_(from.barcoding_expansion_kits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pcr_free_, &from.pcr_free_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_sequencing_protocol_) -
    reinterpret_cast<char*>(&pcr_free_)) + sizeof(no_sequencing_protocol_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetSequencingKitsResponse.Kit)
}

void GetSequencingKitsResponse_Kit::SharedCtor() {
product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pcr_free_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_sequencing_protocol_) -
    reinterpret_cast<char*>(&pcr_free_)) + sizeof(no_sequencing_protocol_));
}

GetSequencingKitsResponse_Kit::~GetSequencingKitsResponse_Kit() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetSequencingKitsResponse.Kit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSequencingKitsResponse_Kit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSequencingKitsResponse_Kit::ArenaDtor(void* object) {
  GetSequencingKitsResponse_Kit* _this = reinterpret_cast< GetSequencingKitsResponse_Kit* >(object);
  (void)_this;
}
void GetSequencingKitsResponse_Kit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSequencingKitsResponse_Kit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSequencingKitsResponse_Kit::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetSequencingKitsResponse.Kit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcoding_expansion_kits_.Clear();
  product_code_.ClearToEmpty();
  ::memset(&pcr_free_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_sequencing_protocol_) -
      reinterpret_cast<char*>(&pcr_free_)) + sizeof(no_sequencing_protocol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSequencingKitsResponse_Kit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetSequencingKitsResponse.Kit.product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 barcoding_expansion_kits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_barcoding_expansion_kits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_barcoding_expansion_kits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool includes_barcoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          includes_barcoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_control_protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_control_protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dna = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rna = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool pcr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pcr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool pcr_free = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pcr_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lamp_kit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          lamp_kit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool no_sequencing_protocol = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          no_sequencing_protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool frequently_used = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          frequently_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSequencingKitsResponse_Kit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetSequencingKitsResponse.Kit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetSequencingKitsResponse.Kit.product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_code(), target);
  }

  // repeated int32 barcoding_expansion_kits = 2;
  {
    int byte_size = _barcoding_expansion_kits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_barcoding_expansion_kits(), byte_size, target);
    }
  }

  // bool includes_barcoding = 3;
  if (this->_internal_includes_barcoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_includes_barcoding(), target);
  }

  // bool has_control_protocol = 4;
  if (this->_internal_has_control_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_control_protocol(), target);
  }

  // bool dna = 5;
  if (this->_internal_dna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dna(), target);
  }

  // bool rna = 6;
  if (this->_internal_rna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rna(), target);
  }

  // bool pcr = 7;
  if (this->_internal_pcr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pcr(), target);
  }

  // bool pcr_free = 8;
  if (this->_internal_pcr_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_pcr_free(), target);
  }

  // bool lamp_kit = 16;
  if (this->_internal_lamp_kit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_lamp_kit(), target);
  }

  // bool no_sequencing_protocol = 17;
  if (this->_internal_no_sequencing_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_no_sequencing_protocol(), target);
  }

  // bool frequently_used = 18;
  if (this->_internal_frequently_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_frequently_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetSequencingKitsResponse.Kit)
  return target;
}

size_t GetSequencingKitsResponse_Kit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetSequencingKitsResponse.Kit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 barcoding_expansion_kits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->barcoding_expansion_kits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _barcoding_expansion_kits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // bool pcr_free = 8;
  if (this->_internal_pcr_free() != 0) {
    total_size += 1 + 1;
  }

  // bool frequently_used = 18;
  if (this->_internal_frequently_used() != 0) {
    total_size += 2 + 1;
  }

  // bool dna = 5;
  if (this->_internal_dna() != 0) {
    total_size += 1 + 1;
  }

  // bool rna = 6;
  if (this->_internal_rna() != 0) {
    total_size += 1 + 1;
  }

  // bool pcr = 7;
  if (this->_internal_pcr() != 0) {
    total_size += 1 + 1;
  }

  // bool includes_barcoding = 3;
  if (this->_internal_includes_barcoding() != 0) {
    total_size += 1 + 1;
  }

  // bool lamp_kit = 16;
  if (this->_internal_lamp_kit() != 0) {
    total_size += 2 + 1;
  }

  // bool has_control_protocol = 4;
  if (this->_internal_has_control_protocol() != 0) {
    total_size += 1 + 1;
  }

  // bool no_sequencing_protocol = 17;
  if (this->_internal_no_sequencing_protocol() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSequencingKitsResponse_Kit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSequencingKitsResponse_Kit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSequencingKitsResponse_Kit::GetClassData() const { return &_class_data_; }

void GetSequencingKitsResponse_Kit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSequencingKitsResponse_Kit *>(to)->MergeFrom(
      static_cast<const GetSequencingKitsResponse_Kit &>(from));
}


void GetSequencingKitsResponse_Kit::MergeFrom(const GetSequencingKitsResponse_Kit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetSequencingKitsResponse.Kit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcoding_expansion_kits_.MergeFrom(from.barcoding_expansion_kits_);
  if (!from._internal_product_code().empty()) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (from._internal_pcr_free() != 0) {
    _internal_set_pcr_free(from._internal_pcr_free());
  }
  if (from._internal_frequently_used() != 0) {
    _internal_set_frequently_used(from._internal_frequently_used());
  }
  if (from._internal_dna() != 0) {
    _internal_set_dna(from._internal_dna());
  }
  if (from._internal_rna() != 0) {
    _internal_set_rna(from._internal_rna());
  }
  if (from._internal_pcr() != 0) {
    _internal_set_pcr(from._internal_pcr());
  }
  if (from._internal_includes_barcoding() != 0) {
    _internal_set_includes_barcoding(from._internal_includes_barcoding());
  }
  if (from._internal_lamp_kit() != 0) {
    _internal_set_lamp_kit(from._internal_lamp_kit());
  }
  if (from._internal_has_control_protocol() != 0) {
    _internal_set_has_control_protocol(from._internal_has_control_protocol());
  }
  if (from._internal_no_sequencing_protocol() != 0) {
    _internal_set_no_sequencing_protocol(from._internal_no_sequencing_protocol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSequencingKitsResponse_Kit::CopyFrom(const GetSequencingKitsResponse_Kit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetSequencingKitsResponse.Kit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSequencingKitsResponse_Kit::IsInitialized() const {
  return true;
}

void GetSequencingKitsResponse_Kit::InternalSwap(GetSequencingKitsResponse_Kit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcoding_expansion_kits_.InternalSwap(&other->barcoding_expansion_kits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_code_, lhs_arena,
      &other->product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSequencingKitsResponse_Kit, no_sequencing_protocol_)
      + sizeof(GetSequencingKitsResponse_Kit::no_sequencing_protocol_)
      - PROTOBUF_FIELD_OFFSET(GetSequencingKitsResponse_Kit, pcr_free_)>(
          reinterpret_cast<char*>(&pcr_free_),
          reinterpret_cast<char*>(&other->pcr_free_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSequencingKitsResponse_Kit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[39]);
}

// ===================================================================

class GetSequencingKitsResponse_BarcodingExpansionKit::_Internal {
 public:
};

GetSequencingKitsResponse_BarcodingExpansionKit::GetSequencingKitsResponse_BarcodingExpansionKit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
}
GetSequencingKitsResponse_BarcodingExpansionKit::GetSequencingKitsResponse_BarcodingExpansionKit(const GetSequencingKitsResponse_BarcodingExpansionKit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
}

void GetSequencingKitsResponse_BarcodingExpansionKit::SharedCtor() {
product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSequencingKitsResponse_BarcodingExpansionKit::~GetSequencingKitsResponse_BarcodingExpansionKit() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSequencingKitsResponse_BarcodingExpansionKit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSequencingKitsResponse_BarcodingExpansionKit::ArenaDtor(void* object) {
  GetSequencingKitsResponse_BarcodingExpansionKit* _this = reinterpret_cast< GetSequencingKitsResponse_BarcodingExpansionKit* >(object);
  (void)_this;
}
void GetSequencingKitsResponse_BarcodingExpansionKit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSequencingKitsResponse_BarcodingExpansionKit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSequencingKitsResponse_BarcodingExpansionKit::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSequencingKitsResponse_BarcodingExpansionKit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit.product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSequencingKitsResponse_BarcodingExpansionKit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit.product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  return target;
}

size_t GetSequencingKitsResponse_BarcodingExpansionKit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_code = 1;
  if (!this->_internal_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSequencingKitsResponse_BarcodingExpansionKit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSequencingKitsResponse_BarcodingExpansionKit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSequencingKitsResponse_BarcodingExpansionKit::GetClassData() const { return &_class_data_; }

void GetSequencingKitsResponse_BarcodingExpansionKit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSequencingKitsResponse_BarcodingExpansionKit *>(to)->MergeFrom(
      static_cast<const GetSequencingKitsResponse_BarcodingExpansionKit &>(from));
}


void GetSequencingKitsResponse_BarcodingExpansionKit::MergeFrom(const GetSequencingKitsResponse_BarcodingExpansionKit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_product_code().empty()) {
    _internal_set_product_code(from._internal_product_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSequencingKitsResponse_BarcodingExpansionKit::CopyFrom(const GetSequencingKitsResponse_BarcodingExpansionKit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSequencingKitsResponse_BarcodingExpansionKit::IsInitialized() const {
  return true;
}

void GetSequencingKitsResponse_BarcodingExpansionKit::InternalSwap(GetSequencingKitsResponse_BarcodingExpansionKit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_code_, lhs_arena,
      &other->product_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSequencingKitsResponse_BarcodingExpansionKit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[40]);
}

// ===================================================================

class GetSequencingKitsResponse::_Internal {
 public:
};

GetSequencingKitsResponse::GetSequencingKitsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  kits_(arena),
  barcoding_expansion_kits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetSequencingKitsResponse)
}
GetSequencingKitsResponse::GetSequencingKitsResponse(const GetSequencingKitsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kits_(from.kits_),
      barcoding_expansion_kits_(from.barcoding_expansion_kits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetSequencingKitsResponse)
}

void GetSequencingKitsResponse::SharedCtor() {
}

GetSequencingKitsResponse::~GetSequencingKitsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetSequencingKitsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSequencingKitsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSequencingKitsResponse::ArenaDtor(void* object) {
  GetSequencingKitsResponse* _this = reinterpret_cast< GetSequencingKitsResponse* >(object);
  (void)_this;
}
void GetSequencingKitsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSequencingKitsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSequencingKitsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetSequencingKitsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kits_.Clear();
  barcoding_expansion_kits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSequencingKitsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.GetSequencingKitsResponse.Kit kits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit barcoding_expansion_kits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_barcoding_expansion_kits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSequencingKitsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetSequencingKitsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.GetSequencingKitsResponse.Kit kits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_kits(i), target, stream);
  }

  // repeated .minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit barcoding_expansion_kits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_barcoding_expansion_kits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_barcoding_expansion_kits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetSequencingKitsResponse)
  return target;
}

size_t GetSequencingKitsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetSequencingKitsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.GetSequencingKitsResponse.Kit kits = 1;
  total_size += 1UL * this->_internal_kits_size();
  for (const auto& msg : this->kits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minknow_api.manager.GetSequencingKitsResponse.BarcodingExpansionKit barcoding_expansion_kits = 2;
  total_size += 1UL * this->_internal_barcoding_expansion_kits_size();
  for (const auto& msg : this->barcoding_expansion_kits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSequencingKitsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSequencingKitsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSequencingKitsResponse::GetClassData() const { return &_class_data_; }

void GetSequencingKitsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSequencingKitsResponse *>(to)->MergeFrom(
      static_cast<const GetSequencingKitsResponse &>(from));
}


void GetSequencingKitsResponse::MergeFrom(const GetSequencingKitsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetSequencingKitsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kits_.MergeFrom(from.kits_);
  barcoding_expansion_kits_.MergeFrom(from.barcoding_expansion_kits_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSequencingKitsResponse::CopyFrom(const GetSequencingKitsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetSequencingKitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSequencingKitsResponse::IsInitialized() const {
  return true;
}

void GetSequencingKitsResponse::InternalSwap(GetSequencingKitsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  kits_.InternalSwap(&other->kits_);
  barcoding_expansion_kits_.InternalSwap(&other->barcoding_expansion_kits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSequencingKitsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[41]);
}

// ===================================================================

class AddSimulatedDeviceRequest::_Internal {
 public:
};

AddSimulatedDeviceRequest::AddSimulatedDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.AddSimulatedDeviceRequest)
}
AddSimulatedDeviceRequest::AddSimulatedDeviceRequest(const AddSimulatedDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.AddSimulatedDeviceRequest)
}

void AddSimulatedDeviceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddSimulatedDeviceRequest::~AddSimulatedDeviceRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.AddSimulatedDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddSimulatedDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddSimulatedDeviceRequest::ArenaDtor(void* object) {
  AddSimulatedDeviceRequest* _this = reinterpret_cast< AddSimulatedDeviceRequest* >(object);
  (void)_this;
}
void AddSimulatedDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSimulatedDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSimulatedDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.AddSimulatedDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSimulatedDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.AddSimulatedDeviceRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddSimulatedDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.AddSimulatedDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.AddSimulatedDeviceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.AddSimulatedDeviceRequest)
  return target;
}

size_t AddSimulatedDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.AddSimulatedDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSimulatedDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSimulatedDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSimulatedDeviceRequest::GetClassData() const { return &_class_data_; }

void AddSimulatedDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSimulatedDeviceRequest *>(to)->MergeFrom(
      static_cast<const AddSimulatedDeviceRequest &>(from));
}


void AddSimulatedDeviceRequest::MergeFrom(const AddSimulatedDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.AddSimulatedDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSimulatedDeviceRequest::CopyFrom(const AddSimulatedDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.AddSimulatedDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSimulatedDeviceRequest::IsInitialized() const {
  return true;
}

void AddSimulatedDeviceRequest::InternalSwap(AddSimulatedDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSimulatedDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[42]);
}

// ===================================================================

class AddSimulatedDeviceResponse::_Internal {
 public:
};

AddSimulatedDeviceResponse::AddSimulatedDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.AddSimulatedDeviceResponse)
}
AddSimulatedDeviceResponse::AddSimulatedDeviceResponse(const AddSimulatedDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.AddSimulatedDeviceResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSimulatedDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSimulatedDeviceResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddSimulatedDeviceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[43]);
}

// ===================================================================

class RemoveSimulatedDeviceRequest::_Internal {
 public:
};

RemoveSimulatedDeviceRequest::RemoveSimulatedDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.RemoveSimulatedDeviceRequest)
}
RemoveSimulatedDeviceRequest::RemoveSimulatedDeviceRequest(const RemoveSimulatedDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.RemoveSimulatedDeviceRequest)
}

void RemoveSimulatedDeviceRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveSimulatedDeviceRequest::~RemoveSimulatedDeviceRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.RemoveSimulatedDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveSimulatedDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveSimulatedDeviceRequest::ArenaDtor(void* object) {
  RemoveSimulatedDeviceRequest* _this = reinterpret_cast< RemoveSimulatedDeviceRequest* >(object);
  (void)_this;
}
void RemoveSimulatedDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveSimulatedDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveSimulatedDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.RemoveSimulatedDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveSimulatedDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.RemoveSimulatedDeviceRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveSimulatedDeviceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.RemoveSimulatedDeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.RemoveSimulatedDeviceRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.RemoveSimulatedDeviceRequest)
  return target;
}

size_t RemoveSimulatedDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.RemoveSimulatedDeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveSimulatedDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveSimulatedDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveSimulatedDeviceRequest::GetClassData() const { return &_class_data_; }

void RemoveSimulatedDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveSimulatedDeviceRequest *>(to)->MergeFrom(
      static_cast<const RemoveSimulatedDeviceRequest &>(from));
}


void RemoveSimulatedDeviceRequest::MergeFrom(const RemoveSimulatedDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.RemoveSimulatedDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveSimulatedDeviceRequest::CopyFrom(const RemoveSimulatedDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.RemoveSimulatedDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSimulatedDeviceRequest::IsInitialized() const {
  return true;
}

void RemoveSimulatedDeviceRequest::InternalSwap(RemoveSimulatedDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveSimulatedDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[44]);
}

// ===================================================================

class RemoveSimulatedDeviceResponse::_Internal {
 public:
};

RemoveSimulatedDeviceResponse::RemoveSimulatedDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.RemoveSimulatedDeviceResponse)
}
RemoveSimulatedDeviceResponse::RemoveSimulatedDeviceResponse(const RemoveSimulatedDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.RemoveSimulatedDeviceResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveSimulatedDeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveSimulatedDeviceResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveSimulatedDeviceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[45]);
}

// ===================================================================

class LocalAuthenticationTokenPathRequest::_Internal {
 public:
};

LocalAuthenticationTokenPathRequest::LocalAuthenticationTokenPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.LocalAuthenticationTokenPathRequest)
}
LocalAuthenticationTokenPathRequest::LocalAuthenticationTokenPathRequest(const LocalAuthenticationTokenPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.LocalAuthenticationTokenPathRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalAuthenticationTokenPathRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalAuthenticationTokenPathRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LocalAuthenticationTokenPathRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[46]);
}

// ===================================================================

class LocalAuthenticationTokenPathResponse::_Internal {
 public:
};

LocalAuthenticationTokenPathResponse::LocalAuthenticationTokenPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.LocalAuthenticationTokenPathResponse)
}
LocalAuthenticationTokenPathResponse::LocalAuthenticationTokenPathResponse(const LocalAuthenticationTokenPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.LocalAuthenticationTokenPathResponse)
}

void LocalAuthenticationTokenPathResponse::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocalAuthenticationTokenPathResponse::~LocalAuthenticationTokenPathResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalAuthenticationTokenPathResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocalAuthenticationTokenPathResponse::ArenaDtor(void* object) {
  LocalAuthenticationTokenPathResponse* _this = reinterpret_cast< LocalAuthenticationTokenPathResponse* >(object);
  (void)_this;
}
void LocalAuthenticationTokenPathResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalAuthenticationTokenPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalAuthenticationTokenPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalAuthenticationTokenPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.LocalAuthenticationTokenPathResponse.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalAuthenticationTokenPathResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.LocalAuthenticationTokenPathResponse.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  return target;
}

size_t LocalAuthenticationTokenPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalAuthenticationTokenPathResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalAuthenticationTokenPathResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalAuthenticationTokenPathResponse::GetClassData() const { return &_class_data_; }

void LocalAuthenticationTokenPathResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalAuthenticationTokenPathResponse *>(to)->MergeFrom(
      static_cast<const LocalAuthenticationTokenPathResponse &>(from));
}


void LocalAuthenticationTokenPathResponse::MergeFrom(const LocalAuthenticationTokenPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalAuthenticationTokenPathResponse::CopyFrom(const LocalAuthenticationTokenPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.LocalAuthenticationTokenPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalAuthenticationTokenPathResponse::IsInitialized() const {
  return true;
}

void LocalAuthenticationTokenPathResponse::InternalSwap(LocalAuthenticationTokenPathResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalAuthenticationTokenPathResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[47]);
}

// ===================================================================

class GetAlignmentReferenceInformationRequest::_Internal {
 public:
};

GetAlignmentReferenceInformationRequest::GetAlignmentReferenceInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetAlignmentReferenceInformationRequest)
}
GetAlignmentReferenceInformationRequest::GetAlignmentReferenceInformationRequest(const GetAlignmentReferenceInformationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetAlignmentReferenceInformationRequest)
}

void GetAlignmentReferenceInformationRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAlignmentReferenceInformationRequest::~GetAlignmentReferenceInformationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAlignmentReferenceInformationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAlignmentReferenceInformationRequest::ArenaDtor(void* object) {
  GetAlignmentReferenceInformationRequest* _this = reinterpret_cast< GetAlignmentReferenceInformationRequest* >(object);
  (void)_this;
}
void GetAlignmentReferenceInformationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAlignmentReferenceInformationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAlignmentReferenceInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAlignmentReferenceInformationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.GetAlignmentReferenceInformationRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAlignmentReferenceInformationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.GetAlignmentReferenceInformationRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  return target;
}

size_t GetAlignmentReferenceInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAlignmentReferenceInformationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAlignmentReferenceInformationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAlignmentReferenceInformationRequest::GetClassData() const { return &_class_data_; }

void GetAlignmentReferenceInformationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAlignmentReferenceInformationRequest *>(to)->MergeFrom(
      static_cast<const GetAlignmentReferenceInformationRequest &>(from));
}


void GetAlignmentReferenceInformationRequest::MergeFrom(const GetAlignmentReferenceInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAlignmentReferenceInformationRequest::CopyFrom(const GetAlignmentReferenceInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetAlignmentReferenceInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAlignmentReferenceInformationRequest::IsInitialized() const {
  return true;
}

void GetAlignmentReferenceInformationRequest::InternalSwap(GetAlignmentReferenceInformationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAlignmentReferenceInformationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[48]);
}

// ===================================================================

class GetAlignmentReferenceInformationResponse::_Internal {
 public:
};

GetAlignmentReferenceInformationResponse::GetAlignmentReferenceInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.GetAlignmentReferenceInformationResponse)
}
GetAlignmentReferenceInformationResponse::GetAlignmentReferenceInformationResponse(const GetAlignmentReferenceInformationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&estimated_reference_size_bases_, &from.estimated_reference_size_bases_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommended_live_usage_) -
    reinterpret_cast<char*>(&estimated_reference_size_bases_)) + sizeof(recommended_live_usage_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.GetAlignmentReferenceInformationResponse)
}

void GetAlignmentReferenceInformationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&estimated_reference_size_bases_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recommended_live_usage_) -
    reinterpret_cast<char*>(&estimated_reference_size_bases_)) + sizeof(recommended_live_usage_));
}

GetAlignmentReferenceInformationResponse::~GetAlignmentReferenceInformationResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAlignmentReferenceInformationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetAlignmentReferenceInformationResponse::ArenaDtor(void* object) {
  GetAlignmentReferenceInformationResponse* _this = reinterpret_cast< GetAlignmentReferenceInformationResponse* >(object);
  (void)_this;
}
void GetAlignmentReferenceInformationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAlignmentReferenceInformationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAlignmentReferenceInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&estimated_reference_size_bases_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommended_live_usage_) -
      reinterpret_cast<char*>(&estimated_reference_size_bases_)) + sizeof(recommended_live_usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAlignmentReferenceInformationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float estimated_load_time_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          estimated_load_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 estimated_reference_size_bases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          estimated_reference_size_bases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recommended_live_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          recommended_live_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAlignmentReferenceInformationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float estimated_load_time_seconds = 1;
  if (!(this->_internal_estimated_load_time_seconds() <= 0 && this->_internal_estimated_load_time_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_estimated_load_time_seconds(), target);
  }

  // uint64 estimated_reference_size_bases = 2;
  if (this->_internal_estimated_reference_size_bases() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_estimated_reference_size_bases(), target);
  }

  // bool recommended_live_usage = 3;
  if (this->_internal_recommended_live_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_recommended_live_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  return target;
}

size_t GetAlignmentReferenceInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 estimated_reference_size_bases = 2;
  if (this->_internal_estimated_reference_size_bases() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_estimated_reference_size_bases());
  }

  // float estimated_load_time_seconds = 1;
  if (!(this->_internal_estimated_load_time_seconds() <= 0 && this->_internal_estimated_load_time_seconds() >= 0)) {
    total_size += 1 + 4;
  }

  // bool recommended_live_usage = 3;
  if (this->_internal_recommended_live_usage() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAlignmentReferenceInformationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAlignmentReferenceInformationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAlignmentReferenceInformationResponse::GetClassData() const { return &_class_data_; }

void GetAlignmentReferenceInformationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAlignmentReferenceInformationResponse *>(to)->MergeFrom(
      static_cast<const GetAlignmentReferenceInformationResponse &>(from));
}


void GetAlignmentReferenceInformationResponse::MergeFrom(const GetAlignmentReferenceInformationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_estimated_reference_size_bases() != 0) {
    _internal_set_estimated_reference_size_bases(from._internal_estimated_reference_size_bases());
  }
  if (!(from._internal_estimated_load_time_seconds() <= 0 && from._internal_estimated_load_time_seconds() >= 0)) {
    _internal_set_estimated_load_time_seconds(from._internal_estimated_load_time_seconds());
  }
  if (from._internal_recommended_live_usage() != 0) {
    _internal_set_recommended_live_usage(from._internal_recommended_live_usage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAlignmentReferenceInformationResponse::CopyFrom(const GetAlignmentReferenceInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.GetAlignmentReferenceInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAlignmentReferenceInformationResponse::IsInitialized() const {
  return true;
}

void GetAlignmentReferenceInformationResponse::InternalSwap(GetAlignmentReferenceInformationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAlignmentReferenceInformationResponse, recommended_live_usage_)
      + sizeof(GetAlignmentReferenceInformationResponse::recommended_live_usage_)
      - PROTOBUF_FIELD_OFFSET(GetAlignmentReferenceInformationResponse, estimated_reference_size_bases_)>(
          reinterpret_cast<char*>(&estimated_reference_size_bases_),
          reinterpret_cast<char*>(&other->estimated_reference_size_bases_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAlignmentReferenceInformationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[49]);
}

// ===================================================================

class AssociationDeviceCodeRequest::_Internal {
 public:
};

AssociationDeviceCodeRequest::AssociationDeviceCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.AssociationDeviceCodeRequest)
}
AssociationDeviceCodeRequest::AssociationDeviceCodeRequest(const AssociationDeviceCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position_name().empty()) {
    position_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_name(), 
      GetArenaForAllocation());
  }
  offline_ = from.offline_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.AssociationDeviceCodeRequest)
}

void AssociationDeviceCodeRequest::SharedCtor() {
position_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
offline_ = false;
}

AssociationDeviceCodeRequest::~AssociationDeviceCodeRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.AssociationDeviceCodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociationDeviceCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  position_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssociationDeviceCodeRequest::ArenaDtor(void* object) {
  AssociationDeviceCodeRequest* _this = reinterpret_cast< AssociationDeviceCodeRequest* >(object);
  (void)_this;
}
void AssociationDeviceCodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociationDeviceCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociationDeviceCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.AssociationDeviceCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_name_.ClearToEmpty();
  offline_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociationDeviceCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string position_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_position_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.AssociationDeviceCodeRequest.position_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool offline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociationDeviceCodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.AssociationDeviceCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string position_name = 1;
  if (!this->_internal_position_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_name().data(), static_cast<int>(this->_internal_position_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.AssociationDeviceCodeRequest.position_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_position_name(), target);
  }

  // bool offline = 2;
  if (this->_internal_offline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.AssociationDeviceCodeRequest)
  return target;
}

size_t AssociationDeviceCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.AssociationDeviceCodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string position_name = 1;
  if (!this->_internal_position_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_name());
  }

  // bool offline = 2;
  if (this->_internal_offline() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociationDeviceCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociationDeviceCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociationDeviceCodeRequest::GetClassData() const { return &_class_data_; }

void AssociationDeviceCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociationDeviceCodeRequest *>(to)->MergeFrom(
      static_cast<const AssociationDeviceCodeRequest &>(from));
}


void AssociationDeviceCodeRequest::MergeFrom(const AssociationDeviceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.AssociationDeviceCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_position_name().empty()) {
    _internal_set_position_name(from._internal_position_name());
  }
  if (from._internal_offline() != 0) {
    _internal_set_offline(from._internal_offline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociationDeviceCodeRequest::CopyFrom(const AssociationDeviceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.AssociationDeviceCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociationDeviceCodeRequest::IsInitialized() const {
  return true;
}

void AssociationDeviceCodeRequest::InternalSwap(AssociationDeviceCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_name_, lhs_arena,
      &other->position_name_, rhs_arena
  );
  swap(offline_, other->offline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociationDeviceCodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[50]);
}

// ===================================================================

class AssociationDeviceCodeResponse::_Internal {
 public:
};

AssociationDeviceCodeResponse::AssociationDeviceCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.AssociationDeviceCodeResponse)
}
AssociationDeviceCodeResponse::AssociationDeviceCodeResponse(const AssociationDeviceCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.AssociationDeviceCodeResponse)
}

void AssociationDeviceCodeResponse::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssociationDeviceCodeResponse::~AssociationDeviceCodeResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.AssociationDeviceCodeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociationDeviceCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssociationDeviceCodeResponse::ArenaDtor(void* object) {
  AssociationDeviceCodeResponse* _this = reinterpret_cast< AssociationDeviceCodeResponse* >(object);
  (void)_this;
}
void AssociationDeviceCodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociationDeviceCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociationDeviceCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.AssociationDeviceCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociationDeviceCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.AssociationDeviceCodeResponse.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociationDeviceCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.AssociationDeviceCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.AssociationDeviceCodeResponse.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.AssociationDeviceCodeResponse)
  return target;
}

size_t AssociationDeviceCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.AssociationDeviceCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociationDeviceCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociationDeviceCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociationDeviceCodeResponse::GetClassData() const { return &_class_data_; }

void AssociationDeviceCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociationDeviceCodeResponse *>(to)->MergeFrom(
      static_cast<const AssociationDeviceCodeResponse &>(from));
}


void AssociationDeviceCodeResponse::MergeFrom(const AssociationDeviceCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.AssociationDeviceCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociationDeviceCodeResponse::CopyFrom(const AssociationDeviceCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.AssociationDeviceCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociationDeviceCodeResponse::IsInitialized() const {
  return true;
}

void AssociationDeviceCodeResponse::InternalSwap(AssociationDeviceCodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociationDeviceCodeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[51]);
}

// ===================================================================

class ApplyOfflineAssociationUnlockCodeRequest::_Internal {
 public:
};

ApplyOfflineAssociationUnlockCodeRequest::ApplyOfflineAssociationUnlockCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
}
ApplyOfflineAssociationUnlockCodeRequest::ApplyOfflineAssociationUnlockCodeRequest(const ApplyOfflineAssociationUnlockCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position_name().empty()) {
    position_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_name(), 
      GetArenaForAllocation());
  }
  unlock_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unlock_code().empty()) {
    unlock_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unlock_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
}

void ApplyOfflineAssociationUnlockCodeRequest::SharedCtor() {
position_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unlock_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ApplyOfflineAssociationUnlockCodeRequest::~ApplyOfflineAssociationUnlockCodeRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplyOfflineAssociationUnlockCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  position_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unlock_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplyOfflineAssociationUnlockCodeRequest::ArenaDtor(void* object) {
  ApplyOfflineAssociationUnlockCodeRequest* _this = reinterpret_cast< ApplyOfflineAssociationUnlockCodeRequest* >(object);
  (void)_this;
}
void ApplyOfflineAssociationUnlockCodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyOfflineAssociationUnlockCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyOfflineAssociationUnlockCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_name_.ClearToEmpty();
  unlock_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyOfflineAssociationUnlockCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string position_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_position_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest.position_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string unlock_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unlock_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest.unlock_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyOfflineAssociationUnlockCodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string position_name = 1;
  if (!this->_internal_position_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_name().data(), static_cast<int>(this->_internal_position_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest.position_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_position_name(), target);
  }

  // string unlock_code = 2;
  if (!this->_internal_unlock_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unlock_code().data(), static_cast<int>(this->_internal_unlock_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest.unlock_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unlock_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  return target;
}

size_t ApplyOfflineAssociationUnlockCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string position_name = 1;
  if (!this->_internal_position_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_name());
  }

  // string unlock_code = 2;
  if (!this->_internal_unlock_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unlock_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyOfflineAssociationUnlockCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplyOfflineAssociationUnlockCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyOfflineAssociationUnlockCodeRequest::GetClassData() const { return &_class_data_; }

void ApplyOfflineAssociationUnlockCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApplyOfflineAssociationUnlockCodeRequest *>(to)->MergeFrom(
      static_cast<const ApplyOfflineAssociationUnlockCodeRequest &>(from));
}


void ApplyOfflineAssociationUnlockCodeRequest::MergeFrom(const ApplyOfflineAssociationUnlockCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_position_name().empty()) {
    _internal_set_position_name(from._internal_position_name());
  }
  if (!from._internal_unlock_code().empty()) {
    _internal_set_unlock_code(from._internal_unlock_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyOfflineAssociationUnlockCodeRequest::CopyFrom(const ApplyOfflineAssociationUnlockCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyOfflineAssociationUnlockCodeRequest::IsInitialized() const {
  return true;
}

void ApplyOfflineAssociationUnlockCodeRequest::InternalSwap(ApplyOfflineAssociationUnlockCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_name_, lhs_arena,
      &other->position_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unlock_code_, lhs_arena,
      &other->unlock_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyOfflineAssociationUnlockCodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[52]);
}

// ===================================================================

class ApplyOfflineAssociationUnlockCodeResponse::_Internal {
 public:
};

ApplyOfflineAssociationUnlockCodeResponse::ApplyOfflineAssociationUnlockCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
}
ApplyOfflineAssociationUnlockCodeResponse::ApplyOfflineAssociationUnlockCodeResponse(const ApplyOfflineAssociationUnlockCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  associated_ = from.associated_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
}

void ApplyOfflineAssociationUnlockCodeResponse::SharedCtor() {
associated_ = false;
}

ApplyOfflineAssociationUnlockCodeResponse::~ApplyOfflineAssociationUnlockCodeResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApplyOfflineAssociationUnlockCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ApplyOfflineAssociationUnlockCodeResponse::ArenaDtor(void* object) {
  ApplyOfflineAssociationUnlockCodeResponse* _this = reinterpret_cast< ApplyOfflineAssociationUnlockCodeResponse* >(object);
  (void)_this;
}
void ApplyOfflineAssociationUnlockCodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyOfflineAssociationUnlockCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplyOfflineAssociationUnlockCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyOfflineAssociationUnlockCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool associated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          associated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyOfflineAssociationUnlockCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool associated = 1;
  if (this->_internal_associated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_associated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  return target;
}

size_t ApplyOfflineAssociationUnlockCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool associated = 1;
  if (this->_internal_associated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyOfflineAssociationUnlockCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplyOfflineAssociationUnlockCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyOfflineAssociationUnlockCodeResponse::GetClassData() const { return &_class_data_; }

void ApplyOfflineAssociationUnlockCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApplyOfflineAssociationUnlockCodeResponse *>(to)->MergeFrom(
      static_cast<const ApplyOfflineAssociationUnlockCodeResponse &>(from));
}


void ApplyOfflineAssociationUnlockCodeResponse::MergeFrom(const ApplyOfflineAssociationUnlockCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_associated() != 0) {
    _internal_set_associated(from._internal_associated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyOfflineAssociationUnlockCodeResponse::CopyFrom(const ApplyOfflineAssociationUnlockCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ApplyOfflineAssociationUnlockCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyOfflineAssociationUnlockCodeResponse::IsInitialized() const {
  return true;
}

void ApplyOfflineAssociationUnlockCodeResponse::InternalSwap(ApplyOfflineAssociationUnlockCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(associated_, other->associated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyOfflineAssociationUnlockCodeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[53]);
}

// ===================================================================

class ListDeveloperApiTokensRequest::_Internal {
 public:
};

ListDeveloperApiTokensRequest::ListDeveloperApiTokensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListDeveloperApiTokensRequest)
}
ListDeveloperApiTokensRequest::ListDeveloperApiTokensRequest(const ListDeveloperApiTokensRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListDeveloperApiTokensRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDeveloperApiTokensRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDeveloperApiTokensRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListDeveloperApiTokensRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[54]);
}

// ===================================================================

class ListDeveloperApiTokensResponse_DeveloperApiToken::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const ListDeveloperApiTokensResponse_DeveloperApiToken* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDeveloperApiTokensResponse_DeveloperApiToken::_Internal::expiry(const ListDeveloperApiTokensResponse_DeveloperApiToken* msg) {
  return *msg->expiry_;
}
void ListDeveloperApiTokensResponse_DeveloperApiToken::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
ListDeveloperApiTokensResponse_DeveloperApiToken::ListDeveloperApiTokensResponse_DeveloperApiToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
}
ListDeveloperApiTokensResponse_DeveloperApiToken::ListDeveloperApiTokensResponse_DeveloperApiToken(const ListDeveloperApiTokensResponse_DeveloperApiToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_expiry()) {
    expiry_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
}

void ListDeveloperApiTokensResponse_DeveloperApiToken::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expiry_ = nullptr;
}

ListDeveloperApiTokensResponse_DeveloperApiToken::~ListDeveloperApiTokensResponse_DeveloperApiToken() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDeveloperApiTokensResponse_DeveloperApiToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiry_;
}

void ListDeveloperApiTokensResponse_DeveloperApiToken::ArenaDtor(void* object) {
  ListDeveloperApiTokensResponse_DeveloperApiToken* _this = reinterpret_cast< ListDeveloperApiTokensResponse_DeveloperApiToken* >(object);
  (void)_this;
}
void ListDeveloperApiTokensResponse_DeveloperApiToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDeveloperApiTokensResponse_DeveloperApiToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDeveloperApiTokensResponse_DeveloperApiToken::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDeveloperApiTokensResponse_DeveloperApiToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDeveloperApiTokensResponse_DeveloperApiToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  return target;
}

size_t ListDeveloperApiTokensResponse_DeveloperApiToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDeveloperApiTokensResponse_DeveloperApiToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDeveloperApiTokensResponse_DeveloperApiToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDeveloperApiTokensResponse_DeveloperApiToken::GetClassData() const { return &_class_data_; }

void ListDeveloperApiTokensResponse_DeveloperApiToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDeveloperApiTokensResponse_DeveloperApiToken *>(to)->MergeFrom(
      static_cast<const ListDeveloperApiTokensResponse_DeveloperApiToken &>(from));
}


void ListDeveloperApiTokensResponse_DeveloperApiToken::MergeFrom(const ListDeveloperApiTokensResponse_DeveloperApiToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_expiry()) {
    _internal_mutable_expiry()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDeveloperApiTokensResponse_DeveloperApiToken::CopyFrom(const ListDeveloperApiTokensResponse_DeveloperApiToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeveloperApiTokensResponse_DeveloperApiToken::IsInitialized() const {
  return true;
}

void ListDeveloperApiTokensResponse_DeveloperApiToken::InternalSwap(ListDeveloperApiTokensResponse_DeveloperApiToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(expiry_, other->expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDeveloperApiTokensResponse_DeveloperApiToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[55]);
}

// ===================================================================

class ListDeveloperApiTokensResponse::_Internal {
 public:
};

ListDeveloperApiTokensResponse::ListDeveloperApiTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.ListDeveloperApiTokensResponse)
}
ListDeveloperApiTokensResponse::ListDeveloperApiTokensResponse(const ListDeveloperApiTokensResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.ListDeveloperApiTokensResponse)
}

void ListDeveloperApiTokensResponse::SharedCtor() {
}

ListDeveloperApiTokensResponse::~ListDeveloperApiTokensResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.ListDeveloperApiTokensResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDeveloperApiTokensResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListDeveloperApiTokensResponse::ArenaDtor(void* object) {
  ListDeveloperApiTokensResponse* _this = reinterpret_cast< ListDeveloperApiTokensResponse* >(object);
  (void)_this;
}
void ListDeveloperApiTokensResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDeveloperApiTokensResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDeveloperApiTokensResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.ListDeveloperApiTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDeveloperApiTokensResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDeveloperApiTokensResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.ListDeveloperApiTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken tokens = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.ListDeveloperApiTokensResponse)
  return target;
}

size_t ListDeveloperApiTokensResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.ListDeveloperApiTokensResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.ListDeveloperApiTokensResponse.DeveloperApiToken tokens = 1;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDeveloperApiTokensResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDeveloperApiTokensResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDeveloperApiTokensResponse::GetClassData() const { return &_class_data_; }

void ListDeveloperApiTokensResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDeveloperApiTokensResponse *>(to)->MergeFrom(
      static_cast<const ListDeveloperApiTokensResponse &>(from));
}


void ListDeveloperApiTokensResponse::MergeFrom(const ListDeveloperApiTokensResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.ListDeveloperApiTokensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDeveloperApiTokensResponse::CopyFrom(const ListDeveloperApiTokensResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.ListDeveloperApiTokensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeveloperApiTokensResponse::IsInitialized() const {
  return true;
}

void ListDeveloperApiTokensResponse::InternalSwap(ListDeveloperApiTokensResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDeveloperApiTokensResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[56]);
}

// ===================================================================

class CreateDeveloperApiTokenRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const CreateDeveloperApiTokenRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CreateDeveloperApiTokenRequest::_Internal::expiry(const CreateDeveloperApiTokenRequest* msg) {
  return *msg->expiry_;
}
void CreateDeveloperApiTokenRequest::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
CreateDeveloperApiTokenRequest::CreateDeveloperApiTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.CreateDeveloperApiTokenRequest)
}
CreateDeveloperApiTokenRequest::CreateDeveloperApiTokenRequest(const CreateDeveloperApiTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_expiry()) {
    expiry_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.CreateDeveloperApiTokenRequest)
}

void CreateDeveloperApiTokenRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
expiry_ = nullptr;
}

CreateDeveloperApiTokenRequest::~CreateDeveloperApiTokenRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.CreateDeveloperApiTokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDeveloperApiTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiry_;
}

void CreateDeveloperApiTokenRequest::ArenaDtor(void* object) {
  CreateDeveloperApiTokenRequest* _this = reinterpret_cast< CreateDeveloperApiTokenRequest* >(object);
  (void)_this;
}
void CreateDeveloperApiTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeveloperApiTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDeveloperApiTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.CreateDeveloperApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeveloperApiTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDeveloperApiTokenRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeveloperApiTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.CreateDeveloperApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDeveloperApiTokenRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.CreateDeveloperApiTokenRequest)
  return target;
}

size_t CreateDeveloperApiTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.CreateDeveloperApiTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDeveloperApiTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDeveloperApiTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDeveloperApiTokenRequest::GetClassData() const { return &_class_data_; }

void CreateDeveloperApiTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDeveloperApiTokenRequest *>(to)->MergeFrom(
      static_cast<const CreateDeveloperApiTokenRequest &>(from));
}


void CreateDeveloperApiTokenRequest::MergeFrom(const CreateDeveloperApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.CreateDeveloperApiTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_expiry()) {
    _internal_mutable_expiry()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDeveloperApiTokenRequest::CopyFrom(const CreateDeveloperApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.CreateDeveloperApiTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeveloperApiTokenRequest::IsInitialized() const {
  return true;
}

void CreateDeveloperApiTokenRequest::InternalSwap(CreateDeveloperApiTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(expiry_, other->expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeveloperApiTokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[57]);
}

// ===================================================================

class CreateDeveloperApiTokenResponse::_Internal {
 public:
};

CreateDeveloperApiTokenResponse::CreateDeveloperApiTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.CreateDeveloperApiTokenResponse)
}
CreateDeveloperApiTokenResponse::CreateDeveloperApiTokenResponse(const CreateDeveloperApiTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.CreateDeveloperApiTokenResponse)
}

void CreateDeveloperApiTokenResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateDeveloperApiTokenResponse::~CreateDeveloperApiTokenResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.CreateDeveloperApiTokenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDeveloperApiTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateDeveloperApiTokenResponse::ArenaDtor(void* object) {
  CreateDeveloperApiTokenResponse* _this = reinterpret_cast< CreateDeveloperApiTokenResponse* >(object);
  (void)_this;
}
void CreateDeveloperApiTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDeveloperApiTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDeveloperApiTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.CreateDeveloperApiTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDeveloperApiTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDeveloperApiTokenResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.CreateDeveloperApiTokenResponse.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDeveloperApiTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.CreateDeveloperApiTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDeveloperApiTokenResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.CreateDeveloperApiTokenResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.CreateDeveloperApiTokenResponse)
  return target;
}

size_t CreateDeveloperApiTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.CreateDeveloperApiTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDeveloperApiTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDeveloperApiTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDeveloperApiTokenResponse::GetClassData() const { return &_class_data_; }

void CreateDeveloperApiTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDeveloperApiTokenResponse *>(to)->MergeFrom(
      static_cast<const CreateDeveloperApiTokenResponse &>(from));
}


void CreateDeveloperApiTokenResponse::MergeFrom(const CreateDeveloperApiTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.CreateDeveloperApiTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDeveloperApiTokenResponse::CopyFrom(const CreateDeveloperApiTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.CreateDeveloperApiTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeveloperApiTokenResponse::IsInitialized() const {
  return true;
}

void CreateDeveloperApiTokenResponse::InternalSwap(CreateDeveloperApiTokenResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDeveloperApiTokenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[58]);
}

// ===================================================================

class RevokeDeveloperApiTokenRequest::_Internal {
 public:
};

RevokeDeveloperApiTokenRequest::RevokeDeveloperApiTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.RevokeDeveloperApiTokenRequest)
}
RevokeDeveloperApiTokenRequest::RevokeDeveloperApiTokenRequest(const RevokeDeveloperApiTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.RevokeDeveloperApiTokenRequest)
}

void RevokeDeveloperApiTokenRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RevokeDeveloperApiTokenRequest::~RevokeDeveloperApiTokenRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RevokeDeveloperApiTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevokeDeveloperApiTokenRequest::ArenaDtor(void* object) {
  RevokeDeveloperApiTokenRequest* _this = reinterpret_cast< RevokeDeveloperApiTokenRequest* >(object);
  (void)_this;
}
void RevokeDeveloperApiTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeDeveloperApiTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RevokeDeveloperApiTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeDeveloperApiTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.RevokeDeveloperApiTokenRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeDeveloperApiTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.RevokeDeveloperApiTokenRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  return target;
}

size_t RevokeDeveloperApiTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevokeDeveloperApiTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RevokeDeveloperApiTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevokeDeveloperApiTokenRequest::GetClassData() const { return &_class_data_; }

void RevokeDeveloperApiTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RevokeDeveloperApiTokenRequest *>(to)->MergeFrom(
      static_cast<const RevokeDeveloperApiTokenRequest &>(from));
}


void RevokeDeveloperApiTokenRequest::MergeFrom(const RevokeDeveloperApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevokeDeveloperApiTokenRequest::CopyFrom(const RevokeDeveloperApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.RevokeDeveloperApiTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeDeveloperApiTokenRequest::IsInitialized() const {
  return true;
}

void RevokeDeveloperApiTokenRequest::InternalSwap(RevokeDeveloperApiTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeDeveloperApiTokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[59]);
}

// ===================================================================

class RevokeDeveloperApiTokensResponse::_Internal {
 public:
};

RevokeDeveloperApiTokensResponse::RevokeDeveloperApiTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.RevokeDeveloperApiTokensResponse)
}
RevokeDeveloperApiTokensResponse::RevokeDeveloperApiTokensResponse(const RevokeDeveloperApiTokensResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.RevokeDeveloperApiTokensResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevokeDeveloperApiTokensResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevokeDeveloperApiTokensResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RevokeDeveloperApiTokensResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[60]);
}

// ===================================================================

class FindProtocolsRequest::_Internal {
 public:
};

FindProtocolsRequest::FindProtocolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FindProtocolsRequest)
}
FindProtocolsRequest::FindProtocolsRequest(const FindProtocolsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_cell_product_code().empty()) {
    flow_cell_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_product_code(), 
      GetArenaForAllocation());
  }
  sequencing_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequencing_kit().empty()) {
    sequencing_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequencing_kit(), 
      GetArenaForAllocation());
  }
  experiment_type_ = from.experiment_type_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FindProtocolsRequest)
}

void FindProtocolsRequest::SharedCtor() {
flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sequencing_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
experiment_type_ = 0;
}

FindProtocolsRequest::~FindProtocolsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FindProtocolsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindProtocolsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flow_cell_product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_kit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindProtocolsRequest::ArenaDtor(void* object) {
  FindProtocolsRequest* _this = reinterpret_cast< FindProtocolsRequest* >(object);
  (void)_this;
}
void FindProtocolsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindProtocolsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindProtocolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FindProtocolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_cell_product_code_.ClearToEmpty();
  sequencing_kit_.ClearToEmpty();
  experiment_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindProtocolsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string flow_cell_product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_flow_cell_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FindProtocolsRequest.flow_cell_product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequencing_kit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sequencing_kit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FindProtocolsRequest.sequencing_kit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.manager.ExperimentType experiment_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_experiment_type(static_cast<::minknow_api::manager::ExperimentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindProtocolsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FindProtocolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flow_cell_product_code = 1;
  if (!this->_internal_flow_cell_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_product_code().data(), static_cast<int>(this->_internal_flow_cell_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FindProtocolsRequest.flow_cell_product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flow_cell_product_code(), target);
  }

  // string sequencing_kit = 2;
  if (!this->_internal_sequencing_kit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequencing_kit().data(), static_cast<int>(this->_internal_sequencing_kit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FindProtocolsRequest.sequencing_kit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequencing_kit(), target);
  }

  // .minknow_api.manager.ExperimentType experiment_type = 3;
  if (this->_internal_experiment_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_experiment_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FindProtocolsRequest)
  return target;
}

size_t FindProtocolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FindProtocolsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flow_cell_product_code = 1;
  if (!this->_internal_flow_cell_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_product_code());
  }

  // string sequencing_kit = 2;
  if (!this->_internal_sequencing_kit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequencing_kit());
  }

  // .minknow_api.manager.ExperimentType experiment_type = 3;
  if (this->_internal_experiment_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_experiment_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindProtocolsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindProtocolsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindProtocolsRequest::GetClassData() const { return &_class_data_; }

void FindProtocolsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindProtocolsRequest *>(to)->MergeFrom(
      static_cast<const FindProtocolsRequest &>(from));
}


void FindProtocolsRequest::MergeFrom(const FindProtocolsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FindProtocolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flow_cell_product_code().empty()) {
    _internal_set_flow_cell_product_code(from._internal_flow_cell_product_code());
  }
  if (!from._internal_sequencing_kit().empty()) {
    _internal_set_sequencing_kit(from._internal_sequencing_kit());
  }
  if (from._internal_experiment_type() != 0) {
    _internal_set_experiment_type(from._internal_experiment_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindProtocolsRequest::CopyFrom(const FindProtocolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FindProtocolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindProtocolsRequest::IsInitialized() const {
  return true;
}

void FindProtocolsRequest::InternalSwap(FindProtocolsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_product_code_, lhs_arena,
      &other->flow_cell_product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequencing_kit_, lhs_arena,
      &other->sequencing_kit_, rhs_arena
  );
  swap(experiment_type_, other->experiment_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindProtocolsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[61]);
}

// ===================================================================

class FindProtocolsResponse_Protocol::_Internal {
 public:
};

FindProtocolsResponse_Protocol::FindProtocolsResponse_Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FindProtocolsResponse.Protocol)
}
FindProtocolsResponse_Protocol::FindProtocolsResponse_Protocol(const FindProtocolsResponse_Protocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&requires_flow_cell_product_code_, &from.requires_flow_cell_product_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&requires_sequencing_kit_) -
    reinterpret_cast<char*>(&requires_flow_cell_product_code_)) + sizeof(requires_sequencing_kit_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FindProtocolsResponse.Protocol)
}

void FindProtocolsResponse_Protocol::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requires_flow_cell_product_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requires_sequencing_kit_) -
    reinterpret_cast<char*>(&requires_flow_cell_product_code_)) + sizeof(requires_sequencing_kit_));
}

FindProtocolsResponse_Protocol::~FindProtocolsResponse_Protocol() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FindProtocolsResponse.Protocol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindProtocolsResponse_Protocol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindProtocolsResponse_Protocol::ArenaDtor(void* object) {
  FindProtocolsResponse_Protocol* _this = reinterpret_cast< FindProtocolsResponse_Protocol* >(object);
  (void)_this;
}
void FindProtocolsResponse_Protocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindProtocolsResponse_Protocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindProtocolsResponse_Protocol::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FindProtocolsResponse.Protocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmpty();
  ::memset(&requires_flow_cell_product_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requires_sequencing_kit_) -
      reinterpret_cast<char*>(&requires_flow_cell_product_code_)) + sizeof(requires_sequencing_kit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindProtocolsResponse_Protocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.manager.FindProtocolsResponse.Protocol.identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool requires_flow_cell_product_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          requires_flow_cell_product_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool requires_sequencing_kit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requires_sequencing_kit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindProtocolsResponse_Protocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FindProtocolsResponse.Protocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.manager.FindProtocolsResponse.Protocol.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // bool requires_flow_cell_product_code = 2;
  if (this->_internal_requires_flow_cell_product_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_requires_flow_cell_product_code(), target);
  }

  // bool requires_sequencing_kit = 3;
  if (this->_internal_requires_sequencing_kit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_requires_sequencing_kit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FindProtocolsResponse.Protocol)
  return target;
}

size_t FindProtocolsResponse_Protocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FindProtocolsResponse.Protocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // bool requires_flow_cell_product_code = 2;
  if (this->_internal_requires_flow_cell_product_code() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_sequencing_kit = 3;
  if (this->_internal_requires_sequencing_kit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindProtocolsResponse_Protocol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindProtocolsResponse_Protocol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindProtocolsResponse_Protocol::GetClassData() const { return &_class_data_; }

void FindProtocolsResponse_Protocol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindProtocolsResponse_Protocol *>(to)->MergeFrom(
      static_cast<const FindProtocolsResponse_Protocol &>(from));
}


void FindProtocolsResponse_Protocol::MergeFrom(const FindProtocolsResponse_Protocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FindProtocolsResponse.Protocol)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_requires_flow_cell_product_code() != 0) {
    _internal_set_requires_flow_cell_product_code(from._internal_requires_flow_cell_product_code());
  }
  if (from._internal_requires_sequencing_kit() != 0) {
    _internal_set_requires_sequencing_kit(from._internal_requires_sequencing_kit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindProtocolsResponse_Protocol::CopyFrom(const FindProtocolsResponse_Protocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FindProtocolsResponse.Protocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindProtocolsResponse_Protocol::IsInitialized() const {
  return true;
}

void FindProtocolsResponse_Protocol::InternalSwap(FindProtocolsResponse_Protocol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindProtocolsResponse_Protocol, requires_sequencing_kit_)
      + sizeof(FindProtocolsResponse_Protocol::requires_sequencing_kit_)
      - PROTOBUF_FIELD_OFFSET(FindProtocolsResponse_Protocol, requires_flow_cell_product_code_)>(
          reinterpret_cast<char*>(&requires_flow_cell_product_code_),
          reinterpret_cast<char*>(&other->requires_flow_cell_product_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindProtocolsResponse_Protocol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[62]);
}

// ===================================================================

class FindProtocolsResponse::_Internal {
 public:
};

FindProtocolsResponse::FindProtocolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  protocols_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.manager.FindProtocolsResponse)
}
FindProtocolsResponse::FindProtocolsResponse(const FindProtocolsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protocols_(from.protocols_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.manager.FindProtocolsResponse)
}

void FindProtocolsResponse::SharedCtor() {
}

FindProtocolsResponse::~FindProtocolsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.manager.FindProtocolsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindProtocolsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindProtocolsResponse::ArenaDtor(void* object) {
  FindProtocolsResponse* _this = reinterpret_cast< FindProtocolsResponse* >(object);
  (void)_this;
}
void FindProtocolsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindProtocolsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindProtocolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.manager.FindProtocolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocols_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindProtocolsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.manager.FindProtocolsResponse.Protocol protocols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protocols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindProtocolsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.manager.FindProtocolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FindProtocolsResponse.Protocol protocols = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protocols_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_protocols(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.manager.FindProtocolsResponse)
  return target;
}

size_t FindProtocolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.manager.FindProtocolsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.manager.FindProtocolsResponse.Protocol protocols = 1;
  total_size += 1UL * this->_internal_protocols_size();
  for (const auto& msg : this->protocols_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindProtocolsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindProtocolsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindProtocolsResponse::GetClassData() const { return &_class_data_; }

void FindProtocolsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindProtocolsResponse *>(to)->MergeFrom(
      static_cast<const FindProtocolsResponse &>(from));
}


void FindProtocolsResponse::MergeFrom(const FindProtocolsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.manager.FindProtocolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocols_.MergeFrom(from.protocols_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindProtocolsResponse::CopyFrom(const FindProtocolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.manager.FindProtocolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindProtocolsResponse::IsInitialized() const {
  return true;
}

void FindProtocolsResponse::InternalSwap(FindProtocolsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  protocols_.InternalSwap(&other->protocols_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindProtocolsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fmanager_2eproto_getter, &descriptor_table_minknow_5fapi_2fmanager_2eproto_once,
      file_level_metadata_minknow_5fapi_2fmanager_2eproto[63]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace manager
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::manager::DescribeHostRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::DescribeHostRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::DescribeHostRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::DescribeHostResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::DescribeHostResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::DescribeHostResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPosition_Location* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPosition_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPosition_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPosition_RpcPorts* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPosition_RpcPorts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPosition_RpcPorts >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPosition_SharedHardwareGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPosition* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPositionsRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FlowCellPositionsResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::FlowCellPositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FlowCellPositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::WatchFlowCellPositionsRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::WatchFlowCellPositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::WatchFlowCellPositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::WatchFlowCellPositionsResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::WatchFlowCellPositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::WatchFlowCellPositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ResetPositionRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::ResetPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ResetPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ResetPositionResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::ResetPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ResetPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::BasecallerApiRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::BasecallerApiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::BasecallerApiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::BasecallerApiResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::BasecallerApiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::BasecallerApiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetGuppyInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetGuppyInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetGuppyInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetGuppyInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetGuppyInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetGuppyInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetVersionInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetVersionInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetVersionInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetVersionInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetVersionInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetVersionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListProtocolOutputDirFilesRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::ListProtocolOutputDirFilesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListProtocolOutputDirFilesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo* Arena::CreateMaybeMessage< ::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListProtocolOutputDirFilesResponse_DirectoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListProtocolOutputDirFilesResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::ListProtocolOutputDirFilesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListProtocolOutputDirFilesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::CreateDirectoryRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::CreateDirectoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::CreateDirectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::CreateDirectoryResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::CreateDirectoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::CreateDirectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FilesystemDiskSpaceInfo* Arena::CreateMaybeMessage< ::minknow_api::manager::FilesystemDiskSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FilesystemDiskSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetDiskSpaceInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetDiskSpaceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetDiskSpaceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::StreamDiskSpaceInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::StreamDiskSpaceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::StreamDiskSpaceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetDiskSpaceInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetDiskSpaceInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetDiskSpaceInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKitInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKitInfoResponse_BarcodeKitInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKitInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKitInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKitInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetLampKitInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetLampKitInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetLampKitInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetLampKitInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetLampKitInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetLampKitInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKeysRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetBarcodeKeysResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetBarcodeKeysResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetBarcodeKeysResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetFlowCellTypesRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetFlowCellTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetFlowCellTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetFlowCellTypesResponse_Info* Arena::CreateMaybeMessage< ::minknow_api::manager::GetFlowCellTypesResponse_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetFlowCellTypesResponse_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetFlowCellTypesResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetFlowCellTypesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetFlowCellTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetSequencingKitsRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetSequencingKitsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetSequencingKitsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetSequencingKitsResponse_Kit* Arena::CreateMaybeMessage< ::minknow_api::manager::GetSequencingKitsResponse_Kit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetSequencingKitsResponse_Kit >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit* Arena::CreateMaybeMessage< ::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetSequencingKitsResponse_BarcodingExpansionKit >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetSequencingKitsResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetSequencingKitsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetSequencingKitsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::AddSimulatedDeviceRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::AddSimulatedDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::AddSimulatedDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::AddSimulatedDeviceResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::AddSimulatedDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::AddSimulatedDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::RemoveSimulatedDeviceRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::RemoveSimulatedDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::RemoveSimulatedDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::RemoveSimulatedDeviceResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::RemoveSimulatedDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::RemoveSimulatedDeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::LocalAuthenticationTokenPathRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::LocalAuthenticationTokenPathRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::LocalAuthenticationTokenPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::LocalAuthenticationTokenPathResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::LocalAuthenticationTokenPathResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::LocalAuthenticationTokenPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetAlignmentReferenceInformationRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::GetAlignmentReferenceInformationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetAlignmentReferenceInformationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::GetAlignmentReferenceInformationResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::GetAlignmentReferenceInformationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::GetAlignmentReferenceInformationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::AssociationDeviceCodeRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::AssociationDeviceCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::AssociationDeviceCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::AssociationDeviceCodeResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::AssociationDeviceCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::AssociationDeviceCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ApplyOfflineAssociationUnlockCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListDeveloperApiTokensRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::ListDeveloperApiTokensRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListDeveloperApiTokensRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken* Arena::CreateMaybeMessage< ::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListDeveloperApiTokensResponse_DeveloperApiToken >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::ListDeveloperApiTokensResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::ListDeveloperApiTokensResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::ListDeveloperApiTokensResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::CreateDeveloperApiTokenRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::CreateDeveloperApiTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::CreateDeveloperApiTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::CreateDeveloperApiTokenResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::CreateDeveloperApiTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::CreateDeveloperApiTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::RevokeDeveloperApiTokenRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::RevokeDeveloperApiTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::RevokeDeveloperApiTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::RevokeDeveloperApiTokensResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::RevokeDeveloperApiTokensResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::RevokeDeveloperApiTokensResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FindProtocolsRequest* Arena::CreateMaybeMessage< ::minknow_api::manager::FindProtocolsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FindProtocolsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FindProtocolsResponse_Protocol* Arena::CreateMaybeMessage< ::minknow_api::manager::FindProtocolsResponse_Protocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FindProtocolsResponse_Protocol >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::manager::FindProtocolsResponse* Arena::CreateMaybeMessage< ::minknow_api::manager::FindProtocolsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::manager::FindProtocolsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
