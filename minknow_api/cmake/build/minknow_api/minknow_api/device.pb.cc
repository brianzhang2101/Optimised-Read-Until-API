// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/device.proto

#include "minknow_api/device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace device {
constexpr ChannelConfiguration::ChannelConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : well_(0u)
  , test_current_(false){}
struct ChannelConfigurationDefaultTypeInternal {
  constexpr ChannelConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelConfigurationDefaultTypeInternal() {}
  union {
    ChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelConfigurationDefaultTypeInternal _ChannelConfiguration_default_instance_;
constexpr ReturnedChannelConfiguration::ReturnedChannelConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : well_(0u)
  , test_current_(false)
  , unblock_(false){}
struct ReturnedChannelConfigurationDefaultTypeInternal {
  constexpr ReturnedChannelConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReturnedChannelConfigurationDefaultTypeInternal() {}
  union {
    ReturnedChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReturnedChannelConfigurationDefaultTypeInternal _ReturnedChannelConfiguration_default_instance_;
constexpr GetDeviceInfoRequest::GetDeviceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDeviceInfoRequestDefaultTypeInternal {
  constexpr GetDeviceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceInfoRequestDefaultTypeInternal() {}
  union {
    GetDeviceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceInfoRequestDefaultTypeInternal _GetDeviceInfoRequest_default_instance_;
constexpr GetDeviceInfoResponse_ComponentVersion::GetDeviceInfoResponse_ComponentVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal {
  constexpr GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal() {}
  union {
    GetDeviceInfoResponse_ComponentVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceInfoResponse_ComponentVersionDefaultTypeInternal _GetDeviceInfoResponse_ComponentVersion_default_instance_;
constexpr GetDeviceInfoResponse::GetDeviceInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firmware_version_()
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_type_(0)

  , max_channel_count_(0u)
  , is_simulated_(false)
  , can_set_temperature_(false)
  , max_wells_per_channel_(0u)
  , digitisation_(0u){}
struct GetDeviceInfoResponseDefaultTypeInternal {
  constexpr GetDeviceInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceInfoResponseDefaultTypeInternal() {}
  union {
    GetDeviceInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceInfoResponseDefaultTypeInternal _GetDeviceInfoResponse_default_instance_;
constexpr GetDeviceStateRequest::GetDeviceStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDeviceStateRequestDefaultTypeInternal {
  constexpr GetDeviceStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceStateRequestDefaultTypeInternal() {}
  union {
    GetDeviceStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceStateRequestDefaultTypeInternal _GetDeviceStateRequest_default_instance_;
constexpr GetDeviceStateResponse::GetDeviceStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_state_(0)

  , flow_cell_connector_(0)
{}
struct GetDeviceStateResponseDefaultTypeInternal {
  constexpr GetDeviceStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDeviceStateResponseDefaultTypeInternal() {}
  union {
    GetDeviceStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDeviceStateResponseDefaultTypeInternal _GetDeviceStateResponse_default_instance_;
constexpr StreamDeviceStateRequest::StreamDeviceStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamDeviceStateRequestDefaultTypeInternal {
  constexpr StreamDeviceStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDeviceStateRequestDefaultTypeInternal() {}
  union {
    StreamDeviceStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDeviceStateRequestDefaultTypeInternal _StreamDeviceStateRequest_default_instance_;
constexpr GetFlowCellInfoRequest::GetFlowCellInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetFlowCellInfoRequestDefaultTypeInternal {
  constexpr GetFlowCellInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlowCellInfoRequestDefaultTypeInternal() {}
  union {
    GetFlowCellInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlowCellInfoRequestDefaultTypeInternal _GetFlowCellInfoRequest_default_instance_;
constexpr GetFlowCellInfoResponse::GetFlowCellInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_cell_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_specified_flow_cell_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_specified_product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , adapter_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asic_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asic_id_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_count_(0u)
  , wells_per_channel_(0u)
  , has_flow_cell_(false)
  , has_adapter_(false)
  , _oneof_case_{}{}
struct GetFlowCellInfoResponseDefaultTypeInternal {
  constexpr GetFlowCellInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlowCellInfoResponseDefaultTypeInternal() {}
  union {
    GetFlowCellInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlowCellInfoResponseDefaultTypeInternal _GetFlowCellInfoResponse_default_instance_;
constexpr StreamFlowCellInfoRequest::StreamFlowCellInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamFlowCellInfoRequestDefaultTypeInternal {
  constexpr StreamFlowCellInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamFlowCellInfoRequestDefaultTypeInternal() {}
  union {
    StreamFlowCellInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamFlowCellInfoRequestDefaultTypeInternal _StreamFlowCellInfoRequest_default_instance_;
constexpr SetUserSpecifiedFlowCellIdRequest::SetUserSpecifiedFlowCellIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal {
  constexpr SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal() {}
  union {
    SetUserSpecifiedFlowCellIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUserSpecifiedFlowCellIdRequestDefaultTypeInternal _SetUserSpecifiedFlowCellIdRequest_default_instance_;
constexpr SetUserSpecifiedFlowCellIdResponse::SetUserSpecifiedFlowCellIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal {
  constexpr SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal() {}
  union {
    SetUserSpecifiedFlowCellIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUserSpecifiedFlowCellIdResponseDefaultTypeInternal _SetUserSpecifiedFlowCellIdResponse_default_instance_;
constexpr SetUserSpecifiedProductCodeRequest::SetUserSpecifiedProductCodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetUserSpecifiedProductCodeRequestDefaultTypeInternal {
  constexpr SetUserSpecifiedProductCodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUserSpecifiedProductCodeRequestDefaultTypeInternal() {}
  union {
    SetUserSpecifiedProductCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUserSpecifiedProductCodeRequestDefaultTypeInternal _SetUserSpecifiedProductCodeRequest_default_instance_;
constexpr SetUserSpecifiedProductCodeResponse::SetUserSpecifiedProductCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetUserSpecifiedProductCodeResponseDefaultTypeInternal {
  constexpr SetUserSpecifiedProductCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUserSpecifiedProductCodeResponseDefaultTypeInternal() {}
  union {
    SetUserSpecifiedProductCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUserSpecifiedProductCodeResponseDefaultTypeInternal _SetUserSpecifiedProductCodeResponse_default_instance_;
constexpr GetChannelsLayoutRequest::GetChannelsLayoutRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetChannelsLayoutRequestDefaultTypeInternal {
  constexpr GetChannelsLayoutRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelsLayoutRequestDefaultTypeInternal() {}
  union {
    GetChannelsLayoutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelsLayoutRequestDefaultTypeInternal _GetChannelsLayoutRequest_default_instance_;
constexpr GetChannelsLayoutResponse::GetChannelsLayoutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_records_(){}
struct GetChannelsLayoutResponseDefaultTypeInternal {
  constexpr GetChannelsLayoutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelsLayoutResponseDefaultTypeInternal() {}
  union {
    GetChannelsLayoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelsLayoutResponseDefaultTypeInternal _GetChannelsLayoutResponse_default_instance_;
constexpr ChannelRecord_MuxRecord::ChannelRecord_MuxRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , phys_x_(0u)
  , phys_y_(0u){}
struct ChannelRecord_MuxRecordDefaultTypeInternal {
  constexpr ChannelRecord_MuxRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelRecord_MuxRecordDefaultTypeInternal() {}
  union {
    ChannelRecord_MuxRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelRecord_MuxRecordDefaultTypeInternal _ChannelRecord_MuxRecord_default_instance_;
constexpr ChannelRecord::ChannelRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mux_records_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct ChannelRecordDefaultTypeInternal {
  constexpr ChannelRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelRecordDefaultTypeInternal() {}
  union {
    ChannelRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelRecordDefaultTypeInternal _ChannelRecord_default_instance_;
constexpr ResetDeviceSettingsRequest::ResetDeviceSettingsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetDeviceSettingsRequestDefaultTypeInternal {
  constexpr ResetDeviceSettingsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetDeviceSettingsRequestDefaultTypeInternal() {}
  union {
    ResetDeviceSettingsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetDeviceSettingsRequestDefaultTypeInternal _ResetDeviceSettingsRequest_default_instance_;
constexpr ResetDeviceSettingsResponse::ResetDeviceSettingsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetDeviceSettingsResponseDefaultTypeInternal {
  constexpr ResetDeviceSettingsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetDeviceSettingsResponseDefaultTypeInternal() {}
  union {
    ResetDeviceSettingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetDeviceSettingsResponseDefaultTypeInternal _ResetDeviceSettingsResponse_default_instance_;
constexpr SetCalibrationRequest::SetCalibrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offsets_()
  , pa_ranges_()
  , first_channel_(0u)
  , last_channel_(0u){}
struct SetCalibrationRequestDefaultTypeInternal {
  constexpr SetCalibrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCalibrationRequestDefaultTypeInternal() {}
  union {
    SetCalibrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCalibrationRequestDefaultTypeInternal _SetCalibrationRequest_default_instance_;
constexpr SetCalibrationResponse::SetCalibrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetCalibrationResponseDefaultTypeInternal {
  constexpr SetCalibrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCalibrationResponseDefaultTypeInternal() {}
  union {
    SetCalibrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCalibrationResponseDefaultTypeInternal _SetCalibrationResponse_default_instance_;
constexpr ClearCalibrationRequest::ClearCalibrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClearCalibrationRequestDefaultTypeInternal {
  constexpr ClearCalibrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearCalibrationRequestDefaultTypeInternal() {}
  union {
    ClearCalibrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearCalibrationRequestDefaultTypeInternal _ClearCalibrationRequest_default_instance_;
constexpr ClearCalibrationResponse::ClearCalibrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClearCalibrationResponseDefaultTypeInternal {
  constexpr ClearCalibrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearCalibrationResponseDefaultTypeInternal() {}
  union {
    ClearCalibrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearCalibrationResponseDefaultTypeInternal _ClearCalibrationResponse_default_instance_;
constexpr GetCalibrationRequest::GetCalibrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_channel_(0u)
  , last_channel_(0u){}
struct GetCalibrationRequestDefaultTypeInternal {
  constexpr GetCalibrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCalibrationRequestDefaultTypeInternal() {}
  union {
    GetCalibrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCalibrationRequestDefaultTypeInternal _GetCalibrationRequest_default_instance_;
constexpr GetCalibrationResponse::GetCalibrationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offsets_()
  , pa_ranges_()
  , digitisation_(0u)
  , has_calibration_(false){}
struct GetCalibrationResponseDefaultTypeInternal {
  constexpr GetCalibrationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCalibrationResponseDefaultTypeInternal() {}
  union {
    GetCalibrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCalibrationResponseDefaultTypeInternal _GetCalibrationResponse_default_instance_;
constexpr SetTemperatureRequest_WaitForTemperatureSettings::SetTemperatureRequest_WaitForTemperatureSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeout_(0u)
  , tolerance_(0)
  , min_stable_duration_(0u){}
struct SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal {
  constexpr SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal() {}
  union {
    SetTemperatureRequest_WaitForTemperatureSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTemperatureRequest_WaitForTemperatureSettingsDefaultTypeInternal _SetTemperatureRequest_WaitForTemperatureSettings_default_instance_;
constexpr SetTemperatureRequest::SetTemperatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wait_for_temperature_(nullptr)
  , temperature_(0){}
struct SetTemperatureRequestDefaultTypeInternal {
  constexpr SetTemperatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTemperatureRequestDefaultTypeInternal() {}
  union {
    SetTemperatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTemperatureRequestDefaultTypeInternal _SetTemperatureRequest_default_instance_;
constexpr SetTemperatureResponse::SetTemperatureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timed_out_waiting_for_temperature_(false){}
struct SetTemperatureResponseDefaultTypeInternal {
  constexpr SetTemperatureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTemperatureResponseDefaultTypeInternal() {}
  union {
    SetTemperatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTemperatureResponseDefaultTypeInternal _SetTemperatureResponse_default_instance_;
constexpr GetTemperatureRequest::GetTemperatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetTemperatureRequestDefaultTypeInternal {
  constexpr GetTemperatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTemperatureRequestDefaultTypeInternal() {}
  union {
    GetTemperatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTemperatureRequestDefaultTypeInternal _GetTemperatureRequest_default_instance_;
constexpr GetTemperatureResponse_MinIONTemperature::GetTemperatureResponse_MinIONTemperature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asic_temperature_(nullptr)
  , heatsink_temperature_(nullptr){}
struct GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal {
  constexpr GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal() {}
  union {
    GetTemperatureResponse_MinIONTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTemperatureResponse_MinIONTemperatureDefaultTypeInternal _GetTemperatureResponse_MinIONTemperature_default_instance_;
constexpr GetTemperatureResponse_PromethIONTemperature::GetTemperatureResponse_PromethIONTemperature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flowcell_temperature_(nullptr)
  , chamber_temperature_(nullptr){}
struct GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal {
  constexpr GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal() {}
  union {
    GetTemperatureResponse_PromethIONTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTemperatureResponse_PromethIONTemperatureDefaultTypeInternal _GetTemperatureResponse_PromethIONTemperature_default_instance_;
constexpr GetTemperatureResponse::GetTemperatureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_temperature_(nullptr)
  , _oneof_case_{}{}
struct GetTemperatureResponseDefaultTypeInternal {
  constexpr GetTemperatureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTemperatureResponseDefaultTypeInternal() {}
  union {
    GetTemperatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTemperatureResponseDefaultTypeInternal _GetTemperatureResponse_default_instance_;
constexpr StreamTemperatureRequest::StreamTemperatureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : period_seconds_(0u){}
struct StreamTemperatureRequestDefaultTypeInternal {
  constexpr StreamTemperatureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamTemperatureRequestDefaultTypeInternal() {}
  union {
    StreamTemperatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamTemperatureRequestDefaultTypeInternal _StreamTemperatureRequest_default_instance_;
constexpr UnblockRequest::UnblockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0)
  , _oneof_case_{}{}
struct UnblockRequestDefaultTypeInternal {
  constexpr UnblockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnblockRequestDefaultTypeInternal() {}
  union {
    UnblockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnblockRequestDefaultTypeInternal _UnblockRequest_default_instance_;
constexpr UnblockResponse::UnblockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UnblockResponseDefaultTypeInternal {
  constexpr UnblockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnblockResponseDefaultTypeInternal() {}
  union {
    UnblockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnblockResponseDefaultTypeInternal _UnblockResponse_default_instance_;
constexpr CancelUnblocksRequest::CancelUnblocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CancelUnblocksRequestDefaultTypeInternal {
  constexpr CancelUnblocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelUnblocksRequestDefaultTypeInternal() {}
  union {
    CancelUnblocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelUnblocksRequestDefaultTypeInternal _CancelUnblocksRequest_default_instance_;
constexpr CancelUnblocksResponse::CancelUnblocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cancelled_unblocks_(0u){}
struct CancelUnblocksResponseDefaultTypeInternal {
  constexpr CancelUnblocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelUnblocksResponseDefaultTypeInternal() {}
  union {
    CancelUnblocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelUnblocksResponseDefaultTypeInternal _CancelUnblocksResponse_default_instance_;
constexpr GetChannelConfigurationRequest::GetChannelConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0){}
struct GetChannelConfigurationRequestDefaultTypeInternal {
  constexpr GetChannelConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelConfigurationRequestDefaultTypeInternal() {}
  union {
    GetChannelConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelConfigurationRequestDefaultTypeInternal _GetChannelConfigurationRequest_default_instance_;
constexpr GetChannelConfigurationResponse::GetChannelConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_configurations_(){}
struct GetChannelConfigurationResponseDefaultTypeInternal {
  constexpr GetChannelConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelConfigurationResponseDefaultTypeInternal() {}
  union {
    GetChannelConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelConfigurationResponseDefaultTypeInternal _GetChannelConfigurationResponse_default_instance_;
constexpr SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal {
  constexpr SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUseDefaultTypeInternal _SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse_default_instance_;
constexpr SetChannelConfigurationRequest::SetChannelConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_configurations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SetChannelConfigurationRequestDefaultTypeInternal {
  constexpr SetChannelConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetChannelConfigurationRequestDefaultTypeInternal() {}
  union {
    SetChannelConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetChannelConfigurationRequestDefaultTypeInternal _SetChannelConfigurationRequest_default_instance_;
constexpr SetChannelConfigurationResponse::SetChannelConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetChannelConfigurationResponseDefaultTypeInternal {
  constexpr SetChannelConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetChannelConfigurationResponseDefaultTypeInternal() {}
  union {
    SetChannelConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetChannelConfigurationResponseDefaultTypeInternal _SetChannelConfigurationResponse_default_instance_;
constexpr SetChannelConfigurationAllRequest::SetChannelConfigurationAllRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_configuration_(nullptr){}
struct SetChannelConfigurationAllRequestDefaultTypeInternal {
  constexpr SetChannelConfigurationAllRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetChannelConfigurationAllRequestDefaultTypeInternal() {}
  union {
    SetChannelConfigurationAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetChannelConfigurationAllRequestDefaultTypeInternal _SetChannelConfigurationAllRequest_default_instance_;
constexpr SetChannelConfigurationAllResponse::SetChannelConfigurationAllResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetChannelConfigurationAllResponseDefaultTypeInternal {
  constexpr SetChannelConfigurationAllResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetChannelConfigurationAllResponseDefaultTypeInternal() {}
  union {
    SetChannelConfigurationAllResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetChannelConfigurationAllResponseDefaultTypeInternal _SetChannelConfigurationAllResponse_default_instance_;
constexpr SaturationConfig_Thresholds::SaturationConfig_Thresholds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : general_threshold_(nullptr)
  , unblock_threshold_(nullptr)
  , user_general_threshold_(nullptr)
  , user_unblock_threshold_(nullptr){}
struct SaturationConfig_ThresholdsDefaultTypeInternal {
  constexpr SaturationConfig_ThresholdsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaturationConfig_ThresholdsDefaultTypeInternal() {}
  union {
    SaturationConfig_Thresholds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaturationConfig_ThresholdsDefaultTypeInternal _SaturationConfig_Thresholds_default_instance_;
constexpr SaturationConfig_SoftwareSaturation::SaturationConfig_SoftwareSaturation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : software_min_adc_(nullptr)
  , software_max_adc_(nullptr)
  , enabled_(false){}
struct SaturationConfig_SoftwareSaturationDefaultTypeInternal {
  constexpr SaturationConfig_SoftwareSaturationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaturationConfig_SoftwareSaturationDefaultTypeInternal() {}
  union {
    SaturationConfig_SoftwareSaturation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaturationConfig_SoftwareSaturationDefaultTypeInternal _SaturationConfig_SoftwareSaturation_default_instance_;
constexpr SaturationConfig_UserThresholdSaturation::SaturationConfig_UserThresholdSaturation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_threshold_min_pa_(nullptr)
  , user_threshold_max_pa_(nullptr)
  , enabled_(false){}
struct SaturationConfig_UserThresholdSaturationDefaultTypeInternal {
  constexpr SaturationConfig_UserThresholdSaturationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaturationConfig_UserThresholdSaturationDefaultTypeInternal() {}
  union {
    SaturationConfig_UserThresholdSaturation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaturationConfig_UserThresholdSaturationDefaultTypeInternal _SaturationConfig_UserThresholdSaturation_default_instance_;
constexpr SaturationConfig::SaturationConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thresholds_(nullptr)
  , software_saturation_(nullptr)
  , user_threshold_saturation_(nullptr){}
struct SaturationConfigDefaultTypeInternal {
  constexpr SaturationConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaturationConfigDefaultTypeInternal() {}
  union {
    SaturationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaturationConfigDefaultTypeInternal _SaturationConfig_default_instance_;
constexpr SetSaturationConfigRequest::SetSaturationConfigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(nullptr){}
struct SetSaturationConfigRequestDefaultTypeInternal {
  constexpr SetSaturationConfigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSaturationConfigRequestDefaultTypeInternal() {}
  union {
    SetSaturationConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSaturationConfigRequestDefaultTypeInternal _SetSaturationConfigRequest_default_instance_;
constexpr SetSaturationConfigResponse::SetSaturationConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetSaturationConfigResponseDefaultTypeInternal {
  constexpr SetSaturationConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSaturationConfigResponseDefaultTypeInternal() {}
  union {
    SetSaturationConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSaturationConfigResponseDefaultTypeInternal _SetSaturationConfigResponse_default_instance_;
constexpr GetSaturationConfigRequest::GetSaturationConfigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetSaturationConfigRequestDefaultTypeInternal {
  constexpr GetSaturationConfigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSaturationConfigRequestDefaultTypeInternal() {}
  union {
    GetSaturationConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSaturationConfigRequestDefaultTypeInternal _GetSaturationConfigRequest_default_instance_;
constexpr GetSaturationConfigResponse::GetSaturationConfigResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(nullptr){}
struct GetSaturationConfigResponseDefaultTypeInternal {
  constexpr GetSaturationConfigResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSaturationConfigResponseDefaultTypeInternal() {}
  union {
    GetSaturationConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSaturationConfigResponseDefaultTypeInternal _GetSaturationConfigResponse_default_instance_;
constexpr GetSampleRateRequest::GetSampleRateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetSampleRateRequestDefaultTypeInternal {
  constexpr GetSampleRateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSampleRateRequestDefaultTypeInternal() {}
  union {
    GetSampleRateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSampleRateRequestDefaultTypeInternal _GetSampleRateRequest_default_instance_;
constexpr GetSampleRateResponse::GetSampleRateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sample_rate_(0u){}
struct GetSampleRateResponseDefaultTypeInternal {
  constexpr GetSampleRateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSampleRateResponseDefaultTypeInternal() {}
  union {
    GetSampleRateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSampleRateResponseDefaultTypeInternal _GetSampleRateResponse_default_instance_;
constexpr SetSampleRateRequest::SetSampleRateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sample_rate_(0u){}
struct SetSampleRateRequestDefaultTypeInternal {
  constexpr SetSampleRateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSampleRateRequestDefaultTypeInternal() {}
  union {
    SetSampleRateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSampleRateRequestDefaultTypeInternal _SetSampleRateRequest_default_instance_;
constexpr SetSampleRateResponse::SetSampleRateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_sample_rate_(0u){}
struct SetSampleRateResponseDefaultTypeInternal {
  constexpr SetSampleRateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSampleRateResponseDefaultTypeInternal() {}
  union {
    SetSampleRateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSampleRateResponseDefaultTypeInternal _SetSampleRateResponse_default_instance_;
constexpr GetBiasVoltageRequest::GetBiasVoltageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBiasVoltageRequestDefaultTypeInternal {
  constexpr GetBiasVoltageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBiasVoltageRequestDefaultTypeInternal() {}
  union {
    GetBiasVoltageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBiasVoltageRequestDefaultTypeInternal _GetBiasVoltageRequest_default_instance_;
constexpr GetBiasVoltageResponse::GetBiasVoltageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bias_voltage_(0){}
struct GetBiasVoltageResponseDefaultTypeInternal {
  constexpr GetBiasVoltageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBiasVoltageResponseDefaultTypeInternal() {}
  union {
    GetBiasVoltageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBiasVoltageResponseDefaultTypeInternal _GetBiasVoltageResponse_default_instance_;
constexpr SetBiasVoltageRequest::SetBiasVoltageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bias_voltage_(0){}
struct SetBiasVoltageRequestDefaultTypeInternal {
  constexpr SetBiasVoltageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBiasVoltageRequestDefaultTypeInternal() {}
  union {
    SetBiasVoltageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBiasVoltageRequestDefaultTypeInternal _SetBiasVoltageRequest_default_instance_;
constexpr SetBiasVoltageResponse::SetBiasVoltageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetBiasVoltageResponseDefaultTypeInternal {
  constexpr SetBiasVoltageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBiasVoltageResponseDefaultTypeInternal() {}
  union {
    SetBiasVoltageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBiasVoltageResponseDefaultTypeInternal _SetBiasVoltageResponse_default_instance_;
}  // namespace device
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2fdevice_2eproto[62];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2fdevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelConfiguration, well_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelConfiguration, test_current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ReturnedChannelConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ReturnedChannelConfiguration, well_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ReturnedChannelConfiguration, test_current_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ReturnedChannelConfiguration, unblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse_ComponentVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse_ComponentVersion, component_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse_ComponentVersion, version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse_ComponentVersion, serial_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, device_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, is_simulated_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, max_channel_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, max_wells_per_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, can_set_temperature_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, digitisation_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceInfoResponse, firmware_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceStateResponse, device_state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetDeviceStateResponse, flow_cell_connector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::StreamDeviceStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, has_flow_cell_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, channel_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, wells_per_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, flow_cell_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, asic_id_str_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, user_specified_flow_cell_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, user_specified_product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, has_adapter_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, adapter_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, asic_version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetFlowCellInfoResponse, temperature_offset_nullable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::StreamFlowCellInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedFlowCellIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedFlowCellIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedProductCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedProductCodeRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetUserSpecifiedProductCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelsLayoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelsLayoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelsLayoutResponse, channel_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord_MuxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord_MuxRecord, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord_MuxRecord, phys_x_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord_MuxRecord, phys_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ChannelRecord, mux_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ResetDeviceSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ResetDeviceSettingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationRequest, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationRequest, last_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationRequest, offsets_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationRequest, pa_ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetCalibrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ClearCalibrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::ClearCalibrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationRequest, first_channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationRequest, last_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationResponse, digitisation_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationResponse, offsets_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationResponse, pa_ranges_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetCalibrationResponse, has_calibration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings, timeout_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings, min_stable_duration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings, tolerance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest, temperature_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureRequest, wait_for_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetTemperatureResponse, timed_out_waiting_for_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_MinIONTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_MinIONTemperature, asic_temperature_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_MinIONTemperature, heatsink_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature, flowcell_temperature_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature, chamber_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse, target_temperature_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetTemperatureResponse, temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::StreamTemperatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::StreamTemperatureRequest, period_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::UnblockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::UnblockRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::UnblockRequest, channels_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::UnblockRequest, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::UnblockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::CancelUnblocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::CancelUnblocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::CancelUnblocksResponse, cancelled_unblocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelConfigurationRequest, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetChannelConfigurationResponse, channel_configurations_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationRequest, channel_configurations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationAllRequest, channel_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetChannelConfigurationAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_Thresholds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_Thresholds, general_threshold_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_Thresholds, unblock_threshold_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_Thresholds, user_general_threshold_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_Thresholds, user_unblock_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_SoftwareSaturation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_SoftwareSaturation, enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_SoftwareSaturation, software_min_adc_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_SoftwareSaturation, software_max_adc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_UserThresholdSaturation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_UserThresholdSaturation, enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_UserThresholdSaturation, user_threshold_min_pa_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig_UserThresholdSaturation, user_threshold_max_pa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig, thresholds_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig, software_saturation_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SaturationConfig, user_threshold_saturation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSaturationConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSaturationConfigRequest, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSaturationConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSaturationConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSaturationConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSaturationConfigResponse, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSampleRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSampleRateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetSampleRateResponse, sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSampleRateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSampleRateRequest, sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSampleRateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetSampleRateResponse, real_sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetBiasVoltageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetBiasVoltageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::GetBiasVoltageResponse, bias_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetBiasVoltageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetBiasVoltageRequest, bias_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::device::SetBiasVoltageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::device::ChannelConfiguration)},
  { 8, -1, -1, sizeof(::minknow_api::device::ReturnedChannelConfiguration)},
  { 17, -1, -1, sizeof(::minknow_api::device::GetDeviceInfoRequest)},
  { 23, -1, -1, sizeof(::minknow_api::device::GetDeviceInfoResponse_ComponentVersion)},
  { 32, -1, -1, sizeof(::minknow_api::device::GetDeviceInfoResponse)},
  { 46, -1, -1, sizeof(::minknow_api::device::GetDeviceStateRequest)},
  { 52, -1, -1, sizeof(::minknow_api::device::GetDeviceStateResponse)},
  { 60, -1, -1, sizeof(::minknow_api::device::StreamDeviceStateRequest)},
  { 66, -1, -1, sizeof(::minknow_api::device::GetFlowCellInfoRequest)},
  { 72, -1, -1, sizeof(::minknow_api::device::GetFlowCellInfoResponse)},
  { 91, -1, -1, sizeof(::minknow_api::device::StreamFlowCellInfoRequest)},
  { 97, -1, -1, sizeof(::minknow_api::device::SetUserSpecifiedFlowCellIdRequest)},
  { 104, -1, -1, sizeof(::minknow_api::device::SetUserSpecifiedFlowCellIdResponse)},
  { 110, -1, -1, sizeof(::minknow_api::device::SetUserSpecifiedProductCodeRequest)},
  { 117, -1, -1, sizeof(::minknow_api::device::SetUserSpecifiedProductCodeResponse)},
  { 123, -1, -1, sizeof(::minknow_api::device::GetChannelsLayoutRequest)},
  { 129, -1, -1, sizeof(::minknow_api::device::GetChannelsLayoutResponse)},
  { 136, -1, -1, sizeof(::minknow_api::device::ChannelRecord_MuxRecord)},
  { 145, -1, -1, sizeof(::minknow_api::device::ChannelRecord)},
  { 154, -1, -1, sizeof(::minknow_api::device::ResetDeviceSettingsRequest)},
  { 160, -1, -1, sizeof(::minknow_api::device::ResetDeviceSettingsResponse)},
  { 166, -1, -1, sizeof(::minknow_api::device::SetCalibrationRequest)},
  { 176, -1, -1, sizeof(::minknow_api::device::SetCalibrationResponse)},
  { 182, -1, -1, sizeof(::minknow_api::device::ClearCalibrationRequest)},
  { 188, -1, -1, sizeof(::minknow_api::device::ClearCalibrationResponse)},
  { 194, -1, -1, sizeof(::minknow_api::device::GetCalibrationRequest)},
  { 202, -1, -1, sizeof(::minknow_api::device::GetCalibrationResponse)},
  { 212, -1, -1, sizeof(::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings)},
  { 221, -1, -1, sizeof(::minknow_api::device::SetTemperatureRequest)},
  { 229, -1, -1, sizeof(::minknow_api::device::SetTemperatureResponse)},
  { 236, -1, -1, sizeof(::minknow_api::device::GetTemperatureRequest)},
  { 242, -1, -1, sizeof(::minknow_api::device::GetTemperatureResponse_MinIONTemperature)},
  { 250, -1, -1, sizeof(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature)},
  { 258, -1, -1, sizeof(::minknow_api::device::GetTemperatureResponse)},
  { 268, -1, -1, sizeof(::minknow_api::device::StreamTemperatureRequest)},
  { 275, -1, -1, sizeof(::minknow_api::device::UnblockRequest)},
  { 285, -1, -1, sizeof(::minknow_api::device::UnblockResponse)},
  { 291, -1, -1, sizeof(::minknow_api::device::CancelUnblocksRequest)},
  { 297, -1, -1, sizeof(::minknow_api::device::CancelUnblocksResponse)},
  { 304, -1, -1, sizeof(::minknow_api::device::GetChannelConfigurationRequest)},
  { 311, -1, -1, sizeof(::minknow_api::device::GetChannelConfigurationResponse)},
  { 318, 326, -1, sizeof(::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse)},
  { 328, -1, -1, sizeof(::minknow_api::device::SetChannelConfigurationRequest)},
  { 335, -1, -1, sizeof(::minknow_api::device::SetChannelConfigurationResponse)},
  { 341, -1, -1, sizeof(::minknow_api::device::SetChannelConfigurationAllRequest)},
  { 348, -1, -1, sizeof(::minknow_api::device::SetChannelConfigurationAllResponse)},
  { 354, -1, -1, sizeof(::minknow_api::device::SaturationConfig_Thresholds)},
  { 364, -1, -1, sizeof(::minknow_api::device::SaturationConfig_SoftwareSaturation)},
  { 373, -1, -1, sizeof(::minknow_api::device::SaturationConfig_UserThresholdSaturation)},
  { 382, -1, -1, sizeof(::minknow_api::device::SaturationConfig)},
  { 391, -1, -1, sizeof(::minknow_api::device::SetSaturationConfigRequest)},
  { 398, -1, -1, sizeof(::minknow_api::device::SetSaturationConfigResponse)},
  { 404, -1, -1, sizeof(::minknow_api::device::GetSaturationConfigRequest)},
  { 410, -1, -1, sizeof(::minknow_api::device::GetSaturationConfigResponse)},
  { 417, -1, -1, sizeof(::minknow_api::device::GetSampleRateRequest)},
  { 423, -1, -1, sizeof(::minknow_api::device::GetSampleRateResponse)},
  { 430, -1, -1, sizeof(::minknow_api::device::SetSampleRateRequest)},
  { 437, -1, -1, sizeof(::minknow_api::device::SetSampleRateResponse)},
  { 444, -1, -1, sizeof(::minknow_api::device::GetBiasVoltageRequest)},
  { 450, -1, -1, sizeof(::minknow_api::device::GetBiasVoltageResponse)},
  { 457, -1, -1, sizeof(::minknow_api::device::SetBiasVoltageRequest)},
  { 464, -1, -1, sizeof(::minknow_api::device::SetBiasVoltageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ChannelConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ReturnedChannelConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetDeviceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetDeviceInfoResponse_ComponentVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetDeviceInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetDeviceStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetDeviceStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_StreamDeviceStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetFlowCellInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetFlowCellInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_StreamFlowCellInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetUserSpecifiedFlowCellIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetUserSpecifiedFlowCellIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetUserSpecifiedProductCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetUserSpecifiedProductCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetChannelsLayoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetChannelsLayoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ChannelRecord_MuxRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ChannelRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ResetDeviceSettingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ResetDeviceSettingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetCalibrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetCalibrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ClearCalibrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_ClearCalibrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetCalibrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetCalibrationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetTemperatureRequest_WaitForTemperatureSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetTemperatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetTemperatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetTemperatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetTemperatureResponse_MinIONTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetTemperatureResponse_PromethIONTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetTemperatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_StreamTemperatureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_UnblockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_UnblockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_CancelUnblocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_CancelUnblocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetChannelConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetChannelConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetChannelConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetChannelConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetChannelConfigurationAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetChannelConfigurationAllResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SaturationConfig_Thresholds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SaturationConfig_SoftwareSaturation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SaturationConfig_UserThresholdSaturation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SaturationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetSaturationConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetSaturationConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetSaturationConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetSaturationConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetSampleRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetSampleRateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetSampleRateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetSampleRateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetBiasVoltageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_GetBiasVoltageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetBiasVoltageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::device::_SetBiasVoltageResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030minknow_api/device.proto\022\022minknow_api."
  "device\032\035minknow_api/rpc_options.proto\032\036g"
  "oogle/protobuf/wrappers.proto\":\n\024Channel"
  "Configuration\022\014\n\004well\030\001 \001(\r\022\024\n\014test_curr"
  "ent\030\002 \001(\010\"S\n\034ReturnedChannelConfiguratio"
  "n\022\014\n\004well\030\001 \001(\r\022\024\n\014test_current\030\002 \001(\010\022\017\n"
  "\007unblock\030\004 \001(\010\"\026\n\024GetDeviceInfoRequest\"\362"
  "\003\n\025GetDeviceInfoResponse\022\021\n\tdevice_id\030\001 "
  "\001(\t\022I\n\013device_type\030\002 \001(\01624.minknow_api.d"
  "evice.GetDeviceInfoResponse.DeviceType\022\024"
  "\n\014is_simulated\030\003 \001(\010\022\031\n\021max_channel_coun"
  "t\030\004 \001(\r\022\035\n\025max_wells_per_channel\030\005 \001(\r\022\033"
  "\n\023can_set_temperature\030\006 \001(\010\022\024\n\014digitisat"
  "ion\030\007 \001(\r\022T\n\020firmware_version\030\n \003(\0132:.mi"
  "nknow_api.device.GetDeviceInfoResponse.C"
  "omponentVersion\032M\n\020ComponentVersion\022\021\n\tc"
  "omponent\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\025\n\rseria"
  "l_number\030\003 \001(\t\"S\n\nDeviceType\022\n\n\006MINION\020\000"
  "\022\013\n\007GRIDION\020\002\022\016\n\nPROMETHION\020\003\022\017\n\013MINION_"
  "MK1C\020\004\022\013\n\007TRAXION\020\005\"\027\n\025GetDeviceStateReq"
  "uest\"\350\001\n\026GetDeviceStateResponse\022L\n\014devic"
  "e_state\030\001 \001(\01626.minknow_api.device.GetDe"
  "viceStateResponse.DeviceState\022F\n\023flow_ce"
  "ll_connector\030\002 \001(\0162).minknow_api.device."
  "FlowCellConnectorType\"8\n\013DeviceState\022\027\n\023"
  "DEVICE_DISCONNECTED\020\000\022\020\n\014DEVICE_READY\020\001\""
  "\032\n\030StreamDeviceStateRequest\"\030\n\026GetFlowCe"
  "llInfoRequest\"\351\002\n\027GetFlowCellInfoRespons"
  "e\022\025\n\rhas_flow_cell\030\001 \001(\010\022\025\n\rchannel_coun"
  "t\030\002 \001(\r\022\031\n\021wells_per_channel\030\003 \001(\r\022\024\n\014fl"
  "ow_cell_id\030\004 \001(\t\022\023\n\013asic_id_str\030\r \001(\t\022\024\n"
  "\014product_code\030\006 \001(\t\022#\n\033user_specified_fl"
  "ow_cell_id\030\007 \001(\t\022#\n\033user_specified_produ"
  "ct_code\030\010 \001(\t\022\023\n\013has_adapter\030\t \001(\010\022\022\n\nad"
  "apter_id\030\n \001(\t\022\034\n\022temperature_offset\030\013 \001"
  "(\002H\000\022\024\n\014asic_version\030\014 \001(\tB\035\n\033temperatur"
  "e_offset_nullable\"\033\n\031StreamFlowCellInfoR"
  "equest\"5\n!SetUserSpecifiedFlowCellIdRequ"
  "est\022\020\n\002id\030\001 \001(\tB\004\210\265\030\001\"$\n\"SetUserSpecifie"
  "dFlowCellIdResponse\"8\n\"SetUserSpecifiedP"
  "roductCodeRequest\022\022\n\004code\030\001 \001(\tB\004\210\265\030\001\"%\n"
  "#SetUserSpecifiedProductCodeResponse\"\032\n\030"
  "GetChannelsLayoutRequest\"W\n\031GetChannelsL"
  "ayoutResponse\022:\n\017channel_records\030\001 \003(\0132!"
  ".minknow_api.device.ChannelRecord\"\244\001\n\rCh"
  "annelRecord\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022@\n"
  "\013mux_records\030\003 \003(\0132+.minknow_api.device."
  "ChannelRecord.MuxRecord\0327\n\tMuxRecord\022\n\n\002"
  "id\030\001 \001(\r\022\016\n\006phys_x\030\002 \001(\r\022\016\n\006phys_y\030\003 \001(\r"
  "\"\034\n\032ResetDeviceSettingsRequest\"\035\n\033ResetD"
  "eviceSettingsResponse\"\200\001\n\025SetCalibration"
  "Request\022\033\n\rfirst_channel\030\001 \001(\rB\004\210\265\030\001\022\032\n\014"
  "last_channel\030\002 \001(\rB\004\210\265\030\001\022\025\n\007offsets\030\003 \003("
  "\002B\004\210\265\030\001\022\027\n\tpa_ranges\030\004 \003(\002B\004\210\265\030\001\"\030\n\026SetC"
  "alibrationResponse\"\031\n\027ClearCalibrationRe"
  "quest\"\032\n\030ClearCalibrationResponse\"P\n\025Get"
  "CalibrationRequest\022\033\n\rfirst_channel\030\001 \001("
  "\rB\004\210\265\030\001\022\032\n\014last_channel\030\002 \001(\rB\004\210\265\030\001\"k\n\026G"
  "etCalibrationResponse\022\024\n\014digitisation\030\001 "
  "\001(\r\022\017\n\007offsets\030\002 \003(\002\022\021\n\tpa_ranges\030\003 \003(\002\022"
  "\027\n\017has_calibration\030\004 \001(\010\"\357\001\n\025SetTemperat"
  "ureRequest\022\023\n\013temperature\030\001 \001(\002\022b\n\024wait_"
  "for_temperature\030\002 \001(\0132D.minknow_api.devi"
  "ce.SetTemperatureRequest.WaitForTemperat"
  "ureSettings\032]\n\032WaitForTemperatureSetting"
  "s\022\017\n\007timeout\030\001 \001(\r\022\033\n\023min_stable_duratio"
  "n\030\003 \001(\r\022\021\n\ttolerance\030\002 \001(\002\"C\n\026SetTempera"
  "tureResponse\022)\n!timed_out_waiting_for_te"
  "mperature\030\001 \001(\010\"\027\n\025GetTemperatureRequest"
  "\"\237\004\n\026GetTemperatureResponse\022N\n\006minion\030\001 "
  "\001(\0132<.minknow_api.device.GetTemperatureR"
  "esponse.MinIONTemperatureH\000\022V\n\npromethio"
  "n\030\002 \001(\0132@.minknow_api.device.GetTemperat"
  "ureResponse.PromethIONTemperatureH\000\0227\n\022t"
  "arget_temperature\030\003 \001(\0132\033.google.protobu"
  "f.FloatValue\032\205\001\n\021MinIONTemperature\0225\n\020as"
  "ic_temperature\030\001 \001(\0132\033.google.protobuf.F"
  "loatValue\0229\n\024heatsink_temperature\030\002 \001(\0132"
  "\033.google.protobuf.FloatValue\032\214\001\n\025Prometh"
  "IONTemperature\0229\n\024flowcell_temperature\030\001"
  " \001(\0132\033.google.protobuf.FloatValue\0228\n\023cha"
  "mber_temperature\030\002 \001(\0132\033.google.protobuf"
  ".FloatValueB\r\n\013temperature\"2\n\030StreamTemp"
  "eratureRequest\022\026\n\016period_seconds\030\001 \001(\r\"q"
  "\n\016UnblockRequest\022\020\n\010channels\030\001 \003(\r\022\035\n\023du"
  "ration_in_seconds\030\002 \001(\rH\000\022\"\n\030duration_in"
  "_milliseconds\030\003 \001(\rH\000B\n\n\010duration\"\021\n\017Unb"
  "lockResponse\"\027\n\025CancelUnblocksRequest\"4\n"
  "\026CancelUnblocksResponse\022\032\n\022cancelled_unb"
  "locks\030\001 \001(\r\"2\n\036GetChannelConfigurationRe"
  "quest\022\020\n\010channels\030\001 \003(\r\"s\n\037GetChannelCon"
  "figurationResponse\022P\n\026channel_configurat"
  "ions\030\001 \003(\01320.minknow_api.device.Returned"
  "ChannelConfiguration\"\367\001\n\036SetChannelConfi"
  "gurationRequest\022m\n\026channel_configuration"
  "s\030\001 \003(\0132M.minknow_api.device.SetChannelC"
  "onfigurationRequest.ChannelConfiguration"
  "sEntry\032f\n\032ChannelConfigurationsEntry\022\013\n\003"
  "key\030\001 \001(\r\0227\n\005value\030\002 \001(\0132(.minknow_api.d"
  "evice.ChannelConfiguration:\0028\001\"!\n\037SetCha"
  "nnelConfigurationResponse\"r\n!SetChannelC"
  "onfigurationAllRequest\022M\n\025channel_config"
  "uration\030\001 \001(\0132(.minknow_api.device.Chann"
  "elConfigurationB\004\220\265\030\001\"$\n\"SetChannelConfi"
  "gurationAllResponse\"\306\006\n\020SaturationConfig"
  "\022C\n\nthresholds\030\001 \001(\0132/.minknow_api.devic"
  "e.SaturationConfig.Thresholds\022T\n\023softwar"
  "e_saturation\030\002 \001(\01327.minknow_api.device."
  "SaturationConfig.SoftwareSaturation\022_\n\031u"
  "ser_threshold_saturation\030\003 \001(\0132<.minknow"
  "_api.device.SaturationConfig.UserThresho"
  "ldSaturation\032\372\001\n\nThresholds\0227\n\021general_t"
  "hreshold\030\001 \001(\0132\034.google.protobuf.UInt32V"
  "alue\0227\n\021unblock_threshold\030\002 \001(\0132\034.google"
  ".protobuf.UInt32Value\022<\n\026user_general_th"
  "reshold\030\003 \001(\0132\034.google.protobuf.UInt32Va"
  "lue\022<\n\026user_unblock_threshold\030\004 \001(\0132\034.go"
  "ogle.protobuf.UInt32Value\032\223\001\n\022SoftwareSa"
  "turation\022\017\n\007enabled\030\001 \001(\010\0225\n\020software_mi"
  "n_adc\030\002 \001(\0132\033.google.protobuf.Int32Value"
  "\0225\n\020software_max_adc\030\003 \001(\0132\033.google.prot"
  "obuf.Int32Value\032\242\001\n\027UserThresholdSaturat"
  "ion\022\017\n\007enabled\030\001 \001(\010\022:\n\025user_threshold_m"
  "in_pa\030\002 \001(\0132\033.google.protobuf.FloatValue"
  "\022:\n\025user_threshold_max_pa\030\003 \001(\0132\033.google"
  ".protobuf.FloatValue\"Z\n\032SetSaturationCon"
  "figRequest\022<\n\010settings\030\001 \001(\0132$.minknow_a"
  "pi.device.SaturationConfigB\004\220\265\030\001\"\035\n\033SetS"
  "aturationConfigResponse\"\034\n\032GetSaturation"
  "ConfigRequest\"[\n\033GetSaturationConfigResp"
  "onse\022<\n\010settings\030\001 \001(\0132$.minknow_api.dev"
  "ice.SaturationConfigB\004\220\265\030\001\"\026\n\024GetSampleR"
  "ateRequest\",\n\025GetSampleRateResponse\022\023\n\013s"
  "ample_rate\030\001 \001(\r\"1\n\024SetSampleRateRequest"
  "\022\031\n\013sample_rate\030\001 \001(\rB\004\210\265\030\001\"1\n\025SetSample"
  "RateResponse\022\030\n\020real_sample_rate\030\001 \001(\r\"\027"
  "\n\025GetBiasVoltageRequest\".\n\026GetBiasVoltag"
  "eResponse\022\024\n\014bias_voltage\030\001 \001(\001\"3\n\025SetBi"
  "asVoltageRequest\022\032\n\014bias_voltage\030\001 \001(\001B\004"
  "\210\265\030\001\"\030\n\026SetBiasVoltageResponse*i\n\025FlowCe"
  "llConnectorType\022\021\n\rFCCON_NOT_SET\020\000\022\024\n\020FC"
  "CON_PROMETHION\020\001\022\024\n\020FCCON_MINION_MK1\020\002\022\021"
  "\n\rFCCON_FLONGLE\020\003*]\n\014SelectedWell\022\r\n\tWEL"
  "L_NONE\020\000\022\n\n\006WELL_1\020\001\022\n\n\006WELL_2\020\002\022\n\n\006WELL"
  "_3\020\003\022\n\n\006WELL_4\020\004\022\016\n\nWELL_OTHER\020\0052\313\030\n\rDev"
  "iceService\022k\n\017get_device_info\022(.minknow_"
  "api.device.GetDeviceInfoRequest\032).minkno"
  "w_api.device.GetDeviceInfoResponse\"\003\220\002\001\022"
  "n\n\020get_device_state\022).minknow_api.device"
  ".GetDeviceStateRequest\032*.minknow_api.dev"
  "ice.GetDeviceStateResponse\"\003\220\002\001\022v\n\023strea"
  "m_device_state\022,.minknow_api.device.Stre"
  "amDeviceStateRequest\032*.minknow_api.devic"
  "e.GetDeviceStateResponse\"\003\220\002\0010\001\022r\n\022get_f"
  "low_cell_info\022*.minknow_api.device.GetFl"
  "owCellInfoRequest\032+.minknow_api.device.G"
  "etFlowCellInfoResponse\"\003\220\002\001\022z\n\025stream_fl"
  "ow_cell_info\022-.minknow_api.device.Stream"
  "FlowCellInfoRequest\032+.minknow_api.device"
  ".GetFlowCellInfoResponse\"\003\220\002\0010\001\022\225\001\n\037set_"
  "user_specified_flow_cell_id\0225.minknow_ap"
  "i.device.SetUserSpecifiedFlowCellIdReque"
  "st\0326.minknow_api.device.SetUserSpecified"
  "FlowCellIdResponse\"\003\220\002\002\022\227\001\n\037set_user_spe"
  "cified_product_code\0226.minknow_api.device"
  ".SetUserSpecifiedProductCodeRequest\0327.mi"
  "nknow_api.device.SetUserSpecifiedProduct"
  "CodeResponse\"\003\220\002\002\022w\n\023get_channels_layout"
  "\022,.minknow_api.device.GetChannelsLayoutR"
  "equest\032-.minknow_api.device.GetChannelsL"
  "ayoutResponse\"\003\220\002\001\022}\n\025reset_device_setti"
  "ngs\022..minknow_api.device.ResetDeviceSett"
  "ingsRequest\032/.minknow_api.device.ResetDe"
  "viceSettingsResponse\"\003\220\002\002\022m\n\017set_calibra"
  "tion\022).minknow_api.device.SetCalibration"
  "Request\032*.minknow_api.device.SetCalibrat"
  "ionResponse\"\003\220\002\002\022s\n\021clear_calibration\022+."
  "minknow_api.device.ClearCalibrationReque"
  "st\032,.minknow_api.device.ClearCalibration"
  "Response\"\003\220\002\002\022m\n\017get_calibration\022).minkn"
  "ow_api.device.GetCalibrationRequest\032*.mi"
  "nknow_api.device.GetCalibrationResponse\""
  "\003\220\002\001\022m\n\017set_temperature\022).minknow_api.de"
  "vice.SetTemperatureRequest\032*.minknow_api"
  ".device.SetTemperatureResponse\"\003\220\002\002\022m\n\017g"
  "et_temperature\022).minknow_api.device.GetT"
  "emperatureRequest\032*.minknow_api.device.G"
  "etTemperatureResponse\"\003\220\002\001\022u\n\022stream_tem"
  "perature\022,.minknow_api.device.StreamTemp"
  "eratureRequest\032*.minknow_api.device.GetT"
  "emperatureResponse\"\003\220\002\0010\001\022T\n\007unblock\022\".m"
  "inknow_api.device.UnblockRequest\032#.minkn"
  "ow_api.device.UnblockResponse\"\000\022j\n\017cance"
  "l_unblocks\022).minknow_api.device.CancelUn"
  "blocksRequest\032*.minknow_api.device.Cance"
  "lUnblocksResponse\"\000\022\211\001\n\031get_channel_conf"
  "iguration\0222.minknow_api.device.GetChanne"
  "lConfigurationRequest\0323.minknow_api.devi"
  "ce.GetChannelConfigurationResponse\"\003\220\002\001\022"
  "\211\001\n\031set_channel_configuration\0222.minknow_"
  "api.device.SetChannelConfigurationReques"
  "t\0323.minknow_api.device.SetChannelConfigu"
  "rationResponse\"\003\220\002\002\022\223\001\n\035set_channel_conf"
  "iguration_all\0225.minknow_api.device.SetCh"
  "annelConfigurationAllRequest\0326.minknow_a"
  "pi.device.SetChannelConfigurationAllResp"
  "onse\"\003\220\002\002\022z\n\025set_saturation_config\022..min"
  "know_api.device.SetSaturationConfigReque"
  "st\032/.minknow_api.device.SetSaturationCon"
  "figResponse\"\000\022}\n\025get_saturation_config\022."
  ".minknow_api.device.GetSaturationConfigR"
  "equest\032/.minknow_api.device.GetSaturatio"
  "nConfigResponse\"\003\220\002\001\022k\n\017get_sample_rate\022"
  "(.minknow_api.device.GetSampleRateReques"
  "t\032).minknow_api.device.GetSampleRateResp"
  "onse\"\003\220\002\001\022k\n\017set_sample_rate\022(.minknow_a"
  "pi.device.SetSampleRateRequest\032).minknow"
  "_api.device.SetSampleRateResponse\"\003\220\002\002\022n"
  "\n\020get_bias_voltage\022).minknow_api.device."
  "GetBiasVoltageRequest\032*.minknow_api.devi"
  "ce.GetBiasVoltageResponse\"\003\220\002\001\022n\n\020set_bi"
  "as_voltage\022).minknow_api.device.SetBiasV"
  "oltageRequest\032*.minknow_api.device.SetBi"
  "asVoltageResponse\"\003\220\002\002B&\n\034com.nanoporete"
  "ch.minknow_api\242\002\005MKAPIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2fdevice_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2fdevice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fdevice_2eproto = {
  false, false, 8990, descriptor_table_protodef_minknow_5fapi_2fdevice_2eproto, "minknow_api/device.proto", 
  &descriptor_table_minknow_5fapi_2fdevice_2eproto_once, descriptor_table_minknow_5fapi_2fdevice_2eproto_deps, 2, 62,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2fdevice_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2fdevice_2eproto, file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto, file_level_service_descriptors_minknow_5fapi_2fdevice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2fdevice_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2fdevice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2fdevice_2eproto(&descriptor_table_minknow_5fapi_2fdevice_2eproto);
namespace minknow_api {
namespace device {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDeviceInfoResponse_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdevice_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto[0];
}
bool GetDeviceInfoResponse_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::MINION;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::GRIDION;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::PROMETHION;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::MINION_MK1C;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::TRAXION;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::DeviceType_MIN;
constexpr GetDeviceInfoResponse_DeviceType GetDeviceInfoResponse::DeviceType_MAX;
constexpr int GetDeviceInfoResponse::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDeviceStateResponse_DeviceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdevice_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto[1];
}
bool GetDeviceStateResponse_DeviceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse::DEVICE_DISCONNECTED;
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse::DEVICE_READY;
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse::DeviceState_MIN;
constexpr GetDeviceStateResponse_DeviceState GetDeviceStateResponse::DeviceState_MAX;
constexpr int GetDeviceStateResponse::DeviceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowCellConnectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdevice_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto[2];
}
bool FlowCellConnectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectedWell_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fdevice_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fdevice_2eproto[3];
}
bool SelectedWell_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChannelConfiguration::_Internal {
 public:
};

ChannelConfiguration::ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ChannelConfiguration)
}
ChannelConfiguration::ChannelConfiguration(const ChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&well_, &from.well_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_current_) -
    reinterpret_cast<char*>(&well_)) + sizeof(test_current_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ChannelConfiguration)
}

void ChannelConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&well_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&test_current_) -
    reinterpret_cast<char*>(&well_)) + sizeof(test_current_));
}

ChannelConfiguration::~ChannelConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.device.ChannelConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelConfiguration::ArenaDtor(void* object) {
  ChannelConfiguration* _this = reinterpret_cast< ChannelConfiguration* >(object);
  (void)_this;
}
void ChannelConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&well_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_current_) -
      reinterpret_cast<char*>(&well_)) + sizeof(test_current_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 well = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          well_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool test_current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          test_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 well = 1;
  if (this->_internal_well() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_well(), target);
  }

  // bool test_current = 2;
  if (this->_internal_test_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_test_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.ChannelConfiguration)
  return target;
}

size_t ChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.ChannelConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 well = 1;
  if (this->_internal_well() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_well());
  }

  // bool test_current = 2;
  if (this->_internal_test_current() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelConfiguration::GetClassData() const { return &_class_data_; }

void ChannelConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelConfiguration *>(to)->MergeFrom(
      static_cast<const ChannelConfiguration &>(from));
}


void ChannelConfiguration::MergeFrom(const ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.ChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_well() != 0) {
    _internal_set_well(from._internal_well());
  }
  if (from._internal_test_current() != 0) {
    _internal_set_test_current(from._internal_test_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelConfiguration::CopyFrom(const ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.ChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConfiguration::IsInitialized() const {
  return true;
}

void ChannelConfiguration::InternalSwap(ChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelConfiguration, test_current_)
      + sizeof(ChannelConfiguration::test_current_)
      - PROTOBUF_FIELD_OFFSET(ChannelConfiguration, well_)>(
          reinterpret_cast<char*>(&well_),
          reinterpret_cast<char*>(&other->well_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[0]);
}

// ===================================================================

class ReturnedChannelConfiguration::_Internal {
 public:
};

ReturnedChannelConfiguration::ReturnedChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ReturnedChannelConfiguration)
}
ReturnedChannelConfiguration::ReturnedChannelConfiguration(const ReturnedChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&well_, &from.well_,
    static_cast<size_t>(reinterpret_cast<char*>(&unblock_) -
    reinterpret_cast<char*>(&well_)) + sizeof(unblock_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ReturnedChannelConfiguration)
}

void ReturnedChannelConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&well_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unblock_) -
    reinterpret_cast<char*>(&well_)) + sizeof(unblock_));
}

ReturnedChannelConfiguration::~ReturnedChannelConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.device.ReturnedChannelConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReturnedChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReturnedChannelConfiguration::ArenaDtor(void* object) {
  ReturnedChannelConfiguration* _this = reinterpret_cast< ReturnedChannelConfiguration* >(object);
  (void)_this;
}
void ReturnedChannelConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReturnedChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReturnedChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.ReturnedChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&well_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblock_) -
      reinterpret_cast<char*>(&well_)) + sizeof(unblock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnedChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 well = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          well_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool test_current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          test_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unblock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          unblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReturnedChannelConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.ReturnedChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 well = 1;
  if (this->_internal_well() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_well(), target);
  }

  // bool test_current = 2;
  if (this->_internal_test_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_test_current(), target);
  }

  // bool unblock = 4;
  if (this->_internal_unblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_unblock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.ReturnedChannelConfiguration)
  return target;
}

size_t ReturnedChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.ReturnedChannelConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 well = 1;
  if (this->_internal_well() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_well());
  }

  // bool test_current = 2;
  if (this->_internal_test_current() != 0) {
    total_size += 1 + 1;
  }

  // bool unblock = 4;
  if (this->_internal_unblock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReturnedChannelConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReturnedChannelConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReturnedChannelConfiguration::GetClassData() const { return &_class_data_; }

void ReturnedChannelConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReturnedChannelConfiguration *>(to)->MergeFrom(
      static_cast<const ReturnedChannelConfiguration &>(from));
}


void ReturnedChannelConfiguration::MergeFrom(const ReturnedChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.ReturnedChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_well() != 0) {
    _internal_set_well(from._internal_well());
  }
  if (from._internal_test_current() != 0) {
    _internal_set_test_current(from._internal_test_current());
  }
  if (from._internal_unblock() != 0) {
    _internal_set_unblock(from._internal_unblock());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReturnedChannelConfiguration::CopyFrom(const ReturnedChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.ReturnedChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnedChannelConfiguration::IsInitialized() const {
  return true;
}

void ReturnedChannelConfiguration::InternalSwap(ReturnedChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReturnedChannelConfiguration, unblock_)
      + sizeof(ReturnedChannelConfiguration::unblock_)
      - PROTOBUF_FIELD_OFFSET(ReturnedChannelConfiguration, well_)>(
          reinterpret_cast<char*>(&well_),
          reinterpret_cast<char*>(&other->well_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnedChannelConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[1]);
}

// ===================================================================

class GetDeviceInfoRequest::_Internal {
 public:
};

GetDeviceInfoRequest::GetDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetDeviceInfoRequest)
}
GetDeviceInfoRequest::GetDeviceInfoRequest(const GetDeviceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetDeviceInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[2]);
}

// ===================================================================

class GetDeviceInfoResponse_ComponentVersion::_Internal {
 public:
};

GetDeviceInfoResponse_ComponentVersion::GetDeviceInfoResponse_ComponentVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
}
GetDeviceInfoResponse_ComponentVersion::GetDeviceInfoResponse_ComponentVersion(const GetDeviceInfoResponse_ComponentVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component().empty()) {
    component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial_number().empty()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
}

void GetDeviceInfoResponse_ComponentVersion::SharedCtor() {
component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeviceInfoResponse_ComponentVersion::~GetDeviceInfoResponse_ComponentVersion() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDeviceInfoResponse_ComponentVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceInfoResponse_ComponentVersion::ArenaDtor(void* object) {
  GetDeviceInfoResponse_ComponentVersion* _this = reinterpret_cast< GetDeviceInfoResponse_ComponentVersion* >(object);
  (void)_this;
}
void GetDeviceInfoResponse_ComponentVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceInfoResponse_ComponentVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceInfoResponse_ComponentVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_.ClearToEmpty();
  version_.ClearToEmpty();
  serial_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceInfoResponse_ComponentVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_component();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceInfoResponse_ComponentVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (!this->_internal_component().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.component");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string serial_number = 3;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetDeviceInfoResponse.ComponentVersion.serial_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  return target;
}

size_t GetDeviceInfoResponse_ComponentVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string component = 1;
  if (!this->_internal_component().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string serial_number = 3;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceInfoResponse_ComponentVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDeviceInfoResponse_ComponentVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceInfoResponse_ComponentVersion::GetClassData() const { return &_class_data_; }

void GetDeviceInfoResponse_ComponentVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDeviceInfoResponse_ComponentVersion *>(to)->MergeFrom(
      static_cast<const GetDeviceInfoResponse_ComponentVersion &>(from));
}


void GetDeviceInfoResponse_ComponentVersion::MergeFrom(const GetDeviceInfoResponse_ComponentVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_component().empty()) {
    _internal_set_component(from._internal_component());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_serial_number().empty()) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceInfoResponse_ComponentVersion::CopyFrom(const GetDeviceInfoResponse_ComponentVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetDeviceInfoResponse.ComponentVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceInfoResponse_ComponentVersion::IsInitialized() const {
  return true;
}

void GetDeviceInfoResponse_ComponentVersion::InternalSwap(GetDeviceInfoResponse_ComponentVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_, lhs_arena,
      &other->component_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_number_, lhs_arena,
      &other->serial_number_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceInfoResponse_ComponentVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[3]);
}

// ===================================================================

class GetDeviceInfoResponse::_Internal {
 public:
};

GetDeviceInfoResponse::GetDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  firmware_version_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetDeviceInfoResponse)
}
GetDeviceInfoResponse::GetDeviceInfoResponse(const GetDeviceInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      firmware_version_(from.firmware_version_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&device_type_, &from.device_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&digitisation_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(digitisation_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetDeviceInfoResponse)
}

void GetDeviceInfoResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&digitisation_) -
    reinterpret_cast<char*>(&device_type_)) + sizeof(digitisation_));
}

GetDeviceInfoResponse::~GetDeviceInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetDeviceInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDeviceInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeviceInfoResponse::ArenaDtor(void* object) {
  GetDeviceInfoResponse* _this = reinterpret_cast< GetDeviceInfoResponse* >(object);
  (void)_this;
}
void GetDeviceInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetDeviceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmware_version_.Clear();
  device_id_.ClearToEmpty();
  ::memset(&device_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digitisation_) -
      reinterpret_cast<char*>(&device_type_)) + sizeof(digitisation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetDeviceInfoResponse.device_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::minknow_api::device::GetDeviceInfoResponse_DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_simulated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_simulated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_channel_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_wells_per_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_wells_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_set_temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          can_set_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 digitisation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          digitisation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.device.GetDeviceInfoResponse.ComponentVersion firmware_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_firmware_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetDeviceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetDeviceInfoResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // .minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 2;
  if (this->_internal_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_device_type(), target);
  }

  // bool is_simulated = 3;
  if (this->_internal_is_simulated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_simulated(), target);
  }

  // uint32 max_channel_count = 4;
  if (this->_internal_max_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_channel_count(), target);
  }

  // uint32 max_wells_per_channel = 5;
  if (this->_internal_max_wells_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_wells_per_channel(), target);
  }

  // bool can_set_temperature = 6;
  if (this->_internal_can_set_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_can_set_temperature(), target);
  }

  // uint32 digitisation = 7;
  if (this->_internal_digitisation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_digitisation(), target);
  }

  // repeated .minknow_api.device.GetDeviceInfoResponse.ComponentVersion firmware_version = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_firmware_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_firmware_version(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetDeviceInfoResponse)
  return target;
}

size_t GetDeviceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetDeviceInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.device.GetDeviceInfoResponse.ComponentVersion firmware_version = 10;
  total_size += 1UL * this->_internal_firmware_version_size();
  for (const auto& msg : this->firmware_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_id = 1;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .minknow_api.device.GetDeviceInfoResponse.DeviceType device_type = 2;
  if (this->_internal_device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  // uint32 max_channel_count = 4;
  if (this->_internal_max_channel_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_channel_count());
  }

  // bool is_simulated = 3;
  if (this->_internal_is_simulated() != 0) {
    total_size += 1 + 1;
  }

  // bool can_set_temperature = 6;
  if (this->_internal_can_set_temperature() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_wells_per_channel = 5;
  if (this->_internal_max_wells_per_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_wells_per_channel());
  }

  // uint32 digitisation = 7;
  if (this->_internal_digitisation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_digitisation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDeviceInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceInfoResponse::GetClassData() const { return &_class_data_; }

void GetDeviceInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDeviceInfoResponse *>(to)->MergeFrom(
      static_cast<const GetDeviceInfoResponse &>(from));
}


void GetDeviceInfoResponse::MergeFrom(const GetDeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetDeviceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  firmware_version_.MergeFrom(from.firmware_version_);
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_device_type() != 0) {
    _internal_set_device_type(from._internal_device_type());
  }
  if (from._internal_max_channel_count() != 0) {
    _internal_set_max_channel_count(from._internal_max_channel_count());
  }
  if (from._internal_is_simulated() != 0) {
    _internal_set_is_simulated(from._internal_is_simulated());
  }
  if (from._internal_can_set_temperature() != 0) {
    _internal_set_can_set_temperature(from._internal_can_set_temperature());
  }
  if (from._internal_max_wells_per_channel() != 0) {
    _internal_set_max_wells_per_channel(from._internal_max_wells_per_channel());
  }
  if (from._internal_digitisation() != 0) {
    _internal_set_digitisation(from._internal_digitisation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceInfoResponse::CopyFrom(const GetDeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetDeviceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceInfoResponse::IsInitialized() const {
  return true;
}

void GetDeviceInfoResponse::InternalSwap(GetDeviceInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  firmware_version_.InternalSwap(&other->firmware_version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, lhs_arena,
      &other->device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceInfoResponse, digitisation_)
      + sizeof(GetDeviceInfoResponse::digitisation_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceInfoResponse, device_type_)>(
          reinterpret_cast<char*>(&device_type_),
          reinterpret_cast<char*>(&other->device_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[4]);
}

// ===================================================================

class GetDeviceStateRequest::_Internal {
 public:
};

GetDeviceStateRequest::GetDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetDeviceStateRequest)
}
GetDeviceStateRequest::GetDeviceStateRequest(const GetDeviceStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetDeviceStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceStateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[5]);
}

// ===================================================================

class GetDeviceStateResponse::_Internal {
 public:
};

GetDeviceStateResponse::GetDeviceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetDeviceStateResponse)
}
GetDeviceStateResponse::GetDeviceStateResponse(const GetDeviceStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&device_state_, &from.device_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&flow_cell_connector_) -
    reinterpret_cast<char*>(&device_state_)) + sizeof(flow_cell_connector_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetDeviceStateResponse)
}

void GetDeviceStateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flow_cell_connector_) -
    reinterpret_cast<char*>(&device_state_)) + sizeof(flow_cell_connector_));
}

GetDeviceStateResponse::~GetDeviceStateResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetDeviceStateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDeviceStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDeviceStateResponse::ArenaDtor(void* object) {
  GetDeviceStateResponse* _this = reinterpret_cast< GetDeviceStateResponse* >(object);
  (void)_this;
}
void GetDeviceStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDeviceStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDeviceStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetDeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&device_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flow_cell_connector_) -
      reinterpret_cast<char*>(&device_state_)) + sizeof(flow_cell_connector_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeviceStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_state(static_cast<::minknow_api::device::GetDeviceStateResponse_DeviceState>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.FlowCellConnectorType flow_cell_connector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flow_cell_connector(static_cast<::minknow_api::device::FlowCellConnectorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetDeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
  if (this->_internal_device_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_state(), target);
  }

  // .minknow_api.device.FlowCellConnectorType flow_cell_connector = 2;
  if (this->_internal_flow_cell_connector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_flow_cell_connector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetDeviceStateResponse)
  return target;
}

size_t GetDeviceStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetDeviceStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
  if (this->_internal_device_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_state());
  }

  // .minknow_api.device.FlowCellConnectorType flow_cell_connector = 2;
  if (this->_internal_flow_cell_connector() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flow_cell_connector());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeviceStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDeviceStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeviceStateResponse::GetClassData() const { return &_class_data_; }

void GetDeviceStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDeviceStateResponse *>(to)->MergeFrom(
      static_cast<const GetDeviceStateResponse &>(from));
}


void GetDeviceStateResponse::MergeFrom(const GetDeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetDeviceStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_device_state() != 0) {
    _internal_set_device_state(from._internal_device_state());
  }
  if (from._internal_flow_cell_connector() != 0) {
    _internal_set_flow_cell_connector(from._internal_flow_cell_connector());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeviceStateResponse::CopyFrom(const GetDeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetDeviceStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceStateResponse::IsInitialized() const {
  return true;
}

void GetDeviceStateResponse::InternalSwap(GetDeviceStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDeviceStateResponse, flow_cell_connector_)
      + sizeof(GetDeviceStateResponse::flow_cell_connector_)
      - PROTOBUF_FIELD_OFFSET(GetDeviceStateResponse, device_state_)>(
          reinterpret_cast<char*>(&device_state_),
          reinterpret_cast<char*>(&other->device_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[6]);
}

// ===================================================================

class StreamDeviceStateRequest::_Internal {
 public:
};

StreamDeviceStateRequest::StreamDeviceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.StreamDeviceStateRequest)
}
StreamDeviceStateRequest::StreamDeviceStateRequest(const StreamDeviceStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.StreamDeviceStateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDeviceStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDeviceStateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamDeviceStateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[7]);
}

// ===================================================================

class GetFlowCellInfoRequest::_Internal {
 public:
};

GetFlowCellInfoRequest::GetFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetFlowCellInfoRequest)
}
GetFlowCellInfoRequest::GetFlowCellInfoRequest(const GetFlowCellInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetFlowCellInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlowCellInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlowCellInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetFlowCellInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[8]);
}

// ===================================================================

class GetFlowCellInfoResponse::_Internal {
 public:
};

GetFlowCellInfoResponse::GetFlowCellInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetFlowCellInfoResponse)
}
GetFlowCellInfoResponse::GetFlowCellInfoResponse(const GetFlowCellInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_cell_id().empty()) {
    flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_id(), 
      GetArenaForAllocation());
  }
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_code(), 
      GetArenaForAllocation());
  }
  user_specified_flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_specified_flow_cell_id().empty()) {
    user_specified_flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_specified_flow_cell_id(), 
      GetArenaForAllocation());
  }
  user_specified_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_specified_product_code().empty()) {
    user_specified_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_specified_product_code(), 
      GetArenaForAllocation());
  }
  adapter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_adapter_id().empty()) {
    adapter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_adapter_id(), 
      GetArenaForAllocation());
  }
  asic_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asic_version().empty()) {
    asic_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asic_version(), 
      GetArenaForAllocation());
  }
  asic_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asic_id_str().empty()) {
    asic_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asic_id_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&channel_count_, &from.channel_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_adapter_) -
    reinterpret_cast<char*>(&channel_count_)) + sizeof(has_adapter_));
  clear_has_temperature_offset_nullable();
  switch (from.temperature_offset_nullable_case()) {
    case kTemperatureOffset: {
      _internal_set_temperature_offset(from._internal_temperature_offset());
      break;
    }
    case TEMPERATURE_OFFSET_NULLABLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetFlowCellInfoResponse)
}

void GetFlowCellInfoResponse::SharedCtor() {
flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_specified_flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_specified_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
adapter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asic_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asic_id_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_adapter_) -
    reinterpret_cast<char*>(&channel_count_)) + sizeof(has_adapter_));
clear_has_temperature_offset_nullable();
}

GetFlowCellInfoResponse::~GetFlowCellInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetFlowCellInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFlowCellInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flow_cell_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_specified_flow_cell_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_specified_product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adapter_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asic_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asic_id_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_temperature_offset_nullable()) {
    clear_temperature_offset_nullable();
  }
}

void GetFlowCellInfoResponse::ArenaDtor(void* object) {
  GetFlowCellInfoResponse* _this = reinterpret_cast< GetFlowCellInfoResponse* >(object);
  (void)_this;
}
void GetFlowCellInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlowCellInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFlowCellInfoResponse::clear_temperature_offset_nullable() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.device.GetFlowCellInfoResponse)
  switch (temperature_offset_nullable_case()) {
    case kTemperatureOffset: {
      // No need to clear
      break;
    }
    case TEMPERATURE_OFFSET_NULLABLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEMPERATURE_OFFSET_NULLABLE_NOT_SET;
}


void GetFlowCellInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetFlowCellInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_cell_id_.ClearToEmpty();
  product_code_.ClearToEmpty();
  user_specified_flow_cell_id_.ClearToEmpty();
  user_specified_product_code_.ClearToEmpty();
  adapter_id_.ClearToEmpty();
  asic_version_.ClearToEmpty();
  asic_id_str_.ClearToEmpty();
  ::memset(&channel_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_adapter_) -
      reinterpret_cast<char*>(&channel_count_)) + sizeof(has_adapter_));
  clear_temperature_offset_nullable();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlowCellInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_flow_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_flow_cell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channel_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wells_per_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wells_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string flow_cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_flow_cell_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.flow_cell_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string product_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_specified_flow_cell_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_specified_flow_cell_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_specified_product_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_user_specified_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_adapter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          has_adapter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string adapter_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_adapter_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.adapter_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float temperature_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _internal_set_temperature_offset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string asic_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_asic_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.asic_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asic_id_str = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_asic_id_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.GetFlowCellInfoResponse.asic_id_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlowCellInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetFlowCellInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_flow_cell = 1;
  if (this->_internal_has_flow_cell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_flow_cell(), target);
  }

  // uint32 channel_count = 2;
  if (this->_internal_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_count(), target);
  }

  // uint32 wells_per_channel = 3;
  if (this->_internal_wells_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wells_per_channel(), target);
  }

  // string flow_cell_id = 4;
  if (!this->_internal_flow_cell_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_id().data(), static_cast<int>(this->_internal_flow_cell_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.flow_cell_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_flow_cell_id(), target);
  }

  // string product_code = 6;
  if (!this->_internal_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.product_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product_code(), target);
  }

  // string user_specified_flow_cell_id = 7;
  if (!this->_internal_user_specified_flow_cell_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_specified_flow_cell_id().data(), static_cast<int>(this->_internal_user_specified_flow_cell_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.user_specified_flow_cell_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_specified_flow_cell_id(), target);
  }

  // string user_specified_product_code = 8;
  if (!this->_internal_user_specified_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_specified_product_code().data(), static_cast<int>(this->_internal_user_specified_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.user_specified_product_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_specified_product_code(), target);
  }

  // bool has_adapter = 9;
  if (this->_internal_has_adapter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_has_adapter(), target);
  }

  // string adapter_id = 10;
  if (!this->_internal_adapter_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_adapter_id().data(), static_cast<int>(this->_internal_adapter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.adapter_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_adapter_id(), target);
  }

  // float temperature_offset = 11;
  if (_internal_has_temperature_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_temperature_offset(), target);
  }

  // string asic_version = 12;
  if (!this->_internal_asic_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asic_version().data(), static_cast<int>(this->_internal_asic_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.asic_version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_asic_version(), target);
  }

  // string asic_id_str = 13;
  if (!this->_internal_asic_id_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asic_id_str().data(), static_cast<int>(this->_internal_asic_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.GetFlowCellInfoResponse.asic_id_str");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_asic_id_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetFlowCellInfoResponse)
  return target;
}

size_t GetFlowCellInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetFlowCellInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flow_cell_id = 4;
  if (!this->_internal_flow_cell_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_id());
  }

  // string product_code = 6;
  if (!this->_internal_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // string user_specified_flow_cell_id = 7;
  if (!this->_internal_user_specified_flow_cell_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_specified_flow_cell_id());
  }

  // string user_specified_product_code = 8;
  if (!this->_internal_user_specified_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_specified_product_code());
  }

  // string adapter_id = 10;
  if (!this->_internal_adapter_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_adapter_id());
  }

  // string asic_version = 12;
  if (!this->_internal_asic_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asic_version());
  }

  // string asic_id_str = 13;
  if (!this->_internal_asic_id_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asic_id_str());
  }

  // uint32 channel_count = 2;
  if (this->_internal_channel_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_count());
  }

  // uint32 wells_per_channel = 3;
  if (this->_internal_wells_per_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_wells_per_channel());
  }

  // bool has_flow_cell = 1;
  if (this->_internal_has_flow_cell() != 0) {
    total_size += 1 + 1;
  }

  // bool has_adapter = 9;
  if (this->_internal_has_adapter() != 0) {
    total_size += 1 + 1;
  }

  switch (temperature_offset_nullable_case()) {
    // float temperature_offset = 11;
    case kTemperatureOffset: {
      total_size += 1 + 4;
      break;
    }
    case TEMPERATURE_OFFSET_NULLABLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlowCellInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFlowCellInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlowCellInfoResponse::GetClassData() const { return &_class_data_; }

void GetFlowCellInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFlowCellInfoResponse *>(to)->MergeFrom(
      static_cast<const GetFlowCellInfoResponse &>(from));
}


void GetFlowCellInfoResponse::MergeFrom(const GetFlowCellInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetFlowCellInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flow_cell_id().empty()) {
    _internal_set_flow_cell_id(from._internal_flow_cell_id());
  }
  if (!from._internal_product_code().empty()) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (!from._internal_user_specified_flow_cell_id().empty()) {
    _internal_set_user_specified_flow_cell_id(from._internal_user_specified_flow_cell_id());
  }
  if (!from._internal_user_specified_product_code().empty()) {
    _internal_set_user_specified_product_code(from._internal_user_specified_product_code());
  }
  if (!from._internal_adapter_id().empty()) {
    _internal_set_adapter_id(from._internal_adapter_id());
  }
  if (!from._internal_asic_version().empty()) {
    _internal_set_asic_version(from._internal_asic_version());
  }
  if (!from._internal_asic_id_str().empty()) {
    _internal_set_asic_id_str(from._internal_asic_id_str());
  }
  if (from._internal_channel_count() != 0) {
    _internal_set_channel_count(from._internal_channel_count());
  }
  if (from._internal_wells_per_channel() != 0) {
    _internal_set_wells_per_channel(from._internal_wells_per_channel());
  }
  if (from._internal_has_flow_cell() != 0) {
    _internal_set_has_flow_cell(from._internal_has_flow_cell());
  }
  if (from._internal_has_adapter() != 0) {
    _internal_set_has_adapter(from._internal_has_adapter());
  }
  switch (from.temperature_offset_nullable_case()) {
    case kTemperatureOffset: {
      _internal_set_temperature_offset(from._internal_temperature_offset());
      break;
    }
    case TEMPERATURE_OFFSET_NULLABLE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlowCellInfoResponse::CopyFrom(const GetFlowCellInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetFlowCellInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlowCellInfoResponse::IsInitialized() const {
  return true;
}

void GetFlowCellInfoResponse::InternalSwap(GetFlowCellInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_id_, lhs_arena,
      &other->flow_cell_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_code_, lhs_arena,
      &other->product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_specified_flow_cell_id_, lhs_arena,
      &other->user_specified_flow_cell_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_specified_product_code_, lhs_arena,
      &other->user_specified_product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &adapter_id_, lhs_arena,
      &other->adapter_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asic_version_, lhs_arena,
      &other->asic_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asic_id_str_, lhs_arena,
      &other->asic_id_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlowCellInfoResponse, has_adapter_)
      + sizeof(GetFlowCellInfoResponse::has_adapter_)
      - PROTOBUF_FIELD_OFFSET(GetFlowCellInfoResponse, channel_count_)>(
          reinterpret_cast<char*>(&channel_count_),
          reinterpret_cast<char*>(&other->channel_count_));
  swap(temperature_offset_nullable_, other->temperature_offset_nullable_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlowCellInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[9]);
}

// ===================================================================

class StreamFlowCellInfoRequest::_Internal {
 public:
};

StreamFlowCellInfoRequest::StreamFlowCellInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.StreamFlowCellInfoRequest)
}
StreamFlowCellInfoRequest::StreamFlowCellInfoRequest(const StreamFlowCellInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.StreamFlowCellInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamFlowCellInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamFlowCellInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamFlowCellInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[10]);
}

// ===================================================================

class SetUserSpecifiedFlowCellIdRequest::_Internal {
 public:
};

SetUserSpecifiedFlowCellIdRequest::SetUserSpecifiedFlowCellIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
}
SetUserSpecifiedFlowCellIdRequest::SetUserSpecifiedFlowCellIdRequest(const SetUserSpecifiedFlowCellIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
}

void SetUserSpecifiedFlowCellIdRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetUserSpecifiedFlowCellIdRequest::~SetUserSpecifiedFlowCellIdRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetUserSpecifiedFlowCellIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetUserSpecifiedFlowCellIdRequest::ArenaDtor(void* object) {
  SetUserSpecifiedFlowCellIdRequest* _this = reinterpret_cast< SetUserSpecifiedFlowCellIdRequest* >(object);
  (void)_this;
}
void SetUserSpecifiedFlowCellIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUserSpecifiedFlowCellIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetUserSpecifiedFlowCellIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserSpecifiedFlowCellIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUserSpecifiedFlowCellIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.SetUserSpecifiedFlowCellIdRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  return target;
}

size_t SetUserSpecifiedFlowCellIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserSpecifiedFlowCellIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetUserSpecifiedFlowCellIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserSpecifiedFlowCellIdRequest::GetClassData() const { return &_class_data_; }

void SetUserSpecifiedFlowCellIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetUserSpecifiedFlowCellIdRequest *>(to)->MergeFrom(
      static_cast<const SetUserSpecifiedFlowCellIdRequest &>(from));
}


void SetUserSpecifiedFlowCellIdRequest::MergeFrom(const SetUserSpecifiedFlowCellIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserSpecifiedFlowCellIdRequest::CopyFrom(const SetUserSpecifiedFlowCellIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetUserSpecifiedFlowCellIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserSpecifiedFlowCellIdRequest::IsInitialized() const {
  return true;
}

void SetUserSpecifiedFlowCellIdRequest::InternalSwap(SetUserSpecifiedFlowCellIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserSpecifiedFlowCellIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[11]);
}

// ===================================================================

class SetUserSpecifiedFlowCellIdResponse::_Internal {
 public:
};

SetUserSpecifiedFlowCellIdResponse::SetUserSpecifiedFlowCellIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetUserSpecifiedFlowCellIdResponse)
}
SetUserSpecifiedFlowCellIdResponse::SetUserSpecifiedFlowCellIdResponse(const SetUserSpecifiedFlowCellIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetUserSpecifiedFlowCellIdResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserSpecifiedFlowCellIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserSpecifiedFlowCellIdResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetUserSpecifiedFlowCellIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[12]);
}

// ===================================================================

class SetUserSpecifiedProductCodeRequest::_Internal {
 public:
};

SetUserSpecifiedProductCodeRequest::SetUserSpecifiedProductCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetUserSpecifiedProductCodeRequest)
}
SetUserSpecifiedProductCodeRequest::SetUserSpecifiedProductCodeRequest(const SetUserSpecifiedProductCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetUserSpecifiedProductCodeRequest)
}

void SetUserSpecifiedProductCodeRequest::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetUserSpecifiedProductCodeRequest::~SetUserSpecifiedProductCodeRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetUserSpecifiedProductCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetUserSpecifiedProductCodeRequest::ArenaDtor(void* object) {
  SetUserSpecifiedProductCodeRequest* _this = reinterpret_cast< SetUserSpecifiedProductCodeRequest* >(object);
  (void)_this;
}
void SetUserSpecifiedProductCodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUserSpecifiedProductCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetUserSpecifiedProductCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUserSpecifiedProductCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.SetUserSpecifiedProductCodeRequest.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetUserSpecifiedProductCodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.SetUserSpecifiedProductCodeRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  return target;
}

size_t SetUserSpecifiedProductCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserSpecifiedProductCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetUserSpecifiedProductCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserSpecifiedProductCodeRequest::GetClassData() const { return &_class_data_; }

void SetUserSpecifiedProductCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetUserSpecifiedProductCodeRequest *>(to)->MergeFrom(
      static_cast<const SetUserSpecifiedProductCodeRequest &>(from));
}


void SetUserSpecifiedProductCodeRequest::MergeFrom(const SetUserSpecifiedProductCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUserSpecifiedProductCodeRequest::CopyFrom(const SetUserSpecifiedProductCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetUserSpecifiedProductCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserSpecifiedProductCodeRequest::IsInitialized() const {
  return true;
}

void SetUserSpecifiedProductCodeRequest::InternalSwap(SetUserSpecifiedProductCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUserSpecifiedProductCodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[13]);
}

// ===================================================================

class SetUserSpecifiedProductCodeResponse::_Internal {
 public:
};

SetUserSpecifiedProductCodeResponse::SetUserSpecifiedProductCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetUserSpecifiedProductCodeResponse)
}
SetUserSpecifiedProductCodeResponse::SetUserSpecifiedProductCodeResponse(const SetUserSpecifiedProductCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetUserSpecifiedProductCodeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUserSpecifiedProductCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUserSpecifiedProductCodeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetUserSpecifiedProductCodeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[14]);
}

// ===================================================================

class GetChannelsLayoutRequest::_Internal {
 public:
};

GetChannelsLayoutRequest::GetChannelsLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetChannelsLayoutRequest)
}
GetChannelsLayoutRequest::GetChannelsLayoutRequest(const GetChannelsLayoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetChannelsLayoutRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelsLayoutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelsLayoutRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetChannelsLayoutRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[15]);
}

// ===================================================================

class GetChannelsLayoutResponse::_Internal {
 public:
};

GetChannelsLayoutResponse::GetChannelsLayoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetChannelsLayoutResponse)
}
GetChannelsLayoutResponse::GetChannelsLayoutResponse(const GetChannelsLayoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_records_(from.channel_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetChannelsLayoutResponse)
}

void GetChannelsLayoutResponse::SharedCtor() {
}

GetChannelsLayoutResponse::~GetChannelsLayoutResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetChannelsLayoutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelsLayoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelsLayoutResponse::ArenaDtor(void* object) {
  GetChannelsLayoutResponse* _this = reinterpret_cast< GetChannelsLayoutResponse* >(object);
  (void)_this;
}
void GetChannelsLayoutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelsLayoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelsLayoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetChannelsLayoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelsLayoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.device.ChannelRecord channel_records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelsLayoutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetChannelsLayoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.device.ChannelRecord channel_records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetChannelsLayoutResponse)
  return target;
}

size_t GetChannelsLayoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetChannelsLayoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.device.ChannelRecord channel_records = 1;
  total_size += 1UL * this->_internal_channel_records_size();
  for (const auto& msg : this->channel_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelsLayoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelsLayoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelsLayoutResponse::GetClassData() const { return &_class_data_; }

void GetChannelsLayoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelsLayoutResponse *>(to)->MergeFrom(
      static_cast<const GetChannelsLayoutResponse &>(from));
}


void GetChannelsLayoutResponse::MergeFrom(const GetChannelsLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetChannelsLayoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_records_.MergeFrom(from.channel_records_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelsLayoutResponse::CopyFrom(const GetChannelsLayoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetChannelsLayoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelsLayoutResponse::IsInitialized() const {
  return true;
}

void GetChannelsLayoutResponse::InternalSwap(GetChannelsLayoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_records_.InternalSwap(&other->channel_records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelsLayoutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[16]);
}

// ===================================================================

class ChannelRecord_MuxRecord::_Internal {
 public:
};

ChannelRecord_MuxRecord::ChannelRecord_MuxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ChannelRecord.MuxRecord)
}
ChannelRecord_MuxRecord::ChannelRecord_MuxRecord(const ChannelRecord_MuxRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phys_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(phys_y_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ChannelRecord.MuxRecord)
}

void ChannelRecord_MuxRecord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phys_y_) -
    reinterpret_cast<char*>(&id_)) + sizeof(phys_y_));
}

ChannelRecord_MuxRecord::~ChannelRecord_MuxRecord() {
  // @@protoc_insertion_point(destructor:minknow_api.device.ChannelRecord.MuxRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelRecord_MuxRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelRecord_MuxRecord::ArenaDtor(void* object) {
  ChannelRecord_MuxRecord* _this = reinterpret_cast< ChannelRecord_MuxRecord* >(object);
  (void)_this;
}
void ChannelRecord_MuxRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelRecord_MuxRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelRecord_MuxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.ChannelRecord.MuxRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phys_y_) -
      reinterpret_cast<char*>(&id_)) + sizeof(phys_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelRecord_MuxRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phys_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          phys_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phys_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phys_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelRecord_MuxRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.ChannelRecord.MuxRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 phys_x = 2;
  if (this->_internal_phys_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_phys_x(), target);
  }

  // uint32 phys_y = 3;
  if (this->_internal_phys_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phys_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.ChannelRecord.MuxRecord)
  return target;
}

size_t ChannelRecord_MuxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.ChannelRecord.MuxRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 phys_x = 2;
  if (this->_internal_phys_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_phys_x());
  }

  // uint32 phys_y = 3;
  if (this->_internal_phys_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_phys_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelRecord_MuxRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelRecord_MuxRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelRecord_MuxRecord::GetClassData() const { return &_class_data_; }

void ChannelRecord_MuxRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelRecord_MuxRecord *>(to)->MergeFrom(
      static_cast<const ChannelRecord_MuxRecord &>(from));
}


void ChannelRecord_MuxRecord::MergeFrom(const ChannelRecord_MuxRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.ChannelRecord.MuxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_phys_x() != 0) {
    _internal_set_phys_x(from._internal_phys_x());
  }
  if (from._internal_phys_y() != 0) {
    _internal_set_phys_y(from._internal_phys_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelRecord_MuxRecord::CopyFrom(const ChannelRecord_MuxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.ChannelRecord.MuxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRecord_MuxRecord::IsInitialized() const {
  return true;
}

void ChannelRecord_MuxRecord::InternalSwap(ChannelRecord_MuxRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelRecord_MuxRecord, phys_y_)
      + sizeof(ChannelRecord_MuxRecord::phys_y_)
      - PROTOBUF_FIELD_OFFSET(ChannelRecord_MuxRecord, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelRecord_MuxRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[17]);
}

// ===================================================================

class ChannelRecord::_Internal {
 public:
};

ChannelRecord::ChannelRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mux_records_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ChannelRecord)
}
ChannelRecord::ChannelRecord(const ChannelRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mux_records_(from.mux_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ChannelRecord)
}

void ChannelRecord::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

ChannelRecord::~ChannelRecord() {
  // @@protoc_insertion_point(destructor:minknow_api.device.ChannelRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelRecord::ArenaDtor(void* object) {
  ChannelRecord* _this = reinterpret_cast< ChannelRecord* >(object);
  (void)_this;
}
void ChannelRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.ChannelRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mux_records_.Clear();
  name_.ClearToEmpty();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.device.ChannelRecord.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.device.ChannelRecord.MuxRecord mux_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mux_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.ChannelRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.device.ChannelRecord.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .minknow_api.device.ChannelRecord.MuxRecord mux_records = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mux_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mux_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.ChannelRecord)
  return target;
}

size_t ChannelRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.ChannelRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.device.ChannelRecord.MuxRecord mux_records = 3;
  total_size += 1UL * this->_internal_mux_records_size();
  for (const auto& msg : this->mux_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelRecord::GetClassData() const { return &_class_data_; }

void ChannelRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelRecord *>(to)->MergeFrom(
      static_cast<const ChannelRecord &>(from));
}


void ChannelRecord::MergeFrom(const ChannelRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.ChannelRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mux_records_.MergeFrom(from.mux_records_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelRecord::CopyFrom(const ChannelRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.ChannelRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelRecord::IsInitialized() const {
  return true;
}

void ChannelRecord::InternalSwap(ChannelRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mux_records_.InternalSwap(&other->mux_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[18]);
}

// ===================================================================

class ResetDeviceSettingsRequest::_Internal {
 public:
};

ResetDeviceSettingsRequest::ResetDeviceSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ResetDeviceSettingsRequest)
}
ResetDeviceSettingsRequest::ResetDeviceSettingsRequest(const ResetDeviceSettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ResetDeviceSettingsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetDeviceSettingsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetDeviceSettingsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetDeviceSettingsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[19]);
}

// ===================================================================

class ResetDeviceSettingsResponse::_Internal {
 public:
};

ResetDeviceSettingsResponse::ResetDeviceSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ResetDeviceSettingsResponse)
}
ResetDeviceSettingsResponse::ResetDeviceSettingsResponse(const ResetDeviceSettingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ResetDeviceSettingsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetDeviceSettingsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetDeviceSettingsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetDeviceSettingsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[20]);
}

// ===================================================================

class SetCalibrationRequest::_Internal {
 public:
};

SetCalibrationRequest::SetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  offsets_(arena),
  pa_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetCalibrationRequest)
}
SetCalibrationRequest::SetCalibrationRequest(const SetCalibrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      offsets_(from.offsets_),
      pa_ranges_(from.pa_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_channel_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetCalibrationRequest)
}

void SetCalibrationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_channel_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
}

SetCalibrationRequest::~SetCalibrationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetCalibrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCalibrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetCalibrationRequest::ArenaDtor(void* object) {
  SetCalibrationRequest* _this = reinterpret_cast< SetCalibrationRequest* >(object);
  (void)_this;
}
void SetCalibrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCalibrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCalibrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offsets_.Clear();
  pa_ranges_.Clear();
  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_channel_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCalibrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float offsets = 3 [(.minknow_api.rpc_required) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_offsets(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float pa_ranges = 4 [(.minknow_api.rpc_required) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pa_ranges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_pa_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCalibrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_channel(), target);
  }

  // repeated float offsets = 3 [(.minknow_api.rpc_required) = true];
  if (this->_internal_offsets_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_offsets(), target);
  }

  // repeated float pa_ranges = 4 [(.minknow_api.rpc_required) = true];
  if (this->_internal_pa_ranges_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_pa_ranges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetCalibrationRequest)
  return target;
}

size_t SetCalibrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetCalibrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float offsets = 3 [(.minknow_api.rpc_required) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_offsets_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float pa_ranges = 4 [(.minknow_api.rpc_required) = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pa_ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCalibrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCalibrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCalibrationRequest::GetClassData() const { return &_class_data_; }

void SetCalibrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetCalibrationRequest *>(to)->MergeFrom(
      static_cast<const SetCalibrationRequest &>(from));
}


void SetCalibrationRequest::MergeFrom(const SetCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetCalibrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offsets_.MergeFrom(from.offsets_);
  pa_ranges_.MergeFrom(from.pa_ranges_);
  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCalibrationRequest::CopyFrom(const SetCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetCalibrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCalibrationRequest::IsInitialized() const {
  return true;
}

void SetCalibrationRequest::InternalSwap(SetCalibrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  offsets_.InternalSwap(&other->offsets_);
  pa_ranges_.InternalSwap(&other->pa_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCalibrationRequest, last_channel_)
      + sizeof(SetCalibrationRequest::last_channel_)
      - PROTOBUF_FIELD_OFFSET(SetCalibrationRequest, first_channel_)>(
          reinterpret_cast<char*>(&first_channel_),
          reinterpret_cast<char*>(&other->first_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCalibrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[21]);
}

// ===================================================================

class SetCalibrationResponse::_Internal {
 public:
};

SetCalibrationResponse::SetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetCalibrationResponse)
}
SetCalibrationResponse::SetCalibrationResponse(const SetCalibrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetCalibrationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCalibrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCalibrationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetCalibrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[22]);
}

// ===================================================================

class ClearCalibrationRequest::_Internal {
 public:
};

ClearCalibrationRequest::ClearCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ClearCalibrationRequest)
}
ClearCalibrationRequest::ClearCalibrationRequest(const ClearCalibrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ClearCalibrationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearCalibrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearCalibrationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClearCalibrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[23]);
}

// ===================================================================

class ClearCalibrationResponse::_Internal {
 public:
};

ClearCalibrationResponse::ClearCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.ClearCalibrationResponse)
}
ClearCalibrationResponse::ClearCalibrationResponse(const ClearCalibrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.ClearCalibrationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearCalibrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearCalibrationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClearCalibrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[24]);
}

// ===================================================================

class GetCalibrationRequest::_Internal {
 public:
};

GetCalibrationRequest::GetCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetCalibrationRequest)
}
GetCalibrationRequest::GetCalibrationRequest(const GetCalibrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_channel_, &from.first_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_channel_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetCalibrationRequest)
}

void GetCalibrationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_channel_) -
    reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
}

GetCalibrationRequest::~GetCalibrationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetCalibrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCalibrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCalibrationRequest::ArenaDtor(void* object) {
  GetCalibrationRequest* _this = reinterpret_cast< GetCalibrationRequest* >(object);
  (void)_this;
}
void GetCalibrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCalibrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCalibrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_channel_) -
      reinterpret_cast<char*>(&first_channel_)) + sizeof(last_channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCalibrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCalibrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_channel(), target);
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetCalibrationRequest)
  return target;
}

size_t GetCalibrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetCalibrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_channel = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_first_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_channel());
  }

  // uint32 last_channel = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_last_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCalibrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCalibrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCalibrationRequest::GetClassData() const { return &_class_data_; }

void GetCalibrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCalibrationRequest *>(to)->MergeFrom(
      static_cast<const GetCalibrationRequest &>(from));
}


void GetCalibrationRequest::MergeFrom(const GetCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetCalibrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_channel() != 0) {
    _internal_set_first_channel(from._internal_first_channel());
  }
  if (from._internal_last_channel() != 0) {
    _internal_set_last_channel(from._internal_last_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCalibrationRequest::CopyFrom(const GetCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetCalibrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCalibrationRequest::IsInitialized() const {
  return true;
}

void GetCalibrationRequest::InternalSwap(GetCalibrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCalibrationRequest, last_channel_)
      + sizeof(GetCalibrationRequest::last_channel_)
      - PROTOBUF_FIELD_OFFSET(GetCalibrationRequest, first_channel_)>(
          reinterpret_cast<char*>(&first_channel_),
          reinterpret_cast<char*>(&other->first_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCalibrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[25]);
}

// ===================================================================

class GetCalibrationResponse::_Internal {
 public:
};

GetCalibrationResponse::GetCalibrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  offsets_(arena),
  pa_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetCalibrationResponse)
}
GetCalibrationResponse::GetCalibrationResponse(const GetCalibrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      offsets_(from.offsets_),
      pa_ranges_(from.pa_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&digitisation_, &from.digitisation_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_calibration_) -
    reinterpret_cast<char*>(&digitisation_)) + sizeof(has_calibration_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetCalibrationResponse)
}

void GetCalibrationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&digitisation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_calibration_) -
    reinterpret_cast<char*>(&digitisation_)) + sizeof(has_calibration_));
}

GetCalibrationResponse::~GetCalibrationResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetCalibrationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCalibrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCalibrationResponse::ArenaDtor(void* object) {
  GetCalibrationResponse* _this = reinterpret_cast< GetCalibrationResponse* >(object);
  (void)_this;
}
void GetCalibrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCalibrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCalibrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetCalibrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offsets_.Clear();
  pa_ranges_.Clear();
  ::memset(&digitisation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_calibration_) -
      reinterpret_cast<char*>(&digitisation_)) + sizeof(has_calibration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCalibrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 digitisation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          digitisation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_offsets(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float pa_ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pa_ranges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_pa_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool has_calibration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_calibration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCalibrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetCalibrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 digitisation = 1;
  if (this->_internal_digitisation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_digitisation(), target);
  }

  // repeated float offsets = 2;
  if (this->_internal_offsets_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_offsets(), target);
  }

  // repeated float pa_ranges = 3;
  if (this->_internal_pa_ranges_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_pa_ranges(), target);
  }

  // bool has_calibration = 4;
  if (this->_internal_has_calibration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_calibration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetCalibrationResponse)
  return target;
}

size_t GetCalibrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetCalibrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float offsets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_offsets_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float pa_ranges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pa_ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // uint32 digitisation = 1;
  if (this->_internal_digitisation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_digitisation());
  }

  // bool has_calibration = 4;
  if (this->_internal_has_calibration() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCalibrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCalibrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCalibrationResponse::GetClassData() const { return &_class_data_; }

void GetCalibrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCalibrationResponse *>(to)->MergeFrom(
      static_cast<const GetCalibrationResponse &>(from));
}


void GetCalibrationResponse::MergeFrom(const GetCalibrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetCalibrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offsets_.MergeFrom(from.offsets_);
  pa_ranges_.MergeFrom(from.pa_ranges_);
  if (from._internal_digitisation() != 0) {
    _internal_set_digitisation(from._internal_digitisation());
  }
  if (from._internal_has_calibration() != 0) {
    _internal_set_has_calibration(from._internal_has_calibration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCalibrationResponse::CopyFrom(const GetCalibrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetCalibrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCalibrationResponse::IsInitialized() const {
  return true;
}

void GetCalibrationResponse::InternalSwap(GetCalibrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  offsets_.InternalSwap(&other->offsets_);
  pa_ranges_.InternalSwap(&other->pa_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCalibrationResponse, has_calibration_)
      + sizeof(GetCalibrationResponse::has_calibration_)
      - PROTOBUF_FIELD_OFFSET(GetCalibrationResponse, digitisation_)>(
          reinterpret_cast<char*>(&digitisation_),
          reinterpret_cast<char*>(&other->digitisation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCalibrationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[26]);
}

// ===================================================================

class SetTemperatureRequest_WaitForTemperatureSettings::_Internal {
 public:
};

SetTemperatureRequest_WaitForTemperatureSettings::SetTemperatureRequest_WaitForTemperatureSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
}
SetTemperatureRequest_WaitForTemperatureSettings::SetTemperatureRequest_WaitForTemperatureSettings(const SetTemperatureRequest_WaitForTemperatureSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_stable_duration_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(min_stable_duration_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
}

void SetTemperatureRequest_WaitForTemperatureSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_stable_duration_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(min_stable_duration_));
}

SetTemperatureRequest_WaitForTemperatureSettings::~SetTemperatureRequest_WaitForTemperatureSettings() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTemperatureRequest_WaitForTemperatureSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTemperatureRequest_WaitForTemperatureSettings::ArenaDtor(void* object) {
  SetTemperatureRequest_WaitForTemperatureSettings* _this = reinterpret_cast< SetTemperatureRequest_WaitForTemperatureSettings* >(object);
  (void)_this;
}
void SetTemperatureRequest_WaitForTemperatureSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTemperatureRequest_WaitForTemperatureSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTemperatureRequest_WaitForTemperatureSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_stable_duration_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(min_stable_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTemperatureRequest_WaitForTemperatureSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float tolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_stable_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_stable_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTemperatureRequest_WaitForTemperatureSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timeout(), target);
  }

  // float tolerance = 2;
  if (!(this->_internal_tolerance() <= 0 && this->_internal_tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tolerance(), target);
  }

  // uint32 min_stable_duration = 3;
  if (this->_internal_min_stable_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_stable_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  return target;
}

size_t SetTemperatureRequest_WaitForTemperatureSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
  }

  // float tolerance = 2;
  if (!(this->_internal_tolerance() <= 0 && this->_internal_tolerance() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 min_stable_duration = 3;
  if (this->_internal_min_stable_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_stable_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTemperatureRequest_WaitForTemperatureSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTemperatureRequest_WaitForTemperatureSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTemperatureRequest_WaitForTemperatureSettings::GetClassData() const { return &_class_data_; }

void SetTemperatureRequest_WaitForTemperatureSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTemperatureRequest_WaitForTemperatureSettings *>(to)->MergeFrom(
      static_cast<const SetTemperatureRequest_WaitForTemperatureSettings &>(from));
}


void SetTemperatureRequest_WaitForTemperatureSettings::MergeFrom(const SetTemperatureRequest_WaitForTemperatureSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (!(from._internal_tolerance() <= 0 && from._internal_tolerance() >= 0)) {
    _internal_set_tolerance(from._internal_tolerance());
  }
  if (from._internal_min_stable_duration() != 0) {
    _internal_set_min_stable_duration(from._internal_min_stable_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTemperatureRequest_WaitForTemperatureSettings::CopyFrom(const SetTemperatureRequest_WaitForTemperatureSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemperatureRequest_WaitForTemperatureSettings::IsInitialized() const {
  return true;
}

void SetTemperatureRequest_WaitForTemperatureSettings::InternalSwap(SetTemperatureRequest_WaitForTemperatureSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTemperatureRequest_WaitForTemperatureSettings, min_stable_duration_)
      + sizeof(SetTemperatureRequest_WaitForTemperatureSettings::min_stable_duration_)
      - PROTOBUF_FIELD_OFFSET(SetTemperatureRequest_WaitForTemperatureSettings, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTemperatureRequest_WaitForTemperatureSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[27]);
}

// ===================================================================

class SetTemperatureRequest::_Internal {
 public:
  static const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings& wait_for_temperature(const SetTemperatureRequest* msg);
};

const ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings&
SetTemperatureRequest::_Internal::wait_for_temperature(const SetTemperatureRequest* msg) {
  return *msg->wait_for_temperature_;
}
SetTemperatureRequest::SetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetTemperatureRequest)
}
SetTemperatureRequest::SetTemperatureRequest(const SetTemperatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wait_for_temperature()) {
    wait_for_temperature_ = new ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings(*from.wait_for_temperature_);
  } else {
    wait_for_temperature_ = nullptr;
  }
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetTemperatureRequest)
}

void SetTemperatureRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wait_for_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temperature_) -
    reinterpret_cast<char*>(&wait_for_temperature_)) + sizeof(temperature_));
}

SetTemperatureRequest::~SetTemperatureRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetTemperatureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTemperatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete wait_for_temperature_;
}

void SetTemperatureRequest::ArenaDtor(void* object) {
  SetTemperatureRequest* _this = reinterpret_cast< SetTemperatureRequest* >(object);
  (void)_this;
}
void SetTemperatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTemperatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTemperatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetTemperatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && wait_for_temperature_ != nullptr) {
    delete wait_for_temperature_;
  }
  wait_for_temperature_ = nullptr;
  temperature_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTemperatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings wait_for_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_for_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTemperatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetTemperatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float temperature = 1;
  if (!(this->_internal_temperature() <= 0 && this->_internal_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_temperature(), target);
  }

  // .minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings wait_for_temperature = 2;
  if (this->_internal_has_wait_for_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wait_for_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetTemperatureRequest)
  return target;
}

size_t SetTemperatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetTemperatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.SetTemperatureRequest.WaitForTemperatureSettings wait_for_temperature = 2;
  if (this->_internal_has_wait_for_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wait_for_temperature_);
  }

  // float temperature = 1;
  if (!(this->_internal_temperature() <= 0 && this->_internal_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTemperatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTemperatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTemperatureRequest::GetClassData() const { return &_class_data_; }

void SetTemperatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTemperatureRequest *>(to)->MergeFrom(
      static_cast<const SetTemperatureRequest &>(from));
}


void SetTemperatureRequest::MergeFrom(const SetTemperatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetTemperatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wait_for_temperature()) {
    _internal_mutable_wait_for_temperature()->::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings::MergeFrom(from._internal_wait_for_temperature());
  }
  if (!(from._internal_temperature() <= 0 && from._internal_temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTemperatureRequest::CopyFrom(const SetTemperatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetTemperatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemperatureRequest::IsInitialized() const {
  return true;
}

void SetTemperatureRequest::InternalSwap(SetTemperatureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTemperatureRequest, temperature_)
      + sizeof(SetTemperatureRequest::temperature_)
      - PROTOBUF_FIELD_OFFSET(SetTemperatureRequest, wait_for_temperature_)>(
          reinterpret_cast<char*>(&wait_for_temperature_),
          reinterpret_cast<char*>(&other->wait_for_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTemperatureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[28]);
}

// ===================================================================

class SetTemperatureResponse::_Internal {
 public:
};

SetTemperatureResponse::SetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetTemperatureResponse)
}
SetTemperatureResponse::SetTemperatureResponse(const SetTemperatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timed_out_waiting_for_temperature_ = from.timed_out_waiting_for_temperature_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetTemperatureResponse)
}

void SetTemperatureResponse::SharedCtor() {
timed_out_waiting_for_temperature_ = false;
}

SetTemperatureResponse::~SetTemperatureResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetTemperatureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetTemperatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTemperatureResponse::ArenaDtor(void* object) {
  SetTemperatureResponse* _this = reinterpret_cast< SetTemperatureResponse* >(object);
  (void)_this;
}
void SetTemperatureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTemperatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTemperatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetTemperatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timed_out_waiting_for_temperature_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTemperatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool timed_out_waiting_for_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timed_out_waiting_for_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTemperatureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetTemperatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool timed_out_waiting_for_temperature = 1;
  if (this->_internal_timed_out_waiting_for_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_timed_out_waiting_for_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetTemperatureResponse)
  return target;
}

size_t SetTemperatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetTemperatureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool timed_out_waiting_for_temperature = 1;
  if (this->_internal_timed_out_waiting_for_temperature() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTemperatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetTemperatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTemperatureResponse::GetClassData() const { return &_class_data_; }

void SetTemperatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetTemperatureResponse *>(to)->MergeFrom(
      static_cast<const SetTemperatureResponse &>(from));
}


void SetTemperatureResponse::MergeFrom(const SetTemperatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetTemperatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timed_out_waiting_for_temperature() != 0) {
    _internal_set_timed_out_waiting_for_temperature(from._internal_timed_out_waiting_for_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTemperatureResponse::CopyFrom(const SetTemperatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetTemperatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemperatureResponse::IsInitialized() const {
  return true;
}

void SetTemperatureResponse::InternalSwap(SetTemperatureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timed_out_waiting_for_temperature_, other->timed_out_waiting_for_temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTemperatureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[29]);
}

// ===================================================================

class GetTemperatureRequest::_Internal {
 public:
};

GetTemperatureRequest::GetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetTemperatureRequest)
}
GetTemperatureRequest::GetTemperatureRequest(const GetTemperatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetTemperatureRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTemperatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTemperatureRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetTemperatureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[30]);
}

// ===================================================================

class GetTemperatureResponse_MinIONTemperature::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& asic_temperature(const GetTemperatureResponse_MinIONTemperature* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& heatsink_temperature(const GetTemperatureResponse_MinIONTemperature* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
GetTemperatureResponse_MinIONTemperature::_Internal::asic_temperature(const GetTemperatureResponse_MinIONTemperature* msg) {
  return *msg->asic_temperature_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
GetTemperatureResponse_MinIONTemperature::_Internal::heatsink_temperature(const GetTemperatureResponse_MinIONTemperature* msg) {
  return *msg->heatsink_temperature_;
}
void GetTemperatureResponse_MinIONTemperature::clear_asic_temperature() {
  if (GetArenaForAllocation() == nullptr && asic_temperature_ != nullptr) {
    delete asic_temperature_;
  }
  asic_temperature_ = nullptr;
}
void GetTemperatureResponse_MinIONTemperature::clear_heatsink_temperature() {
  if (GetArenaForAllocation() == nullptr && heatsink_temperature_ != nullptr) {
    delete heatsink_temperature_;
  }
  heatsink_temperature_ = nullptr;
}
GetTemperatureResponse_MinIONTemperature::GetTemperatureResponse_MinIONTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
}
GetTemperatureResponse_MinIONTemperature::GetTemperatureResponse_MinIONTemperature(const GetTemperatureResponse_MinIONTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asic_temperature()) {
    asic_temperature_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.asic_temperature_);
  } else {
    asic_temperature_ = nullptr;
  }
  if (from._internal_has_heatsink_temperature()) {
    heatsink_temperature_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.heatsink_temperature_);
  } else {
    heatsink_temperature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
}

void GetTemperatureResponse_MinIONTemperature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asic_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heatsink_temperature_) -
    reinterpret_cast<char*>(&asic_temperature_)) + sizeof(heatsink_temperature_));
}

GetTemperatureResponse_MinIONTemperature::~GetTemperatureResponse_MinIONTemperature() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTemperatureResponse_MinIONTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete asic_temperature_;
  if (this != internal_default_instance()) delete heatsink_temperature_;
}

void GetTemperatureResponse_MinIONTemperature::ArenaDtor(void* object) {
  GetTemperatureResponse_MinIONTemperature* _this = reinterpret_cast< GetTemperatureResponse_MinIONTemperature* >(object);
  (void)_this;
}
void GetTemperatureResponse_MinIONTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTemperatureResponse_MinIONTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTemperatureResponse_MinIONTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && asic_temperature_ != nullptr) {
    delete asic_temperature_;
  }
  asic_temperature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heatsink_temperature_ != nullptr) {
    delete heatsink_temperature_;
  }
  heatsink_temperature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTemperatureResponse_MinIONTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue asic_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asic_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue heatsink_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heatsink_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTemperatureResponse_MinIONTemperature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue asic_temperature = 1;
  if (this->_internal_has_asic_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asic_temperature(this), target, stream);
  }

  // .google.protobuf.FloatValue heatsink_temperature = 2;
  if (this->_internal_has_heatsink_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::heatsink_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  return target;
}

size_t GetTemperatureResponse_MinIONTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue asic_temperature = 1;
  if (this->_internal_has_asic_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asic_temperature_);
  }

  // .google.protobuf.FloatValue heatsink_temperature = 2;
  if (this->_internal_has_heatsink_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heatsink_temperature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTemperatureResponse_MinIONTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTemperatureResponse_MinIONTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTemperatureResponse_MinIONTemperature::GetClassData() const { return &_class_data_; }

void GetTemperatureResponse_MinIONTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTemperatureResponse_MinIONTemperature *>(to)->MergeFrom(
      static_cast<const GetTemperatureResponse_MinIONTemperature &>(from));
}


void GetTemperatureResponse_MinIONTemperature::MergeFrom(const GetTemperatureResponse_MinIONTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asic_temperature()) {
    _internal_mutable_asic_temperature()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_asic_temperature());
  }
  if (from._internal_has_heatsink_temperature()) {
    _internal_mutable_heatsink_temperature()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_heatsink_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTemperatureResponse_MinIONTemperature::CopyFrom(const GetTemperatureResponse_MinIONTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetTemperatureResponse.MinIONTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTemperatureResponse_MinIONTemperature::IsInitialized() const {
  return true;
}

void GetTemperatureResponse_MinIONTemperature::InternalSwap(GetTemperatureResponse_MinIONTemperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTemperatureResponse_MinIONTemperature, heatsink_temperature_)
      + sizeof(GetTemperatureResponse_MinIONTemperature::heatsink_temperature_)
      - PROTOBUF_FIELD_OFFSET(GetTemperatureResponse_MinIONTemperature, asic_temperature_)>(
          reinterpret_cast<char*>(&asic_temperature_),
          reinterpret_cast<char*>(&other->asic_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTemperatureResponse_MinIONTemperature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[31]);
}

// ===================================================================

class GetTemperatureResponse_PromethIONTemperature::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& flowcell_temperature(const GetTemperatureResponse_PromethIONTemperature* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& chamber_temperature(const GetTemperatureResponse_PromethIONTemperature* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
GetTemperatureResponse_PromethIONTemperature::_Internal::flowcell_temperature(const GetTemperatureResponse_PromethIONTemperature* msg) {
  return *msg->flowcell_temperature_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
GetTemperatureResponse_PromethIONTemperature::_Internal::chamber_temperature(const GetTemperatureResponse_PromethIONTemperature* msg) {
  return *msg->chamber_temperature_;
}
void GetTemperatureResponse_PromethIONTemperature::clear_flowcell_temperature() {
  if (GetArenaForAllocation() == nullptr && flowcell_temperature_ != nullptr) {
    delete flowcell_temperature_;
  }
  flowcell_temperature_ = nullptr;
}
void GetTemperatureResponse_PromethIONTemperature::clear_chamber_temperature() {
  if (GetArenaForAllocation() == nullptr && chamber_temperature_ != nullptr) {
    delete chamber_temperature_;
  }
  chamber_temperature_ = nullptr;
}
GetTemperatureResponse_PromethIONTemperature::GetTemperatureResponse_PromethIONTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
}
GetTemperatureResponse_PromethIONTemperature::GetTemperatureResponse_PromethIONTemperature(const GetTemperatureResponse_PromethIONTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_flowcell_temperature()) {
    flowcell_temperature_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.flowcell_temperature_);
  } else {
    flowcell_temperature_ = nullptr;
  }
  if (from._internal_has_chamber_temperature()) {
    chamber_temperature_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.chamber_temperature_);
  } else {
    chamber_temperature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
}

void GetTemperatureResponse_PromethIONTemperature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flowcell_temperature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chamber_temperature_) -
    reinterpret_cast<char*>(&flowcell_temperature_)) + sizeof(chamber_temperature_));
}

GetTemperatureResponse_PromethIONTemperature::~GetTemperatureResponse_PromethIONTemperature() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTemperatureResponse_PromethIONTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete flowcell_temperature_;
  if (this != internal_default_instance()) delete chamber_temperature_;
}

void GetTemperatureResponse_PromethIONTemperature::ArenaDtor(void* object) {
  GetTemperatureResponse_PromethIONTemperature* _this = reinterpret_cast< GetTemperatureResponse_PromethIONTemperature* >(object);
  (void)_this;
}
void GetTemperatureResponse_PromethIONTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTemperatureResponse_PromethIONTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTemperatureResponse_PromethIONTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && flowcell_temperature_ != nullptr) {
    delete flowcell_temperature_;
  }
  flowcell_temperature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chamber_temperature_ != nullptr) {
    delete chamber_temperature_;
  }
  chamber_temperature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTemperatureResponse_PromethIONTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue flowcell_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flowcell_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue chamber_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chamber_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTemperatureResponse_PromethIONTemperature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue flowcell_temperature = 1;
  if (this->_internal_has_flowcell_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::flowcell_temperature(this), target, stream);
  }

  // .google.protobuf.FloatValue chamber_temperature = 2;
  if (this->_internal_has_chamber_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chamber_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  return target;
}

size_t GetTemperatureResponse_PromethIONTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue flowcell_temperature = 1;
  if (this->_internal_has_flowcell_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flowcell_temperature_);
  }

  // .google.protobuf.FloatValue chamber_temperature = 2;
  if (this->_internal_has_chamber_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chamber_temperature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTemperatureResponse_PromethIONTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTemperatureResponse_PromethIONTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTemperatureResponse_PromethIONTemperature::GetClassData() const { return &_class_data_; }

void GetTemperatureResponse_PromethIONTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTemperatureResponse_PromethIONTemperature *>(to)->MergeFrom(
      static_cast<const GetTemperatureResponse_PromethIONTemperature &>(from));
}


void GetTemperatureResponse_PromethIONTemperature::MergeFrom(const GetTemperatureResponse_PromethIONTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flowcell_temperature()) {
    _internal_mutable_flowcell_temperature()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_flowcell_temperature());
  }
  if (from._internal_has_chamber_temperature()) {
    _internal_mutable_chamber_temperature()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_chamber_temperature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTemperatureResponse_PromethIONTemperature::CopyFrom(const GetTemperatureResponse_PromethIONTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetTemperatureResponse.PromethIONTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTemperatureResponse_PromethIONTemperature::IsInitialized() const {
  return true;
}

void GetTemperatureResponse_PromethIONTemperature::InternalSwap(GetTemperatureResponse_PromethIONTemperature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTemperatureResponse_PromethIONTemperature, chamber_temperature_)
      + sizeof(GetTemperatureResponse_PromethIONTemperature::chamber_temperature_)
      - PROTOBUF_FIELD_OFFSET(GetTemperatureResponse_PromethIONTemperature, flowcell_temperature_)>(
          reinterpret_cast<char*>(&flowcell_temperature_),
          reinterpret_cast<char*>(&other->flowcell_temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTemperatureResponse_PromethIONTemperature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[32]);
}

// ===================================================================

class GetTemperatureResponse::_Internal {
 public:
  static const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature& minion(const GetTemperatureResponse* msg);
  static const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature& promethion(const GetTemperatureResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& target_temperature(const GetTemperatureResponse* msg);
};

const ::minknow_api::device::GetTemperatureResponse_MinIONTemperature&
GetTemperatureResponse::_Internal::minion(const GetTemperatureResponse* msg) {
  return *msg->temperature_.minion_;
}
const ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature&
GetTemperatureResponse::_Internal::promethion(const GetTemperatureResponse* msg) {
  return *msg->temperature_.promethion_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
GetTemperatureResponse::_Internal::target_temperature(const GetTemperatureResponse* msg) {
  return *msg->target_temperature_;
}
void GetTemperatureResponse::set_allocated_minion(::minknow_api::device::GetTemperatureResponse_MinIONTemperature* minion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_temperature();
  if (minion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::GetTemperatureResponse_MinIONTemperature>::GetOwningArena(minion);
    if (message_arena != submessage_arena) {
      minion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minion, submessage_arena);
    }
    set_has_minion();
    temperature_.minion_ = minion;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.minion)
}
void GetTemperatureResponse::set_allocated_promethion(::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* promethion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_temperature();
  if (promethion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::device::GetTemperatureResponse_PromethIONTemperature>::GetOwningArena(promethion);
    if (message_arena != submessage_arena) {
      promethion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promethion, submessage_arena);
    }
    set_has_promethion();
    temperature_.promethion_ = promethion;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.device.GetTemperatureResponse.promethion)
}
void GetTemperatureResponse::clear_target_temperature() {
  if (GetArenaForAllocation() == nullptr && target_temperature_ != nullptr) {
    delete target_temperature_;
  }
  target_temperature_ = nullptr;
}
GetTemperatureResponse::GetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetTemperatureResponse)
}
GetTemperatureResponse::GetTemperatureResponse(const GetTemperatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_temperature()) {
    target_temperature_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.target_temperature_);
  } else {
    target_temperature_ = nullptr;
  }
  clear_has_temperature();
  switch (from.temperature_case()) {
    case kMinion: {
      _internal_mutable_minion()->::minknow_api::device::GetTemperatureResponse_MinIONTemperature::MergeFrom(from._internal_minion());
      break;
    }
    case kPromethion: {
      _internal_mutable_promethion()->::minknow_api::device::GetTemperatureResponse_PromethIONTemperature::MergeFrom(from._internal_promethion());
      break;
    }
    case TEMPERATURE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetTemperatureResponse)
}

void GetTemperatureResponse::SharedCtor() {
target_temperature_ = nullptr;
clear_has_temperature();
}

GetTemperatureResponse::~GetTemperatureResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetTemperatureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTemperatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_temperature_;
  if (has_temperature()) {
    clear_temperature();
  }
}

void GetTemperatureResponse::ArenaDtor(void* object) {
  GetTemperatureResponse* _this = reinterpret_cast< GetTemperatureResponse* >(object);
  (void)_this;
}
void GetTemperatureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTemperatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTemperatureResponse::clear_temperature() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.device.GetTemperatureResponse)
  switch (temperature_case()) {
    case kMinion: {
      if (GetArenaForAllocation() == nullptr) {
        delete temperature_.minion_;
      }
      break;
    }
    case kPromethion: {
      if (GetArenaForAllocation() == nullptr) {
        delete temperature_.promethion_;
      }
      break;
    }
    case TEMPERATURE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEMPERATURE_NOT_SET;
}


void GetTemperatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetTemperatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_temperature_ != nullptr) {
    delete target_temperature_;
  }
  target_temperature_ = nullptr;
  clear_temperature();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTemperatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.GetTemperatureResponse.MinIONTemperature minion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_minion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetTemperatureResponse.PromethIONTemperature promethion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_promethion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue target_temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_temperature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTemperatureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetTemperatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.GetTemperatureResponse.MinIONTemperature minion = 1;
  if (_internal_has_minion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::minion(this), target, stream);
  }

  // .minknow_api.device.GetTemperatureResponse.PromethIONTemperature promethion = 2;
  if (_internal_has_promethion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::promethion(this), target, stream);
  }

  // .google.protobuf.FloatValue target_temperature = 3;
  if (this->_internal_has_target_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetTemperatureResponse)
  return target;
}

size_t GetTemperatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetTemperatureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue target_temperature = 3;
  if (this->_internal_has_target_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_temperature_);
  }

  switch (temperature_case()) {
    // .minknow_api.device.GetTemperatureResponse.MinIONTemperature minion = 1;
    case kMinion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temperature_.minion_);
      break;
    }
    // .minknow_api.device.GetTemperatureResponse.PromethIONTemperature promethion = 2;
    case kPromethion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temperature_.promethion_);
      break;
    }
    case TEMPERATURE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTemperatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTemperatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTemperatureResponse::GetClassData() const { return &_class_data_; }

void GetTemperatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTemperatureResponse *>(to)->MergeFrom(
      static_cast<const GetTemperatureResponse &>(from));
}


void GetTemperatureResponse::MergeFrom(const GetTemperatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetTemperatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_temperature()) {
    _internal_mutable_target_temperature()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_target_temperature());
  }
  switch (from.temperature_case()) {
    case kMinion: {
      _internal_mutable_minion()->::minknow_api::device::GetTemperatureResponse_MinIONTemperature::MergeFrom(from._internal_minion());
      break;
    }
    case kPromethion: {
      _internal_mutable_promethion()->::minknow_api::device::GetTemperatureResponse_PromethIONTemperature::MergeFrom(from._internal_promethion());
      break;
    }
    case TEMPERATURE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTemperatureResponse::CopyFrom(const GetTemperatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetTemperatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTemperatureResponse::IsInitialized() const {
  return true;
}

void GetTemperatureResponse::InternalSwap(GetTemperatureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_temperature_, other->target_temperature_);
  swap(temperature_, other->temperature_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTemperatureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[33]);
}

// ===================================================================

class StreamTemperatureRequest::_Internal {
 public:
};

StreamTemperatureRequest::StreamTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.StreamTemperatureRequest)
}
StreamTemperatureRequest::StreamTemperatureRequest(const StreamTemperatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  period_seconds_ = from.period_seconds_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.StreamTemperatureRequest)
}

void StreamTemperatureRequest::SharedCtor() {
period_seconds_ = 0u;
}

StreamTemperatureRequest::~StreamTemperatureRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.StreamTemperatureRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamTemperatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamTemperatureRequest::ArenaDtor(void* object) {
  StreamTemperatureRequest* _this = reinterpret_cast< StreamTemperatureRequest* >(object);
  (void)_this;
}
void StreamTemperatureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamTemperatureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamTemperatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.StreamTemperatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  period_seconds_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTemperatureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 period_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          period_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamTemperatureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.StreamTemperatureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 period_seconds = 1;
  if (this->_internal_period_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_period_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.StreamTemperatureRequest)
  return target;
}

size_t StreamTemperatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.StreamTemperatureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 period_seconds = 1;
  if (this->_internal_period_seconds() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_period_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTemperatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamTemperatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTemperatureRequest::GetClassData() const { return &_class_data_; }

void StreamTemperatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamTemperatureRequest *>(to)->MergeFrom(
      static_cast<const StreamTemperatureRequest &>(from));
}


void StreamTemperatureRequest::MergeFrom(const StreamTemperatureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.StreamTemperatureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_period_seconds() != 0) {
    _internal_set_period_seconds(from._internal_period_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamTemperatureRequest::CopyFrom(const StreamTemperatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.StreamTemperatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTemperatureRequest::IsInitialized() const {
  return true;
}

void StreamTemperatureRequest::InternalSwap(StreamTemperatureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(period_seconds_, other->period_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTemperatureRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[34]);
}

// ===================================================================

class UnblockRequest::_Internal {
 public:
};

UnblockRequest::UnblockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.UnblockRequest)
}
UnblockRequest::UnblockRequest(const UnblockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_duration();
  switch (from.duration_case()) {
    case kDurationInSeconds: {
      _internal_set_duration_in_seconds(from._internal_duration_in_seconds());
      break;
    }
    case kDurationInMilliseconds: {
      _internal_set_duration_in_milliseconds(from._internal_duration_in_milliseconds());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.UnblockRequest)
}

void UnblockRequest::SharedCtor() {
clear_has_duration();
}

UnblockRequest::~UnblockRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.UnblockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnblockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_duration()) {
    clear_duration();
  }
}

void UnblockRequest::ArenaDtor(void* object) {
  UnblockRequest* _this = reinterpret_cast< UnblockRequest* >(object);
  (void)_this;
}
void UnblockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnblockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnblockRequest::clear_duration() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.device.UnblockRequest)
  switch (duration_case()) {
    case kDurationInSeconds: {
      // No need to clear
      break;
    }
    case kDurationInMilliseconds: {
      // No need to clear
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DURATION_NOT_SET;
}


void UnblockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.UnblockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  clear_duration();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnblockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration_in_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_duration_in_seconds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration_in_milliseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_duration_in_milliseconds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnblockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.UnblockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  // uint32 duration_in_seconds = 2;
  if (_internal_has_duration_in_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_in_seconds(), target);
  }

  // uint32 duration_in_milliseconds = 3;
  if (_internal_has_duration_in_milliseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration_in_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.UnblockRequest)
  return target;
}

size_t UnblockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.UnblockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (duration_case()) {
    // uint32 duration_in_seconds = 2;
    case kDurationInSeconds: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_in_seconds());
      break;
    }
    // uint32 duration_in_milliseconds = 3;
    case kDurationInMilliseconds: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_in_milliseconds());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnblockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnblockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnblockRequest::GetClassData() const { return &_class_data_; }

void UnblockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnblockRequest *>(to)->MergeFrom(
      static_cast<const UnblockRequest &>(from));
}


void UnblockRequest::MergeFrom(const UnblockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.UnblockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  switch (from.duration_case()) {
    case kDurationInSeconds: {
      _internal_set_duration_in_seconds(from._internal_duration_in_seconds());
      break;
    }
    case kDurationInMilliseconds: {
      _internal_set_duration_in_milliseconds(from._internal_duration_in_milliseconds());
      break;
    }
    case DURATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnblockRequest::CopyFrom(const UnblockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.UnblockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockRequest::IsInitialized() const {
  return true;
}

void UnblockRequest::InternalSwap(UnblockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  swap(duration_, other->duration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnblockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[35]);
}

// ===================================================================

class UnblockResponse::_Internal {
 public:
};

UnblockResponse::UnblockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.UnblockResponse)
}
UnblockResponse::UnblockResponse(const UnblockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.UnblockResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnblockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnblockResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnblockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[36]);
}

// ===================================================================

class CancelUnblocksRequest::_Internal {
 public:
};

CancelUnblocksRequest::CancelUnblocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.CancelUnblocksRequest)
}
CancelUnblocksRequest::CancelUnblocksRequest(const CancelUnblocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.CancelUnblocksRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelUnblocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelUnblocksRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelUnblocksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[37]);
}

// ===================================================================

class CancelUnblocksResponse::_Internal {
 public:
};

CancelUnblocksResponse::CancelUnblocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.CancelUnblocksResponse)
}
CancelUnblocksResponse::CancelUnblocksResponse(const CancelUnblocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cancelled_unblocks_ = from.cancelled_unblocks_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.CancelUnblocksResponse)
}

void CancelUnblocksResponse::SharedCtor() {
cancelled_unblocks_ = 0u;
}

CancelUnblocksResponse::~CancelUnblocksResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.CancelUnblocksResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelUnblocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CancelUnblocksResponse::ArenaDtor(void* object) {
  CancelUnblocksResponse* _this = reinterpret_cast< CancelUnblocksResponse* >(object);
  (void)_this;
}
void CancelUnblocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelUnblocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelUnblocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.CancelUnblocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cancelled_unblocks_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelUnblocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cancelled_unblocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cancelled_unblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelUnblocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.CancelUnblocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cancelled_unblocks = 1;
  if (this->_internal_cancelled_unblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cancelled_unblocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.CancelUnblocksResponse)
  return target;
}

size_t CancelUnblocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.CancelUnblocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cancelled_unblocks = 1;
  if (this->_internal_cancelled_unblocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cancelled_unblocks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelUnblocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelUnblocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelUnblocksResponse::GetClassData() const { return &_class_data_; }

void CancelUnblocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelUnblocksResponse *>(to)->MergeFrom(
      static_cast<const CancelUnblocksResponse &>(from));
}


void CancelUnblocksResponse::MergeFrom(const CancelUnblocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.CancelUnblocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cancelled_unblocks() != 0) {
    _internal_set_cancelled_unblocks(from._internal_cancelled_unblocks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelUnblocksResponse::CopyFrom(const CancelUnblocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.CancelUnblocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelUnblocksResponse::IsInitialized() const {
  return true;
}

void CancelUnblocksResponse::InternalSwap(CancelUnblocksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cancelled_unblocks_, other->cancelled_unblocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelUnblocksResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[38]);
}

// ===================================================================

class GetChannelConfigurationRequest::_Internal {
 public:
};

GetChannelConfigurationRequest::GetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetChannelConfigurationRequest)
}
GetChannelConfigurationRequest::GetChannelConfigurationRequest(const GetChannelConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetChannelConfigurationRequest)
}

void GetChannelConfigurationRequest::SharedCtor() {
}

GetChannelConfigurationRequest::~GetChannelConfigurationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetChannelConfigurationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelConfigurationRequest::ArenaDtor(void* object) {
  GetChannelConfigurationRequest* _this = reinterpret_cast< GetChannelConfigurationRequest* >(object);
  (void)_this;
}
void GetChannelConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetChannelConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetChannelConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetChannelConfigurationRequest)
  return target;
}

size_t GetChannelConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetChannelConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelConfigurationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelConfigurationRequest::GetClassData() const { return &_class_data_; }

void GetChannelConfigurationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelConfigurationRequest *>(to)->MergeFrom(
      static_cast<const GetChannelConfigurationRequest &>(from));
}


void GetChannelConfigurationRequest::MergeFrom(const GetChannelConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetChannelConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelConfigurationRequest::CopyFrom(const GetChannelConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetChannelConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelConfigurationRequest::IsInitialized() const {
  return true;
}

void GetChannelConfigurationRequest::InternalSwap(GetChannelConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[39]);
}

// ===================================================================

class GetChannelConfigurationResponse::_Internal {
 public:
};

GetChannelConfigurationResponse::GetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_configurations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetChannelConfigurationResponse)
}
GetChannelConfigurationResponse::GetChannelConfigurationResponse(const GetChannelConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_configurations_(from.channel_configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetChannelConfigurationResponse)
}

void GetChannelConfigurationResponse::SharedCtor() {
}

GetChannelConfigurationResponse::~GetChannelConfigurationResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetChannelConfigurationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelConfigurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelConfigurationResponse::ArenaDtor(void* object) {
  GetChannelConfigurationResponse* _this = reinterpret_cast< GetChannelConfigurationResponse* >(object);
  (void)_this;
}
void GetChannelConfigurationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetChannelConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_configurations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.device.ReturnedChannelConfiguration channel_configurations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetChannelConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.device.ReturnedChannelConfiguration channel_configurations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_configurations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel_configurations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetChannelConfigurationResponse)
  return target;
}

size_t GetChannelConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetChannelConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.device.ReturnedChannelConfiguration channel_configurations = 1;
  total_size += 1UL * this->_internal_channel_configurations_size();
  for (const auto& msg : this->channel_configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelConfigurationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelConfigurationResponse::GetClassData() const { return &_class_data_; }

void GetChannelConfigurationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelConfigurationResponse *>(to)->MergeFrom(
      static_cast<const GetChannelConfigurationResponse &>(from));
}


void GetChannelConfigurationResponse::MergeFrom(const GetChannelConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetChannelConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_configurations_.MergeFrom(from.channel_configurations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelConfigurationResponse::CopyFrom(const GetChannelConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetChannelConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelConfigurationResponse::IsInitialized() const {
  return true;
}

void GetChannelConfigurationResponse::InternalSwap(GetChannelConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_configurations_.InternalSwap(&other->channel_configurations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[40]);
}

// ===================================================================

SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse() {}
SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::MergeFrom(const SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[41]);
}

// ===================================================================

class SetChannelConfigurationRequest::_Internal {
 public:
};

SetChannelConfigurationRequest::SetChannelConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_configurations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetChannelConfigurationRequest)
}
SetChannelConfigurationRequest::SetChannelConfigurationRequest(const SetChannelConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_configurations_.MergeFrom(from.channel_configurations_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetChannelConfigurationRequest)
}

void SetChannelConfigurationRequest::SharedCtor() {
}

SetChannelConfigurationRequest::~SetChannelConfigurationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetChannelConfigurationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetChannelConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetChannelConfigurationRequest::ArenaDtor(void* object) {
  SetChannelConfigurationRequest* _this = reinterpret_cast< SetChannelConfigurationRequest* >(object);
  (void)_this;
  _this->channel_configurations_. ~MapField();
}
inline void SetChannelConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SetChannelConfigurationRequest::ArenaDtor);
  }
}
void SetChannelConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetChannelConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetChannelConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_configurations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetChannelConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .minknow_api.device.ChannelConfiguration> channel_configurations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&channel_configurations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetChannelConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetChannelConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .minknow_api.device.ChannelConfiguration> channel_configurations = 1;
  if (!this->_internal_channel_configurations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_channel_configurations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_channel_configurations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >::const_iterator
          it = this->_internal_channel_configurations().begin();
          it != this->_internal_channel_configurations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >::const_iterator
          it = this->_internal_channel_configurations().begin();
          it != this->_internal_channel_configurations().end(); ++it) {
        target = SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetChannelConfigurationRequest)
  return target;
}

size_t SetChannelConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetChannelConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .minknow_api.device.ChannelConfiguration> channel_configurations = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_configurations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::minknow_api::device::ChannelConfiguration >::const_iterator
      it = this->_internal_channel_configurations().begin();
      it != this->_internal_channel_configurations().end(); ++it) {
    total_size += SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetChannelConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetChannelConfigurationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetChannelConfigurationRequest::GetClassData() const { return &_class_data_; }

void SetChannelConfigurationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetChannelConfigurationRequest *>(to)->MergeFrom(
      static_cast<const SetChannelConfigurationRequest &>(from));
}


void SetChannelConfigurationRequest::MergeFrom(const SetChannelConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetChannelConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_configurations_.MergeFrom(from.channel_configurations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetChannelConfigurationRequest::CopyFrom(const SetChannelConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetChannelConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChannelConfigurationRequest::IsInitialized() const {
  return true;
}

void SetChannelConfigurationRequest::InternalSwap(SetChannelConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_configurations_.InternalSwap(&other->channel_configurations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetChannelConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[42]);
}

// ===================================================================

class SetChannelConfigurationResponse::_Internal {
 public:
};

SetChannelConfigurationResponse::SetChannelConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetChannelConfigurationResponse)
}
SetChannelConfigurationResponse::SetChannelConfigurationResponse(const SetChannelConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetChannelConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetChannelConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetChannelConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetChannelConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[43]);
}

// ===================================================================

class SetChannelConfigurationAllRequest::_Internal {
 public:
  static const ::minknow_api::device::ChannelConfiguration& channel_configuration(const SetChannelConfigurationAllRequest* msg);
};

const ::minknow_api::device::ChannelConfiguration&
SetChannelConfigurationAllRequest::_Internal::channel_configuration(const SetChannelConfigurationAllRequest* msg) {
  return *msg->channel_configuration_;
}
SetChannelConfigurationAllRequest::SetChannelConfigurationAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetChannelConfigurationAllRequest)
}
SetChannelConfigurationAllRequest::SetChannelConfigurationAllRequest(const SetChannelConfigurationAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel_configuration()) {
    channel_configuration_ = new ::minknow_api::device::ChannelConfiguration(*from.channel_configuration_);
  } else {
    channel_configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetChannelConfigurationAllRequest)
}

void SetChannelConfigurationAllRequest::SharedCtor() {
channel_configuration_ = nullptr;
}

SetChannelConfigurationAllRequest::~SetChannelConfigurationAllRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetChannelConfigurationAllRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetChannelConfigurationAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_configuration_;
}

void SetChannelConfigurationAllRequest::ArenaDtor(void* object) {
  SetChannelConfigurationAllRequest* _this = reinterpret_cast< SetChannelConfigurationAllRequest* >(object);
  (void)_this;
}
void SetChannelConfigurationAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetChannelConfigurationAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetChannelConfigurationAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetChannelConfigurationAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_configuration_ != nullptr) {
    delete channel_configuration_;
  }
  channel_configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetChannelConfigurationAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.ChannelConfiguration channel_configuration = 1 [(.minknow_api.rpc_unwrap) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetChannelConfigurationAllRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetChannelConfigurationAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.ChannelConfiguration channel_configuration = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_channel_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetChannelConfigurationAllRequest)
  return target;
}

size_t SetChannelConfigurationAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetChannelConfigurationAllRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.ChannelConfiguration channel_configuration = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_channel_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetChannelConfigurationAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetChannelConfigurationAllRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetChannelConfigurationAllRequest::GetClassData() const { return &_class_data_; }

void SetChannelConfigurationAllRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetChannelConfigurationAllRequest *>(to)->MergeFrom(
      static_cast<const SetChannelConfigurationAllRequest &>(from));
}


void SetChannelConfigurationAllRequest::MergeFrom(const SetChannelConfigurationAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetChannelConfigurationAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_configuration()) {
    _internal_mutable_channel_configuration()->::minknow_api::device::ChannelConfiguration::MergeFrom(from._internal_channel_configuration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetChannelConfigurationAllRequest::CopyFrom(const SetChannelConfigurationAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetChannelConfigurationAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChannelConfigurationAllRequest::IsInitialized() const {
  return true;
}

void SetChannelConfigurationAllRequest::InternalSwap(SetChannelConfigurationAllRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_configuration_, other->channel_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetChannelConfigurationAllRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[44]);
}

// ===================================================================

class SetChannelConfigurationAllResponse::_Internal {
 public:
};

SetChannelConfigurationAllResponse::SetChannelConfigurationAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetChannelConfigurationAllResponse)
}
SetChannelConfigurationAllResponse::SetChannelConfigurationAllResponse(const SetChannelConfigurationAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetChannelConfigurationAllResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetChannelConfigurationAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetChannelConfigurationAllResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetChannelConfigurationAllResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[45]);
}

// ===================================================================

class SaturationConfig_Thresholds::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& general_threshold(const SaturationConfig_Thresholds* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& unblock_threshold(const SaturationConfig_Thresholds* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& user_general_threshold(const SaturationConfig_Thresholds* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& user_unblock_threshold(const SaturationConfig_Thresholds* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
SaturationConfig_Thresholds::_Internal::general_threshold(const SaturationConfig_Thresholds* msg) {
  return *msg->general_threshold_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
SaturationConfig_Thresholds::_Internal::unblock_threshold(const SaturationConfig_Thresholds* msg) {
  return *msg->unblock_threshold_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
SaturationConfig_Thresholds::_Internal::user_general_threshold(const SaturationConfig_Thresholds* msg) {
  return *msg->user_general_threshold_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
SaturationConfig_Thresholds::_Internal::user_unblock_threshold(const SaturationConfig_Thresholds* msg) {
  return *msg->user_unblock_threshold_;
}
void SaturationConfig_Thresholds::clear_general_threshold() {
  if (GetArenaForAllocation() == nullptr && general_threshold_ != nullptr) {
    delete general_threshold_;
  }
  general_threshold_ = nullptr;
}
void SaturationConfig_Thresholds::clear_unblock_threshold() {
  if (GetArenaForAllocation() == nullptr && unblock_threshold_ != nullptr) {
    delete unblock_threshold_;
  }
  unblock_threshold_ = nullptr;
}
void SaturationConfig_Thresholds::clear_user_general_threshold() {
  if (GetArenaForAllocation() == nullptr && user_general_threshold_ != nullptr) {
    delete user_general_threshold_;
  }
  user_general_threshold_ = nullptr;
}
void SaturationConfig_Thresholds::clear_user_unblock_threshold() {
  if (GetArenaForAllocation() == nullptr && user_unblock_threshold_ != nullptr) {
    delete user_unblock_threshold_;
  }
  user_unblock_threshold_ = nullptr;
}
SaturationConfig_Thresholds::SaturationConfig_Thresholds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SaturationConfig.Thresholds)
}
SaturationConfig_Thresholds::SaturationConfig_Thresholds(const SaturationConfig_Thresholds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_general_threshold()) {
    general_threshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.general_threshold_);
  } else {
    general_threshold_ = nullptr;
  }
  if (from._internal_has_unblock_threshold()) {
    unblock_threshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.unblock_threshold_);
  } else {
    unblock_threshold_ = nullptr;
  }
  if (from._internal_has_user_general_threshold()) {
    user_general_threshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.user_general_threshold_);
  } else {
    user_general_threshold_ = nullptr;
  }
  if (from._internal_has_user_unblock_threshold()) {
    user_unblock_threshold_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.user_unblock_threshold_);
  } else {
    user_unblock_threshold_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SaturationConfig.Thresholds)
}

void SaturationConfig_Thresholds::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&general_threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_unblock_threshold_) -
    reinterpret_cast<char*>(&general_threshold_)) + sizeof(user_unblock_threshold_));
}

SaturationConfig_Thresholds::~SaturationConfig_Thresholds() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SaturationConfig.Thresholds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaturationConfig_Thresholds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete general_threshold_;
  if (this != internal_default_instance()) delete unblock_threshold_;
  if (this != internal_default_instance()) delete user_general_threshold_;
  if (this != internal_default_instance()) delete user_unblock_threshold_;
}

void SaturationConfig_Thresholds::ArenaDtor(void* object) {
  SaturationConfig_Thresholds* _this = reinterpret_cast< SaturationConfig_Thresholds* >(object);
  (void)_this;
}
void SaturationConfig_Thresholds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaturationConfig_Thresholds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaturationConfig_Thresholds::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SaturationConfig.Thresholds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && general_threshold_ != nullptr) {
    delete general_threshold_;
  }
  general_threshold_ = nullptr;
  if (GetArenaForAllocation() == nullptr && unblock_threshold_ != nullptr) {
    delete unblock_threshold_;
  }
  unblock_threshold_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_general_threshold_ != nullptr) {
    delete user_general_threshold_;
  }
  user_general_threshold_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_unblock_threshold_ != nullptr) {
    delete user_unblock_threshold_;
  }
  user_unblock_threshold_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaturationConfig_Thresholds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value general_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_general_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value unblock_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unblock_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value user_general_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_general_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value user_unblock_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_unblock_threshold(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaturationConfig_Thresholds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SaturationConfig.Thresholds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value general_threshold = 1;
  if (this->_internal_has_general_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::general_threshold(this), target, stream);
  }

  // .google.protobuf.UInt32Value unblock_threshold = 2;
  if (this->_internal_has_unblock_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unblock_threshold(this), target, stream);
  }

  // .google.protobuf.UInt32Value user_general_threshold = 3;
  if (this->_internal_has_user_general_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_general_threshold(this), target, stream);
  }

  // .google.protobuf.UInt32Value user_unblock_threshold = 4;
  if (this->_internal_has_user_unblock_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::user_unblock_threshold(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SaturationConfig.Thresholds)
  return target;
}

size_t SaturationConfig_Thresholds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SaturationConfig.Thresholds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value general_threshold = 1;
  if (this->_internal_has_general_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *general_threshold_);
  }

  // .google.protobuf.UInt32Value unblock_threshold = 2;
  if (this->_internal_has_unblock_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unblock_threshold_);
  }

  // .google.protobuf.UInt32Value user_general_threshold = 3;
  if (this->_internal_has_user_general_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_general_threshold_);
  }

  // .google.protobuf.UInt32Value user_unblock_threshold = 4;
  if (this->_internal_has_user_unblock_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_unblock_threshold_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaturationConfig_Thresholds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaturationConfig_Thresholds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaturationConfig_Thresholds::GetClassData() const { return &_class_data_; }

void SaturationConfig_Thresholds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaturationConfig_Thresholds *>(to)->MergeFrom(
      static_cast<const SaturationConfig_Thresholds &>(from));
}


void SaturationConfig_Thresholds::MergeFrom(const SaturationConfig_Thresholds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SaturationConfig.Thresholds)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_general_threshold()) {
    _internal_mutable_general_threshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_general_threshold());
  }
  if (from._internal_has_unblock_threshold()) {
    _internal_mutable_unblock_threshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_unblock_threshold());
  }
  if (from._internal_has_user_general_threshold()) {
    _internal_mutable_user_general_threshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_user_general_threshold());
  }
  if (from._internal_has_user_unblock_threshold()) {
    _internal_mutable_user_unblock_threshold()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_user_unblock_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationConfig_Thresholds::CopyFrom(const SaturationConfig_Thresholds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SaturationConfig.Thresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaturationConfig_Thresholds::IsInitialized() const {
  return true;
}

void SaturationConfig_Thresholds::InternalSwap(SaturationConfig_Thresholds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaturationConfig_Thresholds, user_unblock_threshold_)
      + sizeof(SaturationConfig_Thresholds::user_unblock_threshold_)
      - PROTOBUF_FIELD_OFFSET(SaturationConfig_Thresholds, general_threshold_)>(
          reinterpret_cast<char*>(&general_threshold_),
          reinterpret_cast<char*>(&other->general_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaturationConfig_Thresholds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[46]);
}

// ===================================================================

class SaturationConfig_SoftwareSaturation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& software_min_adc(const SaturationConfig_SoftwareSaturation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& software_max_adc(const SaturationConfig_SoftwareSaturation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int32Value&
SaturationConfig_SoftwareSaturation::_Internal::software_min_adc(const SaturationConfig_SoftwareSaturation* msg) {
  return *msg->software_min_adc_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
SaturationConfig_SoftwareSaturation::_Internal::software_max_adc(const SaturationConfig_SoftwareSaturation* msg) {
  return *msg->software_max_adc_;
}
void SaturationConfig_SoftwareSaturation::clear_software_min_adc() {
  if (GetArenaForAllocation() == nullptr && software_min_adc_ != nullptr) {
    delete software_min_adc_;
  }
  software_min_adc_ = nullptr;
}
void SaturationConfig_SoftwareSaturation::clear_software_max_adc() {
  if (GetArenaForAllocation() == nullptr && software_max_adc_ != nullptr) {
    delete software_max_adc_;
  }
  software_max_adc_ = nullptr;
}
SaturationConfig_SoftwareSaturation::SaturationConfig_SoftwareSaturation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SaturationConfig.SoftwareSaturation)
}
SaturationConfig_SoftwareSaturation::SaturationConfig_SoftwareSaturation(const SaturationConfig_SoftwareSaturation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_software_min_adc()) {
    software_min_adc_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.software_min_adc_);
  } else {
    software_min_adc_ = nullptr;
  }
  if (from._internal_has_software_max_adc()) {
    software_max_adc_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.software_max_adc_);
  } else {
    software_max_adc_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SaturationConfig.SoftwareSaturation)
}

void SaturationConfig_SoftwareSaturation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&software_min_adc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&software_min_adc_)) + sizeof(enabled_));
}

SaturationConfig_SoftwareSaturation::~SaturationConfig_SoftwareSaturation() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SaturationConfig.SoftwareSaturation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaturationConfig_SoftwareSaturation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete software_min_adc_;
  if (this != internal_default_instance()) delete software_max_adc_;
}

void SaturationConfig_SoftwareSaturation::ArenaDtor(void* object) {
  SaturationConfig_SoftwareSaturation* _this = reinterpret_cast< SaturationConfig_SoftwareSaturation* >(object);
  (void)_this;
}
void SaturationConfig_SoftwareSaturation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaturationConfig_SoftwareSaturation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaturationConfig_SoftwareSaturation::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SaturationConfig.SoftwareSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && software_min_adc_ != nullptr) {
    delete software_min_adc_;
  }
  software_min_adc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && software_max_adc_ != nullptr) {
    delete software_max_adc_;
  }
  software_max_adc_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaturationConfig_SoftwareSaturation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value software_min_adc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_software_min_adc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value software_max_adc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_software_max_adc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaturationConfig_SoftwareSaturation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SaturationConfig.SoftwareSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .google.protobuf.Int32Value software_min_adc = 2;
  if (this->_internal_has_software_min_adc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::software_min_adc(this), target, stream);
  }

  // .google.protobuf.Int32Value software_max_adc = 3;
  if (this->_internal_has_software_max_adc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::software_max_adc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SaturationConfig.SoftwareSaturation)
  return target;
}

size_t SaturationConfig_SoftwareSaturation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SaturationConfig.SoftwareSaturation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int32Value software_min_adc = 2;
  if (this->_internal_has_software_min_adc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *software_min_adc_);
  }

  // .google.protobuf.Int32Value software_max_adc = 3;
  if (this->_internal_has_software_max_adc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *software_max_adc_);
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaturationConfig_SoftwareSaturation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaturationConfig_SoftwareSaturation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaturationConfig_SoftwareSaturation::GetClassData() const { return &_class_data_; }

void SaturationConfig_SoftwareSaturation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaturationConfig_SoftwareSaturation *>(to)->MergeFrom(
      static_cast<const SaturationConfig_SoftwareSaturation &>(from));
}


void SaturationConfig_SoftwareSaturation::MergeFrom(const SaturationConfig_SoftwareSaturation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SaturationConfig.SoftwareSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_software_min_adc()) {
    _internal_mutable_software_min_adc()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_software_min_adc());
  }
  if (from._internal_has_software_max_adc()) {
    _internal_mutable_software_max_adc()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_software_max_adc());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationConfig_SoftwareSaturation::CopyFrom(const SaturationConfig_SoftwareSaturation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SaturationConfig.SoftwareSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaturationConfig_SoftwareSaturation::IsInitialized() const {
  return true;
}

void SaturationConfig_SoftwareSaturation::InternalSwap(SaturationConfig_SoftwareSaturation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaturationConfig_SoftwareSaturation, enabled_)
      + sizeof(SaturationConfig_SoftwareSaturation::enabled_)
      - PROTOBUF_FIELD_OFFSET(SaturationConfig_SoftwareSaturation, software_min_adc_)>(
          reinterpret_cast<char*>(&software_min_adc_),
          reinterpret_cast<char*>(&other->software_min_adc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaturationConfig_SoftwareSaturation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[47]);
}

// ===================================================================

class SaturationConfig_UserThresholdSaturation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& user_threshold_min_pa(const SaturationConfig_UserThresholdSaturation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& user_threshold_max_pa(const SaturationConfig_UserThresholdSaturation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
SaturationConfig_UserThresholdSaturation::_Internal::user_threshold_min_pa(const SaturationConfig_UserThresholdSaturation* msg) {
  return *msg->user_threshold_min_pa_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
SaturationConfig_UserThresholdSaturation::_Internal::user_threshold_max_pa(const SaturationConfig_UserThresholdSaturation* msg) {
  return *msg->user_threshold_max_pa_;
}
void SaturationConfig_UserThresholdSaturation::clear_user_threshold_min_pa() {
  if (GetArenaForAllocation() == nullptr && user_threshold_min_pa_ != nullptr) {
    delete user_threshold_min_pa_;
  }
  user_threshold_min_pa_ = nullptr;
}
void SaturationConfig_UserThresholdSaturation::clear_user_threshold_max_pa() {
  if (GetArenaForAllocation() == nullptr && user_threshold_max_pa_ != nullptr) {
    delete user_threshold_max_pa_;
  }
  user_threshold_max_pa_ = nullptr;
}
SaturationConfig_UserThresholdSaturation::SaturationConfig_UserThresholdSaturation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SaturationConfig.UserThresholdSaturation)
}
SaturationConfig_UserThresholdSaturation::SaturationConfig_UserThresholdSaturation(const SaturationConfig_UserThresholdSaturation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_threshold_min_pa()) {
    user_threshold_min_pa_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.user_threshold_min_pa_);
  } else {
    user_threshold_min_pa_ = nullptr;
  }
  if (from._internal_has_user_threshold_max_pa()) {
    user_threshold_max_pa_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.user_threshold_max_pa_);
  } else {
    user_threshold_max_pa_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SaturationConfig.UserThresholdSaturation)
}

void SaturationConfig_UserThresholdSaturation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_threshold_min_pa_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&user_threshold_min_pa_)) + sizeof(enabled_));
}

SaturationConfig_UserThresholdSaturation::~SaturationConfig_UserThresholdSaturation() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaturationConfig_UserThresholdSaturation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_threshold_min_pa_;
  if (this != internal_default_instance()) delete user_threshold_max_pa_;
}

void SaturationConfig_UserThresholdSaturation::ArenaDtor(void* object) {
  SaturationConfig_UserThresholdSaturation* _this = reinterpret_cast< SaturationConfig_UserThresholdSaturation* >(object);
  (void)_this;
}
void SaturationConfig_UserThresholdSaturation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaturationConfig_UserThresholdSaturation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaturationConfig_UserThresholdSaturation::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_threshold_min_pa_ != nullptr) {
    delete user_threshold_min_pa_;
  }
  user_threshold_min_pa_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_threshold_max_pa_ != nullptr) {
    delete user_threshold_max_pa_;
  }
  user_threshold_max_pa_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaturationConfig_UserThresholdSaturation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue user_threshold_min_pa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_threshold_min_pa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue user_threshold_max_pa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_threshold_max_pa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaturationConfig_UserThresholdSaturation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .google.protobuf.FloatValue user_threshold_min_pa = 2;
  if (this->_internal_has_user_threshold_min_pa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_threshold_min_pa(this), target, stream);
  }

  // .google.protobuf.FloatValue user_threshold_max_pa = 3;
  if (this->_internal_has_user_threshold_max_pa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_threshold_max_pa(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  return target;
}

size_t SaturationConfig_UserThresholdSaturation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue user_threshold_min_pa = 2;
  if (this->_internal_has_user_threshold_min_pa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_threshold_min_pa_);
  }

  // .google.protobuf.FloatValue user_threshold_max_pa = 3;
  if (this->_internal_has_user_threshold_max_pa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_threshold_max_pa_);
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaturationConfig_UserThresholdSaturation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaturationConfig_UserThresholdSaturation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaturationConfig_UserThresholdSaturation::GetClassData() const { return &_class_data_; }

void SaturationConfig_UserThresholdSaturation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaturationConfig_UserThresholdSaturation *>(to)->MergeFrom(
      static_cast<const SaturationConfig_UserThresholdSaturation &>(from));
}


void SaturationConfig_UserThresholdSaturation::MergeFrom(const SaturationConfig_UserThresholdSaturation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_threshold_min_pa()) {
    _internal_mutable_user_threshold_min_pa()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_user_threshold_min_pa());
  }
  if (from._internal_has_user_threshold_max_pa()) {
    _internal_mutable_user_threshold_max_pa()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_user_threshold_max_pa());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationConfig_UserThresholdSaturation::CopyFrom(const SaturationConfig_UserThresholdSaturation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SaturationConfig.UserThresholdSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaturationConfig_UserThresholdSaturation::IsInitialized() const {
  return true;
}

void SaturationConfig_UserThresholdSaturation::InternalSwap(SaturationConfig_UserThresholdSaturation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaturationConfig_UserThresholdSaturation, enabled_)
      + sizeof(SaturationConfig_UserThresholdSaturation::enabled_)
      - PROTOBUF_FIELD_OFFSET(SaturationConfig_UserThresholdSaturation, user_threshold_min_pa_)>(
          reinterpret_cast<char*>(&user_threshold_min_pa_),
          reinterpret_cast<char*>(&other->user_threshold_min_pa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaturationConfig_UserThresholdSaturation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[48]);
}

// ===================================================================

class SaturationConfig::_Internal {
 public:
  static const ::minknow_api::device::SaturationConfig_Thresholds& thresholds(const SaturationConfig* msg);
  static const ::minknow_api::device::SaturationConfig_SoftwareSaturation& software_saturation(const SaturationConfig* msg);
  static const ::minknow_api::device::SaturationConfig_UserThresholdSaturation& user_threshold_saturation(const SaturationConfig* msg);
};

const ::minknow_api::device::SaturationConfig_Thresholds&
SaturationConfig::_Internal::thresholds(const SaturationConfig* msg) {
  return *msg->thresholds_;
}
const ::minknow_api::device::SaturationConfig_SoftwareSaturation&
SaturationConfig::_Internal::software_saturation(const SaturationConfig* msg) {
  return *msg->software_saturation_;
}
const ::minknow_api::device::SaturationConfig_UserThresholdSaturation&
SaturationConfig::_Internal::user_threshold_saturation(const SaturationConfig* msg) {
  return *msg->user_threshold_saturation_;
}
SaturationConfig::SaturationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SaturationConfig)
}
SaturationConfig::SaturationConfig(const SaturationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_thresholds()) {
    thresholds_ = new ::minknow_api::device::SaturationConfig_Thresholds(*from.thresholds_);
  } else {
    thresholds_ = nullptr;
  }
  if (from._internal_has_software_saturation()) {
    software_saturation_ = new ::minknow_api::device::SaturationConfig_SoftwareSaturation(*from.software_saturation_);
  } else {
    software_saturation_ = nullptr;
  }
  if (from._internal_has_user_threshold_saturation()) {
    user_threshold_saturation_ = new ::minknow_api::device::SaturationConfig_UserThresholdSaturation(*from.user_threshold_saturation_);
  } else {
    user_threshold_saturation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SaturationConfig)
}

void SaturationConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thresholds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_threshold_saturation_) -
    reinterpret_cast<char*>(&thresholds_)) + sizeof(user_threshold_saturation_));
}

SaturationConfig::~SaturationConfig() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SaturationConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SaturationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete thresholds_;
  if (this != internal_default_instance()) delete software_saturation_;
  if (this != internal_default_instance()) delete user_threshold_saturation_;
}

void SaturationConfig::ArenaDtor(void* object) {
  SaturationConfig* _this = reinterpret_cast< SaturationConfig* >(object);
  (void)_this;
}
void SaturationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaturationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaturationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SaturationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && thresholds_ != nullptr) {
    delete thresholds_;
  }
  thresholds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && software_saturation_ != nullptr) {
    delete software_saturation_;
  }
  software_saturation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_threshold_saturation_ != nullptr) {
    delete user_threshold_saturation_;
  }
  user_threshold_saturation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaturationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.SaturationConfig.Thresholds thresholds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thresholds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.SaturationConfig.SoftwareSaturation software_saturation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_software_saturation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.SaturationConfig.UserThresholdSaturation user_threshold_saturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_threshold_saturation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaturationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SaturationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig.Thresholds thresholds = 1;
  if (this->_internal_has_thresholds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::thresholds(this), target, stream);
  }

  // .minknow_api.device.SaturationConfig.SoftwareSaturation software_saturation = 2;
  if (this->_internal_has_software_saturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::software_saturation(this), target, stream);
  }

  // .minknow_api.device.SaturationConfig.UserThresholdSaturation user_threshold_saturation = 3;
  if (this->_internal_has_user_threshold_saturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_threshold_saturation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SaturationConfig)
  return target;
}

size_t SaturationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SaturationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig.Thresholds thresholds = 1;
  if (this->_internal_has_thresholds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thresholds_);
  }

  // .minknow_api.device.SaturationConfig.SoftwareSaturation software_saturation = 2;
  if (this->_internal_has_software_saturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *software_saturation_);
  }

  // .minknow_api.device.SaturationConfig.UserThresholdSaturation user_threshold_saturation = 3;
  if (this->_internal_has_user_threshold_saturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_threshold_saturation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaturationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SaturationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaturationConfig::GetClassData() const { return &_class_data_; }

void SaturationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SaturationConfig *>(to)->MergeFrom(
      static_cast<const SaturationConfig &>(from));
}


void SaturationConfig::MergeFrom(const SaturationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SaturationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thresholds()) {
    _internal_mutable_thresholds()->::minknow_api::device::SaturationConfig_Thresholds::MergeFrom(from._internal_thresholds());
  }
  if (from._internal_has_software_saturation()) {
    _internal_mutable_software_saturation()->::minknow_api::device::SaturationConfig_SoftwareSaturation::MergeFrom(from._internal_software_saturation());
  }
  if (from._internal_has_user_threshold_saturation()) {
    _internal_mutable_user_threshold_saturation()->::minknow_api::device::SaturationConfig_UserThresholdSaturation::MergeFrom(from._internal_user_threshold_saturation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaturationConfig::CopyFrom(const SaturationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SaturationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaturationConfig::IsInitialized() const {
  return true;
}

void SaturationConfig::InternalSwap(SaturationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaturationConfig, user_threshold_saturation_)
      + sizeof(SaturationConfig::user_threshold_saturation_)
      - PROTOBUF_FIELD_OFFSET(SaturationConfig, thresholds_)>(
          reinterpret_cast<char*>(&thresholds_),
          reinterpret_cast<char*>(&other->thresholds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaturationConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[49]);
}

// ===================================================================

class SetSaturationConfigRequest::_Internal {
 public:
  static const ::minknow_api::device::SaturationConfig& settings(const SetSaturationConfigRequest* msg);
};

const ::minknow_api::device::SaturationConfig&
SetSaturationConfigRequest::_Internal::settings(const SetSaturationConfigRequest* msg) {
  return *msg->settings_;
}
SetSaturationConfigRequest::SetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetSaturationConfigRequest)
}
SetSaturationConfigRequest::SetSaturationConfigRequest(const SetSaturationConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::minknow_api::device::SaturationConfig(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetSaturationConfigRequest)
}

void SetSaturationConfigRequest::SharedCtor() {
settings_ = nullptr;
}

SetSaturationConfigRequest::~SetSaturationConfigRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetSaturationConfigRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetSaturationConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void SetSaturationConfigRequest::ArenaDtor(void* object) {
  SetSaturationConfigRequest* _this = reinterpret_cast< SetSaturationConfigRequest* >(object);
  (void)_this;
}
void SetSaturationConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSaturationConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSaturationConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetSaturationConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSaturationConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSaturationConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetSaturationConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetSaturationConfigRequest)
  return target;
}

size_t SetSaturationConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetSaturationConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSaturationConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSaturationConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSaturationConfigRequest::GetClassData() const { return &_class_data_; }

void SetSaturationConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetSaturationConfigRequest *>(to)->MergeFrom(
      static_cast<const SetSaturationConfigRequest &>(from));
}


void SetSaturationConfigRequest::MergeFrom(const SetSaturationConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetSaturationConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::minknow_api::device::SaturationConfig::MergeFrom(from._internal_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSaturationConfigRequest::CopyFrom(const SetSaturationConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetSaturationConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSaturationConfigRequest::IsInitialized() const {
  return true;
}

void SetSaturationConfigRequest::InternalSwap(SetSaturationConfigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSaturationConfigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[50]);
}

// ===================================================================

class SetSaturationConfigResponse::_Internal {
 public:
};

SetSaturationConfigResponse::SetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetSaturationConfigResponse)
}
SetSaturationConfigResponse::SetSaturationConfigResponse(const SetSaturationConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetSaturationConfigResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSaturationConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSaturationConfigResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetSaturationConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[51]);
}

// ===================================================================

class GetSaturationConfigRequest::_Internal {
 public:
};

GetSaturationConfigRequest::GetSaturationConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetSaturationConfigRequest)
}
GetSaturationConfigRequest::GetSaturationConfigRequest(const GetSaturationConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetSaturationConfigRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSaturationConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSaturationConfigRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetSaturationConfigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[52]);
}

// ===================================================================

class GetSaturationConfigResponse::_Internal {
 public:
  static const ::minknow_api::device::SaturationConfig& settings(const GetSaturationConfigResponse* msg);
};

const ::minknow_api::device::SaturationConfig&
GetSaturationConfigResponse::_Internal::settings(const GetSaturationConfigResponse* msg) {
  return *msg->settings_;
}
GetSaturationConfigResponse::GetSaturationConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetSaturationConfigResponse)
}
GetSaturationConfigResponse::GetSaturationConfigResponse(const GetSaturationConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::minknow_api::device::SaturationConfig(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetSaturationConfigResponse)
}

void GetSaturationConfigResponse::SharedCtor() {
settings_ = nullptr;
}

GetSaturationConfigResponse::~GetSaturationConfigResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetSaturationConfigResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSaturationConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
}

void GetSaturationConfigResponse::ArenaDtor(void* object) {
  GetSaturationConfigResponse* _this = reinterpret_cast< GetSaturationConfigResponse* >(object);
  (void)_this;
}
void GetSaturationConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSaturationConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSaturationConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetSaturationConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSaturationConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSaturationConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetSaturationConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetSaturationConfigResponse)
  return target;
}

size_t GetSaturationConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetSaturationConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.SaturationConfig settings = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSaturationConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSaturationConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSaturationConfigResponse::GetClassData() const { return &_class_data_; }

void GetSaturationConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSaturationConfigResponse *>(to)->MergeFrom(
      static_cast<const GetSaturationConfigResponse &>(from));
}


void GetSaturationConfigResponse::MergeFrom(const GetSaturationConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetSaturationConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _internal_mutable_settings()->::minknow_api::device::SaturationConfig::MergeFrom(from._internal_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSaturationConfigResponse::CopyFrom(const GetSaturationConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetSaturationConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSaturationConfigResponse::IsInitialized() const {
  return true;
}

void GetSaturationConfigResponse::InternalSwap(GetSaturationConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSaturationConfigResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[53]);
}

// ===================================================================

class GetSampleRateRequest::_Internal {
 public:
};

GetSampleRateRequest::GetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetSampleRateRequest)
}
GetSampleRateRequest::GetSampleRateRequest(const GetSampleRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetSampleRateRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSampleRateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSampleRateRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetSampleRateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[54]);
}

// ===================================================================

class GetSampleRateResponse::_Internal {
 public:
};

GetSampleRateResponse::GetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetSampleRateResponse)
}
GetSampleRateResponse::GetSampleRateResponse(const GetSampleRateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_rate_ = from.sample_rate_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetSampleRateResponse)
}

void GetSampleRateResponse::SharedCtor() {
sample_rate_ = 0u;
}

GetSampleRateResponse::~GetSampleRateResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetSampleRateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSampleRateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSampleRateResponse::ArenaDtor(void* object) {
  GetSampleRateResponse* _this = reinterpret_cast< GetSampleRateResponse* >(object);
  (void)_this;
}
void GetSampleRateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSampleRateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSampleRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetSampleRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_rate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSampleRateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSampleRateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetSampleRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_rate = 1;
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetSampleRateResponse)
  return target;
}

size_t GetSampleRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetSampleRateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sample_rate = 1;
  if (this->_internal_sample_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSampleRateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSampleRateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSampleRateResponse::GetClassData() const { return &_class_data_; }

void GetSampleRateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSampleRateResponse *>(to)->MergeFrom(
      static_cast<const GetSampleRateResponse &>(from));
}


void GetSampleRateResponse::MergeFrom(const GetSampleRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetSampleRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSampleRateResponse::CopyFrom(const GetSampleRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetSampleRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSampleRateResponse::IsInitialized() const {
  return true;
}

void GetSampleRateResponse::InternalSwap(GetSampleRateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sample_rate_, other->sample_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSampleRateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[55]);
}

// ===================================================================

class SetSampleRateRequest::_Internal {
 public:
};

SetSampleRateRequest::SetSampleRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetSampleRateRequest)
}
SetSampleRateRequest::SetSampleRateRequest(const SetSampleRateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_rate_ = from.sample_rate_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetSampleRateRequest)
}

void SetSampleRateRequest::SharedCtor() {
sample_rate_ = 0u;
}

SetSampleRateRequest::~SetSampleRateRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetSampleRateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetSampleRateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSampleRateRequest::ArenaDtor(void* object) {
  SetSampleRateRequest* _this = reinterpret_cast< SetSampleRateRequest* >(object);
  (void)_this;
}
void SetSampleRateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSampleRateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSampleRateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetSampleRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_rate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSampleRateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sample_rate = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSampleRateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetSampleRateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_rate = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetSampleRateRequest)
  return target;
}

size_t SetSampleRateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetSampleRateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sample_rate = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_sample_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSampleRateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSampleRateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSampleRateRequest::GetClassData() const { return &_class_data_; }

void SetSampleRateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetSampleRateRequest *>(to)->MergeFrom(
      static_cast<const SetSampleRateRequest &>(from));
}


void SetSampleRateRequest::MergeFrom(const SetSampleRateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetSampleRateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_rate() != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSampleRateRequest::CopyFrom(const SetSampleRateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetSampleRateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSampleRateRequest::IsInitialized() const {
  return true;
}

void SetSampleRateRequest::InternalSwap(SetSampleRateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sample_rate_, other->sample_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSampleRateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[56]);
}

// ===================================================================

class SetSampleRateResponse::_Internal {
 public:
};

SetSampleRateResponse::SetSampleRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetSampleRateResponse)
}
SetSampleRateResponse::SetSampleRateResponse(const SetSampleRateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_sample_rate_ = from.real_sample_rate_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetSampleRateResponse)
}

void SetSampleRateResponse::SharedCtor() {
real_sample_rate_ = 0u;
}

SetSampleRateResponse::~SetSampleRateResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetSampleRateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetSampleRateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSampleRateResponse::ArenaDtor(void* object) {
  SetSampleRateResponse* _this = reinterpret_cast< SetSampleRateResponse* >(object);
  (void)_this;
}
void SetSampleRateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSampleRateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSampleRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetSampleRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real_sample_rate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSampleRateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 real_sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          real_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSampleRateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetSampleRateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 real_sample_rate = 1;
  if (this->_internal_real_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_real_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetSampleRateResponse)
  return target;
}

size_t SetSampleRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetSampleRateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 real_sample_rate = 1;
  if (this->_internal_real_sample_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_real_sample_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSampleRateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSampleRateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSampleRateResponse::GetClassData() const { return &_class_data_; }

void SetSampleRateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetSampleRateResponse *>(to)->MergeFrom(
      static_cast<const SetSampleRateResponse &>(from));
}


void SetSampleRateResponse::MergeFrom(const SetSampleRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetSampleRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_real_sample_rate() != 0) {
    _internal_set_real_sample_rate(from._internal_real_sample_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSampleRateResponse::CopyFrom(const SetSampleRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetSampleRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSampleRateResponse::IsInitialized() const {
  return true;
}

void SetSampleRateResponse::InternalSwap(SetSampleRateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(real_sample_rate_, other->real_sample_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSampleRateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[57]);
}

// ===================================================================

class GetBiasVoltageRequest::_Internal {
 public:
};

GetBiasVoltageRequest::GetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetBiasVoltageRequest)
}
GetBiasVoltageRequest::GetBiasVoltageRequest(const GetBiasVoltageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetBiasVoltageRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBiasVoltageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBiasVoltageRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBiasVoltageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[58]);
}

// ===================================================================

class GetBiasVoltageResponse::_Internal {
 public:
};

GetBiasVoltageResponse::GetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.GetBiasVoltageResponse)
}
GetBiasVoltageResponse::GetBiasVoltageResponse(const GetBiasVoltageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bias_voltage_ = from.bias_voltage_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.GetBiasVoltageResponse)
}

void GetBiasVoltageResponse::SharedCtor() {
bias_voltage_ = 0;
}

GetBiasVoltageResponse::~GetBiasVoltageResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.device.GetBiasVoltageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBiasVoltageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBiasVoltageResponse::ArenaDtor(void* object) {
  GetBiasVoltageResponse* _this = reinterpret_cast< GetBiasVoltageResponse* >(object);
  (void)_this;
}
void GetBiasVoltageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBiasVoltageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBiasVoltageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.GetBiasVoltageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bias_voltage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBiasVoltageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bias_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          bias_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBiasVoltageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.GetBiasVoltageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double bias_voltage = 1;
  if (!(this->_internal_bias_voltage() <= 0 && this->_internal_bias_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bias_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.GetBiasVoltageResponse)
  return target;
}

size_t GetBiasVoltageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.GetBiasVoltageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bias_voltage = 1;
  if (!(this->_internal_bias_voltage() <= 0 && this->_internal_bias_voltage() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBiasVoltageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBiasVoltageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBiasVoltageResponse::GetClassData() const { return &_class_data_; }

void GetBiasVoltageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBiasVoltageResponse *>(to)->MergeFrom(
      static_cast<const GetBiasVoltageResponse &>(from));
}


void GetBiasVoltageResponse::MergeFrom(const GetBiasVoltageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.GetBiasVoltageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_bias_voltage() <= 0 && from._internal_bias_voltage() >= 0)) {
    _internal_set_bias_voltage(from._internal_bias_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBiasVoltageResponse::CopyFrom(const GetBiasVoltageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.GetBiasVoltageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBiasVoltageResponse::IsInitialized() const {
  return true;
}

void GetBiasVoltageResponse::InternalSwap(GetBiasVoltageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bias_voltage_, other->bias_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBiasVoltageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[59]);
}

// ===================================================================

class SetBiasVoltageRequest::_Internal {
 public:
};

SetBiasVoltageRequest::SetBiasVoltageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetBiasVoltageRequest)
}
SetBiasVoltageRequest::SetBiasVoltageRequest(const SetBiasVoltageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bias_voltage_ = from.bias_voltage_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetBiasVoltageRequest)
}

void SetBiasVoltageRequest::SharedCtor() {
bias_voltage_ = 0;
}

SetBiasVoltageRequest::~SetBiasVoltageRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.device.SetBiasVoltageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBiasVoltageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBiasVoltageRequest::ArenaDtor(void* object) {
  SetBiasVoltageRequest* _this = reinterpret_cast< SetBiasVoltageRequest* >(object);
  (void)_this;
}
void SetBiasVoltageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBiasVoltageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBiasVoltageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.device.SetBiasVoltageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bias_voltage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBiasVoltageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bias_voltage = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          bias_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBiasVoltageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.device.SetBiasVoltageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double bias_voltage = 1 [(.minknow_api.rpc_required) = true];
  if (!(this->_internal_bias_voltage() <= 0 && this->_internal_bias_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bias_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.device.SetBiasVoltageRequest)
  return target;
}

size_t SetBiasVoltageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.device.SetBiasVoltageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bias_voltage = 1 [(.minknow_api.rpc_required) = true];
  if (!(this->_internal_bias_voltage() <= 0 && this->_internal_bias_voltage() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBiasVoltageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBiasVoltageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBiasVoltageRequest::GetClassData() const { return &_class_data_; }

void SetBiasVoltageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBiasVoltageRequest *>(to)->MergeFrom(
      static_cast<const SetBiasVoltageRequest &>(from));
}


void SetBiasVoltageRequest::MergeFrom(const SetBiasVoltageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.device.SetBiasVoltageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_bias_voltage() <= 0 && from._internal_bias_voltage() >= 0)) {
    _internal_set_bias_voltage(from._internal_bias_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBiasVoltageRequest::CopyFrom(const SetBiasVoltageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.device.SetBiasVoltageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBiasVoltageRequest::IsInitialized() const {
  return true;
}

void SetBiasVoltageRequest::InternalSwap(SetBiasVoltageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bias_voltage_, other->bias_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBiasVoltageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[60]);
}

// ===================================================================

class SetBiasVoltageResponse::_Internal {
 public:
};

SetBiasVoltageResponse::SetBiasVoltageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.device.SetBiasVoltageResponse)
}
SetBiasVoltageResponse::SetBiasVoltageResponse(const SetBiasVoltageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.device.SetBiasVoltageResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBiasVoltageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBiasVoltageResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetBiasVoltageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fdevice_2eproto_getter, &descriptor_table_minknow_5fapi_2fdevice_2eproto_once,
      file_level_metadata_minknow_5fapi_2fdevice_2eproto[61]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace device
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::device::ChannelConfiguration* Arena::CreateMaybeMessage< ::minknow_api::device::ChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ReturnedChannelConfiguration* Arena::CreateMaybeMessage< ::minknow_api::device::ReturnedChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ReturnedChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetDeviceInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetDeviceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetDeviceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion* Arena::CreateMaybeMessage< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetDeviceInfoResponse_ComponentVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetDeviceInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetDeviceInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetDeviceInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetDeviceStateRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetDeviceStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetDeviceStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetDeviceStateResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetDeviceStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetDeviceStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::StreamDeviceStateRequest* Arena::CreateMaybeMessage< ::minknow_api::device::StreamDeviceStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::StreamDeviceStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetFlowCellInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetFlowCellInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetFlowCellInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetFlowCellInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetFlowCellInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetFlowCellInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::StreamFlowCellInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::device::StreamFlowCellInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::StreamFlowCellInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetUserSpecifiedFlowCellIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetUserSpecifiedFlowCellIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetUserSpecifiedProductCodeRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetUserSpecifiedProductCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetUserSpecifiedProductCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetUserSpecifiedProductCodeResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetUserSpecifiedProductCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetUserSpecifiedProductCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetChannelsLayoutRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetChannelsLayoutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetChannelsLayoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetChannelsLayoutResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetChannelsLayoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetChannelsLayoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ChannelRecord_MuxRecord* Arena::CreateMaybeMessage< ::minknow_api::device::ChannelRecord_MuxRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ChannelRecord_MuxRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ChannelRecord* Arena::CreateMaybeMessage< ::minknow_api::device::ChannelRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ChannelRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ResetDeviceSettingsRequest* Arena::CreateMaybeMessage< ::minknow_api::device::ResetDeviceSettingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ResetDeviceSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ResetDeviceSettingsResponse* Arena::CreateMaybeMessage< ::minknow_api::device::ResetDeviceSettingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ResetDeviceSettingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetCalibrationRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetCalibrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetCalibrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetCalibrationResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetCalibrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetCalibrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ClearCalibrationRequest* Arena::CreateMaybeMessage< ::minknow_api::device::ClearCalibrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ClearCalibrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::ClearCalibrationResponse* Arena::CreateMaybeMessage< ::minknow_api::device::ClearCalibrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::ClearCalibrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetCalibrationRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetCalibrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetCalibrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetCalibrationResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetCalibrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetCalibrationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings* Arena::CreateMaybeMessage< ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetTemperatureRequest_WaitForTemperatureSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetTemperatureRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetTemperatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetTemperatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetTemperatureResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetTemperatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetTemperatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetTemperatureRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetTemperatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetTemperatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetTemperatureResponse_MinIONTemperature* Arena::CreateMaybeMessage< ::minknow_api::device::GetTemperatureResponse_MinIONTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetTemperatureResponse_MinIONTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature* Arena::CreateMaybeMessage< ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetTemperatureResponse_PromethIONTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetTemperatureResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetTemperatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetTemperatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::StreamTemperatureRequest* Arena::CreateMaybeMessage< ::minknow_api::device::StreamTemperatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::StreamTemperatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::UnblockRequest* Arena::CreateMaybeMessage< ::minknow_api::device::UnblockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::UnblockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::UnblockResponse* Arena::CreateMaybeMessage< ::minknow_api::device::UnblockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::UnblockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::CancelUnblocksRequest* Arena::CreateMaybeMessage< ::minknow_api::device::CancelUnblocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::CancelUnblocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::CancelUnblocksResponse* Arena::CreateMaybeMessage< ::minknow_api::device::CancelUnblocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::CancelUnblocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetChannelConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetChannelConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetChannelConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetChannelConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetChannelConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetChannelConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetChannelConfigurationRequest_ChannelConfigurationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetChannelConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetChannelConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetChannelConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetChannelConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetChannelConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetChannelConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetChannelConfigurationAllRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetChannelConfigurationAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetChannelConfigurationAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetChannelConfigurationAllResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetChannelConfigurationAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetChannelConfigurationAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SaturationConfig_Thresholds* Arena::CreateMaybeMessage< ::minknow_api::device::SaturationConfig_Thresholds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SaturationConfig_Thresholds >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SaturationConfig_SoftwareSaturation* Arena::CreateMaybeMessage< ::minknow_api::device::SaturationConfig_SoftwareSaturation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SaturationConfig_SoftwareSaturation >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SaturationConfig_UserThresholdSaturation* Arena::CreateMaybeMessage< ::minknow_api::device::SaturationConfig_UserThresholdSaturation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SaturationConfig_UserThresholdSaturation >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SaturationConfig* Arena::CreateMaybeMessage< ::minknow_api::device::SaturationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SaturationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetSaturationConfigRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetSaturationConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetSaturationConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetSaturationConfigResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetSaturationConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetSaturationConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetSaturationConfigRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetSaturationConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetSaturationConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetSaturationConfigResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetSaturationConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetSaturationConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetSampleRateRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetSampleRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetSampleRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetSampleRateResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetSampleRateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetSampleRateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetSampleRateRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetSampleRateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetSampleRateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetSampleRateResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetSampleRateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetSampleRateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetBiasVoltageRequest* Arena::CreateMaybeMessage< ::minknow_api::device::GetBiasVoltageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetBiasVoltageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::GetBiasVoltageResponse* Arena::CreateMaybeMessage< ::minknow_api::device::GetBiasVoltageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::GetBiasVoltageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetBiasVoltageRequest* Arena::CreateMaybeMessage< ::minknow_api::device::SetBiasVoltageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetBiasVoltageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::device::SetBiasVoltageResponse* Arena::CreateMaybeMessage< ::minknow_api::device::SetBiasVoltageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::device::SetBiasVoltageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
