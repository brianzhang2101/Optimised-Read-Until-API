// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "minknow_api/acquisition.pb.h"
#include "minknow_api/basecaller.pb.h"
#include "minknow_api/device.pb.h"
#include "minknow_api/protocol_settings.pb.h"
#include "minknow_api/rpc_options.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minknow_5fapi_2fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minknow_5fapi_2fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[64]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fprotocol_2eproto;
namespace minknow_api {
namespace protocol {
class AddEpi2meWorkflowRequest;
struct AddEpi2meWorkflowRequestDefaultTypeInternal;
extern AddEpi2meWorkflowRequestDefaultTypeInternal _AddEpi2meWorkflowRequest_default_instance_;
class AddEpi2meWorkflowResponse;
struct AddEpi2meWorkflowResponseDefaultTypeInternal;
extern AddEpi2meWorkflowResponseDefaultTypeInternal _AddEpi2meWorkflowResponse_default_instance_;
class AssociatePostProcessingAnalysisRequest;
struct AssociatePostProcessingAnalysisRequestDefaultTypeInternal;
extern AssociatePostProcessingAnalysisRequestDefaultTypeInternal _AssociatePostProcessingAnalysisRequest_default_instance_;
class AssociatePostProcessingAnalysisResponse;
struct AssociatePostProcessingAnalysisResponseDefaultTypeInternal;
extern AssociatePostProcessingAnalysisResponseDefaultTypeInternal _AssociatePostProcessingAnalysisResponse_default_instance_;
class AssociatedPostProcessingAnalysis;
struct AssociatedPostProcessingAnalysisDefaultTypeInternal;
extern AssociatedPostProcessingAnalysisDefaultTypeInternal _AssociatedPostProcessingAnalysis_default_instance_;
class BarcodeUserData;
struct BarcodeUserDataDefaultTypeInternal;
extern BarcodeUserDataDefaultTypeInternal _BarcodeUserData_default_instance_;
class BeginHardwareCheckRequest;
struct BeginHardwareCheckRequestDefaultTypeInternal;
extern BeginHardwareCheckRequestDefaultTypeInternal _BeginHardwareCheckRequest_default_instance_;
class BeginHardwareCheckResponse;
struct BeginHardwareCheckResponseDefaultTypeInternal;
extern BeginHardwareCheckResponseDefaultTypeInternal _BeginHardwareCheckResponse_default_instance_;
class BeginPlatformQcRequest;
struct BeginPlatformQcRequestDefaultTypeInternal;
extern BeginPlatformQcRequestDefaultTypeInternal _BeginPlatformQcRequest_default_instance_;
class BeginPlatformQcResponse;
struct BeginPlatformQcResponseDefaultTypeInternal;
extern BeginPlatformQcResponseDefaultTypeInternal _BeginPlatformQcResponse_default_instance_;
class ClearProtocolHistoryDataRequest;
struct ClearProtocolHistoryDataRequestDefaultTypeInternal;
extern ClearProtocolHistoryDataRequestDefaultTypeInternal _ClearProtocolHistoryDataRequest_default_instance_;
class ClearProtocolHistoryDataResponse;
struct ClearProtocolHistoryDataResponseDefaultTypeInternal;
extern ClearProtocolHistoryDataResponseDefaultTypeInternal _ClearProtocolHistoryDataResponse_default_instance_;
class Epi2meWorkflowReference;
struct Epi2meWorkflowReferenceDefaultTypeInternal;
extern Epi2meWorkflowReferenceDefaultTypeInternal _Epi2meWorkflowReference_default_instance_;
class FilteringInfo;
struct FilteringInfoDefaultTypeInternal;
extern FilteringInfoDefaultTypeInternal _FilteringInfo_default_instance_;
class FilteringInfo_PlatformQcFilter;
struct FilteringInfo_PlatformQcFilterDefaultTypeInternal;
extern FilteringInfo_PlatformQcFilterDefaultTypeInternal _FilteringInfo_PlatformQcFilter_default_instance_;
class GetContextInfoRequest;
struct GetContextInfoRequestDefaultTypeInternal;
extern GetContextInfoRequestDefaultTypeInternal _GetContextInfoRequest_default_instance_;
class GetContextInfoResponse;
struct GetContextInfoResponseDefaultTypeInternal;
extern GetContextInfoResponseDefaultTypeInternal _GetContextInfoResponse_default_instance_;
class GetContextInfoResponse_ContextInfoEntry_DoNotUse;
struct GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal;
extern GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal _GetContextInfoResponse_ContextInfoEntry_DoNotUse_default_instance_;
class GetCurrentProtocolRunRequest;
struct GetCurrentProtocolRunRequestDefaultTypeInternal;
extern GetCurrentProtocolRunRequestDefaultTypeInternal _GetCurrentProtocolRunRequest_default_instance_;
class GetCurrentProtocolRunResponse;
struct GetCurrentProtocolRunResponseDefaultTypeInternal;
extern GetCurrentProtocolRunResponseDefaultTypeInternal _GetCurrentProtocolRunResponse_default_instance_;
class GetProtocolPurposeRequest;
struct GetProtocolPurposeRequestDefaultTypeInternal;
extern GetProtocolPurposeRequestDefaultTypeInternal _GetProtocolPurposeRequest_default_instance_;
class GetProtocolPurposeResponse;
struct GetProtocolPurposeResponseDefaultTypeInternal;
extern GetProtocolPurposeResponseDefaultTypeInternal _GetProtocolPurposeResponse_default_instance_;
class GetRunInfoRequest;
struct GetRunInfoRequestDefaultTypeInternal;
extern GetRunInfoRequestDefaultTypeInternal _GetRunInfoRequest_default_instance_;
class ListProtocolGroupIdsRequest;
struct ListProtocolGroupIdsRequestDefaultTypeInternal;
extern ListProtocolGroupIdsRequestDefaultTypeInternal _ListProtocolGroupIdsRequest_default_instance_;
class ListProtocolGroupIdsResponse;
struct ListProtocolGroupIdsResponseDefaultTypeInternal;
extern ListProtocolGroupIdsResponseDefaultTypeInternal _ListProtocolGroupIdsResponse_default_instance_;
class ListProtocolRunsRequest;
struct ListProtocolRunsRequestDefaultTypeInternal;
extern ListProtocolRunsRequestDefaultTypeInternal _ListProtocolRunsRequest_default_instance_;
class ListProtocolRunsResponse;
struct ListProtocolRunsResponseDefaultTypeInternal;
extern ListProtocolRunsResponseDefaultTypeInternal _ListProtocolRunsResponse_default_instance_;
class ListProtocolsRequest;
struct ListProtocolsRequestDefaultTypeInternal;
extern ListProtocolsRequestDefaultTypeInternal _ListProtocolsRequest_default_instance_;
class ListProtocolsResponse;
struct ListProtocolsResponseDefaultTypeInternal;
extern ListProtocolsResponseDefaultTypeInternal _ListProtocolsResponse_default_instance_;
class ListSettingsForProtocolRequest;
struct ListSettingsForProtocolRequestDefaultTypeInternal;
extern ListSettingsForProtocolRequestDefaultTypeInternal _ListSettingsForProtocolRequest_default_instance_;
class ListSettingsForProtocolResponse;
struct ListSettingsForProtocolResponseDefaultTypeInternal;
extern ListSettingsForProtocolResponseDefaultTypeInternal _ListSettingsForProtocolResponse_default_instance_;
class ListSettingsForProtocolResponse_Basecalling;
struct ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal;
extern ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal _ListSettingsForProtocolResponse_Basecalling_default_instance_;
class ListSettingsForProtocolResponse_Output;
struct ListSettingsForProtocolResponse_OutputDefaultTypeInternal;
extern ListSettingsForProtocolResponse_OutputDefaultTypeInternal _ListSettingsForProtocolResponse_Output_default_instance_;
class ListSettingsForProtocolResponse_RunOptions;
struct ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal;
extern ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal _ListSettingsForProtocolResponse_RunOptions_default_instance_;
class PauseProtocolRequest;
struct PauseProtocolRequestDefaultTypeInternal;
extern PauseProtocolRequestDefaultTypeInternal _PauseProtocolRequest_default_instance_;
class PauseProtocolResponse;
struct PauseProtocolResponseDefaultTypeInternal;
extern PauseProtocolResponseDefaultTypeInternal _PauseProtocolResponse_default_instance_;
class PlatformQcResult;
struct PlatformQcResultDefaultTypeInternal;
extern PlatformQcResultDefaultTypeInternal _PlatformQcResult_default_instance_;
class ProtocolIdentifierComponents;
struct ProtocolIdentifierComponentsDefaultTypeInternal;
extern ProtocolIdentifierComponentsDefaultTypeInternal _ProtocolIdentifierComponents_default_instance_;
class ProtocolInfo;
struct ProtocolInfoDefaultTypeInternal;
extern ProtocolInfoDefaultTypeInternal _ProtocolInfo_default_instance_;
class ProtocolInfo_TagExtractionResult;
struct ProtocolInfo_TagExtractionResultDefaultTypeInternal;
extern ProtocolInfo_TagExtractionResultDefaultTypeInternal _ProtocolInfo_TagExtractionResult_default_instance_;
class ProtocolInfo_TagValue;
struct ProtocolInfo_TagValueDefaultTypeInternal;
extern ProtocolInfo_TagValueDefaultTypeInternal _ProtocolInfo_TagValue_default_instance_;
class ProtocolInfo_TagsEntry_DoNotUse;
struct ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal;
extern ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal _ProtocolInfo_TagsEntry_DoNotUse_default_instance_;
class ProtocolPhaseManagementRequest;
struct ProtocolPhaseManagementRequestDefaultTypeInternal;
extern ProtocolPhaseManagementRequestDefaultTypeInternal _ProtocolPhaseManagementRequest_default_instance_;
class ProtocolPhaseManagementRequest_Capabilities;
struct ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal;
extern ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal _ProtocolPhaseManagementRequest_Capabilities_default_instance_;
class ProtocolPhaseManagementResponse;
struct ProtocolPhaseManagementResponseDefaultTypeInternal;
extern ProtocolPhaseManagementResponseDefaultTypeInternal _ProtocolPhaseManagementResponse_default_instance_;
class ProtocolRunInfo;
struct ProtocolRunInfoDefaultTypeInternal;
extern ProtocolRunInfoDefaultTypeInternal _ProtocolRunInfo_default_instance_;
class ProtocolRunUserInfo;
struct ProtocolRunUserInfoDefaultTypeInternal;
extern ProtocolRunUserInfoDefaultTypeInternal _ProtocolRunUserInfo_default_instance_;
class ResumeProtocolRequest;
struct ResumeProtocolRequestDefaultTypeInternal;
extern ResumeProtocolRequestDefaultTypeInternal _ResumeProtocolRequest_default_instance_;
class ResumeProtocolResponse;
struct ResumeProtocolResponseDefaultTypeInternal;
extern ResumeProtocolResponseDefaultTypeInternal _ResumeProtocolResponse_default_instance_;
class SetContextInfoRequest;
struct SetContextInfoRequestDefaultTypeInternal;
extern SetContextInfoRequestDefaultTypeInternal _SetContextInfoRequest_default_instance_;
class SetContextInfoRequest_ContextInfoEntry_DoNotUse;
struct SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal;
extern SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal _SetContextInfoRequest_ContextInfoEntry_DoNotUse_default_instance_;
class SetContextInfoResponse;
struct SetContextInfoResponseDefaultTypeInternal;
extern SetContextInfoResponseDefaultTypeInternal _SetContextInfoResponse_default_instance_;
class SetPlatformQcResultRequest;
struct SetPlatformQcResultRequestDefaultTypeInternal;
extern SetPlatformQcResultRequestDefaultTypeInternal _SetPlatformQcResultRequest_default_instance_;
class SetPlatformQcResultResponse;
struct SetPlatformQcResultResponseDefaultTypeInternal;
extern SetPlatformQcResultResponseDefaultTypeInternal _SetPlatformQcResultResponse_default_instance_;
class SetProtocolPurposeRequest;
struct SetProtocolPurposeRequestDefaultTypeInternal;
extern SetProtocolPurposeRequestDefaultTypeInternal _SetProtocolPurposeRequest_default_instance_;
class SetProtocolPurposeResponse;
struct SetProtocolPurposeResponseDefaultTypeInternal;
extern SetProtocolPurposeResponseDefaultTypeInternal _SetProtocolPurposeResponse_default_instance_;
class StartProtocolRequest;
struct StartProtocolRequestDefaultTypeInternal;
extern StartProtocolRequestDefaultTypeInternal _StartProtocolRequest_default_instance_;
class StartProtocolResponse;
struct StartProtocolResponseDefaultTypeInternal;
extern StartProtocolResponseDefaultTypeInternal _StartProtocolResponse_default_instance_;
class StopProtocolRequest;
struct StopProtocolRequestDefaultTypeInternal;
extern StopProtocolRequestDefaultTypeInternal _StopProtocolRequest_default_instance_;
class StopProtocolResponse;
struct StopProtocolResponseDefaultTypeInternal;
extern StopProtocolResponseDefaultTypeInternal _StopProtocolResponse_default_instance_;
class TriggerMuxScanRequest;
struct TriggerMuxScanRequestDefaultTypeInternal;
extern TriggerMuxScanRequestDefaultTypeInternal _TriggerMuxScanRequest_default_instance_;
class TriggerMuxScanResponse;
struct TriggerMuxScanResponseDefaultTypeInternal;
extern TriggerMuxScanResponseDefaultTypeInternal _TriggerMuxScanResponse_default_instance_;
class WaitForFinishedRequest;
struct WaitForFinishedRequestDefaultTypeInternal;
extern WaitForFinishedRequestDefaultTypeInternal _WaitForFinishedRequest_default_instance_;
class WatchCurrentProtocolRunRequest;
struct WatchCurrentProtocolRunRequestDefaultTypeInternal;
extern WatchCurrentProtocolRunRequestDefaultTypeInternal _WatchCurrentProtocolRunRequest_default_instance_;
}  // namespace protocol
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> ::minknow_api::protocol::AddEpi2meWorkflowRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::AddEpi2meWorkflowRequest>(Arena*);
template<> ::minknow_api::protocol::AddEpi2meWorkflowResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::AddEpi2meWorkflowResponse>(Arena*);
template<> ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::AssociatePostProcessingAnalysisRequest>(Arena*);
template<> ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::AssociatePostProcessingAnalysisResponse>(Arena*);
template<> ::minknow_api::protocol::AssociatedPostProcessingAnalysis* Arena::CreateMaybeMessage<::minknow_api::protocol::AssociatedPostProcessingAnalysis>(Arena*);
template<> ::minknow_api::protocol::BarcodeUserData* Arena::CreateMaybeMessage<::minknow_api::protocol::BarcodeUserData>(Arena*);
template<> ::minknow_api::protocol::BeginHardwareCheckRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::BeginHardwareCheckRequest>(Arena*);
template<> ::minknow_api::protocol::BeginHardwareCheckResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::BeginHardwareCheckResponse>(Arena*);
template<> ::minknow_api::protocol::BeginPlatformQcRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::BeginPlatformQcRequest>(Arena*);
template<> ::minknow_api::protocol::BeginPlatformQcResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::BeginPlatformQcResponse>(Arena*);
template<> ::minknow_api::protocol::ClearProtocolHistoryDataRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ClearProtocolHistoryDataRequest>(Arena*);
template<> ::minknow_api::protocol::ClearProtocolHistoryDataResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ClearProtocolHistoryDataResponse>(Arena*);
template<> ::minknow_api::protocol::Epi2meWorkflowReference* Arena::CreateMaybeMessage<::minknow_api::protocol::Epi2meWorkflowReference>(Arena*);
template<> ::minknow_api::protocol::FilteringInfo* Arena::CreateMaybeMessage<::minknow_api::protocol::FilteringInfo>(Arena*);
template<> ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* Arena::CreateMaybeMessage<::minknow_api::protocol::FilteringInfo_PlatformQcFilter>(Arena*);
template<> ::minknow_api::protocol::GetContextInfoRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::GetContextInfoRequest>(Arena*);
template<> ::minknow_api::protocol::GetContextInfoResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::GetContextInfoResponse>(Arena*);
template<> ::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse>(Arena*);
template<> ::minknow_api::protocol::GetCurrentProtocolRunRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::GetCurrentProtocolRunRequest>(Arena*);
template<> ::minknow_api::protocol::GetCurrentProtocolRunResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::GetCurrentProtocolRunResponse>(Arena*);
template<> ::minknow_api::protocol::GetProtocolPurposeRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::GetProtocolPurposeRequest>(Arena*);
template<> ::minknow_api::protocol::GetProtocolPurposeResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::GetProtocolPurposeResponse>(Arena*);
template<> ::minknow_api::protocol::GetRunInfoRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::GetRunInfoRequest>(Arena*);
template<> ::minknow_api::protocol::ListProtocolGroupIdsRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolGroupIdsRequest>(Arena*);
template<> ::minknow_api::protocol::ListProtocolGroupIdsResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolGroupIdsResponse>(Arena*);
template<> ::minknow_api::protocol::ListProtocolRunsRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolRunsRequest>(Arena*);
template<> ::minknow_api::protocol::ListProtocolRunsResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolRunsResponse>(Arena*);
template<> ::minknow_api::protocol::ListProtocolsRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolsRequest>(Arena*);
template<> ::minknow_api::protocol::ListProtocolsResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ListProtocolsResponse>(Arena*);
template<> ::minknow_api::protocol::ListSettingsForProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolRequest>(Arena*);
template<> ::minknow_api::protocol::ListSettingsForProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse>(Arena*);
template<> ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* Arena::CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling>(Arena*);
template<> ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* Arena::CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_Output>(Arena*);
template<> ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* Arena::CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions>(Arena*);
template<> ::minknow_api::protocol::PauseProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::PauseProtocolRequest>(Arena*);
template<> ::minknow_api::protocol::PauseProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::PauseProtocolResponse>(Arena*);
template<> ::minknow_api::protocol::PlatformQcResult* Arena::CreateMaybeMessage<::minknow_api::protocol::PlatformQcResult>(Arena*);
template<> ::minknow_api::protocol::ProtocolIdentifierComponents* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolIdentifierComponents>(Arena*);
template<> ::minknow_api::protocol::ProtocolInfo* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo>(Arena*);
template<> ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo_TagExtractionResult>(Arena*);
template<> ::minknow_api::protocol::ProtocolInfo_TagValue* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo_TagValue>(Arena*);
template<> ::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse>(Arena*);
template<> ::minknow_api::protocol::ProtocolPhaseManagementRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolPhaseManagementRequest>(Arena*);
template<> ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities>(Arena*);
template<> ::minknow_api::protocol::ProtocolPhaseManagementResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolPhaseManagementResponse>(Arena*);
template<> ::minknow_api::protocol::ProtocolRunInfo* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolRunInfo>(Arena*);
template<> ::minknow_api::protocol::ProtocolRunUserInfo* Arena::CreateMaybeMessage<::minknow_api::protocol::ProtocolRunUserInfo>(Arena*);
template<> ::minknow_api::protocol::ResumeProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::ResumeProtocolRequest>(Arena*);
template<> ::minknow_api::protocol::ResumeProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::ResumeProtocolResponse>(Arena*);
template<> ::minknow_api::protocol::SetContextInfoRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::SetContextInfoRequest>(Arena*);
template<> ::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse>(Arena*);
template<> ::minknow_api::protocol::SetContextInfoResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::SetContextInfoResponse>(Arena*);
template<> ::minknow_api::protocol::SetPlatformQcResultRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::SetPlatformQcResultRequest>(Arena*);
template<> ::minknow_api::protocol::SetPlatformQcResultResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::SetPlatformQcResultResponse>(Arena*);
template<> ::minknow_api::protocol::SetProtocolPurposeRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::SetProtocolPurposeRequest>(Arena*);
template<> ::minknow_api::protocol::SetProtocolPurposeResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::SetProtocolPurposeResponse>(Arena*);
template<> ::minknow_api::protocol::StartProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::StartProtocolRequest>(Arena*);
template<> ::minknow_api::protocol::StartProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::StartProtocolResponse>(Arena*);
template<> ::minknow_api::protocol::StopProtocolRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::StopProtocolRequest>(Arena*);
template<> ::minknow_api::protocol::StopProtocolResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::StopProtocolResponse>(Arena*);
template<> ::minknow_api::protocol::TriggerMuxScanRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::TriggerMuxScanRequest>(Arena*);
template<> ::minknow_api::protocol::TriggerMuxScanResponse* Arena::CreateMaybeMessage<::minknow_api::protocol::TriggerMuxScanResponse>(Arena*);
template<> ::minknow_api::protocol::WaitForFinishedRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::WaitForFinishedRequest>(Arena*);
template<> ::minknow_api::protocol::WatchCurrentProtocolRunRequest* Arena::CreateMaybeMessage<::minknow_api::protocol::WatchCurrentProtocolRunRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minknow_api {
namespace protocol {

enum BarcodeUserData_SampleType : int {
  BarcodeUserData_SampleType_test_sample = 0,
  BarcodeUserData_SampleType_positive_control = 1,
  BarcodeUserData_SampleType_negative_control = 2,
  BarcodeUserData_SampleType_no_template_control = 3,
  BarcodeUserData_SampleType_positive_control_1 = 4,
  BarcodeUserData_SampleType_positive_control_2 = 5,
  BarcodeUserData_SampleType_BarcodeUserData_SampleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BarcodeUserData_SampleType_BarcodeUserData_SampleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BarcodeUserData_SampleType_IsValid(int value);
constexpr BarcodeUserData_SampleType BarcodeUserData_SampleType_SampleType_MIN = BarcodeUserData_SampleType_test_sample;
constexpr BarcodeUserData_SampleType BarcodeUserData_SampleType_SampleType_MAX = BarcodeUserData_SampleType_positive_control_2;
constexpr int BarcodeUserData_SampleType_SampleType_ARRAYSIZE = BarcodeUserData_SampleType_SampleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BarcodeUserData_SampleType_descriptor();
template<typename T>
inline const std::string& BarcodeUserData_SampleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BarcodeUserData_SampleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BarcodeUserData_SampleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BarcodeUserData_SampleType_descriptor(), enum_t_value);
}
inline bool BarcodeUserData_SampleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BarcodeUserData_SampleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BarcodeUserData_SampleType>(
    BarcodeUserData_SampleType_descriptor(), name, value);
}
enum WaitForFinishedRequest_NotificationState : int {
  WaitForFinishedRequest_NotificationState_NOTIFY_ON_TERMINATION = 0,
  WaitForFinishedRequest_NotificationState_NOTIFY_BEFORE_TERMINATION = 1,
  WaitForFinishedRequest_NotificationState_NOTIFY_ON_SCRIPT_TERMINATION = 2,
  WaitForFinishedRequest_NotificationState_WaitForFinishedRequest_NotificationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WaitForFinishedRequest_NotificationState_WaitForFinishedRequest_NotificationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WaitForFinishedRequest_NotificationState_IsValid(int value);
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest_NotificationState_NotificationState_MIN = WaitForFinishedRequest_NotificationState_NOTIFY_ON_TERMINATION;
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest_NotificationState_NotificationState_MAX = WaitForFinishedRequest_NotificationState_NOTIFY_ON_SCRIPT_TERMINATION;
constexpr int WaitForFinishedRequest_NotificationState_NotificationState_ARRAYSIZE = WaitForFinishedRequest_NotificationState_NotificationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaitForFinishedRequest_NotificationState_descriptor();
template<typename T>
inline const std::string& WaitForFinishedRequest_NotificationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaitForFinishedRequest_NotificationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaitForFinishedRequest_NotificationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaitForFinishedRequest_NotificationState_descriptor(), enum_t_value);
}
inline bool WaitForFinishedRequest_NotificationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WaitForFinishedRequest_NotificationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaitForFinishedRequest_NotificationState>(
    WaitForFinishedRequest_NotificationState_descriptor(), name, value);
}
enum ProtocolIdentifierComponents_Location : int {
  ProtocolIdentifierComponents_Location_ANY = 0,
  ProtocolIdentifierComponents_Location_SYSTEM_SCRIPTS = 1,
  ProtocolIdentifierComponents_Location_USER_SCRIPTS = 2,
  ProtocolIdentifierComponents_Location_ProtocolIdentifierComponents_Location_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolIdentifierComponents_Location_ProtocolIdentifierComponents_Location_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolIdentifierComponents_Location_IsValid(int value);
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents_Location_Location_MIN = ProtocolIdentifierComponents_Location_ANY;
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents_Location_Location_MAX = ProtocolIdentifierComponents_Location_USER_SCRIPTS;
constexpr int ProtocolIdentifierComponents_Location_Location_ARRAYSIZE = ProtocolIdentifierComponents_Location_Location_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolIdentifierComponents_Location_descriptor();
template<typename T>
inline const std::string& ProtocolIdentifierComponents_Location_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolIdentifierComponents_Location>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolIdentifierComponents_Location_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolIdentifierComponents_Location_descriptor(), enum_t_value);
}
inline bool ProtocolIdentifierComponents_Location_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolIdentifierComponents_Location* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolIdentifierComponents_Location>(
    ProtocolIdentifierComponents_Location_descriptor(), name, value);
}
enum ProtocolState : int {
  PROTOCOL_RUNNING = 0,
  PROTOCOL_WAITING_FOR_TEMPERATURE = 4,
  PROTOCOL_WAITING_FOR_ACQUISITION = 5,
  PROTOCOL_COMPLETED = 1,
  PROTOCOL_STOPPED_BY_USER = 2,
  PROTOCOL_FINISHED_WITH_ERROR = 3,
  PROTOCOL_FINISHED_WITH_DEVICE_ERROR = 6,
  PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY = 7,
  ProtocolState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolState_IsValid(int value);
constexpr ProtocolState ProtocolState_MIN = PROTOCOL_RUNNING;
constexpr ProtocolState ProtocolState_MAX = PROTOCOL_FINISHED_UNABLE_TO_SEND_TELEMETRY;
constexpr int ProtocolState_ARRAYSIZE = ProtocolState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolState_descriptor();
template<typename T>
inline const std::string& ProtocolState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolState_descriptor(), enum_t_value);
}
inline bool ProtocolState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolState>(
    ProtocolState_descriptor(), name, value);
}
enum ProtocolPhase : int {
  PHASE_UNKNOWN = 0,
  PHASE_INITIALISING = 1,
  PHASE_SEQUENCING = 2,
  PHASE_PREPARING_FOR_MUX_SCAN = 3,
  PHASE_MUX_SCAN = 4,
  PHASE_PAUSED = 5,
  PHASE_PAUSING = 6,
  PHASE_RESUMING = 7,
  ProtocolPhase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolPhase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolPhase_IsValid(int value);
constexpr ProtocolPhase ProtocolPhase_MIN = PHASE_UNKNOWN;
constexpr ProtocolPhase ProtocolPhase_MAX = PHASE_RESUMING;
constexpr int ProtocolPhase_ARRAYSIZE = ProtocolPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolPhase_descriptor();
template<typename T>
inline const std::string& ProtocolPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolPhase_descriptor(), enum_t_value);
}
inline bool ProtocolPhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolPhase>(
    ProtocolPhase_descriptor(), name, value);
}
enum Action : int {
  ACTION_NONE = 0,
  ACTION_PAUSE = 1,
  ACTION_RESUME = 2,
  ACTION_TRIGGER_MUX_SCAN = 3,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = ACTION_NONE;
constexpr Action Action_MAX = ACTION_TRIGGER_MUX_SCAN;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class BarcodeUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.BarcodeUserData) */ {
 public:
  inline BarcodeUserData() : BarcodeUserData(nullptr) {}
  ~BarcodeUserData() override;
  explicit constexpr BarcodeUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarcodeUserData(const BarcodeUserData& from);
  BarcodeUserData(BarcodeUserData&& from) noexcept
    : BarcodeUserData() {
    *this = ::std::move(from);
  }

  inline BarcodeUserData& operator=(const BarcodeUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarcodeUserData& operator=(BarcodeUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BarcodeUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarcodeUserData* internal_default_instance() {
    return reinterpret_cast<const BarcodeUserData*>(
               &_BarcodeUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BarcodeUserData& a, BarcodeUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(BarcodeUserData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarcodeUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarcodeUserData* New() const final {
    return new BarcodeUserData();
  }

  BarcodeUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarcodeUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BarcodeUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BarcodeUserData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarcodeUserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.BarcodeUserData";
  }
  protected:
  explicit BarcodeUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BarcodeUserData_SampleType SampleType;
  static constexpr SampleType test_sample =
    BarcodeUserData_SampleType_test_sample;
  static constexpr SampleType positive_control =
    BarcodeUserData_SampleType_positive_control;
  static constexpr SampleType negative_control =
    BarcodeUserData_SampleType_negative_control;
  static constexpr SampleType no_template_control =
    BarcodeUserData_SampleType_no_template_control;
  static constexpr SampleType positive_control_1 =
    BarcodeUserData_SampleType_positive_control_1;
  static constexpr SampleType positive_control_2 =
    BarcodeUserData_SampleType_positive_control_2;
  static inline bool SampleType_IsValid(int value) {
    return BarcodeUserData_SampleType_IsValid(value);
  }
  static constexpr SampleType SampleType_MIN =
    BarcodeUserData_SampleType_SampleType_MIN;
  static constexpr SampleType SampleType_MAX =
    BarcodeUserData_SampleType_SampleType_MAX;
  static constexpr int SampleType_ARRAYSIZE =
    BarcodeUserData_SampleType_SampleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SampleType_descriptor() {
    return BarcodeUserData_SampleType_descriptor();
  }
  template<typename T>
  static inline const std::string& SampleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SampleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SampleType_Name.");
    return BarcodeUserData_SampleType_Name(enum_t_value);
  }
  static inline bool SampleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SampleType* value) {
    return BarcodeUserData_SampleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBarcodeNameFieldNumber = 1,
    kLampBarcodeIdFieldNumber = 2,
    kAliasFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string barcode_name = 1;
  void clear_barcode_name();
  const std::string& barcode_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_barcode_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_barcode_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_barcode_name();
  void set_allocated_barcode_name(std::string* barcode_name);
  private:
  const std::string& _internal_barcode_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_barcode_name(const std::string& value);
  std::string* _internal_mutable_barcode_name();
  public:

  // string lamp_barcode_id = 2;
  void clear_lamp_barcode_id();
  const std::string& lamp_barcode_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lamp_barcode_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lamp_barcode_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_lamp_barcode_id();
  void set_allocated_lamp_barcode_id(std::string* lamp_barcode_id);
  private:
  const std::string& _internal_lamp_barcode_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lamp_barcode_id(const std::string& value);
  std::string* _internal_mutable_lamp_barcode_id();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_MUST_USE_RESULT std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .minknow_api.protocol.BarcodeUserData.SampleType type = 4;
  void clear_type();
  ::minknow_api::protocol::BarcodeUserData_SampleType type() const;
  void set_type(::minknow_api::protocol::BarcodeUserData_SampleType value);
  private:
  ::minknow_api::protocol::BarcodeUserData_SampleType _internal_type() const;
  void _internal_set_type(::minknow_api::protocol::BarcodeUserData_SampleType value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.BarcodeUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr barcode_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lamp_barcode_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolRunUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolRunUserInfo) */ {
 public:
  inline ProtocolRunUserInfo() : ProtocolRunUserInfo(nullptr) {}
  ~ProtocolRunUserInfo() override;
  explicit constexpr ProtocolRunUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolRunUserInfo(const ProtocolRunUserInfo& from);
  ProtocolRunUserInfo(ProtocolRunUserInfo&& from) noexcept
    : ProtocolRunUserInfo() {
    *this = ::std::move(from);
  }

  inline ProtocolRunUserInfo& operator=(const ProtocolRunUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolRunUserInfo& operator=(ProtocolRunUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolRunUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolRunUserInfo* internal_default_instance() {
    return reinterpret_cast<const ProtocolRunUserInfo*>(
               &_ProtocolRunUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolRunUserInfo& a, ProtocolRunUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolRunUserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolRunUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolRunUserInfo* New() const final {
    return new ProtocolRunUserInfo();
  }

  ProtocolRunUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolRunUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolRunUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolRunUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolRunUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolRunUserInfo";
  }
  protected:
  explicit ProtocolRunUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarcodeUserInfoFieldNumber = 3,
    kProtocolGroupIdFieldNumber = 1,
    kSampleIdFieldNumber = 2,
  };
  // repeated .minknow_api.protocol.BarcodeUserData barcode_user_info = 3;
  int barcode_user_info_size() const;
  private:
  int _internal_barcode_user_info_size() const;
  public:
  void clear_barcode_user_info();
  ::minknow_api::protocol::BarcodeUserData* mutable_barcode_user_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::BarcodeUserData >*
      mutable_barcode_user_info();
  private:
  const ::minknow_api::protocol::BarcodeUserData& _internal_barcode_user_info(int index) const;
  ::minknow_api::protocol::BarcodeUserData* _internal_add_barcode_user_info();
  public:
  const ::minknow_api::protocol::BarcodeUserData& barcode_user_info(int index) const;
  ::minknow_api::protocol::BarcodeUserData* add_barcode_user_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::BarcodeUserData >&
      barcode_user_info() const;

  // .google.protobuf.StringValue protocol_group_id = 1;
  bool has_protocol_group_id() const;
  private:
  bool _internal_has_protocol_group_id() const;
  public:
  void clear_protocol_group_id();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& protocol_group_id() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::StringValue* release_protocol_group_id();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_protocol_group_id();
  void set_allocated_protocol_group_id(::PROTOBUF_NAMESPACE_ID::StringValue* protocol_group_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_protocol_group_id() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_protocol_group_id();
  public:
  void unsafe_arena_set_allocated_protocol_group_id(
      ::PROTOBUF_NAMESPACE_ID::StringValue* protocol_group_id);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_protocol_group_id();

  // .google.protobuf.StringValue sample_id = 2;
  bool has_sample_id() const;
  private:
  bool _internal_has_sample_id() const;
  public:
  void clear_sample_id();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& sample_id() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::StringValue* release_sample_id();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_sample_id();
  void set_allocated_sample_id(::PROTOBUF_NAMESPACE_ID::StringValue* sample_id);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_sample_id() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_sample_id();
  public:
  void unsafe_arena_set_allocated_sample_id(
      ::PROTOBUF_NAMESPACE_ID::StringValue* sample_id);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_sample_id();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolRunUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::BarcodeUserData > barcode_user_info_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* protocol_group_id_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* sample_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class StartProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.StartProtocolRequest) */ {
 public:
  inline StartProtocolRequest() : StartProtocolRequest(nullptr) {}
  ~StartProtocolRequest() override;
  explicit constexpr StartProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartProtocolRequest(const StartProtocolRequest& from);
  StartProtocolRequest(StartProtocolRequest&& from) noexcept
    : StartProtocolRequest() {
    *this = ::std::move(from);
  }

  inline StartProtocolRequest& operator=(const StartProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartProtocolRequest& operator=(StartProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const StartProtocolRequest*>(
               &_StartProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartProtocolRequest& a, StartProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartProtocolRequest* New() const final {
    return new StartProtocolRequest();
  }

  StartProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartProtocolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartProtocolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.StartProtocolRequest";
  }
  protected:
  explicit StartProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kIdentifierFieldNumber = 1,
    kUserInfoFieldNumber = 3,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string identifier = 1 [(.minknow_api.rpc_required) = true];
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 3;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::minknow_api::protocol::ProtocolRunUserInfo& user_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolRunUserInfo* release_user_info();
  ::minknow_api::protocol::ProtocolRunUserInfo* mutable_user_info();
  void set_allocated_user_info(::minknow_api::protocol::ProtocolRunUserInfo* user_info);
  private:
  const ::minknow_api::protocol::ProtocolRunUserInfo& _internal_user_info() const;
  ::minknow_api::protocol::ProtocolRunUserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::minknow_api::protocol::ProtocolRunUserInfo* user_info);
  ::minknow_api::protocol::ProtocolRunUserInfo* unsafe_arena_release_user_info();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.StartProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::minknow_api::protocol::ProtocolRunUserInfo* user_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class StartProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.StartProtocolResponse) */ {
 public:
  inline StartProtocolResponse() : StartProtocolResponse(nullptr) {}
  ~StartProtocolResponse() override;
  explicit constexpr StartProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartProtocolResponse(const StartProtocolResponse& from);
  StartProtocolResponse(StartProtocolResponse&& from) noexcept
    : StartProtocolResponse() {
    *this = ::std::move(from);
  }

  inline StartProtocolResponse& operator=(const StartProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartProtocolResponse& operator=(StartProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const StartProtocolResponse*>(
               &_StartProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartProtocolResponse& a, StartProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartProtocolResponse* New() const final {
    return new StartProtocolResponse();
  }

  StartProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartProtocolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartProtocolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartProtocolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.StartProtocolResponse";
  }
  protected:
  explicit StartProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.StartProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class StopProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.StopProtocolRequest) */ {
 public:
  inline StopProtocolRequest() : StopProtocolRequest(nullptr) {}
  ~StopProtocolRequest() override;
  explicit constexpr StopProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopProtocolRequest(const StopProtocolRequest& from);
  StopProtocolRequest(StopProtocolRequest&& from) noexcept
    : StopProtocolRequest() {
    *this = ::std::move(from);
  }

  inline StopProtocolRequest& operator=(const StopProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopProtocolRequest& operator=(StopProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const StopProtocolRequest*>(
               &_StopProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopProtocolRequest& a, StopProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopProtocolRequest* New() const final {
    return new StopProtocolRequest();
  }

  StopProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopProtocolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopProtocolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.StopProtocolRequest";
  }
  protected:
  explicit StopProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataActionOnStopFieldNumber = 1,
  };
  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  void clear_data_action_on_stop();
  ::minknow_api::acquisition::StopRequest_DataAction data_action_on_stop() const;
  void set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value);
  private:
  ::minknow_api::acquisition::StopRequest_DataAction _internal_data_action_on_stop() const;
  void _internal_set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.StopProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int data_action_on_stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class StopProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.StopProtocolResponse) */ {
 public:
  inline StopProtocolResponse() : StopProtocolResponse(nullptr) {}
  explicit constexpr StopProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopProtocolResponse(const StopProtocolResponse& from);
  StopProtocolResponse(StopProtocolResponse&& from) noexcept
    : StopProtocolResponse() {
    *this = ::std::move(from);
  }

  inline StopProtocolResponse& operator=(const StopProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopProtocolResponse& operator=(StopProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const StopProtocolResponse*>(
               &_StopProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopProtocolResponse& a, StopProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopProtocolResponse* New() const final {
    return new StopProtocolResponse();
  }

  StopProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.StopProtocolResponse";
  }
  protected:
  explicit StopProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.StopProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PauseProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.PauseProtocolRequest) */ {
 public:
  inline PauseProtocolRequest() : PauseProtocolRequest(nullptr) {}
  explicit constexpr PauseProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseProtocolRequest(const PauseProtocolRequest& from);
  PauseProtocolRequest(PauseProtocolRequest&& from) noexcept
    : PauseProtocolRequest() {
    *this = ::std::move(from);
  }

  inline PauseProtocolRequest& operator=(const PauseProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseProtocolRequest& operator=(PauseProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const PauseProtocolRequest*>(
               &_PauseProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PauseProtocolRequest& a, PauseProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseProtocolRequest* New() const final {
    return new PauseProtocolRequest();
  }

  PauseProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PauseProtocolRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PauseProtocolRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.PauseProtocolRequest";
  }
  protected:
  explicit PauseProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.PauseProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PauseProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.PauseProtocolResponse) */ {
 public:
  inline PauseProtocolResponse() : PauseProtocolResponse(nullptr) {}
  explicit constexpr PauseProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseProtocolResponse(const PauseProtocolResponse& from);
  PauseProtocolResponse(PauseProtocolResponse&& from) noexcept
    : PauseProtocolResponse() {
    *this = ::std::move(from);
  }

  inline PauseProtocolResponse& operator=(const PauseProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseProtocolResponse& operator=(PauseProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const PauseProtocolResponse*>(
               &_PauseProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PauseProtocolResponse& a, PauseProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseProtocolResponse* New() const final {
    return new PauseProtocolResponse();
  }

  PauseProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PauseProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PauseProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.PauseProtocolResponse";
  }
  protected:
  explicit PauseProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.PauseProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ResumeProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ResumeProtocolRequest) */ {
 public:
  inline ResumeProtocolRequest() : ResumeProtocolRequest(nullptr) {}
  explicit constexpr ResumeProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResumeProtocolRequest(const ResumeProtocolRequest& from);
  ResumeProtocolRequest(ResumeProtocolRequest&& from) noexcept
    : ResumeProtocolRequest() {
    *this = ::std::move(from);
  }

  inline ResumeProtocolRequest& operator=(const ResumeProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeProtocolRequest& operator=(ResumeProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResumeProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResumeProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeProtocolRequest*>(
               &_ResumeProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResumeProtocolRequest& a, ResumeProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeProtocolRequest* New() const final {
    return new ResumeProtocolRequest();
  }

  ResumeProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResumeProtocolRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResumeProtocolRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ResumeProtocolRequest";
  }
  protected:
  explicit ResumeProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ResumeProtocolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ResumeProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ResumeProtocolResponse) */ {
 public:
  inline ResumeProtocolResponse() : ResumeProtocolResponse(nullptr) {}
  explicit constexpr ResumeProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResumeProtocolResponse(const ResumeProtocolResponse& from);
  ResumeProtocolResponse(ResumeProtocolResponse&& from) noexcept
    : ResumeProtocolResponse() {
    *this = ::std::move(from);
  }

  inline ResumeProtocolResponse& operator=(const ResumeProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeProtocolResponse& operator=(ResumeProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResumeProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResumeProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const ResumeProtocolResponse*>(
               &_ResumeProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResumeProtocolResponse& a, ResumeProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeProtocolResponse* New() const final {
    return new ResumeProtocolResponse();
  }

  ResumeProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResumeProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResumeProtocolResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ResumeProtocolResponse";
  }
  protected:
  explicit ResumeProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ResumeProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class TriggerMuxScanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.TriggerMuxScanRequest) */ {
 public:
  inline TriggerMuxScanRequest() : TriggerMuxScanRequest(nullptr) {}
  explicit constexpr TriggerMuxScanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TriggerMuxScanRequest(const TriggerMuxScanRequest& from);
  TriggerMuxScanRequest(TriggerMuxScanRequest&& from) noexcept
    : TriggerMuxScanRequest() {
    *this = ::std::move(from);
  }

  inline TriggerMuxScanRequest& operator=(const TriggerMuxScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerMuxScanRequest& operator=(TriggerMuxScanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerMuxScanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TriggerMuxScanRequest* internal_default_instance() {
    return reinterpret_cast<const TriggerMuxScanRequest*>(
               &_TriggerMuxScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TriggerMuxScanRequest& a, TriggerMuxScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerMuxScanRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerMuxScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerMuxScanRequest* New() const final {
    return new TriggerMuxScanRequest();
  }

  TriggerMuxScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerMuxScanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TriggerMuxScanRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TriggerMuxScanRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.TriggerMuxScanRequest";
  }
  protected:
  explicit TriggerMuxScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.TriggerMuxScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class TriggerMuxScanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.TriggerMuxScanResponse) */ {
 public:
  inline TriggerMuxScanResponse() : TriggerMuxScanResponse(nullptr) {}
  explicit constexpr TriggerMuxScanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TriggerMuxScanResponse(const TriggerMuxScanResponse& from);
  TriggerMuxScanResponse(TriggerMuxScanResponse&& from) noexcept
    : TriggerMuxScanResponse() {
    *this = ::std::move(from);
  }

  inline TriggerMuxScanResponse& operator=(const TriggerMuxScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerMuxScanResponse& operator=(TriggerMuxScanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerMuxScanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TriggerMuxScanResponse* internal_default_instance() {
    return reinterpret_cast<const TriggerMuxScanResponse*>(
               &_TriggerMuxScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TriggerMuxScanResponse& a, TriggerMuxScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerMuxScanResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerMuxScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerMuxScanResponse* New() const final {
    return new TriggerMuxScanResponse();
  }

  TriggerMuxScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerMuxScanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TriggerMuxScanResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TriggerMuxScanResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.TriggerMuxScanResponse";
  }
  protected:
  explicit TriggerMuxScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.TriggerMuxScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolsRequest) */ {
 public:
  inline ListProtocolsRequest() : ListProtocolsRequest(nullptr) {}
  ~ListProtocolsRequest() override;
  explicit constexpr ListProtocolsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolsRequest(const ListProtocolsRequest& from);
  ListProtocolsRequest(ListProtocolsRequest&& from) noexcept
    : ListProtocolsRequest() {
    *this = ::std::move(from);
  }

  inline ListProtocolsRequest& operator=(const ListProtocolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolsRequest& operator=(ListProtocolsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProtocolsRequest*>(
               &_ListProtocolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListProtocolsRequest& a, ListProtocolsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolsRequest* New() const final {
    return new ListProtocolsRequest();
  }

  ListProtocolsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProtocolsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProtocolsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProtocolsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolsRequest";
  }
  protected:
  explicit ListProtocolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForceReloadFieldNumber = 1,
  };
  // bool force_reload = 1;
  void clear_force_reload();
  bool force_reload() const;
  void set_force_reload(bool value);
  private:
  bool _internal_force_reload() const;
  void _internal_set_force_reload(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool force_reload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolInfo_TagValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolInfo.TagValue) */ {
 public:
  inline ProtocolInfo_TagValue() : ProtocolInfo_TagValue(nullptr) {}
  ~ProtocolInfo_TagValue() override;
  explicit constexpr ProtocolInfo_TagValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolInfo_TagValue(const ProtocolInfo_TagValue& from);
  ProtocolInfo_TagValue(ProtocolInfo_TagValue&& from) noexcept
    : ProtocolInfo_TagValue() {
    *this = ::std::move(from);
  }

  inline ProtocolInfo_TagValue& operator=(const ProtocolInfo_TagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolInfo_TagValue& operator=(ProtocolInfo_TagValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolInfo_TagValue& default_instance() {
    return *internal_default_instance();
  }
  enum TagValueCase {
    kStringValue = 1,
    kBoolValue = 2,
    kIntValue = 3,
    kDoubleValue = 4,
    kArrayValue = 5,
    kObjectValue = 6,
    TAG_VALUE_NOT_SET = 0,
  };

  static inline const ProtocolInfo_TagValue* internal_default_instance() {
    return reinterpret_cast<const ProtocolInfo_TagValue*>(
               &_ProtocolInfo_TagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProtocolInfo_TagValue& a, ProtocolInfo_TagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolInfo_TagValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolInfo_TagValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolInfo_TagValue* New() const final {
    return new ProtocolInfo_TagValue();
  }

  ProtocolInfo_TagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolInfo_TagValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolInfo_TagValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolInfo_TagValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolInfo_TagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolInfo.TagValue";
  }
  protected:
  explicit ProtocolInfo_TagValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kArrayValueFieldNumber = 5,
    kObjectValueFieldNumber = 6,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 2;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_value = 4;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string array_value = 5;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const std::string& array_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_array_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_array_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_array_value();
  void set_allocated_array_value(std::string* array_value);
  private:
  const std::string& _internal_array_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_array_value(const std::string& value);
  std::string* _internal_mutable_array_value();
  public:

  // string object_value = 6;
  bool has_object_value() const;
  private:
  bool _internal_has_object_value() const;
  public:
  void clear_object_value();
  const std::string& object_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_object_value();
  void set_allocated_object_value(std::string* object_value);
  private:
  const std::string& _internal_object_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_value(const std::string& value);
  std::string* _internal_mutable_object_value();
  public:

  void clear_tag_value();
  TagValueCase tag_value_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo.TagValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_array_value();
  void set_has_object_value();

  inline bool has_tag_value() const;
  inline void clear_has_tag_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TagValueUnion {
    constexpr TagValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr array_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_value_;
  } tag_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolInfo_TagExtractionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolInfo.TagExtractionResult) */ {
 public:
  inline ProtocolInfo_TagExtractionResult() : ProtocolInfo_TagExtractionResult(nullptr) {}
  ~ProtocolInfo_TagExtractionResult() override;
  explicit constexpr ProtocolInfo_TagExtractionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolInfo_TagExtractionResult(const ProtocolInfo_TagExtractionResult& from);
  ProtocolInfo_TagExtractionResult(ProtocolInfo_TagExtractionResult&& from) noexcept
    : ProtocolInfo_TagExtractionResult() {
    *this = ::std::move(from);
  }

  inline ProtocolInfo_TagExtractionResult& operator=(const ProtocolInfo_TagExtractionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolInfo_TagExtractionResult& operator=(ProtocolInfo_TagExtractionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolInfo_TagExtractionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolInfo_TagExtractionResult* internal_default_instance() {
    return reinterpret_cast<const ProtocolInfo_TagExtractionResult*>(
               &_ProtocolInfo_TagExtractionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProtocolInfo_TagExtractionResult& a, ProtocolInfo_TagExtractionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolInfo_TagExtractionResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolInfo_TagExtractionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolInfo_TagExtractionResult* New() const final {
    return new ProtocolInfo_TagExtractionResult();
  }

  ProtocolInfo_TagExtractionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolInfo_TagExtractionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolInfo_TagExtractionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolInfo_TagExtractionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolInfo_TagExtractionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolInfo.TagExtractionResult";
  }
  protected:
  explicit ProtocolInfo_TagExtractionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorReportFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_report = 2;
  void clear_error_report();
  const std::string& error_report() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_report(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_report();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_report();
  void set_allocated_error_report(std::string* error_report);
  private:
  const std::string& _internal_error_report() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_report(const std::string& value);
  std::string* _internal_mutable_error_report();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_report_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolInfo_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtocolInfo_TagsEntry_DoNotUse, 
    std::string, ::minknow_api::protocol::ProtocolInfo_TagValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProtocolInfo_TagsEntry_DoNotUse, 
    std::string, ::minknow_api::protocol::ProtocolInfo_TagValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ProtocolInfo_TagsEntry_DoNotUse();
  explicit constexpr ProtocolInfo_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ProtocolInfo_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProtocolInfo_TagsEntry_DoNotUse& other);
  static const ProtocolInfo_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProtocolInfo_TagsEntry_DoNotUse*>(&_ProtocolInfo_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.protocol.ProtocolInfo.TagsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ProtocolInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolInfo) */ {
 public:
  inline ProtocolInfo() : ProtocolInfo(nullptr) {}
  ~ProtocolInfo() override;
  explicit constexpr ProtocolInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolInfo(const ProtocolInfo& from);
  ProtocolInfo(ProtocolInfo&& from) noexcept
    : ProtocolInfo() {
    *this = ::std::move(from);
  }

  inline ProtocolInfo& operator=(const ProtocolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolInfo& operator=(ProtocolInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolInfo* internal_default_instance() {
    return reinterpret_cast<const ProtocolInfo*>(
               &_ProtocolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProtocolInfo& a, ProtocolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolInfo* New() const final {
    return new ProtocolInfo();
  }

  ProtocolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolInfo";
  }
  protected:
  explicit ProtocolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtocolInfo_TagValue TagValue;
  typedef ProtocolInfo_TagExtractionResult TagExtractionResult;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kIdentifierFieldNumber = 1,
    kNameFieldNumber = 3,
    kTagExtractionResultFieldNumber = 4,
  };
  // map<string, .minknow_api.protocol.ProtocolInfo.TagValue> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >*
      mutable_tags();

  // string identifier = 1;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minknow_api.protocol.ProtocolInfo.TagExtractionResult tag_extraction_result = 4;
  bool has_tag_extraction_result() const;
  private:
  bool _internal_has_tag_extraction_result() const;
  public:
  void clear_tag_extraction_result();
  const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult& tag_extraction_result() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* release_tag_extraction_result();
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* mutable_tag_extraction_result();
  void set_allocated_tag_extraction_result(::minknow_api::protocol::ProtocolInfo_TagExtractionResult* tag_extraction_result);
  private:
  const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult& _internal_tag_extraction_result() const;
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* _internal_mutable_tag_extraction_result();
  public:
  void unsafe_arena_set_allocated_tag_extraction_result(
      ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* tag_extraction_result);
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* unsafe_arena_release_tag_extraction_result();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProtocolInfo_TagsEntry_DoNotUse,
      std::string, ::minknow_api::protocol::ProtocolInfo_TagValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* tag_extraction_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolsResponse) */ {
 public:
  inline ListProtocolsResponse() : ListProtocolsResponse(nullptr) {}
  ~ListProtocolsResponse() override;
  explicit constexpr ListProtocolsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolsResponse(const ListProtocolsResponse& from);
  ListProtocolsResponse(ListProtocolsResponse&& from) noexcept
    : ListProtocolsResponse() {
    *this = ::std::move(from);
  }

  inline ListProtocolsResponse& operator=(const ListProtocolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolsResponse& operator=(ListProtocolsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProtocolsResponse*>(
               &_ListProtocolsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListProtocolsResponse& a, ListProtocolsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolsResponse* New() const final {
    return new ListProtocolsResponse();
  }

  ListProtocolsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProtocolsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProtocolsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProtocolsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolsResponse";
  }
  protected:
  explicit ListProtocolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolsFieldNumber = 1,
  };
  // repeated .minknow_api.protocol.ProtocolInfo protocols = 1;
  int protocols_size() const;
  private:
  int _internal_protocols_size() const;
  public:
  void clear_protocols();
  ::minknow_api::protocol::ProtocolInfo* mutable_protocols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::ProtocolInfo >*
      mutable_protocols();
  private:
  const ::minknow_api::protocol::ProtocolInfo& _internal_protocols(int index) const;
  ::minknow_api::protocol::ProtocolInfo* _internal_add_protocols();
  public:
  const ::minknow_api::protocol::ProtocolInfo& protocols(int index) const;
  ::minknow_api::protocol::ProtocolInfo* add_protocols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::ProtocolInfo >&
      protocols() const;

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::ProtocolInfo > protocols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class WaitForFinishedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.WaitForFinishedRequest) */ {
 public:
  inline WaitForFinishedRequest() : WaitForFinishedRequest(nullptr) {}
  ~WaitForFinishedRequest() override;
  explicit constexpr WaitForFinishedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForFinishedRequest(const WaitForFinishedRequest& from);
  WaitForFinishedRequest(WaitForFinishedRequest&& from) noexcept
    : WaitForFinishedRequest() {
    *this = ::std::move(from);
  }

  inline WaitForFinishedRequest& operator=(const WaitForFinishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForFinishedRequest& operator=(WaitForFinishedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForFinishedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForFinishedRequest* internal_default_instance() {
    return reinterpret_cast<const WaitForFinishedRequest*>(
               &_WaitForFinishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WaitForFinishedRequest& a, WaitForFinishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitForFinishedRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForFinishedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitForFinishedRequest* New() const final {
    return new WaitForFinishedRequest();
  }

  WaitForFinishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitForFinishedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitForFinishedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitForFinishedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitForFinishedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.WaitForFinishedRequest";
  }
  protected:
  explicit WaitForFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WaitForFinishedRequest_NotificationState NotificationState;
  static constexpr NotificationState NOTIFY_ON_TERMINATION =
    WaitForFinishedRequest_NotificationState_NOTIFY_ON_TERMINATION;
  static constexpr NotificationState NOTIFY_BEFORE_TERMINATION =
    WaitForFinishedRequest_NotificationState_NOTIFY_BEFORE_TERMINATION;
  static constexpr NotificationState NOTIFY_ON_SCRIPT_TERMINATION =
    WaitForFinishedRequest_NotificationState_NOTIFY_ON_SCRIPT_TERMINATION;
  static inline bool NotificationState_IsValid(int value) {
    return WaitForFinishedRequest_NotificationState_IsValid(value);
  }
  static constexpr NotificationState NotificationState_MIN =
    WaitForFinishedRequest_NotificationState_NotificationState_MIN;
  static constexpr NotificationState NotificationState_MAX =
    WaitForFinishedRequest_NotificationState_NotificationState_MAX;
  static constexpr int NotificationState_ARRAYSIZE =
    WaitForFinishedRequest_NotificationState_NotificationState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NotificationState_descriptor() {
    return WaitForFinishedRequest_NotificationState_descriptor();
  }
  template<typename T>
  static inline const std::string& NotificationState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NotificationState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NotificationState_Name.");
    return WaitForFinishedRequest_NotificationState_Name(enum_t_value);
  }
  static inline bool NotificationState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NotificationState* value) {
    return WaitForFinishedRequest_NotificationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // .minknow_api.protocol.WaitForFinishedRequest.NotificationState state = 2;
  void clear_state();
  ::minknow_api::protocol::WaitForFinishedRequest_NotificationState state() const;
  void set_state(::minknow_api::protocol::WaitForFinishedRequest_NotificationState value);
  private:
  ::minknow_api::protocol::WaitForFinishedRequest_NotificationState _internal_state() const;
  void _internal_set_state(::minknow_api::protocol::WaitForFinishedRequest_NotificationState value);
  public:

  // float timeout = 3;
  void clear_timeout();
  float timeout() const;
  void set_timeout(float value);
  private:
  float _internal_timeout() const;
  void _internal_set_timeout(float value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.WaitForFinishedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  int state_;
  float timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetRunInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetRunInfoRequest) */ {
 public:
  inline GetRunInfoRequest() : GetRunInfoRequest(nullptr) {}
  ~GetRunInfoRequest() override;
  explicit constexpr GetRunInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRunInfoRequest(const GetRunInfoRequest& from);
  GetRunInfoRequest(GetRunInfoRequest&& from) noexcept
    : GetRunInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRunInfoRequest& operator=(const GetRunInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRunInfoRequest& operator=(GetRunInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRunInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRunInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRunInfoRequest*>(
               &_GetRunInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetRunInfoRequest& a, GetRunInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRunInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRunInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRunInfoRequest* New() const final {
    return new GetRunInfoRequest();
  }

  GetRunInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRunInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRunInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRunInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRunInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetRunInfoRequest";
  }
  protected:
  explicit GetRunInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetRunInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class Epi2meWorkflowReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.Epi2meWorkflowReference) */ {
 public:
  inline Epi2meWorkflowReference() : Epi2meWorkflowReference(nullptr) {}
  ~Epi2meWorkflowReference() override;
  explicit constexpr Epi2meWorkflowReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Epi2meWorkflowReference(const Epi2meWorkflowReference& from);
  Epi2meWorkflowReference(Epi2meWorkflowReference&& from) noexcept
    : Epi2meWorkflowReference() {
    *this = ::std::move(from);
  }

  inline Epi2meWorkflowReference& operator=(const Epi2meWorkflowReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epi2meWorkflowReference& operator=(Epi2meWorkflowReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Epi2meWorkflowReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Epi2meWorkflowReference* internal_default_instance() {
    return reinterpret_cast<const Epi2meWorkflowReference*>(
               &_Epi2meWorkflowReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Epi2meWorkflowReference& a, Epi2meWorkflowReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Epi2meWorkflowReference* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epi2meWorkflowReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epi2meWorkflowReference* New() const final {
    return new Epi2meWorkflowReference();
  }

  Epi2meWorkflowReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epi2meWorkflowReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Epi2meWorkflowReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Epi2meWorkflowReference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epi2meWorkflowReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.Epi2meWorkflowReference";
  }
  protected:
  explicit Epi2meWorkflowReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.Epi2meWorkflowReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AssociatedPostProcessingAnalysis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.AssociatedPostProcessingAnalysis) */ {
 public:
  inline AssociatedPostProcessingAnalysis() : AssociatedPostProcessingAnalysis(nullptr) {}
  ~AssociatedPostProcessingAnalysis() override;
  explicit constexpr AssociatedPostProcessingAnalysis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssociatedPostProcessingAnalysis(const AssociatedPostProcessingAnalysis& from);
  AssociatedPostProcessingAnalysis(AssociatedPostProcessingAnalysis&& from) noexcept
    : AssociatedPostProcessingAnalysis() {
    *this = ::std::move(from);
  }

  inline AssociatedPostProcessingAnalysis& operator=(const AssociatedPostProcessingAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatedPostProcessingAnalysis& operator=(AssociatedPostProcessingAnalysis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssociatedPostProcessingAnalysis& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssociatedPostProcessingAnalysis* internal_default_instance() {
    return reinterpret_cast<const AssociatedPostProcessingAnalysis*>(
               &_AssociatedPostProcessingAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AssociatedPostProcessingAnalysis& a, AssociatedPostProcessingAnalysis& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatedPostProcessingAnalysis* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatedPostProcessingAnalysis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociatedPostProcessingAnalysis* New() const final {
    return new AssociatedPostProcessingAnalysis();
  }

  AssociatedPostProcessingAnalysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociatedPostProcessingAnalysis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssociatedPostProcessingAnalysis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssociatedPostProcessingAnalysis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatedPostProcessingAnalysis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.AssociatedPostProcessingAnalysis";
  }
  protected:
  explicit AssociatedPostProcessingAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartedIdFieldNumber = 1,
    kStartRequestFieldNumber = 2,
  };
  // string started_id = 1;
  void clear_started_id();
  const std::string& started_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_started_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_started_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_started_id();
  void set_allocated_started_id(std::string* started_id);
  private:
  const std::string& _internal_started_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_started_id(const std::string& value);
  std::string* _internal_mutable_started_id();
  public:

  // .minknow_api.basecaller.StartRequest start_request = 2;
  bool has_start_request() const;
  private:
  bool _internal_has_start_request() const;
  public:
  void clear_start_request();
  const ::minknow_api::basecaller::StartRequest& start_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartRequest* release_start_request();
  ::minknow_api::basecaller::StartRequest* mutable_start_request();
  void set_allocated_start_request(::minknow_api::basecaller::StartRequest* start_request);
  private:
  const ::minknow_api::basecaller::StartRequest& _internal_start_request() const;
  ::minknow_api::basecaller::StartRequest* _internal_mutable_start_request();
  public:
  void unsafe_arena_set_allocated_start_request(
      ::minknow_api::basecaller::StartRequest* start_request);
  ::minknow_api::basecaller::StartRequest* unsafe_arena_release_start_request();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatedPostProcessingAnalysis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr started_id_;
  ::minknow_api::basecaller::StartRequest* start_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class PlatformQcResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.PlatformQcResult) */ {
 public:
  inline PlatformQcResult() : PlatformQcResult(nullptr) {}
  ~PlatformQcResult() override;
  explicit constexpr PlatformQcResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlatformQcResult(const PlatformQcResult& from);
  PlatformQcResult(PlatformQcResult&& from) noexcept
    : PlatformQcResult() {
    *this = ::std::move(from);
  }

  inline PlatformQcResult& operator=(const PlatformQcResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformQcResult& operator=(PlatformQcResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlatformQcResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlatformQcResult* internal_default_instance() {
    return reinterpret_cast<const PlatformQcResult*>(
               &_PlatformQcResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PlatformQcResult& a, PlatformQcResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformQcResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlatformQcResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlatformQcResult* New() const final {
    return new PlatformQcResult();
  }

  PlatformQcResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlatformQcResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlatformQcResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlatformQcResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlatformQcResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.PlatformQcResult";
  }
  protected:
  explicit PlatformQcResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowCellIdFieldNumber = 1,
    kPassedFieldNumber = 2,
    kTotalPoreCountFieldNumber = 3,
  };
  // string flow_cell_id = 1;
  void clear_flow_cell_id();
  const std::string& flow_cell_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flow_cell_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flow_cell_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_flow_cell_id();
  void set_allocated_flow_cell_id(std::string* flow_cell_id);
  private:
  const std::string& _internal_flow_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flow_cell_id(const std::string& value);
  std::string* _internal_mutable_flow_cell_id();
  public:

  // bool passed = 2;
  void clear_passed();
  bool passed() const;
  void set_passed(bool value);
  private:
  bool _internal_passed() const;
  void _internal_set_passed(bool value);
  public:

  // uint32 total_pore_count = 3;
  void clear_total_pore_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_pore_count() const;
  void set_total_pore_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_pore_count() const;
  void _internal_set_total_pore_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.PlatformQcResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_cell_id_;
  bool passed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_pore_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolRunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolRunInfo) */ {
 public:
  inline ProtocolRunInfo() : ProtocolRunInfo(nullptr) {}
  ~ProtocolRunInfo() override;
  explicit constexpr ProtocolRunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolRunInfo(const ProtocolRunInfo& from);
  ProtocolRunInfo(ProtocolRunInfo&& from) noexcept
    : ProtocolRunInfo() {
    *this = ::std::move(from);
  }

  inline ProtocolRunInfo& operator=(const ProtocolRunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolRunInfo& operator=(ProtocolRunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolRunInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolRunInfo* internal_default_instance() {
    return reinterpret_cast<const ProtocolRunInfo*>(
               &_ProtocolRunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ProtocolRunInfo& a, ProtocolRunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolRunInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolRunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolRunInfo* New() const final {
    return new ProtocolRunInfo();
  }

  ProtocolRunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolRunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolRunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolRunInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolRunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolRunInfo";
  }
  protected:
  explicit ProtocolRunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kAcquisitionRunIdsFieldNumber = 7,
    kEpi2MeWorkflowsFieldNumber = 10,
    kAssociatedPostProcessingAnalysisFieldNumber = 15,
    kRunIdFieldNumber = 1,
    kProtocolIdFieldNumber = 2,
    kOutputPathFieldNumber = 11,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kUserInfoFieldNumber = 8,
    kScriptEndTimeFieldNumber = 9,
    kDeviceFieldNumber = 12,
    kFlowCellFieldNumber = 13,
    kMetaInfoFieldNumber = 14,
    kLastPhaseChangeFieldNumber = 17,
    kPqcResultFieldNumber = 20,
    kStateFieldNumber = 4,
    kPhaseFieldNumber = 16,
    kCanPauseFieldNumber = 18,
    kCanTriggerMuxScanFieldNumber = 19,
  };
  // repeated string args = 3;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // repeated string acquisition_run_ids = 7;
  int acquisition_run_ids_size() const;
  private:
  int _internal_acquisition_run_ids_size() const;
  public:
  void clear_acquisition_run_ids();
  const std::string& acquisition_run_ids(int index) const;
  std::string* mutable_acquisition_run_ids(int index);
  void set_acquisition_run_ids(int index, const std::string& value);
  void set_acquisition_run_ids(int index, std::string&& value);
  void set_acquisition_run_ids(int index, const char* value);
  void set_acquisition_run_ids(int index, const char* value, size_t size);
  std::string* add_acquisition_run_ids();
  void add_acquisition_run_ids(const std::string& value);
  void add_acquisition_run_ids(std::string&& value);
  void add_acquisition_run_ids(const char* value);
  void add_acquisition_run_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& acquisition_run_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_acquisition_run_ids();
  private:
  const std::string& _internal_acquisition_run_ids(int index) const;
  std::string* _internal_add_acquisition_run_ids();
  public:

  // repeated .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflows = 10;
  int epi2me_workflows_size() const;
  private:
  int _internal_epi2me_workflows_size() const;
  public:
  void clear_epi2me_workflows();
  ::minknow_api::protocol::Epi2meWorkflowReference* mutable_epi2me_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::Epi2meWorkflowReference >*
      mutable_epi2me_workflows();
  private:
  const ::minknow_api::protocol::Epi2meWorkflowReference& _internal_epi2me_workflows(int index) const;
  ::minknow_api::protocol::Epi2meWorkflowReference* _internal_add_epi2me_workflows();
  public:
  const ::minknow_api::protocol::Epi2meWorkflowReference& epi2me_workflows(int index) const;
  ::minknow_api::protocol::Epi2meWorkflowReference* add_epi2me_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::Epi2meWorkflowReference >&
      epi2me_workflows() const;

  // repeated .minknow_api.protocol.AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;
  int associated_post_processing_analysis_size() const;
  private:
  int _internal_associated_post_processing_analysis_size() const;
  public:
  void clear_associated_post_processing_analysis();
  ::minknow_api::protocol::AssociatedPostProcessingAnalysis* mutable_associated_post_processing_analysis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >*
      mutable_associated_post_processing_analysis();
  private:
  const ::minknow_api::protocol::AssociatedPostProcessingAnalysis& _internal_associated_post_processing_analysis(int index) const;
  ::minknow_api::protocol::AssociatedPostProcessingAnalysis* _internal_add_associated_post_processing_analysis();
  public:
  const ::minknow_api::protocol::AssociatedPostProcessingAnalysis& associated_post_processing_analysis(int index) const;
  ::minknow_api::protocol::AssociatedPostProcessingAnalysis* add_associated_post_processing_analysis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >&
      associated_post_processing_analysis() const;

  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // string protocol_id = 2;
  void clear_protocol_id();
  const std::string& protocol_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_protocol_id();
  void set_allocated_protocol_id(std::string* protocol_id);
  private:
  const std::string& _internal_protocol_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_id(const std::string& value);
  std::string* _internal_mutable_protocol_id();
  public:

  // string output_path = 11;
  void clear_output_path();
  const std::string& output_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_output_path();
  void set_allocated_output_path(std::string* output_path);
  private:
  const std::string& _internal_output_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_path(const std::string& value);
  std::string* _internal_mutable_output_path();
  public:

  // .google.protobuf.Timestamp start_time = 5;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 6;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 8;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::minknow_api::protocol::ProtocolRunUserInfo& user_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolRunUserInfo* release_user_info();
  ::minknow_api::protocol::ProtocolRunUserInfo* mutable_user_info();
  void set_allocated_user_info(::minknow_api::protocol::ProtocolRunUserInfo* user_info);
  private:
  const ::minknow_api::protocol::ProtocolRunUserInfo& _internal_user_info() const;
  ::minknow_api::protocol::ProtocolRunUserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::minknow_api::protocol::ProtocolRunUserInfo* user_info);
  ::minknow_api::protocol::ProtocolRunUserInfo* unsafe_arena_release_user_info();

  // .google.protobuf.Timestamp script_end_time = 9;
  bool has_script_end_time() const;
  private:
  bool _internal_has_script_end_time() const;
  public:
  void clear_script_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& script_end_time() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_script_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_script_end_time();
  void set_allocated_script_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* script_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_script_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_script_end_time();
  public:
  void unsafe_arena_set_allocated_script_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* script_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_script_end_time();

  // .minknow_api.device.GetDeviceInfoResponse device = 12;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::minknow_api::device::GetDeviceInfoResponse& device() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::GetDeviceInfoResponse* release_device();
  ::minknow_api::device::GetDeviceInfoResponse* mutable_device();
  void set_allocated_device(::minknow_api::device::GetDeviceInfoResponse* device);
  private:
  const ::minknow_api::device::GetDeviceInfoResponse& _internal_device() const;
  ::minknow_api::device::GetDeviceInfoResponse* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::minknow_api::device::GetDeviceInfoResponse* device);
  ::minknow_api::device::GetDeviceInfoResponse* unsafe_arena_release_device();

  // .minknow_api.device.GetFlowCellInfoResponse flow_cell = 13;
  bool has_flow_cell() const;
  private:
  bool _internal_has_flow_cell() const;
  public:
  void clear_flow_cell();
  const ::minknow_api::device::GetFlowCellInfoResponse& flow_cell() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::device::GetFlowCellInfoResponse* release_flow_cell();
  ::minknow_api::device::GetFlowCellInfoResponse* mutable_flow_cell();
  void set_allocated_flow_cell(::minknow_api::device::GetFlowCellInfoResponse* flow_cell);
  private:
  const ::minknow_api::device::GetFlowCellInfoResponse& _internal_flow_cell() const;
  ::minknow_api::device::GetFlowCellInfoResponse* _internal_mutable_flow_cell();
  public:
  void unsafe_arena_set_allocated_flow_cell(
      ::minknow_api::device::GetFlowCellInfoResponse* flow_cell);
  ::minknow_api::device::GetFlowCellInfoResponse* unsafe_arena_release_flow_cell();

  // .minknow_api.protocol.ProtocolInfo meta_info = 14;
  bool has_meta_info() const;
  private:
  bool _internal_has_meta_info() const;
  public:
  void clear_meta_info();
  const ::minknow_api::protocol::ProtocolInfo& meta_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolInfo* release_meta_info();
  ::minknow_api::protocol::ProtocolInfo* mutable_meta_info();
  void set_allocated_meta_info(::minknow_api::protocol::ProtocolInfo* meta_info);
  private:
  const ::minknow_api::protocol::ProtocolInfo& _internal_meta_info() const;
  ::minknow_api::protocol::ProtocolInfo* _internal_mutable_meta_info();
  public:
  void unsafe_arena_set_allocated_meta_info(
      ::minknow_api::protocol::ProtocolInfo* meta_info);
  ::minknow_api::protocol::ProtocolInfo* unsafe_arena_release_meta_info();

  // .google.protobuf.Timestamp last_phase_change = 17;
  bool has_last_phase_change() const;
  private:
  bool _internal_has_last_phase_change() const;
  public:
  void clear_last_phase_change();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_phase_change() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_phase_change();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_phase_change();
  void set_allocated_last_phase_change(::PROTOBUF_NAMESPACE_ID::Timestamp* last_phase_change);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_phase_change() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_phase_change();
  public:
  void unsafe_arena_set_allocated_last_phase_change(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_phase_change);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_phase_change();

  // .minknow_api.protocol.PlatformQcResult pqc_result = 20;
  bool has_pqc_result() const;
  private:
  bool _internal_has_pqc_result() const;
  public:
  void clear_pqc_result();
  const ::minknow_api::protocol::PlatformQcResult& pqc_result() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::PlatformQcResult* release_pqc_result();
  ::minknow_api::protocol::PlatformQcResult* mutable_pqc_result();
  void set_allocated_pqc_result(::minknow_api::protocol::PlatformQcResult* pqc_result);
  private:
  const ::minknow_api::protocol::PlatformQcResult& _internal_pqc_result() const;
  ::minknow_api::protocol::PlatformQcResult* _internal_mutable_pqc_result();
  public:
  void unsafe_arena_set_allocated_pqc_result(
      ::minknow_api::protocol::PlatformQcResult* pqc_result);
  ::minknow_api::protocol::PlatformQcResult* unsafe_arena_release_pqc_result();

  // .minknow_api.protocol.ProtocolState state = 4;
  void clear_state();
  ::minknow_api::protocol::ProtocolState state() const;
  void set_state(::minknow_api::protocol::ProtocolState value);
  private:
  ::minknow_api::protocol::ProtocolState _internal_state() const;
  void _internal_set_state(::minknow_api::protocol::ProtocolState value);
  public:

  // .minknow_api.protocol.ProtocolPhase phase = 16;
  void clear_phase();
  ::minknow_api::protocol::ProtocolPhase phase() const;
  void set_phase(::minknow_api::protocol::ProtocolPhase value);
  private:
  ::minknow_api::protocol::ProtocolPhase _internal_phase() const;
  void _internal_set_phase(::minknow_api::protocol::ProtocolPhase value);
  public:

  // bool can_pause = 18;
  void clear_can_pause();
  bool can_pause() const;
  void set_can_pause(bool value);
  private:
  bool _internal_can_pause() const;
  void _internal_set_can_pause(bool value);
  public:

  // bool can_trigger_mux_scan = 19;
  void clear_can_trigger_mux_scan();
  bool can_trigger_mux_scan() const;
  void set_can_trigger_mux_scan(bool value);
  private:
  bool _internal_can_trigger_mux_scan() const;
  void _internal_set_can_trigger_mux_scan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolRunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> acquisition_run_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::Epi2meWorkflowReference > epi2me_workflows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::AssociatedPostProcessingAnalysis > associated_post_processing_analysis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_path_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::minknow_api::protocol::ProtocolRunUserInfo* user_info_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* script_end_time_;
  ::minknow_api::device::GetDeviceInfoResponse* device_;
  ::minknow_api::device::GetFlowCellInfoResponse* flow_cell_;
  ::minknow_api::protocol::ProtocolInfo* meta_info_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_phase_change_;
  ::minknow_api::protocol::PlatformQcResult* pqc_result_;
  int state_;
  int phase_;
  bool can_pause_;
  bool can_trigger_mux_scan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class FilteringInfo_PlatformQcFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.FilteringInfo.PlatformQcFilter) */ {
 public:
  inline FilteringInfo_PlatformQcFilter() : FilteringInfo_PlatformQcFilter(nullptr) {}
  ~FilteringInfo_PlatformQcFilter() override;
  explicit constexpr FilteringInfo_PlatformQcFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilteringInfo_PlatformQcFilter(const FilteringInfo_PlatformQcFilter& from);
  FilteringInfo_PlatformQcFilter(FilteringInfo_PlatformQcFilter&& from) noexcept
    : FilteringInfo_PlatformQcFilter() {
    *this = ::std::move(from);
  }

  inline FilteringInfo_PlatformQcFilter& operator=(const FilteringInfo_PlatformQcFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilteringInfo_PlatformQcFilter& operator=(FilteringInfo_PlatformQcFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilteringInfo_PlatformQcFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilteringInfo_PlatformQcFilter* internal_default_instance() {
    return reinterpret_cast<const FilteringInfo_PlatformQcFilter*>(
               &_FilteringInfo_PlatformQcFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FilteringInfo_PlatformQcFilter& a, FilteringInfo_PlatformQcFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(FilteringInfo_PlatformQcFilter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilteringInfo_PlatformQcFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilteringInfo_PlatformQcFilter* New() const final {
    return new FilteringInfo_PlatformQcFilter();
  }

  FilteringInfo_PlatformQcFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilteringInfo_PlatformQcFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilteringInfo_PlatformQcFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FilteringInfo_PlatformQcFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilteringInfo_PlatformQcFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.FilteringInfo.PlatformQcFilter";
  }
  protected:
  explicit FilteringInfo_PlatformQcFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowCellIdFieldNumber = 1,
  };
  // optional string flow_cell_id = 1;
  bool has_flow_cell_id() const;
  private:
  bool _internal_has_flow_cell_id() const;
  public:
  void clear_flow_cell_id();
  const std::string& flow_cell_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flow_cell_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flow_cell_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_flow_cell_id();
  void set_allocated_flow_cell_id(std::string* flow_cell_id);
  private:
  const std::string& _internal_flow_cell_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flow_cell_id(const std::string& value);
  std::string* _internal_mutable_flow_cell_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_cell_id_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class FilteringInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.FilteringInfo) */ {
 public:
  inline FilteringInfo() : FilteringInfo(nullptr) {}
  ~FilteringInfo() override;
  explicit constexpr FilteringInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilteringInfo(const FilteringInfo& from);
  FilteringInfo(FilteringInfo&& from) noexcept
    : FilteringInfo() {
    *this = ::std::move(from);
  }

  inline FilteringInfo& operator=(const FilteringInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilteringInfo& operator=(FilteringInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilteringInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilteringInfo* internal_default_instance() {
    return reinterpret_cast<const FilteringInfo*>(
               &_FilteringInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FilteringInfo& a, FilteringInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FilteringInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilteringInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilteringInfo* New() const final {
    return new FilteringInfo();
  }

  FilteringInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilteringInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilteringInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FilteringInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilteringInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.FilteringInfo";
  }
  protected:
  explicit FilteringInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FilteringInfo_PlatformQcFilter PlatformQcFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kPqcFilterFieldNumber = 1,
  };
  // .minknow_api.protocol.FilteringInfo.PlatformQcFilter pqc_filter = 1;
  bool has_pqc_filter() const;
  private:
  bool _internal_has_pqc_filter() const;
  public:
  void clear_pqc_filter();
  const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter& pqc_filter() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* release_pqc_filter();
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* mutable_pqc_filter();
  void set_allocated_pqc_filter(::minknow_api::protocol::FilteringInfo_PlatformQcFilter* pqc_filter);
  private:
  const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter& _internal_pqc_filter() const;
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* _internal_mutable_pqc_filter();
  public:
  void unsafe_arena_set_allocated_pqc_filter(
      ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* pqc_filter);
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* unsafe_arena_release_pqc_filter();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.FilteringInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* pqc_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolRunsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolRunsRequest) */ {
 public:
  inline ListProtocolRunsRequest() : ListProtocolRunsRequest(nullptr) {}
  ~ListProtocolRunsRequest() override;
  explicit constexpr ListProtocolRunsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolRunsRequest(const ListProtocolRunsRequest& from);
  ListProtocolRunsRequest(ListProtocolRunsRequest&& from) noexcept
    : ListProtocolRunsRequest() {
    *this = ::std::move(from);
  }

  inline ListProtocolRunsRequest& operator=(const ListProtocolRunsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolRunsRequest& operator=(ListProtocolRunsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolRunsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolRunsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProtocolRunsRequest*>(
               &_ListProtocolRunsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListProtocolRunsRequest& a, ListProtocolRunsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolRunsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolRunsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolRunsRequest* New() const final {
    return new ListProtocolRunsRequest();
  }

  ListProtocolRunsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolRunsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProtocolRunsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProtocolRunsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProtocolRunsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolRunsRequest";
  }
  protected:
  explicit ListProtocolRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterInfoFieldNumber = 1,
  };
  // .minknow_api.protocol.FilteringInfo filter_info = 1;
  bool has_filter_info() const;
  private:
  bool _internal_has_filter_info() const;
  public:
  void clear_filter_info();
  const ::minknow_api::protocol::FilteringInfo& filter_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::FilteringInfo* release_filter_info();
  ::minknow_api::protocol::FilteringInfo* mutable_filter_info();
  void set_allocated_filter_info(::minknow_api::protocol::FilteringInfo* filter_info);
  private:
  const ::minknow_api::protocol::FilteringInfo& _internal_filter_info() const;
  ::minknow_api::protocol::FilteringInfo* _internal_mutable_filter_info();
  public:
  void unsafe_arena_set_allocated_filter_info(
      ::minknow_api::protocol::FilteringInfo* filter_info);
  ::minknow_api::protocol::FilteringInfo* unsafe_arena_release_filter_info();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolRunsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol::FilteringInfo* filter_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolRunsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolRunsResponse) */ {
 public:
  inline ListProtocolRunsResponse() : ListProtocolRunsResponse(nullptr) {}
  ~ListProtocolRunsResponse() override;
  explicit constexpr ListProtocolRunsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolRunsResponse(const ListProtocolRunsResponse& from);
  ListProtocolRunsResponse(ListProtocolRunsResponse&& from) noexcept
    : ListProtocolRunsResponse() {
    *this = ::std::move(from);
  }

  inline ListProtocolRunsResponse& operator=(const ListProtocolRunsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolRunsResponse& operator=(ListProtocolRunsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolRunsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolRunsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProtocolRunsResponse*>(
               &_ListProtocolRunsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListProtocolRunsResponse& a, ListProtocolRunsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolRunsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolRunsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolRunsResponse* New() const final {
    return new ListProtocolRunsResponse();
  }

  ListProtocolRunsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolRunsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProtocolRunsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProtocolRunsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProtocolRunsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolRunsResponse";
  }
  protected:
  explicit ListProtocolRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdsFieldNumber = 1,
  };
  // repeated string run_ids = 1;
  int run_ids_size() const;
  private:
  int _internal_run_ids_size() const;
  public:
  void clear_run_ids();
  const std::string& run_ids(int index) const;
  std::string* mutable_run_ids(int index);
  void set_run_ids(int index, const std::string& value);
  void set_run_ids(int index, std::string&& value);
  void set_run_ids(int index, const char* value);
  void set_run_ids(int index, const char* value, size_t size);
  std::string* add_run_ids();
  void add_run_ids(const std::string& value);
  void add_run_ids(std::string&& value);
  void add_run_ids(const char* value);
  void add_run_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& run_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_run_ids();
  private:
  const std::string& _internal_run_ids(int index) const;
  std::string* _internal_add_run_ids();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolRunsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> run_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentProtocolRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetCurrentProtocolRunRequest) */ {
 public:
  inline GetCurrentProtocolRunRequest() : GetCurrentProtocolRunRequest(nullptr) {}
  explicit constexpr GetCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentProtocolRunRequest(const GetCurrentProtocolRunRequest& from);
  GetCurrentProtocolRunRequest(GetCurrentProtocolRunRequest&& from) noexcept
    : GetCurrentProtocolRunRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentProtocolRunRequest& operator=(const GetCurrentProtocolRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentProtocolRunRequest& operator=(GetCurrentProtocolRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentProtocolRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentProtocolRunRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentProtocolRunRequest*>(
               &_GetCurrentProtocolRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetCurrentProtocolRunRequest& a, GetCurrentProtocolRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentProtocolRunRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentProtocolRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentProtocolRunRequest* New() const final {
    return new GetCurrentProtocolRunRequest();
  }

  GetCurrentProtocolRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentProtocolRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCurrentProtocolRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCurrentProtocolRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetCurrentProtocolRunRequest";
  }
  protected:
  explicit GetCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetCurrentProtocolRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentProtocolRunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetCurrentProtocolRunResponse) */ {
 public:
  inline GetCurrentProtocolRunResponse() : GetCurrentProtocolRunResponse(nullptr) {}
  ~GetCurrentProtocolRunResponse() override;
  explicit constexpr GetCurrentProtocolRunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentProtocolRunResponse(const GetCurrentProtocolRunResponse& from);
  GetCurrentProtocolRunResponse(GetCurrentProtocolRunResponse&& from) noexcept
    : GetCurrentProtocolRunResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentProtocolRunResponse& operator=(const GetCurrentProtocolRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentProtocolRunResponse& operator=(GetCurrentProtocolRunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentProtocolRunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentProtocolRunResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentProtocolRunResponse*>(
               &_GetCurrentProtocolRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetCurrentProtocolRunResponse& a, GetCurrentProtocolRunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentProtocolRunResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentProtocolRunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentProtocolRunResponse* New() const final {
    return new GetCurrentProtocolRunResponse();
  }

  GetCurrentProtocolRunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentProtocolRunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentProtocolRunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentProtocolRunResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentProtocolRunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetCurrentProtocolRunResponse";
  }
  protected:
  explicit GetCurrentProtocolRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunInfoFieldNumber = 3,
  };
  // .minknow_api.protocol.ProtocolRunInfo run_info = 3;
  bool has_run_info() const;
  private:
  bool _internal_has_run_info() const;
  public:
  void clear_run_info();
  const ::minknow_api::protocol::ProtocolRunInfo& run_info() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolRunInfo* release_run_info();
  ::minknow_api::protocol::ProtocolRunInfo* mutable_run_info();
  void set_allocated_run_info(::minknow_api::protocol::ProtocolRunInfo* run_info);
  private:
  const ::minknow_api::protocol::ProtocolRunInfo& _internal_run_info() const;
  ::minknow_api::protocol::ProtocolRunInfo* _internal_mutable_run_info();
  public:
  void unsafe_arena_set_allocated_run_info(
      ::minknow_api::protocol::ProtocolRunInfo* run_info);
  ::minknow_api::protocol::ProtocolRunInfo* unsafe_arena_release_run_info();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetCurrentProtocolRunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol::ProtocolRunInfo* run_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class WatchCurrentProtocolRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.WatchCurrentProtocolRunRequest) */ {
 public:
  inline WatchCurrentProtocolRunRequest() : WatchCurrentProtocolRunRequest(nullptr) {}
  explicit constexpr WatchCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchCurrentProtocolRunRequest(const WatchCurrentProtocolRunRequest& from);
  WatchCurrentProtocolRunRequest(WatchCurrentProtocolRunRequest&& from) noexcept
    : WatchCurrentProtocolRunRequest() {
    *this = ::std::move(from);
  }

  inline WatchCurrentProtocolRunRequest& operator=(const WatchCurrentProtocolRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCurrentProtocolRunRequest& operator=(WatchCurrentProtocolRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchCurrentProtocolRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchCurrentProtocolRunRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCurrentProtocolRunRequest*>(
               &_WatchCurrentProtocolRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(WatchCurrentProtocolRunRequest& a, WatchCurrentProtocolRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCurrentProtocolRunRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchCurrentProtocolRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCurrentProtocolRunRequest* New() const final {
    return new WatchCurrentProtocolRunRequest();
  }

  WatchCurrentProtocolRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCurrentProtocolRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WatchCurrentProtocolRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WatchCurrentProtocolRunRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.WatchCurrentProtocolRunRequest";
  }
  protected:
  explicit WatchCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.WatchCurrentProtocolRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetContextInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetContextInfoRequest) */ {
 public:
  inline GetContextInfoRequest() : GetContextInfoRequest(nullptr) {}
  explicit constexpr GetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContextInfoRequest(const GetContextInfoRequest& from);
  GetContextInfoRequest(GetContextInfoRequest&& from) noexcept
    : GetContextInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetContextInfoRequest& operator=(const GetContextInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContextInfoRequest& operator=(GetContextInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContextInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContextInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetContextInfoRequest*>(
               &_GetContextInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetContextInfoRequest& a, GetContextInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContextInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContextInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContextInfoRequest* New() const final {
    return new GetContextInfoRequest();
  }

  GetContextInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContextInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetContextInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetContextInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetContextInfoRequest";
  }
  protected:
  explicit GetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetContextInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetContextInfoResponse_ContextInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetContextInfoResponse_ContextInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetContextInfoResponse_ContextInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetContextInfoResponse_ContextInfoEntry_DoNotUse();
  explicit constexpr GetContextInfoResponse_ContextInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetContextInfoResponse_ContextInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetContextInfoResponse_ContextInfoEntry_DoNotUse& other);
  static const GetContextInfoResponse_ContextInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetContextInfoResponse_ContextInfoEntry_DoNotUse*>(&_GetContextInfoResponse_ContextInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class GetContextInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetContextInfoResponse) */ {
 public:
  inline GetContextInfoResponse() : GetContextInfoResponse(nullptr) {}
  ~GetContextInfoResponse() override;
  explicit constexpr GetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetContextInfoResponse(const GetContextInfoResponse& from);
  GetContextInfoResponse(GetContextInfoResponse&& from) noexcept
    : GetContextInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetContextInfoResponse& operator=(const GetContextInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetContextInfoResponse& operator=(GetContextInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetContextInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetContextInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetContextInfoResponse*>(
               &_GetContextInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetContextInfoResponse& a, GetContextInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetContextInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetContextInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetContextInfoResponse* New() const final {
    return new GetContextInfoResponse();
  }

  GetContextInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetContextInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetContextInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetContextInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetContextInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetContextInfoResponse";
  }
  protected:
  explicit GetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextInfoFieldNumber = 1,
  };
  // map<string, string> context_info = 1;
  int context_info_size() const;
  private:
  int _internal_context_info_size() const;
  public:
  void clear_context_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_context_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_context_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      context_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_context_info();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetContextInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetContextInfoResponse_ContextInfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> context_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetContextInfoRequest_ContextInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetContextInfoRequest_ContextInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetContextInfoRequest_ContextInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SetContextInfoRequest_ContextInfoEntry_DoNotUse();
  explicit constexpr SetContextInfoRequest_ContextInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SetContextInfoRequest_ContextInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetContextInfoRequest_ContextInfoEntry_DoNotUse& other);
  static const SetContextInfoRequest_ContextInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetContextInfoRequest_ContextInfoEntry_DoNotUse*>(&_SetContextInfoRequest_ContextInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SetContextInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetContextInfoRequest) */ {
 public:
  inline SetContextInfoRequest() : SetContextInfoRequest(nullptr) {}
  ~SetContextInfoRequest() override;
  explicit constexpr SetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetContextInfoRequest(const SetContextInfoRequest& from);
  SetContextInfoRequest(SetContextInfoRequest&& from) noexcept
    : SetContextInfoRequest() {
    *this = ::std::move(from);
  }

  inline SetContextInfoRequest& operator=(const SetContextInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetContextInfoRequest& operator=(SetContextInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetContextInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetContextInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SetContextInfoRequest*>(
               &_SetContextInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetContextInfoRequest& a, SetContextInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetContextInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetContextInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetContextInfoRequest* New() const final {
    return new SetContextInfoRequest();
  }

  SetContextInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetContextInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetContextInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetContextInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetContextInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetContextInfoRequest";
  }
  protected:
  explicit SetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextInfoFieldNumber = 1,
  };
  // map<string, string> context_info = 1;
  int context_info_size() const;
  private:
  int _internal_context_info_size() const;
  public:
  void clear_context_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_context_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_context_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      context_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_context_info();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetContextInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetContextInfoRequest_ContextInfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> context_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetContextInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetContextInfoResponse) */ {
 public:
  inline SetContextInfoResponse() : SetContextInfoResponse(nullptr) {}
  explicit constexpr SetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetContextInfoResponse(const SetContextInfoResponse& from);
  SetContextInfoResponse(SetContextInfoResponse&& from) noexcept
    : SetContextInfoResponse() {
    *this = ::std::move(from);
  }

  inline SetContextInfoResponse& operator=(const SetContextInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetContextInfoResponse& operator=(SetContextInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetContextInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetContextInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SetContextInfoResponse*>(
               &_SetContextInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SetContextInfoResponse& a, SetContextInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetContextInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetContextInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetContextInfoResponse* New() const final {
    return new SetContextInfoResponse();
  }

  SetContextInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetContextInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetContextInfoResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetContextInfoResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetContextInfoResponse";
  }
  protected:
  explicit SetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetContextInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetProtocolPurposeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetProtocolPurposeRequest) */ {
 public:
  inline GetProtocolPurposeRequest() : GetProtocolPurposeRequest(nullptr) {}
  explicit constexpr GetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProtocolPurposeRequest(const GetProtocolPurposeRequest& from);
  GetProtocolPurposeRequest(GetProtocolPurposeRequest&& from) noexcept
    : GetProtocolPurposeRequest() {
    *this = ::std::move(from);
  }

  inline GetProtocolPurposeRequest& operator=(const GetProtocolPurposeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProtocolPurposeRequest& operator=(GetProtocolPurposeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProtocolPurposeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProtocolPurposeRequest* internal_default_instance() {
    return reinterpret_cast<const GetProtocolPurposeRequest*>(
               &_GetProtocolPurposeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetProtocolPurposeRequest& a, GetProtocolPurposeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProtocolPurposeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProtocolPurposeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProtocolPurposeRequest* New() const final {
    return new GetProtocolPurposeRequest();
  }

  GetProtocolPurposeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProtocolPurposeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetProtocolPurposeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetProtocolPurposeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetProtocolPurposeRequest";
  }
  protected:
  explicit GetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetProtocolPurposeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GetProtocolPurposeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.GetProtocolPurposeResponse) */ {
 public:
  inline GetProtocolPurposeResponse() : GetProtocolPurposeResponse(nullptr) {}
  ~GetProtocolPurposeResponse() override;
  explicit constexpr GetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProtocolPurposeResponse(const GetProtocolPurposeResponse& from);
  GetProtocolPurposeResponse(GetProtocolPurposeResponse&& from) noexcept
    : GetProtocolPurposeResponse() {
    *this = ::std::move(from);
  }

  inline GetProtocolPurposeResponse& operator=(const GetProtocolPurposeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProtocolPurposeResponse& operator=(GetProtocolPurposeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProtocolPurposeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProtocolPurposeResponse* internal_default_instance() {
    return reinterpret_cast<const GetProtocolPurposeResponse*>(
               &_GetProtocolPurposeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetProtocolPurposeResponse& a, GetProtocolPurposeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProtocolPurposeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProtocolPurposeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProtocolPurposeResponse* New() const final {
    return new GetProtocolPurposeResponse();
  }

  GetProtocolPurposeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProtocolPurposeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProtocolPurposeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetProtocolPurposeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProtocolPurposeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.GetProtocolPurposeResponse";
  }
  protected:
  explicit GetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurposeFieldNumber = 1,
  };
  // string purpose = 1;
  void clear_purpose();
  const std::string& purpose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purpose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purpose();
  PROTOBUF_MUST_USE_RESULT std::string* release_purpose();
  void set_allocated_purpose(std::string* purpose);
  private:
  const std::string& _internal_purpose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purpose(const std::string& value);
  std::string* _internal_mutable_purpose();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.GetProtocolPurposeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purpose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetProtocolPurposeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetProtocolPurposeRequest) */ {
 public:
  inline SetProtocolPurposeRequest() : SetProtocolPurposeRequest(nullptr) {}
  ~SetProtocolPurposeRequest() override;
  explicit constexpr SetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProtocolPurposeRequest(const SetProtocolPurposeRequest& from);
  SetProtocolPurposeRequest(SetProtocolPurposeRequest&& from) noexcept
    : SetProtocolPurposeRequest() {
    *this = ::std::move(from);
  }

  inline SetProtocolPurposeRequest& operator=(const SetProtocolPurposeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProtocolPurposeRequest& operator=(SetProtocolPurposeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProtocolPurposeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProtocolPurposeRequest* internal_default_instance() {
    return reinterpret_cast<const SetProtocolPurposeRequest*>(
               &_SetProtocolPurposeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetProtocolPurposeRequest& a, SetProtocolPurposeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProtocolPurposeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProtocolPurposeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetProtocolPurposeRequest* New() const final {
    return new SetProtocolPurposeRequest();
  }

  SetProtocolPurposeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProtocolPurposeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetProtocolPurposeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetProtocolPurposeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProtocolPurposeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetProtocolPurposeRequest";
  }
  protected:
  explicit SetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurposeFieldNumber = 1,
  };
  // string purpose = 1;
  void clear_purpose();
  const std::string& purpose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purpose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purpose();
  PROTOBUF_MUST_USE_RESULT std::string* release_purpose();
  void set_allocated_purpose(std::string* purpose);
  private:
  const std::string& _internal_purpose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purpose(const std::string& value);
  std::string* _internal_mutable_purpose();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetProtocolPurposeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purpose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetProtocolPurposeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetProtocolPurposeResponse) */ {
 public:
  inline SetProtocolPurposeResponse() : SetProtocolPurposeResponse(nullptr) {}
  explicit constexpr SetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetProtocolPurposeResponse(const SetProtocolPurposeResponse& from);
  SetProtocolPurposeResponse(SetProtocolPurposeResponse&& from) noexcept
    : SetProtocolPurposeResponse() {
    *this = ::std::move(from);
  }

  inline SetProtocolPurposeResponse& operator=(const SetProtocolPurposeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProtocolPurposeResponse& operator=(SetProtocolPurposeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProtocolPurposeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProtocolPurposeResponse* internal_default_instance() {
    return reinterpret_cast<const SetProtocolPurposeResponse*>(
               &_SetProtocolPurposeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetProtocolPurposeResponse& a, SetProtocolPurposeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProtocolPurposeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProtocolPurposeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetProtocolPurposeResponse* New() const final {
    return new SetProtocolPurposeResponse();
  }

  SetProtocolPurposeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProtocolPurposeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetProtocolPurposeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetProtocolPurposeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetProtocolPurposeResponse";
  }
  protected:
  explicit SetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetProtocolPurposeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AddEpi2meWorkflowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.AddEpi2meWorkflowRequest) */ {
 public:
  inline AddEpi2meWorkflowRequest() : AddEpi2meWorkflowRequest(nullptr) {}
  ~AddEpi2meWorkflowRequest() override;
  explicit constexpr AddEpi2meWorkflowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEpi2meWorkflowRequest(const AddEpi2meWorkflowRequest& from);
  AddEpi2meWorkflowRequest(AddEpi2meWorkflowRequest&& from) noexcept
    : AddEpi2meWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline AddEpi2meWorkflowRequest& operator=(const AddEpi2meWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEpi2meWorkflowRequest& operator=(AddEpi2meWorkflowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEpi2meWorkflowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEpi2meWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const AddEpi2meWorkflowRequest*>(
               &_AddEpi2meWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddEpi2meWorkflowRequest& a, AddEpi2meWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEpi2meWorkflowRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEpi2meWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEpi2meWorkflowRequest* New() const final {
    return new AddEpi2meWorkflowRequest();
  }

  AddEpi2meWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEpi2meWorkflowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddEpi2meWorkflowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddEpi2meWorkflowRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEpi2meWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.AddEpi2meWorkflowRequest";
  }
  protected:
  explicit AddEpi2meWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
    kEpi2MeWorkflowFieldNumber = 2,
  };
  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflow = 2 [(.minknow_api.rpc_required) = true];
  bool has_epi2me_workflow() const;
  private:
  bool _internal_has_epi2me_workflow() const;
  public:
  void clear_epi2me_workflow();
  const ::minknow_api::protocol::Epi2meWorkflowReference& epi2me_workflow() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::Epi2meWorkflowReference* release_epi2me_workflow();
  ::minknow_api::protocol::Epi2meWorkflowReference* mutable_epi2me_workflow();
  void set_allocated_epi2me_workflow(::minknow_api::protocol::Epi2meWorkflowReference* epi2me_workflow);
  private:
  const ::minknow_api::protocol::Epi2meWorkflowReference& _internal_epi2me_workflow() const;
  ::minknow_api::protocol::Epi2meWorkflowReference* _internal_mutable_epi2me_workflow();
  public:
  void unsafe_arena_set_allocated_epi2me_workflow(
      ::minknow_api::protocol::Epi2meWorkflowReference* epi2me_workflow);
  ::minknow_api::protocol::Epi2meWorkflowReference* unsafe_arena_release_epi2me_workflow();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.AddEpi2meWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  ::minknow_api::protocol::Epi2meWorkflowReference* epi2me_workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AddEpi2meWorkflowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.AddEpi2meWorkflowResponse) */ {
 public:
  inline AddEpi2meWorkflowResponse() : AddEpi2meWorkflowResponse(nullptr) {}
  explicit constexpr AddEpi2meWorkflowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEpi2meWorkflowResponse(const AddEpi2meWorkflowResponse& from);
  AddEpi2meWorkflowResponse(AddEpi2meWorkflowResponse&& from) noexcept
    : AddEpi2meWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline AddEpi2meWorkflowResponse& operator=(const AddEpi2meWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEpi2meWorkflowResponse& operator=(AddEpi2meWorkflowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEpi2meWorkflowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEpi2meWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const AddEpi2meWorkflowResponse*>(
               &_AddEpi2meWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AddEpi2meWorkflowResponse& a, AddEpi2meWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEpi2meWorkflowResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEpi2meWorkflowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEpi2meWorkflowResponse* New() const final {
    return new AddEpi2meWorkflowResponse();
  }

  AddEpi2meWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEpi2meWorkflowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddEpi2meWorkflowResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddEpi2meWorkflowResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.AddEpi2meWorkflowResponse";
  }
  protected:
  explicit AddEpi2meWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.AddEpi2meWorkflowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolGroupIdsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolGroupIdsRequest) */ {
 public:
  inline ListProtocolGroupIdsRequest() : ListProtocolGroupIdsRequest(nullptr) {}
  explicit constexpr ListProtocolGroupIdsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolGroupIdsRequest(const ListProtocolGroupIdsRequest& from);
  ListProtocolGroupIdsRequest(ListProtocolGroupIdsRequest&& from) noexcept
    : ListProtocolGroupIdsRequest() {
    *this = ::std::move(from);
  }

  inline ListProtocolGroupIdsRequest& operator=(const ListProtocolGroupIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolGroupIdsRequest& operator=(ListProtocolGroupIdsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolGroupIdsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolGroupIdsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProtocolGroupIdsRequest*>(
               &_ListProtocolGroupIdsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ListProtocolGroupIdsRequest& a, ListProtocolGroupIdsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolGroupIdsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolGroupIdsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolGroupIdsRequest* New() const final {
    return new ListProtocolGroupIdsRequest();
  }

  ListProtocolGroupIdsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolGroupIdsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListProtocolGroupIdsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListProtocolGroupIdsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolGroupIdsRequest";
  }
  protected:
  explicit ListProtocolGroupIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolGroupIdsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListProtocolGroupIdsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListProtocolGroupIdsResponse) */ {
 public:
  inline ListProtocolGroupIdsResponse() : ListProtocolGroupIdsResponse(nullptr) {}
  ~ListProtocolGroupIdsResponse() override;
  explicit constexpr ListProtocolGroupIdsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProtocolGroupIdsResponse(const ListProtocolGroupIdsResponse& from);
  ListProtocolGroupIdsResponse(ListProtocolGroupIdsResponse&& from) noexcept
    : ListProtocolGroupIdsResponse() {
    *this = ::std::move(from);
  }

  inline ListProtocolGroupIdsResponse& operator=(const ListProtocolGroupIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProtocolGroupIdsResponse& operator=(ListProtocolGroupIdsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProtocolGroupIdsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProtocolGroupIdsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProtocolGroupIdsResponse*>(
               &_ListProtocolGroupIdsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ListProtocolGroupIdsResponse& a, ListProtocolGroupIdsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProtocolGroupIdsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProtocolGroupIdsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProtocolGroupIdsResponse* New() const final {
    return new ListProtocolGroupIdsResponse();
  }

  ListProtocolGroupIdsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProtocolGroupIdsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProtocolGroupIdsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProtocolGroupIdsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProtocolGroupIdsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListProtocolGroupIdsResponse";
  }
  protected:
  explicit ListProtocolGroupIdsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolGroupIdsFieldNumber = 1,
  };
  // repeated string protocol_group_ids = 1;
  int protocol_group_ids_size() const;
  private:
  int _internal_protocol_group_ids_size() const;
  public:
  void clear_protocol_group_ids();
  const std::string& protocol_group_ids(int index) const;
  std::string* mutable_protocol_group_ids(int index);
  void set_protocol_group_ids(int index, const std::string& value);
  void set_protocol_group_ids(int index, std::string&& value);
  void set_protocol_group_ids(int index, const char* value);
  void set_protocol_group_ids(int index, const char* value, size_t size);
  std::string* add_protocol_group_ids();
  void add_protocol_group_ids(const std::string& value);
  void add_protocol_group_ids(std::string&& value);
  void add_protocol_group_ids(const char* value);
  void add_protocol_group_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& protocol_group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_protocol_group_ids();
  private:
  const std::string& _internal_protocol_group_ids(int index) const;
  std::string* _internal_add_protocol_group_ids();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListProtocolGroupIdsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> protocol_group_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class BeginHardwareCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.BeginHardwareCheckRequest) */ {
 public:
  inline BeginHardwareCheckRequest() : BeginHardwareCheckRequest(nullptr) {}
  explicit constexpr BeginHardwareCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginHardwareCheckRequest(const BeginHardwareCheckRequest& from);
  BeginHardwareCheckRequest(BeginHardwareCheckRequest&& from) noexcept
    : BeginHardwareCheckRequest() {
    *this = ::std::move(from);
  }

  inline BeginHardwareCheckRequest& operator=(const BeginHardwareCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginHardwareCheckRequest& operator=(BeginHardwareCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginHardwareCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginHardwareCheckRequest* internal_default_instance() {
    return reinterpret_cast<const BeginHardwareCheckRequest*>(
               &_BeginHardwareCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(BeginHardwareCheckRequest& a, BeginHardwareCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginHardwareCheckRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginHardwareCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginHardwareCheckRequest* New() const final {
    return new BeginHardwareCheckRequest();
  }

  BeginHardwareCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginHardwareCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BeginHardwareCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BeginHardwareCheckRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.BeginHardwareCheckRequest";
  }
  protected:
  explicit BeginHardwareCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginHardwareCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class BeginHardwareCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.BeginHardwareCheckResponse) */ {
 public:
  inline BeginHardwareCheckResponse() : BeginHardwareCheckResponse(nullptr) {}
  ~BeginHardwareCheckResponse() override;
  explicit constexpr BeginHardwareCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginHardwareCheckResponse(const BeginHardwareCheckResponse& from);
  BeginHardwareCheckResponse(BeginHardwareCheckResponse&& from) noexcept
    : BeginHardwareCheckResponse() {
    *this = ::std::move(from);
  }

  inline BeginHardwareCheckResponse& operator=(const BeginHardwareCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginHardwareCheckResponse& operator=(BeginHardwareCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginHardwareCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginHardwareCheckResponse* internal_default_instance() {
    return reinterpret_cast<const BeginHardwareCheckResponse*>(
               &_BeginHardwareCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BeginHardwareCheckResponse& a, BeginHardwareCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginHardwareCheckResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginHardwareCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginHardwareCheckResponse* New() const final {
    return new BeginHardwareCheckResponse();
  }

  BeginHardwareCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginHardwareCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginHardwareCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BeginHardwareCheckResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginHardwareCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.BeginHardwareCheckResponse";
  }
  protected:
  explicit BeginHardwareCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginHardwareCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class BeginPlatformQcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.BeginPlatformQcRequest) */ {
 public:
  inline BeginPlatformQcRequest() : BeginPlatformQcRequest(nullptr) {}
  explicit constexpr BeginPlatformQcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginPlatformQcRequest(const BeginPlatformQcRequest& from);
  BeginPlatformQcRequest(BeginPlatformQcRequest&& from) noexcept
    : BeginPlatformQcRequest() {
    *this = ::std::move(from);
  }

  inline BeginPlatformQcRequest& operator=(const BeginPlatformQcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginPlatformQcRequest& operator=(BeginPlatformQcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginPlatformQcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginPlatformQcRequest* internal_default_instance() {
    return reinterpret_cast<const BeginPlatformQcRequest*>(
               &_BeginPlatformQcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(BeginPlatformQcRequest& a, BeginPlatformQcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginPlatformQcRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginPlatformQcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginPlatformQcRequest* New() const final {
    return new BeginPlatformQcRequest();
  }

  BeginPlatformQcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginPlatformQcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BeginPlatformQcRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BeginPlatformQcRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.BeginPlatformQcRequest";
  }
  protected:
  explicit BeginPlatformQcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginPlatformQcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class BeginPlatformQcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.BeginPlatformQcResponse) */ {
 public:
  inline BeginPlatformQcResponse() : BeginPlatformQcResponse(nullptr) {}
  ~BeginPlatformQcResponse() override;
  explicit constexpr BeginPlatformQcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginPlatformQcResponse(const BeginPlatformQcResponse& from);
  BeginPlatformQcResponse(BeginPlatformQcResponse&& from) noexcept
    : BeginPlatformQcResponse() {
    *this = ::std::move(from);
  }

  inline BeginPlatformQcResponse& operator=(const BeginPlatformQcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginPlatformQcResponse& operator=(BeginPlatformQcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginPlatformQcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginPlatformQcResponse* internal_default_instance() {
    return reinterpret_cast<const BeginPlatformQcResponse*>(
               &_BeginPlatformQcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(BeginPlatformQcResponse& a, BeginPlatformQcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginPlatformQcResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginPlatformQcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginPlatformQcResponse* New() const final {
    return new BeginPlatformQcResponse();
  }

  BeginPlatformQcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginPlatformQcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginPlatformQcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BeginPlatformQcResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginPlatformQcResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.BeginPlatformQcResponse";
  }
  protected:
  explicit BeginPlatformQcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.BeginPlatformQcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetPlatformQcResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetPlatformQcResultRequest) */ {
 public:
  inline SetPlatformQcResultRequest() : SetPlatformQcResultRequest(nullptr) {}
  ~SetPlatformQcResultRequest() override;
  explicit constexpr SetPlatformQcResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPlatformQcResultRequest(const SetPlatformQcResultRequest& from);
  SetPlatformQcResultRequest(SetPlatformQcResultRequest&& from) noexcept
    : SetPlatformQcResultRequest() {
    *this = ::std::move(from);
  }

  inline SetPlatformQcResultRequest& operator=(const SetPlatformQcResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlatformQcResultRequest& operator=(SetPlatformQcResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPlatformQcResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPlatformQcResultRequest* internal_default_instance() {
    return reinterpret_cast<const SetPlatformQcResultRequest*>(
               &_SetPlatformQcResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SetPlatformQcResultRequest& a, SetPlatformQcResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlatformQcResultRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPlatformQcResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPlatformQcResultRequest* New() const final {
    return new SetPlatformQcResultRequest();
  }

  SetPlatformQcResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlatformQcResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPlatformQcResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPlatformQcResultRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlatformQcResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetPlatformQcResultRequest";
  }
  protected:
  explicit SetPlatformQcResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolRunIdFieldNumber = 1,
    kPqcResultFieldNumber = 2,
  };
  // string protocol_run_id = 1;
  void clear_protocol_run_id();
  const std::string& protocol_run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_protocol_run_id();
  void set_allocated_protocol_run_id(std::string* protocol_run_id);
  private:
  const std::string& _internal_protocol_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol_run_id(const std::string& value);
  std::string* _internal_mutable_protocol_run_id();
  public:

  // .minknow_api.protocol.PlatformQcResult pqc_result = 2;
  bool has_pqc_result() const;
  private:
  bool _internal_has_pqc_result() const;
  public:
  void clear_pqc_result();
  const ::minknow_api::protocol::PlatformQcResult& pqc_result() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::PlatformQcResult* release_pqc_result();
  ::minknow_api::protocol::PlatformQcResult* mutable_pqc_result();
  void set_allocated_pqc_result(::minknow_api::protocol::PlatformQcResult* pqc_result);
  private:
  const ::minknow_api::protocol::PlatformQcResult& _internal_pqc_result() const;
  ::minknow_api::protocol::PlatformQcResult* _internal_mutable_pqc_result();
  public:
  void unsafe_arena_set_allocated_pqc_result(
      ::minknow_api::protocol::PlatformQcResult* pqc_result);
  ::minknow_api::protocol::PlatformQcResult* unsafe_arena_release_pqc_result();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetPlatformQcResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_run_id_;
  ::minknow_api::protocol::PlatformQcResult* pqc_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class SetPlatformQcResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.SetPlatformQcResultResponse) */ {
 public:
  inline SetPlatformQcResultResponse() : SetPlatformQcResultResponse(nullptr) {}
  explicit constexpr SetPlatformQcResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPlatformQcResultResponse(const SetPlatformQcResultResponse& from);
  SetPlatformQcResultResponse(SetPlatformQcResultResponse&& from) noexcept
    : SetPlatformQcResultResponse() {
    *this = ::std::move(from);
  }

  inline SetPlatformQcResultResponse& operator=(const SetPlatformQcResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlatformQcResultResponse& operator=(SetPlatformQcResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPlatformQcResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPlatformQcResultResponse* internal_default_instance() {
    return reinterpret_cast<const SetPlatformQcResultResponse*>(
               &_SetPlatformQcResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SetPlatformQcResultResponse& a, SetPlatformQcResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlatformQcResultResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPlatformQcResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPlatformQcResultResponse* New() const final {
    return new SetPlatformQcResultResponse();
  }

  SetPlatformQcResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlatformQcResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPlatformQcResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPlatformQcResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.SetPlatformQcResultResponse";
  }
  protected:
  explicit SetPlatformQcResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.SetPlatformQcResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolIdentifierComponents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolIdentifierComponents) */ {
 public:
  inline ProtocolIdentifierComponents() : ProtocolIdentifierComponents(nullptr) {}
  ~ProtocolIdentifierComponents() override;
  explicit constexpr ProtocolIdentifierComponents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolIdentifierComponents(const ProtocolIdentifierComponents& from);
  ProtocolIdentifierComponents(ProtocolIdentifierComponents&& from) noexcept
    : ProtocolIdentifierComponents() {
    *this = ::std::move(from);
  }

  inline ProtocolIdentifierComponents& operator=(const ProtocolIdentifierComponents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolIdentifierComponents& operator=(ProtocolIdentifierComponents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolIdentifierComponents& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolIdentifierComponents* internal_default_instance() {
    return reinterpret_cast<const ProtocolIdentifierComponents*>(
               &_ProtocolIdentifierComponents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ProtocolIdentifierComponents& a, ProtocolIdentifierComponents& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolIdentifierComponents* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolIdentifierComponents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolIdentifierComponents* New() const final {
    return new ProtocolIdentifierComponents();
  }

  ProtocolIdentifierComponents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolIdentifierComponents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolIdentifierComponents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolIdentifierComponents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolIdentifierComponents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolIdentifierComponents";
  }
  protected:
  explicit ProtocolIdentifierComponents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtocolIdentifierComponents_Location Location;
  static constexpr Location ANY =
    ProtocolIdentifierComponents_Location_ANY;
  static constexpr Location SYSTEM_SCRIPTS =
    ProtocolIdentifierComponents_Location_SYSTEM_SCRIPTS;
  static constexpr Location USER_SCRIPTS =
    ProtocolIdentifierComponents_Location_USER_SCRIPTS;
  static inline bool Location_IsValid(int value) {
    return ProtocolIdentifierComponents_Location_IsValid(value);
  }
  static constexpr Location Location_MIN =
    ProtocolIdentifierComponents_Location_Location_MIN;
  static constexpr Location Location_MAX =
    ProtocolIdentifierComponents_Location_Location_MAX;
  static constexpr int Location_ARRAYSIZE =
    ProtocolIdentifierComponents_Location_Location_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Location_descriptor() {
    return ProtocolIdentifierComponents_Location_descriptor();
  }
  template<typename T>
  static inline const std::string& Location_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Location>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Location_Name.");
    return ProtocolIdentifierComponents_Location_Name(enum_t_value);
  }
  static inline bool Location_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Location* value) {
    return ProtocolIdentifierComponents_Location_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExperimentTypeFieldNumber = 2,
    kNameFieldNumber = 3,
    kFlowCellProductCodeFieldNumber = 4,
    kKitFieldNumber = 5,
    kLocationFieldNumber = 1,
  };
  // string experiment_type = 2;
  void clear_experiment_type();
  const std::string& experiment_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_experiment_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_experiment_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_experiment_type();
  void set_allocated_experiment_type(std::string* experiment_type);
  private:
  const std::string& _internal_experiment_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_experiment_type(const std::string& value);
  std::string* _internal_mutable_experiment_type();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string flow_cell_product_code = 4;
  void clear_flow_cell_product_code();
  const std::string& flow_cell_product_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flow_cell_product_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flow_cell_product_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_flow_cell_product_code();
  void set_allocated_flow_cell_product_code(std::string* flow_cell_product_code);
  private:
  const std::string& _internal_flow_cell_product_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flow_cell_product_code(const std::string& value);
  std::string* _internal_mutable_flow_cell_product_code();
  public:

  // string kit = 5;
  void clear_kit();
  const std::string& kit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kit();
  PROTOBUF_MUST_USE_RESULT std::string* release_kit();
  void set_allocated_kit(std::string* kit);
  private:
  const std::string& _internal_kit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kit(const std::string& value);
  std::string* _internal_mutable_kit();
  public:

  // .minknow_api.protocol.ProtocolIdentifierComponents.Location location = 1;
  void clear_location();
  ::minknow_api::protocol::ProtocolIdentifierComponents_Location location() const;
  void set_location(::minknow_api::protocol::ProtocolIdentifierComponents_Location value);
  private:
  ::minknow_api::protocol::ProtocolIdentifierComponents_Location _internal_location() const;
  void _internal_set_location(::minknow_api::protocol::ProtocolIdentifierComponents_Location value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolIdentifierComponents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr experiment_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_cell_product_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kit_;
  int location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForProtocolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListSettingsForProtocolRequest) */ {
 public:
  inline ListSettingsForProtocolRequest() : ListSettingsForProtocolRequest(nullptr) {}
  ~ListSettingsForProtocolRequest() override;
  explicit constexpr ListSettingsForProtocolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForProtocolRequest(const ListSettingsForProtocolRequest& from);
  ListSettingsForProtocolRequest(ListSettingsForProtocolRequest&& from) noexcept
    : ListSettingsForProtocolRequest() {
    *this = ::std::move(from);
  }

  inline ListSettingsForProtocolRequest& operator=(const ListSettingsForProtocolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForProtocolRequest& operator=(ListSettingsForProtocolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForProtocolRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ProtocolIdentifierCase {
    kIdentifier = 1,
    kComponents = 2,
    PROTOCOL_IDENTIFIER_NOT_SET = 0,
  };

  static inline const ListSettingsForProtocolRequest* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForProtocolRequest*>(
               &_ListSettingsForProtocolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ListSettingsForProtocolRequest& a, ListSettingsForProtocolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForProtocolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForProtocolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForProtocolRequest* New() const final {
    return new ListSettingsForProtocolRequest();
  }

  ListSettingsForProtocolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForProtocolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForProtocolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForProtocolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForProtocolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListSettingsForProtocolRequest";
  }
  protected:
  explicit ListSettingsForProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kComponentsFieldNumber = 2,
  };
  // string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // .minknow_api.protocol.ProtocolIdentifierComponents components = 2;
  bool has_components() const;
  private:
  bool _internal_has_components() const;
  public:
  void clear_components();
  const ::minknow_api::protocol::ProtocolIdentifierComponents& components() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolIdentifierComponents* release_components();
  ::minknow_api::protocol::ProtocolIdentifierComponents* mutable_components();
  void set_allocated_components(::minknow_api::protocol::ProtocolIdentifierComponents* components);
  private:
  const ::minknow_api::protocol::ProtocolIdentifierComponents& _internal_components() const;
  ::minknow_api::protocol::ProtocolIdentifierComponents* _internal_mutable_components();
  public:
  void unsafe_arena_set_allocated_components(
      ::minknow_api::protocol::ProtocolIdentifierComponents* components);
  ::minknow_api::protocol::ProtocolIdentifierComponents* unsafe_arena_release_components();

  void clear_protocol_identifier();
  ProtocolIdentifierCase protocol_identifier_case() const;
  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListSettingsForProtocolRequest)
 private:
  class _Internal;
  void set_has_identifier();
  void set_has_components();

  inline bool has_protocol_identifier() const;
  inline void clear_has_protocol_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ProtocolIdentifierUnion {
    constexpr ProtocolIdentifierUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::minknow_api::protocol::ProtocolIdentifierComponents* components_;
  } protocol_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForProtocolResponse_RunOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions) */ {
 public:
  inline ListSettingsForProtocolResponse_RunOptions() : ListSettingsForProtocolResponse_RunOptions(nullptr) {}
  ~ListSettingsForProtocolResponse_RunOptions() override;
  explicit constexpr ListSettingsForProtocolResponse_RunOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForProtocolResponse_RunOptions(const ListSettingsForProtocolResponse_RunOptions& from);
  ListSettingsForProtocolResponse_RunOptions(ListSettingsForProtocolResponse_RunOptions&& from) noexcept
    : ListSettingsForProtocolResponse_RunOptions() {
    *this = ::std::move(from);
  }

  inline ListSettingsForProtocolResponse_RunOptions& operator=(const ListSettingsForProtocolResponse_RunOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForProtocolResponse_RunOptions& operator=(ListSettingsForProtocolResponse_RunOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForProtocolResponse_RunOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForProtocolResponse_RunOptions* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForProtocolResponse_RunOptions*>(
               &_ListSettingsForProtocolResponse_RunOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ListSettingsForProtocolResponse_RunOptions& a, ListSettingsForProtocolResponse_RunOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForProtocolResponse_RunOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForProtocolResponse_RunOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForProtocolResponse_RunOptions* New() const final {
    return new ListSettingsForProtocolResponse_RunOptions();
  }

  ListSettingsForProtocolResponse_RunOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForProtocolResponse_RunOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForProtocolResponse_RunOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForProtocolResponse_RunOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForProtocolResponse_RunOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions";
  }
  protected:
  explicit ListSettingsForProtocolResponse_RunOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunLengthFieldNumber = 1,
    kBiasVoltageFieldNumber = 2,
    kReadUntilEnabledFieldNumber = 3,
    kReadUntilRefFileFieldNumber = 4,
    kReadUntilChannelsFieldNumber = 5,
    kReadUntilBedFileEnabledFieldNumber = 6,
    kReadUntilBedFileFieldNumber = 7,
    kReadUntilEnrichmentFieldNumber = 8,
    kActiveChannelSelectionFieldNumber = 9,
    kMuxScanPeriodFieldNumber = 10,
    kGroupChangePeriodFieldNumber = 11,
  };
  // .minknow_api.protocol_settings.ProtocolSetting run_length = 1;
  bool has_run_length() const;
  private:
  bool _internal_has_run_length() const;
  public:
  void clear_run_length();
  const ::minknow_api::protocol_settings::ProtocolSetting& run_length() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_run_length();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_run_length();
  void set_allocated_run_length(::minknow_api::protocol_settings::ProtocolSetting* run_length);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_run_length() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_run_length();
  public:
  void unsafe_arena_set_allocated_run_length(
      ::minknow_api::protocol_settings::ProtocolSetting* run_length);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_run_length();

  // .minknow_api.protocol_settings.ProtocolSetting bias_voltage = 2;
  bool has_bias_voltage() const;
  private:
  bool _internal_has_bias_voltage() const;
  public:
  void clear_bias_voltage();
  const ::minknow_api::protocol_settings::ProtocolSetting& bias_voltage() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bias_voltage();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bias_voltage();
  void set_allocated_bias_voltage(::minknow_api::protocol_settings::ProtocolSetting* bias_voltage);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bias_voltage() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bias_voltage();
  public:
  void unsafe_arena_set_allocated_bias_voltage(
      ::minknow_api::protocol_settings::ProtocolSetting* bias_voltage);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bias_voltage();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enabled = 3;
  bool has_read_until_enabled() const;
  private:
  bool _internal_has_read_until_enabled() const;
  public:
  void clear_read_until_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_enabled();
  void set_allocated_read_until_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_until_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_enabled();
  public:
  void unsafe_arena_set_allocated_read_until_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_ref_file = 4;
  bool has_read_until_ref_file() const;
  private:
  bool _internal_has_read_until_ref_file() const;
  public:
  void clear_read_until_ref_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_ref_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_ref_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_ref_file();
  void set_allocated_read_until_ref_file(::minknow_api::protocol_settings::ProtocolSetting* read_until_ref_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_ref_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_ref_file();
  public:
  void unsafe_arena_set_allocated_read_until_ref_file(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_ref_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_ref_file();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_channels = 5;
  bool has_read_until_channels() const;
  private:
  bool _internal_has_read_until_channels() const;
  public:
  void clear_read_until_channels();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_channels() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_channels();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_channels();
  void set_allocated_read_until_channels(::minknow_api::protocol_settings::ProtocolSetting* read_until_channels);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_channels() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_channels();
  public:
  void unsafe_arena_set_allocated_read_until_channels(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_channels);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_channels();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
  bool has_read_until_bed_file_enabled() const;
  private:
  bool _internal_has_read_until_bed_file_enabled() const;
  public:
  void clear_read_until_bed_file_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_bed_file_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_bed_file_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_bed_file_enabled();
  void set_allocated_read_until_bed_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_bed_file_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_bed_file_enabled();
  public:
  void unsafe_arena_set_allocated_read_until_bed_file_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_bed_file_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file = 7;
  bool has_read_until_bed_file() const;
  private:
  bool _internal_has_read_until_bed_file() const;
  public:
  void clear_read_until_bed_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_bed_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_bed_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_bed_file();
  void set_allocated_read_until_bed_file(::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_bed_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_bed_file();
  public:
  void unsafe_arena_set_allocated_read_until_bed_file(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_bed_file();

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enrichment = 8;
  bool has_read_until_enrichment() const;
  private:
  bool _internal_has_read_until_enrichment() const;
  public:
  void clear_read_until_enrichment();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_until_enrichment() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_until_enrichment();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_until_enrichment();
  void set_allocated_read_until_enrichment(::minknow_api::protocol_settings::ProtocolSetting* read_until_enrichment);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_until_enrichment() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_until_enrichment();
  public:
  void unsafe_arena_set_allocated_read_until_enrichment(
      ::minknow_api::protocol_settings::ProtocolSetting* read_until_enrichment);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_until_enrichment();

  // .minknow_api.protocol_settings.ProtocolSetting active_channel_selection = 9;
  bool has_active_channel_selection() const;
  private:
  bool _internal_has_active_channel_selection() const;
  public:
  void clear_active_channel_selection();
  const ::minknow_api::protocol_settings::ProtocolSetting& active_channel_selection() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_active_channel_selection();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_active_channel_selection();
  void set_allocated_active_channel_selection(::minknow_api::protocol_settings::ProtocolSetting* active_channel_selection);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_active_channel_selection() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_active_channel_selection();
  public:
  void unsafe_arena_set_allocated_active_channel_selection(
      ::minknow_api::protocol_settings::ProtocolSetting* active_channel_selection);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_active_channel_selection();

  // .minknow_api.protocol_settings.ProtocolSetting mux_scan_period = 10;
  bool has_mux_scan_period() const;
  private:
  bool _internal_has_mux_scan_period() const;
  public:
  void clear_mux_scan_period();
  const ::minknow_api::protocol_settings::ProtocolSetting& mux_scan_period() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_mux_scan_period();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_mux_scan_period();
  void set_allocated_mux_scan_period(::minknow_api::protocol_settings::ProtocolSetting* mux_scan_period);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_mux_scan_period() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_mux_scan_period();
  public:
  void unsafe_arena_set_allocated_mux_scan_period(
      ::minknow_api::protocol_settings::ProtocolSetting* mux_scan_period);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_mux_scan_period();

  // .minknow_api.protocol_settings.ProtocolSetting group_change_period = 11;
  bool has_group_change_period() const;
  private:
  bool _internal_has_group_change_period() const;
  public:
  void clear_group_change_period();
  const ::minknow_api::protocol_settings::ProtocolSetting& group_change_period() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_group_change_period();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_group_change_period();
  void set_allocated_group_change_period(::minknow_api::protocol_settings::ProtocolSetting* group_change_period);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_group_change_period() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_group_change_period();
  public:
  void unsafe_arena_set_allocated_group_change_period(
      ::minknow_api::protocol_settings::ProtocolSetting* group_change_period);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_group_change_period();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol_settings::ProtocolSetting* run_length_;
  ::minknow_api::protocol_settings::ProtocolSetting* bias_voltage_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_ref_file_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_channels_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_until_enrichment_;
  ::minknow_api::protocol_settings::ProtocolSetting* active_channel_selection_;
  ::minknow_api::protocol_settings::ProtocolSetting* mux_scan_period_;
  ::minknow_api::protocol_settings::ProtocolSetting* group_change_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForProtocolResponse_Basecalling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling) */ {
 public:
  inline ListSettingsForProtocolResponse_Basecalling() : ListSettingsForProtocolResponse_Basecalling(nullptr) {}
  ~ListSettingsForProtocolResponse_Basecalling() override;
  explicit constexpr ListSettingsForProtocolResponse_Basecalling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForProtocolResponse_Basecalling(const ListSettingsForProtocolResponse_Basecalling& from);
  ListSettingsForProtocolResponse_Basecalling(ListSettingsForProtocolResponse_Basecalling&& from) noexcept
    : ListSettingsForProtocolResponse_Basecalling() {
    *this = ::std::move(from);
  }

  inline ListSettingsForProtocolResponse_Basecalling& operator=(const ListSettingsForProtocolResponse_Basecalling& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForProtocolResponse_Basecalling& operator=(ListSettingsForProtocolResponse_Basecalling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForProtocolResponse_Basecalling& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForProtocolResponse_Basecalling* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForProtocolResponse_Basecalling*>(
               &_ListSettingsForProtocolResponse_Basecalling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ListSettingsForProtocolResponse_Basecalling& a, ListSettingsForProtocolResponse_Basecalling& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForProtocolResponse_Basecalling* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForProtocolResponse_Basecalling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForProtocolResponse_Basecalling* New() const final {
    return new ListSettingsForProtocolResponse_Basecalling();
  }

  ListSettingsForProtocolResponse_Basecalling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForProtocolResponse_Basecalling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForProtocolResponse_Basecalling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForProtocolResponse_Basecalling& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForProtocolResponse_Basecalling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling";
  }
  protected:
  explicit ListSettingsForProtocolResponse_Basecalling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasecallingEnabledFieldNumber = 1,
    kBarcodingEnabledFieldNumber = 2,
    kBasecallModelFieldNumber = 3,
    kTrimBarcodesEnabledFieldNumber = 4,
    kRequireBarcodesBothEndsFieldNumber = 5,
    kDetectMidStrandBarcodesFieldNumber = 6,
    kOverrideMidBarcodingScoreFieldNumber = 7,
    kOverrideRearBarcodingScoreFieldNumber = 8,
    kMinBarcodingScoreFieldNumber = 9,
    kMinBarcodingScoreRearFieldNumber = 10,
    kMinBarcodingScoreMidFieldNumber = 11,
    kAlignmentEnabledFieldNumber = 12,
    kAlignmentRefFileFieldNumber = 13,
    kAlignmentBedFileEnabledFieldNumber = 14,
    kAlignmentBedFileFieldNumber = 15,
  };
  // .minknow_api.protocol_settings.ProtocolSetting basecalling_enabled = 1;
  bool has_basecalling_enabled() const;
  private:
  bool _internal_has_basecalling_enabled() const;
  public:
  void clear_basecalling_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& basecalling_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_basecalling_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_basecalling_enabled();
  void set_allocated_basecalling_enabled(::minknow_api::protocol_settings::ProtocolSetting* basecalling_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_basecalling_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_basecalling_enabled();
  public:
  void unsafe_arena_set_allocated_basecalling_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* basecalling_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_basecalling_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting barcoding_enabled = 2;
  bool has_barcoding_enabled() const;
  private:
  bool _internal_has_barcoding_enabled() const;
  public:
  void clear_barcoding_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& barcoding_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_barcoding_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_barcoding_enabled();
  void set_allocated_barcoding_enabled(::minknow_api::protocol_settings::ProtocolSetting* barcoding_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_barcoding_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_barcoding_enabled();
  public:
  void unsafe_arena_set_allocated_barcoding_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* barcoding_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_barcoding_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting basecall_model = 3;
  bool has_basecall_model() const;
  private:
  bool _internal_has_basecall_model() const;
  public:
  void clear_basecall_model();
  const ::minknow_api::protocol_settings::ProtocolSetting& basecall_model() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_basecall_model();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_basecall_model();
  void set_allocated_basecall_model(::minknow_api::protocol_settings::ProtocolSetting* basecall_model);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_basecall_model() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_basecall_model();
  public:
  void unsafe_arena_set_allocated_basecall_model(
      ::minknow_api::protocol_settings::ProtocolSetting* basecall_model);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_basecall_model();

  // .minknow_api.protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
  bool has_trim_barcodes_enabled() const;
  private:
  bool _internal_has_trim_barcodes_enabled() const;
  public:
  void clear_trim_barcodes_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& trim_barcodes_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_trim_barcodes_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_trim_barcodes_enabled();
  void set_allocated_trim_barcodes_enabled(::minknow_api::protocol_settings::ProtocolSetting* trim_barcodes_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_trim_barcodes_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_trim_barcodes_enabled();
  public:
  void unsafe_arena_set_allocated_trim_barcodes_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* trim_barcodes_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_trim_barcodes_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
  bool has_require_barcodes_both_ends() const;
  private:
  bool _internal_has_require_barcodes_both_ends() const;
  public:
  void clear_require_barcodes_both_ends();
  const ::minknow_api::protocol_settings::ProtocolSetting& require_barcodes_both_ends() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_require_barcodes_both_ends();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_require_barcodes_both_ends();
  void set_allocated_require_barcodes_both_ends(::minknow_api::protocol_settings::ProtocolSetting* require_barcodes_both_ends);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_require_barcodes_both_ends() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_require_barcodes_both_ends();
  public:
  void unsafe_arena_set_allocated_require_barcodes_both_ends(
      ::minknow_api::protocol_settings::ProtocolSetting* require_barcodes_both_ends);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_require_barcodes_both_ends();

  // .minknow_api.protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
  bool has_detect_mid_strand_barcodes() const;
  private:
  bool _internal_has_detect_mid_strand_barcodes() const;
  public:
  void clear_detect_mid_strand_barcodes();
  const ::minknow_api::protocol_settings::ProtocolSetting& detect_mid_strand_barcodes() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_detect_mid_strand_barcodes();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_detect_mid_strand_barcodes();
  void set_allocated_detect_mid_strand_barcodes(::minknow_api::protocol_settings::ProtocolSetting* detect_mid_strand_barcodes);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_detect_mid_strand_barcodes() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_detect_mid_strand_barcodes();
  public:
  void unsafe_arena_set_allocated_detect_mid_strand_barcodes(
      ::minknow_api::protocol_settings::ProtocolSetting* detect_mid_strand_barcodes);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_detect_mid_strand_barcodes();

  // .minknow_api.protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
  bool has_override_mid_barcoding_score() const;
  private:
  bool _internal_has_override_mid_barcoding_score() const;
  public:
  void clear_override_mid_barcoding_score();
  const ::minknow_api::protocol_settings::ProtocolSetting& override_mid_barcoding_score() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_override_mid_barcoding_score();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_override_mid_barcoding_score();
  void set_allocated_override_mid_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* override_mid_barcoding_score);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_override_mid_barcoding_score() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_override_mid_barcoding_score();
  public:
  void unsafe_arena_set_allocated_override_mid_barcoding_score(
      ::minknow_api::protocol_settings::ProtocolSetting* override_mid_barcoding_score);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_override_mid_barcoding_score();

  // .minknow_api.protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
  bool has_override_rear_barcoding_score() const;
  private:
  bool _internal_has_override_rear_barcoding_score() const;
  public:
  void clear_override_rear_barcoding_score();
  const ::minknow_api::protocol_settings::ProtocolSetting& override_rear_barcoding_score() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_override_rear_barcoding_score();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_override_rear_barcoding_score();
  void set_allocated_override_rear_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* override_rear_barcoding_score);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_override_rear_barcoding_score() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_override_rear_barcoding_score();
  public:
  void unsafe_arena_set_allocated_override_rear_barcoding_score(
      ::minknow_api::protocol_settings::ProtocolSetting* override_rear_barcoding_score);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_override_rear_barcoding_score();

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score = 9;
  bool has_min_barcoding_score() const;
  private:
  bool _internal_has_min_barcoding_score() const;
  public:
  void clear_min_barcoding_score();
  const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_min_barcoding_score();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_min_barcoding_score();
  void set_allocated_min_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_min_barcoding_score() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_min_barcoding_score();
  public:
  void unsafe_arena_set_allocated_min_barcoding_score(
      ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_min_barcoding_score();

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
  bool has_min_barcoding_score_rear() const;
  private:
  bool _internal_has_min_barcoding_score_rear() const;
  public:
  void clear_min_barcoding_score_rear();
  const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score_rear() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_min_barcoding_score_rear();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_min_barcoding_score_rear();
  void set_allocated_min_barcoding_score_rear(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_rear);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_min_barcoding_score_rear() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_min_barcoding_score_rear();
  public:
  void unsafe_arena_set_allocated_min_barcoding_score_rear(
      ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_rear);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_min_barcoding_score_rear();

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
  bool has_min_barcoding_score_mid() const;
  private:
  bool _internal_has_min_barcoding_score_mid() const;
  public:
  void clear_min_barcoding_score_mid();
  const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score_mid() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_min_barcoding_score_mid();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_min_barcoding_score_mid();
  void set_allocated_min_barcoding_score_mid(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_mid);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_min_barcoding_score_mid() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_min_barcoding_score_mid();
  public:
  void unsafe_arena_set_allocated_min_barcoding_score_mid(
      ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_mid);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_min_barcoding_score_mid();

  // .minknow_api.protocol_settings.ProtocolSetting alignment_enabled = 12;
  bool has_alignment_enabled() const;
  private:
  bool _internal_has_alignment_enabled() const;
  public:
  void clear_alignment_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& alignment_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_alignment_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_alignment_enabled();
  void set_allocated_alignment_enabled(::minknow_api::protocol_settings::ProtocolSetting* alignment_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_alignment_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_alignment_enabled();
  public:
  void unsafe_arena_set_allocated_alignment_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* alignment_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_alignment_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting alignment_ref_file = 13;
  bool has_alignment_ref_file() const;
  private:
  bool _internal_has_alignment_ref_file() const;
  public:
  void clear_alignment_ref_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& alignment_ref_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_alignment_ref_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_alignment_ref_file();
  void set_allocated_alignment_ref_file(::minknow_api::protocol_settings::ProtocolSetting* alignment_ref_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_alignment_ref_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_alignment_ref_file();
  public:
  void unsafe_arena_set_allocated_alignment_ref_file(
      ::minknow_api::protocol_settings::ProtocolSetting* alignment_ref_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_alignment_ref_file();

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
  bool has_alignment_bed_file_enabled() const;
  private:
  bool _internal_has_alignment_bed_file_enabled() const;
  public:
  void clear_alignment_bed_file_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& alignment_bed_file_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_alignment_bed_file_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_alignment_bed_file_enabled();
  void set_allocated_alignment_bed_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_alignment_bed_file_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_alignment_bed_file_enabled();
  public:
  void unsafe_arena_set_allocated_alignment_bed_file_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_alignment_bed_file_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file = 15;
  bool has_alignment_bed_file() const;
  private:
  bool _internal_has_alignment_bed_file() const;
  public:
  void clear_alignment_bed_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& alignment_bed_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_alignment_bed_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_alignment_bed_file();
  void set_allocated_alignment_bed_file(::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_alignment_bed_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_alignment_bed_file();
  public:
  void unsafe_arena_set_allocated_alignment_bed_file(
      ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_alignment_bed_file();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol_settings::ProtocolSetting* basecalling_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* barcoding_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* basecall_model_;
  ::minknow_api::protocol_settings::ProtocolSetting* trim_barcodes_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* require_barcodes_both_ends_;
  ::minknow_api::protocol_settings::ProtocolSetting* detect_mid_strand_barcodes_;
  ::minknow_api::protocol_settings::ProtocolSetting* override_mid_barcoding_score_;
  ::minknow_api::protocol_settings::ProtocolSetting* override_rear_barcoding_score_;
  ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_;
  ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_rear_;
  ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_mid_;
  ::minknow_api::protocol_settings::ProtocolSetting* alignment_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* alignment_ref_file_;
  ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForProtocolResponse_Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListSettingsForProtocolResponse.Output) */ {
 public:
  inline ListSettingsForProtocolResponse_Output() : ListSettingsForProtocolResponse_Output(nullptr) {}
  ~ListSettingsForProtocolResponse_Output() override;
  explicit constexpr ListSettingsForProtocolResponse_Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForProtocolResponse_Output(const ListSettingsForProtocolResponse_Output& from);
  ListSettingsForProtocolResponse_Output(ListSettingsForProtocolResponse_Output&& from) noexcept
    : ListSettingsForProtocolResponse_Output() {
    *this = ::std::move(from);
  }

  inline ListSettingsForProtocolResponse_Output& operator=(const ListSettingsForProtocolResponse_Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForProtocolResponse_Output& operator=(ListSettingsForProtocolResponse_Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForProtocolResponse_Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForProtocolResponse_Output* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForProtocolResponse_Output*>(
               &_ListSettingsForProtocolResponse_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ListSettingsForProtocolResponse_Output& a, ListSettingsForProtocolResponse_Output& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForProtocolResponse_Output* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForProtocolResponse_Output* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForProtocolResponse_Output* New() const final {
    return new ListSettingsForProtocolResponse_Output();
  }

  ListSettingsForProtocolResponse_Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForProtocolResponse_Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForProtocolResponse_Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForProtocolResponse_Output& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForProtocolResponse_Output* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListSettingsForProtocolResponse.Output";
  }
  protected:
  explicit ListSettingsForProtocolResponse_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputLocationFieldNumber = 1,
    kFastQEnabledFieldNumber = 2,
    kFastQReadsPerFileFieldNumber = 3,
    kFastQDataCompressionFieldNumber = 4,
    kFast5EnabledFieldNumber = 5,
    kFast5ReadsPerFileFieldNumber = 6,
    kFast5DataTraceTableFieldNumber = 7,
    kFast5DataMoveTableFieldNumber = 8,
    kFast5DataFastQFieldNumber = 9,
    kFast5DataRawFieldNumber = 10,
    kFast5DataCompressionFieldNumber = 11,
    kBamEnabledFieldNumber = 12,
    kReadFilteringEnabledFieldNumber = 13,
    kReadFilteringMinQscoreFieldNumber = 14,
    kReadFilteringMinReadLengthFieldNumber = 15,
    kReadFilteringMaxReadLengthFieldNumber = 16,
    kBulkFileEnabledFieldNumber = 17,
    kBulkFileRawFieldNumber = 18,
    kBulkFileEventsFieldNumber = 19,
    kBulkFileReadTableFieldNumber = 20,
    kBulkFileRawEnabledFieldNumber = 21,
    kBulkFileEventsEnabledFieldNumber = 22,
    kBulkFileReadTableEnabledFieldNumber = 23,
  };
  // .minknow_api.protocol_settings.ProtocolSetting output_location = 1;
  bool has_output_location() const;
  private:
  bool _internal_has_output_location() const;
  public:
  void clear_output_location();
  const ::minknow_api::protocol_settings::ProtocolSetting& output_location() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_output_location();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_output_location();
  void set_allocated_output_location(::minknow_api::protocol_settings::ProtocolSetting* output_location);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_output_location() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_output_location();
  public:
  void unsafe_arena_set_allocated_output_location(
      ::minknow_api::protocol_settings::ProtocolSetting* output_location);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_output_location();

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_enabled = 2;
  bool has_fast_q_enabled() const;
  private:
  bool _internal_has_fast_q_enabled() const;
  public:
  void clear_fast_q_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_q_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_q_enabled();
  void set_allocated_fast_q_enabled(::minknow_api::protocol_settings::ProtocolSetting* fast_q_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_q_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_q_enabled();
  public:
  void unsafe_arena_set_allocated_fast_q_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_q_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_q_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
  bool has_fast_q_reads_per_file() const;
  private:
  bool _internal_has_fast_q_reads_per_file() const;
  public:
  void clear_fast_q_reads_per_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_reads_per_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_q_reads_per_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_q_reads_per_file();
  void set_allocated_fast_q_reads_per_file(::minknow_api::protocol_settings::ProtocolSetting* fast_q_reads_per_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_q_reads_per_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_q_reads_per_file();
  public:
  void unsafe_arena_set_allocated_fast_q_reads_per_file(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_q_reads_per_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_q_reads_per_file();

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_data_compression = 4;
  bool has_fast_q_data_compression() const;
  private:
  bool _internal_has_fast_q_data_compression() const;
  public:
  void clear_fast_q_data_compression();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_data_compression() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_q_data_compression();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_q_data_compression();
  void set_allocated_fast_q_data_compression(::minknow_api::protocol_settings::ProtocolSetting* fast_q_data_compression);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_q_data_compression() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_q_data_compression();
  public:
  void unsafe_arena_set_allocated_fast_q_data_compression(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_q_data_compression);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_q_data_compression();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_enabled = 5;
  bool has_fast_5_enabled() const;
  private:
  bool _internal_has_fast_5_enabled() const;
  public:
  void clear_fast_5_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_enabled();
  void set_allocated_fast_5_enabled(::minknow_api::protocol_settings::ProtocolSetting* fast_5_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_enabled();
  public:
  void unsafe_arena_set_allocated_fast_5_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
  bool has_fast_5_reads_per_file() const;
  private:
  bool _internal_has_fast_5_reads_per_file() const;
  public:
  void clear_fast_5_reads_per_file();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_reads_per_file() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_reads_per_file();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_reads_per_file();
  void set_allocated_fast_5_reads_per_file(::minknow_api::protocol_settings::ProtocolSetting* fast_5_reads_per_file);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_reads_per_file() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_reads_per_file();
  public:
  void unsafe_arena_set_allocated_fast_5_reads_per_file(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_reads_per_file);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_reads_per_file();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
  bool has_fast_5_data_trace_table() const;
  private:
  bool _internal_has_fast_5_data_trace_table() const;
  public:
  void clear_fast_5_data_trace_table();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_trace_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_data_trace_table();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_data_trace_table();
  void set_allocated_fast_5_data_trace_table(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_trace_table);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_data_trace_table() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_data_trace_table();
  public:
  void unsafe_arena_set_allocated_fast_5_data_trace_table(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_trace_table);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_data_trace_table();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
  bool has_fast_5_data_move_table() const;
  private:
  bool _internal_has_fast_5_data_move_table() const;
  public:
  void clear_fast_5_data_move_table();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_move_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_data_move_table();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_data_move_table();
  void set_allocated_fast_5_data_move_table(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_move_table);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_data_move_table() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_data_move_table();
  public:
  void unsafe_arena_set_allocated_fast_5_data_move_table(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_move_table);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_data_move_table();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
  bool has_fast_5_data_fast_q() const;
  private:
  bool _internal_has_fast_5_data_fast_q() const;
  public:
  void clear_fast_5_data_fast_q();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_fast_q() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_data_fast_q();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_data_fast_q();
  void set_allocated_fast_5_data_fast_q(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_fast_q);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_data_fast_q() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_data_fast_q();
  public:
  void unsafe_arena_set_allocated_fast_5_data_fast_q(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_fast_q);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_data_fast_q();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_raw = 10;
  bool has_fast_5_data_raw() const;
  private:
  bool _internal_has_fast_5_data_raw() const;
  public:
  void clear_fast_5_data_raw();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_raw() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_data_raw();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_data_raw();
  void set_allocated_fast_5_data_raw(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_raw);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_data_raw() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_data_raw();
  public:
  void unsafe_arena_set_allocated_fast_5_data_raw(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_raw);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_data_raw();

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_compression = 11;
  bool has_fast_5_data_compression() const;
  private:
  bool _internal_has_fast_5_data_compression() const;
  public:
  void clear_fast_5_data_compression();
  const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_compression() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_fast_5_data_compression();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_fast_5_data_compression();
  void set_allocated_fast_5_data_compression(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_compression);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_fast_5_data_compression() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_fast_5_data_compression();
  public:
  void unsafe_arena_set_allocated_fast_5_data_compression(
      ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_compression);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_fast_5_data_compression();

  // .minknow_api.protocol_settings.ProtocolSetting bam_enabled = 12;
  bool has_bam_enabled() const;
  private:
  bool _internal_has_bam_enabled() const;
  public:
  void clear_bam_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& bam_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bam_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bam_enabled();
  void set_allocated_bam_enabled(::minknow_api::protocol_settings::ProtocolSetting* bam_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bam_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bam_enabled();
  public:
  void unsafe_arena_set_allocated_bam_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* bam_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bam_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_enabled = 13;
  bool has_read_filtering_enabled() const;
  private:
  bool _internal_has_read_filtering_enabled() const;
  public:
  void clear_read_filtering_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_filtering_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_filtering_enabled();
  void set_allocated_read_filtering_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_filtering_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_filtering_enabled();
  public:
  void unsafe_arena_set_allocated_read_filtering_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_filtering_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
  bool has_read_filtering_min_qscore() const;
  private:
  bool _internal_has_read_filtering_min_qscore() const;
  public:
  void clear_read_filtering_min_qscore();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_min_qscore() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_filtering_min_qscore();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_filtering_min_qscore();
  void set_allocated_read_filtering_min_qscore(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_qscore);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_filtering_min_qscore() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_filtering_min_qscore();
  public:
  void unsafe_arena_set_allocated_read_filtering_min_qscore(
      ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_qscore);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_filtering_min_qscore();

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
  bool has_read_filtering_min_read_length() const;
  private:
  bool _internal_has_read_filtering_min_read_length() const;
  public:
  void clear_read_filtering_min_read_length();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_min_read_length() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_filtering_min_read_length();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_filtering_min_read_length();
  void set_allocated_read_filtering_min_read_length(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_read_length);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_filtering_min_read_length() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_filtering_min_read_length();
  public:
  void unsafe_arena_set_allocated_read_filtering_min_read_length(
      ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_read_length);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_filtering_min_read_length();

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
  bool has_read_filtering_max_read_length() const;
  private:
  bool _internal_has_read_filtering_max_read_length() const;
  public:
  void clear_read_filtering_max_read_length();
  const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_max_read_length() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_read_filtering_max_read_length();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_read_filtering_max_read_length();
  void set_allocated_read_filtering_max_read_length(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_max_read_length);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_read_filtering_max_read_length() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_read_filtering_max_read_length();
  public:
  void unsafe_arena_set_allocated_read_filtering_max_read_length(
      ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_max_read_length);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_read_filtering_max_read_length();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_enabled = 17;
  bool has_bulk_file_enabled() const;
  private:
  bool _internal_has_bulk_file_enabled() const;
  public:
  void clear_bulk_file_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_enabled();
  void set_allocated_bulk_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_enabled();
  public:
  void unsafe_arena_set_allocated_bulk_file_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw = 18;
  bool has_bulk_file_raw() const;
  private:
  bool _internal_has_bulk_file_raw() const;
  public:
  void clear_bulk_file_raw();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_raw() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_raw();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_raw();
  void set_allocated_bulk_file_raw(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_raw() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_raw();
  public:
  void unsafe_arena_set_allocated_bulk_file_raw(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_raw();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events = 19;
  bool has_bulk_file_events() const;
  private:
  bool _internal_has_bulk_file_events() const;
  public:
  void clear_bulk_file_events();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_events() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_events();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_events();
  void set_allocated_bulk_file_events(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_events() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_events();
  public:
  void unsafe_arena_set_allocated_bulk_file_events(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_events();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table = 20;
  bool has_bulk_file_read_table() const;
  private:
  bool _internal_has_bulk_file_read_table() const;
  public:
  void clear_bulk_file_read_table();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_read_table() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_read_table();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_read_table();
  void set_allocated_bulk_file_read_table(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_read_table() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_read_table();
  public:
  void unsafe_arena_set_allocated_bulk_file_read_table(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_read_table();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
  bool has_bulk_file_raw_enabled() const;
  private:
  bool _internal_has_bulk_file_raw_enabled() const;
  public:
  void clear_bulk_file_raw_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_raw_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_raw_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_raw_enabled();
  void set_allocated_bulk_file_raw_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_raw_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_raw_enabled();
  public:
  void unsafe_arena_set_allocated_bulk_file_raw_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_raw_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
  bool has_bulk_file_events_enabled() const;
  private:
  bool _internal_has_bulk_file_events_enabled() const;
  public:
  void clear_bulk_file_events_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_events_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_events_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_events_enabled();
  void set_allocated_bulk_file_events_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_events_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_events_enabled();
  public:
  void unsafe_arena_set_allocated_bulk_file_events_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_events_enabled();

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
  bool has_bulk_file_read_table_enabled() const;
  private:
  bool _internal_has_bulk_file_read_table_enabled() const;
  public:
  void clear_bulk_file_read_table_enabled();
  const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_read_table_enabled() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol_settings::ProtocolSetting* release_bulk_file_read_table_enabled();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_bulk_file_read_table_enabled();
  void set_allocated_bulk_file_read_table_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_enabled);
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_bulk_file_read_table_enabled() const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_mutable_bulk_file_read_table_enabled();
  public:
  void unsafe_arena_set_allocated_bulk_file_read_table_enabled(
      ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_enabled);
  ::minknow_api::protocol_settings::ProtocolSetting* unsafe_arena_release_bulk_file_read_table_enabled();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol_settings::ProtocolSetting* output_location_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_q_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_q_reads_per_file_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_q_data_compression_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_reads_per_file_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_trace_table_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_move_table_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_fast_q_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_raw_;
  ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_compression_;
  ::minknow_api::protocol_settings::ProtocolSetting* bam_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_qscore_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_read_length_;
  ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_max_read_length_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_enabled_;
  ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ListSettingsForProtocolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ListSettingsForProtocolResponse) */ {
 public:
  inline ListSettingsForProtocolResponse() : ListSettingsForProtocolResponse(nullptr) {}
  ~ListSettingsForProtocolResponse() override;
  explicit constexpr ListSettingsForProtocolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSettingsForProtocolResponse(const ListSettingsForProtocolResponse& from);
  ListSettingsForProtocolResponse(ListSettingsForProtocolResponse&& from) noexcept
    : ListSettingsForProtocolResponse() {
    *this = ::std::move(from);
  }

  inline ListSettingsForProtocolResponse& operator=(const ListSettingsForProtocolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSettingsForProtocolResponse& operator=(ListSettingsForProtocolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSettingsForProtocolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSettingsForProtocolResponse* internal_default_instance() {
    return reinterpret_cast<const ListSettingsForProtocolResponse*>(
               &_ListSettingsForProtocolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ListSettingsForProtocolResponse& a, ListSettingsForProtocolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSettingsForProtocolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSettingsForProtocolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSettingsForProtocolResponse* New() const final {
    return new ListSettingsForProtocolResponse();
  }

  ListSettingsForProtocolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSettingsForProtocolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSettingsForProtocolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSettingsForProtocolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSettingsForProtocolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ListSettingsForProtocolResponse";
  }
  protected:
  explicit ListSettingsForProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListSettingsForProtocolResponse_RunOptions RunOptions;
  typedef ListSettingsForProtocolResponse_Basecalling Basecalling;
  typedef ListSettingsForProtocolResponse_Output Output;

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolSettingsFieldNumber = 5,
    kProtocolFieldNumber = 1,
    kRunOptionsFieldNumber = 2,
    kBasecallingFieldNumber = 3,
    kOutputFieldNumber = 4,
  };
  // repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 5;
  int protocol_settings_size() const;
  private:
  int _internal_protocol_settings_size() const;
  public:
  void clear_protocol_settings();
  ::minknow_api::protocol_settings::ProtocolSetting* mutable_protocol_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >*
      mutable_protocol_settings();
  private:
  const ::minknow_api::protocol_settings::ProtocolSetting& _internal_protocol_settings(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting* _internal_add_protocol_settings();
  public:
  const ::minknow_api::protocol_settings::ProtocolSetting& protocol_settings(int index) const;
  ::minknow_api::protocol_settings::ProtocolSetting* add_protocol_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >&
      protocol_settings() const;

  // .minknow_api.protocol.ProtocolIdentifierComponents protocol = 1;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const ::minknow_api::protocol::ProtocolIdentifierComponents& protocol() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolIdentifierComponents* release_protocol();
  ::minknow_api::protocol::ProtocolIdentifierComponents* mutable_protocol();
  void set_allocated_protocol(::minknow_api::protocol::ProtocolIdentifierComponents* protocol);
  private:
  const ::minknow_api::protocol::ProtocolIdentifierComponents& _internal_protocol() const;
  ::minknow_api::protocol::ProtocolIdentifierComponents* _internal_mutable_protocol();
  public:
  void unsafe_arena_set_allocated_protocol(
      ::minknow_api::protocol::ProtocolIdentifierComponents* protocol);
  ::minknow_api::protocol::ProtocolIdentifierComponents* unsafe_arena_release_protocol();

  // .minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions run_options = 2;
  bool has_run_options() const;
  private:
  bool _internal_has_run_options() const;
  public:
  void clear_run_options();
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions& run_options() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* release_run_options();
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* mutable_run_options();
  void set_allocated_run_options(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* run_options);
  private:
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions& _internal_run_options() const;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* _internal_mutable_run_options();
  public:
  void unsafe_arena_set_allocated_run_options(
      ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* run_options);
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* unsafe_arena_release_run_options();

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling basecalling = 3;
  bool has_basecalling() const;
  private:
  bool _internal_has_basecalling() const;
  public:
  void clear_basecalling();
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling& basecalling() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* release_basecalling();
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* mutable_basecalling();
  void set_allocated_basecalling(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* basecalling);
  private:
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling& _internal_basecalling() const;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* _internal_mutable_basecalling();
  public:
  void unsafe_arena_set_allocated_basecalling(
      ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* basecalling);
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* unsafe_arena_release_basecalling();

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Output output = 4;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output& output() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* release_output();
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* mutable_output();
  void set_allocated_output(::minknow_api::protocol::ListSettingsForProtocolResponse_Output* output);
  private:
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output& _internal_output() const;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* output);
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ListSettingsForProtocolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting > protocol_settings_;
  ::minknow_api::protocol::ProtocolIdentifierComponents* protocol_;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* run_options_;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* basecalling_;
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AssociatePostProcessingAnalysisRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.AssociatePostProcessingAnalysisRequest) */ {
 public:
  inline AssociatePostProcessingAnalysisRequest() : AssociatePostProcessingAnalysisRequest(nullptr) {}
  ~AssociatePostProcessingAnalysisRequest() override;
  explicit constexpr AssociatePostProcessingAnalysisRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssociatePostProcessingAnalysisRequest(const AssociatePostProcessingAnalysisRequest& from);
  AssociatePostProcessingAnalysisRequest(AssociatePostProcessingAnalysisRequest&& from) noexcept
    : AssociatePostProcessingAnalysisRequest() {
    *this = ::std::move(from);
  }

  inline AssociatePostProcessingAnalysisRequest& operator=(const AssociatePostProcessingAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatePostProcessingAnalysisRequest& operator=(AssociatePostProcessingAnalysisRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssociatePostProcessingAnalysisRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssociatePostProcessingAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const AssociatePostProcessingAnalysisRequest*>(
               &_AssociatePostProcessingAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(AssociatePostProcessingAnalysisRequest& a, AssociatePostProcessingAnalysisRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatePostProcessingAnalysisRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatePostProcessingAnalysisRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociatePostProcessingAnalysisRequest* New() const final {
    return new AssociatePostProcessingAnalysisRequest();
  }

  AssociatePostProcessingAnalysisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociatePostProcessingAnalysisRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssociatePostProcessingAnalysisRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssociatePostProcessingAnalysisRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatePostProcessingAnalysisRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.AssociatePostProcessingAnalysisRequest";
  }
  protected:
  explicit AssociatePostProcessingAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
    kStartRequestFieldNumber = 2,
  };
  // string run_id = 1;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // .minknow_api.basecaller.StartRequest start_request = 2;
  bool has_start_request() const;
  private:
  bool _internal_has_start_request() const;
  public:
  void clear_start_request();
  const ::minknow_api::basecaller::StartRequest& start_request() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::basecaller::StartRequest* release_start_request();
  ::minknow_api::basecaller::StartRequest* mutable_start_request();
  void set_allocated_start_request(::minknow_api::basecaller::StartRequest* start_request);
  private:
  const ::minknow_api::basecaller::StartRequest& _internal_start_request() const;
  ::minknow_api::basecaller::StartRequest* _internal_mutable_start_request();
  public:
  void unsafe_arena_set_allocated_start_request(
      ::minknow_api::basecaller::StartRequest* start_request);
  ::minknow_api::basecaller::StartRequest* unsafe_arena_release_start_request();

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  ::minknow_api::basecaller::StartRequest* start_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class AssociatePostProcessingAnalysisResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.AssociatePostProcessingAnalysisResponse) */ {
 public:
  inline AssociatePostProcessingAnalysisResponse() : AssociatePostProcessingAnalysisResponse(nullptr) {}
  ~AssociatePostProcessingAnalysisResponse() override;
  explicit constexpr AssociatePostProcessingAnalysisResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssociatePostProcessingAnalysisResponse(const AssociatePostProcessingAnalysisResponse& from);
  AssociatePostProcessingAnalysisResponse(AssociatePostProcessingAnalysisResponse&& from) noexcept
    : AssociatePostProcessingAnalysisResponse() {
    *this = ::std::move(from);
  }

  inline AssociatePostProcessingAnalysisResponse& operator=(const AssociatePostProcessingAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatePostProcessingAnalysisResponse& operator=(AssociatePostProcessingAnalysisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssociatePostProcessingAnalysisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssociatePostProcessingAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const AssociatePostProcessingAnalysisResponse*>(
               &_AssociatePostProcessingAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(AssociatePostProcessingAnalysisResponse& a, AssociatePostProcessingAnalysisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatePostProcessingAnalysisResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatePostProcessingAnalysisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociatePostProcessingAnalysisResponse* New() const final {
    return new AssociatePostProcessingAnalysisResponse();
  }

  AssociatePostProcessingAnalysisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociatePostProcessingAnalysisResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssociatePostProcessingAnalysisResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssociatePostProcessingAnalysisResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatePostProcessingAnalysisResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.AssociatePostProcessingAnalysisResponse";
  }
  protected:
  explicit AssociatePostProcessingAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ClearProtocolHistoryDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ClearProtocolHistoryDataRequest) */ {
 public:
  inline ClearProtocolHistoryDataRequest() : ClearProtocolHistoryDataRequest(nullptr) {}
  ~ClearProtocolHistoryDataRequest() override;
  explicit constexpr ClearProtocolHistoryDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearProtocolHistoryDataRequest(const ClearProtocolHistoryDataRequest& from);
  ClearProtocolHistoryDataRequest(ClearProtocolHistoryDataRequest&& from) noexcept
    : ClearProtocolHistoryDataRequest() {
    *this = ::std::move(from);
  }

  inline ClearProtocolHistoryDataRequest& operator=(const ClearProtocolHistoryDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearProtocolHistoryDataRequest& operator=(ClearProtocolHistoryDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearProtocolHistoryDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearProtocolHistoryDataRequest* internal_default_instance() {
    return reinterpret_cast<const ClearProtocolHistoryDataRequest*>(
               &_ClearProtocolHistoryDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ClearProtocolHistoryDataRequest& a, ClearProtocolHistoryDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearProtocolHistoryDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearProtocolHistoryDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearProtocolHistoryDataRequest* New() const final {
    return new ClearProtocolHistoryDataRequest();
  }

  ClearProtocolHistoryDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearProtocolHistoryDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearProtocolHistoryDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearProtocolHistoryDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearProtocolHistoryDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ClearProtocolHistoryDataRequest";
  }
  protected:
  explicit ClearProtocolHistoryDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolIdsFieldNumber = 1,
  };
  // repeated string protocol_ids = 1;
  int protocol_ids_size() const;
  private:
  int _internal_protocol_ids_size() const;
  public:
  void clear_protocol_ids();
  const std::string& protocol_ids(int index) const;
  std::string* mutable_protocol_ids(int index);
  void set_protocol_ids(int index, const std::string& value);
  void set_protocol_ids(int index, std::string&& value);
  void set_protocol_ids(int index, const char* value);
  void set_protocol_ids(int index, const char* value, size_t size);
  std::string* add_protocol_ids();
  void add_protocol_ids(const std::string& value);
  void add_protocol_ids(std::string&& value);
  void add_protocol_ids(const char* value);
  void add_protocol_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& protocol_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_protocol_ids();
  private:
  const std::string& _internal_protocol_ids(int index) const;
  std::string* _internal_add_protocol_ids();
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ClearProtocolHistoryDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> protocol_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ClearProtocolHistoryDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ClearProtocolHistoryDataResponse) */ {
 public:
  inline ClearProtocolHistoryDataResponse() : ClearProtocolHistoryDataResponse(nullptr) {}
  explicit constexpr ClearProtocolHistoryDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearProtocolHistoryDataResponse(const ClearProtocolHistoryDataResponse& from);
  ClearProtocolHistoryDataResponse(ClearProtocolHistoryDataResponse&& from) noexcept
    : ClearProtocolHistoryDataResponse() {
    *this = ::std::move(from);
  }

  inline ClearProtocolHistoryDataResponse& operator=(const ClearProtocolHistoryDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearProtocolHistoryDataResponse& operator=(ClearProtocolHistoryDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearProtocolHistoryDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearProtocolHistoryDataResponse* internal_default_instance() {
    return reinterpret_cast<const ClearProtocolHistoryDataResponse*>(
               &_ClearProtocolHistoryDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ClearProtocolHistoryDataResponse& a, ClearProtocolHistoryDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearProtocolHistoryDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearProtocolHistoryDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearProtocolHistoryDataResponse* New() const final {
    return new ClearProtocolHistoryDataResponse();
  }

  ClearProtocolHistoryDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearProtocolHistoryDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearProtocolHistoryDataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearProtocolHistoryDataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ClearProtocolHistoryDataResponse";
  }
  protected:
  explicit ClearProtocolHistoryDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ClearProtocolHistoryDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolPhaseManagementRequest_Capabilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities) */ {
 public:
  inline ProtocolPhaseManagementRequest_Capabilities() : ProtocolPhaseManagementRequest_Capabilities(nullptr) {}
  ~ProtocolPhaseManagementRequest_Capabilities() override;
  explicit constexpr ProtocolPhaseManagementRequest_Capabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolPhaseManagementRequest_Capabilities(const ProtocolPhaseManagementRequest_Capabilities& from);
  ProtocolPhaseManagementRequest_Capabilities(ProtocolPhaseManagementRequest_Capabilities&& from) noexcept
    : ProtocolPhaseManagementRequest_Capabilities() {
    *this = ::std::move(from);
  }

  inline ProtocolPhaseManagementRequest_Capabilities& operator=(const ProtocolPhaseManagementRequest_Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolPhaseManagementRequest_Capabilities& operator=(ProtocolPhaseManagementRequest_Capabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolPhaseManagementRequest_Capabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolPhaseManagementRequest_Capabilities* internal_default_instance() {
    return reinterpret_cast<const ProtocolPhaseManagementRequest_Capabilities*>(
               &_ProtocolPhaseManagementRequest_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ProtocolPhaseManagementRequest_Capabilities& a, ProtocolPhaseManagementRequest_Capabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolPhaseManagementRequest_Capabilities* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolPhaseManagementRequest_Capabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolPhaseManagementRequest_Capabilities* New() const final {
    return new ProtocolPhaseManagementRequest_Capabilities();
  }

  ProtocolPhaseManagementRequest_Capabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolPhaseManagementRequest_Capabilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolPhaseManagementRequest_Capabilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolPhaseManagementRequest_Capabilities& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolPhaseManagementRequest_Capabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities";
  }
  protected:
  explicit ProtocolPhaseManagementRequest_Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanPauseFieldNumber = 1,
    kCanTriggerMuxScanFieldNumber = 2,
  };
  // bool can_pause = 1;
  void clear_can_pause();
  bool can_pause() const;
  void set_can_pause(bool value);
  private:
  bool _internal_can_pause() const;
  void _internal_set_can_pause(bool value);
  public:

  // bool can_trigger_mux_scan = 2;
  void clear_can_trigger_mux_scan();
  bool can_trigger_mux_scan() const;
  void set_can_trigger_mux_scan(bool value);
  private:
  bool _internal_can_trigger_mux_scan() const;
  void _internal_set_can_trigger_mux_scan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool can_pause_;
  bool can_trigger_mux_scan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolPhaseManagementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolPhaseManagementRequest) */ {
 public:
  inline ProtocolPhaseManagementRequest() : ProtocolPhaseManagementRequest(nullptr) {}
  ~ProtocolPhaseManagementRequest() override;
  explicit constexpr ProtocolPhaseManagementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolPhaseManagementRequest(const ProtocolPhaseManagementRequest& from);
  ProtocolPhaseManagementRequest(ProtocolPhaseManagementRequest&& from) noexcept
    : ProtocolPhaseManagementRequest() {
    *this = ::std::move(from);
  }

  inline ProtocolPhaseManagementRequest& operator=(const ProtocolPhaseManagementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolPhaseManagementRequest& operator=(ProtocolPhaseManagementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolPhaseManagementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolPhaseManagementRequest* internal_default_instance() {
    return reinterpret_cast<const ProtocolPhaseManagementRequest*>(
               &_ProtocolPhaseManagementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ProtocolPhaseManagementRequest& a, ProtocolPhaseManagementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolPhaseManagementRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolPhaseManagementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolPhaseManagementRequest* New() const final {
    return new ProtocolPhaseManagementRequest();
  }

  ProtocolPhaseManagementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolPhaseManagementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolPhaseManagementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolPhaseManagementRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolPhaseManagementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolPhaseManagementRequest";
  }
  protected:
  explicit ProtocolPhaseManagementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProtocolPhaseManagementRequest_Capabilities Capabilities;

  // accessors -------------------------------------------------------

  enum : int {
    kSetCapabilitiesFieldNumber = 1,
    kPhaseFieldNumber = 2,
  };
  // .minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities set_capabilities = 1;
  bool has_set_capabilities() const;
  private:
  bool _internal_has_set_capabilities() const;
  public:
  void clear_set_capabilities();
  const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities& set_capabilities() const;
  PROTOBUF_MUST_USE_RESULT ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* release_set_capabilities();
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* mutable_set_capabilities();
  void set_allocated_set_capabilities(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* set_capabilities);
  private:
  const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities& _internal_set_capabilities() const;
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* _internal_mutable_set_capabilities();
  public:
  void unsafe_arena_set_allocated_set_capabilities(
      ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* set_capabilities);
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* unsafe_arena_release_set_capabilities();

  // .minknow_api.protocol.ProtocolPhase phase = 2;
  void clear_phase();
  ::minknow_api::protocol::ProtocolPhase phase() const;
  void set_phase(::minknow_api::protocol::ProtocolPhase value);
  private:
  ::minknow_api::protocol::ProtocolPhase _internal_phase() const;
  void _internal_set_phase(::minknow_api::protocol::ProtocolPhase value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* set_capabilities_;
  int phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ProtocolPhaseManagementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minknow_api.protocol.ProtocolPhaseManagementResponse) */ {
 public:
  inline ProtocolPhaseManagementResponse() : ProtocolPhaseManagementResponse(nullptr) {}
  ~ProtocolPhaseManagementResponse() override;
  explicit constexpr ProtocolPhaseManagementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolPhaseManagementResponse(const ProtocolPhaseManagementResponse& from);
  ProtocolPhaseManagementResponse(ProtocolPhaseManagementResponse&& from) noexcept
    : ProtocolPhaseManagementResponse() {
    *this = ::std::move(from);
  }

  inline ProtocolPhaseManagementResponse& operator=(const ProtocolPhaseManagementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolPhaseManagementResponse& operator=(ProtocolPhaseManagementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolPhaseManagementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolPhaseManagementResponse* internal_default_instance() {
    return reinterpret_cast<const ProtocolPhaseManagementResponse*>(
               &_ProtocolPhaseManagementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ProtocolPhaseManagementResponse& a, ProtocolPhaseManagementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolPhaseManagementResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolPhaseManagementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolPhaseManagementResponse* New() const final {
    return new ProtocolPhaseManagementResponse();
  }

  ProtocolPhaseManagementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolPhaseManagementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolPhaseManagementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolPhaseManagementResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolPhaseManagementResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minknow_api.protocol.ProtocolPhaseManagementResponse";
  }
  protected:
  explicit ProtocolPhaseManagementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .minknow_api.protocol.Action action = 1;
  void clear_action();
  ::minknow_api::protocol::Action action() const;
  void set_action(::minknow_api::protocol::Action value);
  private:
  ::minknow_api::protocol::Action _internal_action() const;
  void _internal_set_action(::minknow_api::protocol::Action value);
  public:

  // @@protoc_insertion_point(class_scope:minknow_api.protocol.ProtocolPhaseManagementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_minknow_5fapi_2fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BarcodeUserData

// string barcode_name = 1;
inline void BarcodeUserData::clear_barcode_name() {
  barcode_name_.ClearToEmpty();
}
inline const std::string& BarcodeUserData::barcode_name() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BarcodeUserData.barcode_name)
  return _internal_barcode_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BarcodeUserData::set_barcode_name(ArgT0&& arg0, ArgT... args) {
 
 barcode_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BarcodeUserData.barcode_name)
}
inline std::string* BarcodeUserData::mutable_barcode_name() {
  std::string* _s = _internal_mutable_barcode_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.BarcodeUserData.barcode_name)
  return _s;
}
inline const std::string& BarcodeUserData::_internal_barcode_name() const {
  return barcode_name_.Get();
}
inline void BarcodeUserData::_internal_set_barcode_name(const std::string& value) {
  
  barcode_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::_internal_mutable_barcode_name() {
  
  return barcode_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::release_barcode_name() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.BarcodeUserData.barcode_name)
  return barcode_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BarcodeUserData::set_allocated_barcode_name(std::string* barcode_name) {
  if (barcode_name != nullptr) {
    
  } else {
    
  }
  barcode_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), barcode_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.BarcodeUserData.barcode_name)
}

// string lamp_barcode_id = 2;
inline void BarcodeUserData::clear_lamp_barcode_id() {
  lamp_barcode_id_.ClearToEmpty();
}
inline const std::string& BarcodeUserData::lamp_barcode_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BarcodeUserData.lamp_barcode_id)
  return _internal_lamp_barcode_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BarcodeUserData::set_lamp_barcode_id(ArgT0&& arg0, ArgT... args) {
 
 lamp_barcode_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BarcodeUserData.lamp_barcode_id)
}
inline std::string* BarcodeUserData::mutable_lamp_barcode_id() {
  std::string* _s = _internal_mutable_lamp_barcode_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.BarcodeUserData.lamp_barcode_id)
  return _s;
}
inline const std::string& BarcodeUserData::_internal_lamp_barcode_id() const {
  return lamp_barcode_id_.Get();
}
inline void BarcodeUserData::_internal_set_lamp_barcode_id(const std::string& value) {
  
  lamp_barcode_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::_internal_mutable_lamp_barcode_id() {
  
  return lamp_barcode_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::release_lamp_barcode_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.BarcodeUserData.lamp_barcode_id)
  return lamp_barcode_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BarcodeUserData::set_allocated_lamp_barcode_id(std::string* lamp_barcode_id) {
  if (lamp_barcode_id != nullptr) {
    
  } else {
    
  }
  lamp_barcode_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lamp_barcode_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.BarcodeUserData.lamp_barcode_id)
}

// string alias = 3;
inline void BarcodeUserData::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& BarcodeUserData::alias() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BarcodeUserData.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BarcodeUserData::set_alias(ArgT0&& arg0, ArgT... args) {
 
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BarcodeUserData.alias)
}
inline std::string* BarcodeUserData::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.BarcodeUserData.alias)
  return _s;
}
inline const std::string& BarcodeUserData::_internal_alias() const {
  return alias_.Get();
}
inline void BarcodeUserData::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BarcodeUserData::release_alias() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.BarcodeUserData.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BarcodeUserData::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.BarcodeUserData.alias)
}

// .minknow_api.protocol.BarcodeUserData.SampleType type = 4;
inline void BarcodeUserData::clear_type() {
  type_ = 0;
}
inline ::minknow_api::protocol::BarcodeUserData_SampleType BarcodeUserData::_internal_type() const {
  return static_cast< ::minknow_api::protocol::BarcodeUserData_SampleType >(type_);
}
inline ::minknow_api::protocol::BarcodeUserData_SampleType BarcodeUserData::type() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BarcodeUserData.type)
  return _internal_type();
}
inline void BarcodeUserData::_internal_set_type(::minknow_api::protocol::BarcodeUserData_SampleType value) {
  
  type_ = value;
}
inline void BarcodeUserData::set_type(::minknow_api::protocol::BarcodeUserData_SampleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BarcodeUserData.type)
}

// -------------------------------------------------------------------

// ProtocolRunUserInfo

// .google.protobuf.StringValue protocol_group_id = 1;
inline bool ProtocolRunUserInfo::_internal_has_protocol_group_id() const {
  return this != internal_default_instance() && protocol_group_id_ != nullptr;
}
inline bool ProtocolRunUserInfo::has_protocol_group_id() const {
  return _internal_has_protocol_group_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ProtocolRunUserInfo::_internal_protocol_group_id() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = protocol_group_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ProtocolRunUserInfo::protocol_group_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id)
  return _internal_protocol_group_id();
}
inline void ProtocolRunUserInfo::unsafe_arena_set_allocated_protocol_group_id(
    ::PROTOBUF_NAMESPACE_ID::StringValue* protocol_group_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_group_id_);
  }
  protocol_group_id_ = protocol_group_id;
  if (protocol_group_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::release_protocol_group_id() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = protocol_group_id_;
  protocol_group_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::unsafe_arena_release_protocol_group_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = protocol_group_id_;
  protocol_group_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::_internal_mutable_protocol_group_id() {
  
  if (protocol_group_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    protocol_group_id_ = p;
  }
  return protocol_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::mutable_protocol_group_id() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_protocol_group_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id)
  return _msg;
}
inline void ProtocolRunUserInfo::set_allocated_protocol_group_id(::PROTOBUF_NAMESPACE_ID::StringValue* protocol_group_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_group_id_);
  }
  if (protocol_group_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_group_id));
    if (message_arena != submessage_arena) {
      protocol_group_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_group_id, submessage_arena);
    }
    
  } else {
    
  }
  protocol_group_id_ = protocol_group_id;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunUserInfo.protocol_group_id)
}

// .google.protobuf.StringValue sample_id = 2;
inline bool ProtocolRunUserInfo::_internal_has_sample_id() const {
  return this != internal_default_instance() && sample_id_ != nullptr;
}
inline bool ProtocolRunUserInfo::has_sample_id() const {
  return _internal_has_sample_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ProtocolRunUserInfo::_internal_sample_id() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = sample_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& ProtocolRunUserInfo::sample_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunUserInfo.sample_id)
  return _internal_sample_id();
}
inline void ProtocolRunUserInfo::unsafe_arena_set_allocated_sample_id(
    ::PROTOBUF_NAMESPACE_ID::StringValue* sample_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_id_);
  }
  sample_id_ = sample_id;
  if (sample_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunUserInfo.sample_id)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::release_sample_id() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = sample_id_;
  sample_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::unsafe_arena_release_sample_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunUserInfo.sample_id)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = sample_id_;
  sample_id_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::_internal_mutable_sample_id() {
  
  if (sample_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    sample_id_ = p;
  }
  return sample_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* ProtocolRunUserInfo::mutable_sample_id() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_sample_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunUserInfo.sample_id)
  return _msg;
}
inline void ProtocolRunUserInfo::set_allocated_sample_id(::PROTOBUF_NAMESPACE_ID::StringValue* sample_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_id_);
  }
  if (sample_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_id));
    if (message_arena != submessage_arena) {
      sample_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_id, submessage_arena);
    }
    
  } else {
    
  }
  sample_id_ = sample_id;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunUserInfo.sample_id)
}

// repeated .minknow_api.protocol.BarcodeUserData barcode_user_info = 3;
inline int ProtocolRunUserInfo::_internal_barcode_user_info_size() const {
  return barcode_user_info_.size();
}
inline int ProtocolRunUserInfo::barcode_user_info_size() const {
  return _internal_barcode_user_info_size();
}
inline void ProtocolRunUserInfo::clear_barcode_user_info() {
  barcode_user_info_.Clear();
}
inline ::minknow_api::protocol::BarcodeUserData* ProtocolRunUserInfo::mutable_barcode_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info)
  return barcode_user_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::BarcodeUserData >*
ProtocolRunUserInfo::mutable_barcode_user_info() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info)
  return &barcode_user_info_;
}
inline const ::minknow_api::protocol::BarcodeUserData& ProtocolRunUserInfo::_internal_barcode_user_info(int index) const {
  return barcode_user_info_.Get(index);
}
inline const ::minknow_api::protocol::BarcodeUserData& ProtocolRunUserInfo::barcode_user_info(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info)
  return _internal_barcode_user_info(index);
}
inline ::minknow_api::protocol::BarcodeUserData* ProtocolRunUserInfo::_internal_add_barcode_user_info() {
  return barcode_user_info_.Add();
}
inline ::minknow_api::protocol::BarcodeUserData* ProtocolRunUserInfo::add_barcode_user_info() {
  ::minknow_api::protocol::BarcodeUserData* _add = _internal_add_barcode_user_info();
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::BarcodeUserData >&
ProtocolRunUserInfo::barcode_user_info() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ProtocolRunUserInfo.barcode_user_info)
  return barcode_user_info_;
}

// -------------------------------------------------------------------

// StartProtocolRequest

// string identifier = 1 [(.minknow_api.rpc_required) = true];
inline void StartProtocolRequest::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& StartProtocolRequest::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.StartProtocolRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartProtocolRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.StartProtocolRequest.identifier)
}
inline std::string* StartProtocolRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.StartProtocolRequest.identifier)
  return _s;
}
inline const std::string& StartProtocolRequest::_internal_identifier() const {
  return identifier_.Get();
}
inline void StartProtocolRequest::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartProtocolRequest::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartProtocolRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.StartProtocolRequest.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartProtocolRequest::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.StartProtocolRequest.identifier)
}

// repeated string args = 2;
inline int StartProtocolRequest::_internal_args_size() const {
  return args_.size();
}
inline int StartProtocolRequest::args_size() const {
  return _internal_args_size();
}
inline void StartProtocolRequest::clear_args() {
  args_.Clear();
}
inline std::string* StartProtocolRequest::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.StartProtocolRequest.args)
  return _s;
}
inline const std::string& StartProtocolRequest::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& StartProtocolRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.StartProtocolRequest.args)
  return _internal_args(index);
}
inline std::string* StartProtocolRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.StartProtocolRequest.args)
  return args_.Mutable(index);
}
inline void StartProtocolRequest::set_args(int index, const std::string& value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::set_args(int index, std::string&& value) {
  args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.StartProtocolRequest.args)
}
inline std::string* StartProtocolRequest::_internal_add_args() {
  return args_.Add();
}
inline void StartProtocolRequest::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.StartProtocolRequest.args)
}
inline void StartProtocolRequest::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.StartProtocolRequest.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StartProtocolRequest::args() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.StartProtocolRequest.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StartProtocolRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.StartProtocolRequest.args)
  return &args_;
}

// .minknow_api.protocol.ProtocolRunUserInfo user_info = 3;
inline bool StartProtocolRequest::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool StartProtocolRequest::has_user_info() const {
  return _internal_has_user_info();
}
inline void StartProtocolRequest::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolRunUserInfo& StartProtocolRequest::_internal_user_info() const {
  const ::minknow_api::protocol::ProtocolRunUserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolRunUserInfo&>(
      ::minknow_api::protocol::_ProtocolRunUserInfo_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolRunUserInfo& StartProtocolRequest::user_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.StartProtocolRequest.user_info)
  return _internal_user_info();
}
inline void StartProtocolRequest::unsafe_arena_set_allocated_user_info(
    ::minknow_api::protocol::ProtocolRunUserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.StartProtocolRequest.user_info)
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* StartProtocolRequest::release_user_info() {
  
  ::minknow_api::protocol::ProtocolRunUserInfo* temp = user_info_;
  user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* StartProtocolRequest::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.StartProtocolRequest.user_info)
  
  ::minknow_api::protocol::ProtocolRunUserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* StartProtocolRequest::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolRunUserInfo>(GetArenaForAllocation());
    user_info_ = p;
  }
  return user_info_;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* StartProtocolRequest::mutable_user_info() {
  ::minknow_api::protocol::ProtocolRunUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.StartProtocolRequest.user_info)
  return _msg;
}
inline void StartProtocolRequest::set_allocated_user_info(::minknow_api::protocol::ProtocolRunUserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolRunUserInfo>::GetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.StartProtocolRequest.user_info)
}

// -------------------------------------------------------------------

// StartProtocolResponse

// string run_id = 1;
inline void StartProtocolResponse::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& StartProtocolResponse::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.StartProtocolResponse.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartProtocolResponse::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.StartProtocolResponse.run_id)
}
inline std::string* StartProtocolResponse::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.StartProtocolResponse.run_id)
  return _s;
}
inline const std::string& StartProtocolResponse::_internal_run_id() const {
  return run_id_.Get();
}
inline void StartProtocolResponse::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartProtocolResponse::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartProtocolResponse::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.StartProtocolResponse.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartProtocolResponse::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.StartProtocolResponse.run_id)
}

// -------------------------------------------------------------------

// StopProtocolRequest

// .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
inline void StopProtocolRequest::clear_data_action_on_stop() {
  data_action_on_stop_ = 0;
}
inline ::minknow_api::acquisition::StopRequest_DataAction StopProtocolRequest::_internal_data_action_on_stop() const {
  return static_cast< ::minknow_api::acquisition::StopRequest_DataAction >(data_action_on_stop_);
}
inline ::minknow_api::acquisition::StopRequest_DataAction StopProtocolRequest::data_action_on_stop() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.StopProtocolRequest.data_action_on_stop)
  return _internal_data_action_on_stop();
}
inline void StopProtocolRequest::_internal_set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value) {
  
  data_action_on_stop_ = value;
}
inline void StopProtocolRequest::set_data_action_on_stop(::minknow_api::acquisition::StopRequest_DataAction value) {
  _internal_set_data_action_on_stop(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.StopProtocolRequest.data_action_on_stop)
}

// -------------------------------------------------------------------

// StopProtocolResponse

// -------------------------------------------------------------------

// PauseProtocolRequest

// -------------------------------------------------------------------

// PauseProtocolResponse

// -------------------------------------------------------------------

// ResumeProtocolRequest

// -------------------------------------------------------------------

// ResumeProtocolResponse

// -------------------------------------------------------------------

// TriggerMuxScanRequest

// -------------------------------------------------------------------

// TriggerMuxScanResponse

// -------------------------------------------------------------------

// ListProtocolsRequest

// bool force_reload = 1;
inline void ListProtocolsRequest::clear_force_reload() {
  force_reload_ = false;
}
inline bool ListProtocolsRequest::_internal_force_reload() const {
  return force_reload_;
}
inline bool ListProtocolsRequest::force_reload() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListProtocolsRequest.force_reload)
  return _internal_force_reload();
}
inline void ListProtocolsRequest::_internal_set_force_reload(bool value) {
  
  force_reload_ = value;
}
inline void ListProtocolsRequest::set_force_reload(bool value) {
  _internal_set_force_reload(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListProtocolsRequest.force_reload)
}

// -------------------------------------------------------------------

// ProtocolInfo_TagValue

// string string_value = 1;
inline bool ProtocolInfo_TagValue::_internal_has_string_value() const {
  return tag_value_case() == kStringValue;
}
inline bool ProtocolInfo_TagValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void ProtocolInfo_TagValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ProtocolInfo_TagValue::clear_string_value() {
  if (_internal_has_string_value()) {
    tag_value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_tag_value();
  }
}
inline const std::string& ProtocolInfo_TagValue::string_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void ProtocolInfo_TagValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_tag_value();
    set_has_string_value();
    tag_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.string_value)
}
inline std::string* ProtocolInfo_TagValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.TagValue.string_value)
  return _s;
}
inline const std::string& ProtocolInfo_TagValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return tag_value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProtocolInfo_TagValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_tag_value();
    set_has_string_value();
    tag_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_tag_value();
    set_has_string_value();
    tag_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return tag_value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::release_string_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.TagValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_tag_value();
    return tag_value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProtocolInfo_TagValue::set_allocated_string_value(std::string* string_value) {
  if (has_tag_value()) {
    clear_tag_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    tag_value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.TagValue.string_value)
}

// bool bool_value = 2;
inline bool ProtocolInfo_TagValue::_internal_has_bool_value() const {
  return tag_value_case() == kBoolValue;
}
inline bool ProtocolInfo_TagValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void ProtocolInfo_TagValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ProtocolInfo_TagValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    tag_value_.bool_value_ = false;
    clear_has_tag_value();
  }
}
inline bool ProtocolInfo_TagValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return tag_value_.bool_value_;
  }
  return false;
}
inline void ProtocolInfo_TagValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_tag_value();
    set_has_bool_value();
  }
  tag_value_.bool_value_ = value;
}
inline bool ProtocolInfo_TagValue::bool_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.bool_value)
  return _internal_bool_value();
}
inline void ProtocolInfo_TagValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.bool_value)
}

// int64 int_value = 3;
inline bool ProtocolInfo_TagValue::_internal_has_int_value() const {
  return tag_value_case() == kIntValue;
}
inline bool ProtocolInfo_TagValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void ProtocolInfo_TagValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ProtocolInfo_TagValue::clear_int_value() {
  if (_internal_has_int_value()) {
    tag_value_.int_value_ = int64_t{0};
    clear_has_tag_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtocolInfo_TagValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return tag_value_.int_value_;
  }
  return int64_t{0};
}
inline void ProtocolInfo_TagValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_tag_value();
    set_has_int_value();
  }
  tag_value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProtocolInfo_TagValue::int_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.int_value)
  return _internal_int_value();
}
inline void ProtocolInfo_TagValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.int_value)
}

// double double_value = 4;
inline bool ProtocolInfo_TagValue::_internal_has_double_value() const {
  return tag_value_case() == kDoubleValue;
}
inline bool ProtocolInfo_TagValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void ProtocolInfo_TagValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void ProtocolInfo_TagValue::clear_double_value() {
  if (_internal_has_double_value()) {
    tag_value_.double_value_ = 0;
    clear_has_tag_value();
  }
}
inline double ProtocolInfo_TagValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return tag_value_.double_value_;
  }
  return 0;
}
inline void ProtocolInfo_TagValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_tag_value();
    set_has_double_value();
  }
  tag_value_.double_value_ = value;
}
inline double ProtocolInfo_TagValue::double_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.double_value)
  return _internal_double_value();
}
inline void ProtocolInfo_TagValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.double_value)
}

// string array_value = 5;
inline bool ProtocolInfo_TagValue::_internal_has_array_value() const {
  return tag_value_case() == kArrayValue;
}
inline bool ProtocolInfo_TagValue::has_array_value() const {
  return _internal_has_array_value();
}
inline void ProtocolInfo_TagValue::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void ProtocolInfo_TagValue::clear_array_value() {
  if (_internal_has_array_value()) {
    tag_value_.array_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_tag_value();
  }
}
inline const std::string& ProtocolInfo_TagValue::array_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.array_value)
  return _internal_array_value();
}
template <typename ArgT0, typename... ArgT>
inline void ProtocolInfo_TagValue::set_array_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_array_value()) {
    clear_tag_value();
    set_has_array_value();
    tag_value_.array_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.array_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.array_value)
}
inline std::string* ProtocolInfo_TagValue::mutable_array_value() {
  std::string* _s = _internal_mutable_array_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.TagValue.array_value)
  return _s;
}
inline const std::string& ProtocolInfo_TagValue::_internal_array_value() const {
  if (_internal_has_array_value()) {
    return tag_value_.array_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProtocolInfo_TagValue::_internal_set_array_value(const std::string& value) {
  if (!_internal_has_array_value()) {
    clear_tag_value();
    set_has_array_value();
    tag_value_.array_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.array_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_tag_value();
    set_has_array_value();
    tag_value_.array_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return tag_value_.array_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::release_array_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.TagValue.array_value)
  if (_internal_has_array_value()) {
    clear_has_tag_value();
    return tag_value_.array_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProtocolInfo_TagValue::set_allocated_array_value(std::string* array_value) {
  if (has_tag_value()) {
    clear_tag_value();
  }
  if (array_value != nullptr) {
    set_has_array_value();
    tag_value_.array_value_.UnsafeSetDefault(array_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(array_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.TagValue.array_value)
}

// string object_value = 6;
inline bool ProtocolInfo_TagValue::_internal_has_object_value() const {
  return tag_value_case() == kObjectValue;
}
inline bool ProtocolInfo_TagValue::has_object_value() const {
  return _internal_has_object_value();
}
inline void ProtocolInfo_TagValue::set_has_object_value() {
  _oneof_case_[0] = kObjectValue;
}
inline void ProtocolInfo_TagValue::clear_object_value() {
  if (_internal_has_object_value()) {
    tag_value_.object_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_tag_value();
  }
}
inline const std::string& ProtocolInfo_TagValue::object_value() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagValue.object_value)
  return _internal_object_value();
}
template <typename ArgT0, typename... ArgT>
inline void ProtocolInfo_TagValue::set_object_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_object_value()) {
    clear_tag_value();
    set_has_object_value();
    tag_value_.object_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.object_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagValue.object_value)
}
inline std::string* ProtocolInfo_TagValue::mutable_object_value() {
  std::string* _s = _internal_mutable_object_value();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.TagValue.object_value)
  return _s;
}
inline const std::string& ProtocolInfo_TagValue::_internal_object_value() const {
  if (_internal_has_object_value()) {
    return tag_value_.object_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProtocolInfo_TagValue::_internal_set_object_value(const std::string& value) {
  if (!_internal_has_object_value()) {
    clear_tag_value();
    set_has_object_value();
    tag_value_.object_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tag_value_.object_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::_internal_mutable_object_value() {
  if (!_internal_has_object_value()) {
    clear_tag_value();
    set_has_object_value();
    tag_value_.object_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return tag_value_.object_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagValue::release_object_value() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.TagValue.object_value)
  if (_internal_has_object_value()) {
    clear_has_tag_value();
    return tag_value_.object_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ProtocolInfo_TagValue::set_allocated_object_value(std::string* object_value) {
  if (has_tag_value()) {
    clear_tag_value();
  }
  if (object_value != nullptr) {
    set_has_object_value();
    tag_value_.object_value_.UnsafeSetDefault(object_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(object_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.TagValue.object_value)
}

inline bool ProtocolInfo_TagValue::has_tag_value() const {
  return tag_value_case() != TAG_VALUE_NOT_SET;
}
inline void ProtocolInfo_TagValue::clear_has_tag_value() {
  _oneof_case_[0] = TAG_VALUE_NOT_SET;
}
inline ProtocolInfo_TagValue::TagValueCase ProtocolInfo_TagValue::tag_value_case() const {
  return ProtocolInfo_TagValue::TagValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProtocolInfo_TagExtractionResult

// bool success = 1;
inline void ProtocolInfo_TagExtractionResult::clear_success() {
  success_ = false;
}
inline bool ProtocolInfo_TagExtractionResult::_internal_success() const {
  return success_;
}
inline bool ProtocolInfo_TagExtractionResult::success() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagExtractionResult.success)
  return _internal_success();
}
inline void ProtocolInfo_TagExtractionResult::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ProtocolInfo_TagExtractionResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagExtractionResult.success)
}

// string error_report = 2;
inline void ProtocolInfo_TagExtractionResult::clear_error_report() {
  error_report_.ClearToEmpty();
}
inline const std::string& ProtocolInfo_TagExtractionResult::error_report() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report)
  return _internal_error_report();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolInfo_TagExtractionResult::set_error_report(ArgT0&& arg0, ArgT... args) {
 
 error_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report)
}
inline std::string* ProtocolInfo_TagExtractionResult::mutable_error_report() {
  std::string* _s = _internal_mutable_error_report();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report)
  return _s;
}
inline const std::string& ProtocolInfo_TagExtractionResult::_internal_error_report() const {
  return error_report_.Get();
}
inline void ProtocolInfo_TagExtractionResult::_internal_set_error_report(const std::string& value) {
  
  error_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagExtractionResult::_internal_mutable_error_report() {
  
  return error_report_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo_TagExtractionResult::release_error_report() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report)
  return error_report_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolInfo_TagExtractionResult::set_allocated_error_report(std::string* error_report) {
  if (error_report != nullptr) {
    
  } else {
    
  }
  error_report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_report,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProtocolInfo

// string identifier = 1;
inline void ProtocolInfo::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& ProtocolInfo::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolInfo::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.identifier)
}
inline std::string* ProtocolInfo::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.identifier)
  return _s;
}
inline const std::string& ProtocolInfo::_internal_identifier() const {
  return identifier_.Get();
}
inline void ProtocolInfo::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolInfo::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.identifier)
}

// map<string, .minknow_api.protocol.ProtocolInfo.TagValue> tags = 2;
inline int ProtocolInfo::_internal_tags_size() const {
  return tags_.size();
}
inline int ProtocolInfo::tags_size() const {
  return _internal_tags_size();
}
inline void ProtocolInfo::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >&
ProtocolInfo::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >&
ProtocolInfo::tags() const {
  // @@protoc_insertion_point(field_map:minknow_api.protocol.ProtocolInfo.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >*
ProtocolInfo::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >*
ProtocolInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.protocol.ProtocolInfo.tags)
  return _internal_mutable_tags();
}

// string name = 3;
inline void ProtocolInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProtocolInfo::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolInfo.name)
}
inline std::string* ProtocolInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.name)
  return _s;
}
inline const std::string& ProtocolInfo::_internal_name() const {
  return name_.Get();
}
inline void ProtocolInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolInfo::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.name)
}

// .minknow_api.protocol.ProtocolInfo.TagExtractionResult tag_extraction_result = 4;
inline bool ProtocolInfo::_internal_has_tag_extraction_result() const {
  return this != internal_default_instance() && tag_extraction_result_ != nullptr;
}
inline bool ProtocolInfo::has_tag_extraction_result() const {
  return _internal_has_tag_extraction_result();
}
inline void ProtocolInfo::clear_tag_extraction_result() {
  if (GetArenaForAllocation() == nullptr && tag_extraction_result_ != nullptr) {
    delete tag_extraction_result_;
  }
  tag_extraction_result_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult& ProtocolInfo::_internal_tag_extraction_result() const {
  const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* p = tag_extraction_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult&>(
      ::minknow_api::protocol::_ProtocolInfo_TagExtractionResult_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult& ProtocolInfo::tag_extraction_result() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolInfo.tag_extraction_result)
  return _internal_tag_extraction_result();
}
inline void ProtocolInfo::unsafe_arena_set_allocated_tag_extraction_result(
    ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* tag_extraction_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_extraction_result_);
  }
  tag_extraction_result_ = tag_extraction_result;
  if (tag_extraction_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolInfo.tag_extraction_result)
}
inline ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* ProtocolInfo::release_tag_extraction_result() {
  
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* temp = tag_extraction_result_;
  tag_extraction_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* ProtocolInfo::unsafe_arena_release_tag_extraction_result() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolInfo.tag_extraction_result)
  
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* temp = tag_extraction_result_;
  tag_extraction_result_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* ProtocolInfo::_internal_mutable_tag_extraction_result() {
  
  if (tag_extraction_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo_TagExtractionResult>(GetArenaForAllocation());
    tag_extraction_result_ = p;
  }
  return tag_extraction_result_;
}
inline ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* ProtocolInfo::mutable_tag_extraction_result() {
  ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* _msg = _internal_mutable_tag_extraction_result();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolInfo.tag_extraction_result)
  return _msg;
}
inline void ProtocolInfo::set_allocated_tag_extraction_result(::minknow_api::protocol::ProtocolInfo_TagExtractionResult* tag_extraction_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tag_extraction_result_;
  }
  if (tag_extraction_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolInfo_TagExtractionResult>::GetOwningArena(tag_extraction_result);
    if (message_arena != submessage_arena) {
      tag_extraction_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_extraction_result, submessage_arena);
    }
    
  } else {
    
  }
  tag_extraction_result_ = tag_extraction_result;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolInfo.tag_extraction_result)
}

// -------------------------------------------------------------------

// ListProtocolsResponse

// repeated .minknow_api.protocol.ProtocolInfo protocols = 1;
inline int ListProtocolsResponse::_internal_protocols_size() const {
  return protocols_.size();
}
inline int ListProtocolsResponse::protocols_size() const {
  return _internal_protocols_size();
}
inline void ListProtocolsResponse::clear_protocols() {
  protocols_.Clear();
}
inline ::minknow_api::protocol::ProtocolInfo* ListProtocolsResponse::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListProtocolsResponse.protocols)
  return protocols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::ProtocolInfo >*
ListProtocolsResponse::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ListProtocolsResponse.protocols)
  return &protocols_;
}
inline const ::minknow_api::protocol::ProtocolInfo& ListProtocolsResponse::_internal_protocols(int index) const {
  return protocols_.Get(index);
}
inline const ::minknow_api::protocol::ProtocolInfo& ListProtocolsResponse::protocols(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListProtocolsResponse.protocols)
  return _internal_protocols(index);
}
inline ::minknow_api::protocol::ProtocolInfo* ListProtocolsResponse::_internal_add_protocols() {
  return protocols_.Add();
}
inline ::minknow_api::protocol::ProtocolInfo* ListProtocolsResponse::add_protocols() {
  ::minknow_api::protocol::ProtocolInfo* _add = _internal_add_protocols();
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListProtocolsResponse.protocols)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::ProtocolInfo >&
ListProtocolsResponse::protocols() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ListProtocolsResponse.protocols)
  return protocols_;
}

// -------------------------------------------------------------------

// WaitForFinishedRequest

// string run_id = 1 [(.minknow_api.rpc_required) = true];
inline void WaitForFinishedRequest::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& WaitForFinishedRequest::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.WaitForFinishedRequest.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitForFinishedRequest::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.WaitForFinishedRequest.run_id)
}
inline std::string* WaitForFinishedRequest::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.WaitForFinishedRequest.run_id)
  return _s;
}
inline const std::string& WaitForFinishedRequest::_internal_run_id() const {
  return run_id_.Get();
}
inline void WaitForFinishedRequest::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitForFinishedRequest::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitForFinishedRequest::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.WaitForFinishedRequest.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitForFinishedRequest::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.WaitForFinishedRequest.run_id)
}

// .minknow_api.protocol.WaitForFinishedRequest.NotificationState state = 2;
inline void WaitForFinishedRequest::clear_state() {
  state_ = 0;
}
inline ::minknow_api::protocol::WaitForFinishedRequest_NotificationState WaitForFinishedRequest::_internal_state() const {
  return static_cast< ::minknow_api::protocol::WaitForFinishedRequest_NotificationState >(state_);
}
inline ::minknow_api::protocol::WaitForFinishedRequest_NotificationState WaitForFinishedRequest::state() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.WaitForFinishedRequest.state)
  return _internal_state();
}
inline void WaitForFinishedRequest::_internal_set_state(::minknow_api::protocol::WaitForFinishedRequest_NotificationState value) {
  
  state_ = value;
}
inline void WaitForFinishedRequest::set_state(::minknow_api::protocol::WaitForFinishedRequest_NotificationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.WaitForFinishedRequest.state)
}

// float timeout = 3;
inline void WaitForFinishedRequest::clear_timeout() {
  timeout_ = 0;
}
inline float WaitForFinishedRequest::_internal_timeout() const {
  return timeout_;
}
inline float WaitForFinishedRequest::timeout() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.WaitForFinishedRequest.timeout)
  return _internal_timeout();
}
inline void WaitForFinishedRequest::_internal_set_timeout(float value) {
  
  timeout_ = value;
}
inline void WaitForFinishedRequest::set_timeout(float value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.WaitForFinishedRequest.timeout)
}

// -------------------------------------------------------------------

// GetRunInfoRequest

// string run_id = 1;
inline void GetRunInfoRequest::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& GetRunInfoRequest::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.GetRunInfoRequest.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRunInfoRequest::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.GetRunInfoRequest.run_id)
}
inline std::string* GetRunInfoRequest::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.GetRunInfoRequest.run_id)
  return _s;
}
inline const std::string& GetRunInfoRequest::_internal_run_id() const {
  return run_id_.Get();
}
inline void GetRunInfoRequest::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRunInfoRequest::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRunInfoRequest::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.GetRunInfoRequest.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRunInfoRequest::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.GetRunInfoRequest.run_id)
}

// -------------------------------------------------------------------

// Epi2meWorkflowReference

// int64 id = 1;
inline void Epi2meWorkflowReference::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Epi2meWorkflowReference::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Epi2meWorkflowReference::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.Epi2meWorkflowReference.id)
  return _internal_id();
}
inline void Epi2meWorkflowReference::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Epi2meWorkflowReference::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.Epi2meWorkflowReference.id)
}

// string url = 2;
inline void Epi2meWorkflowReference::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Epi2meWorkflowReference::url() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.Epi2meWorkflowReference.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Epi2meWorkflowReference::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.Epi2meWorkflowReference.url)
}
inline std::string* Epi2meWorkflowReference::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.Epi2meWorkflowReference.url)
  return _s;
}
inline const std::string& Epi2meWorkflowReference::_internal_url() const {
  return url_.Get();
}
inline void Epi2meWorkflowReference::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Epi2meWorkflowReference::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Epi2meWorkflowReference::release_url() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.Epi2meWorkflowReference.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Epi2meWorkflowReference::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.Epi2meWorkflowReference.url)
}

// -------------------------------------------------------------------

// AssociatedPostProcessingAnalysis

// string started_id = 1;
inline void AssociatedPostProcessingAnalysis::clear_started_id() {
  started_id_.ClearToEmpty();
}
inline const std::string& AssociatedPostProcessingAnalysis::started_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id)
  return _internal_started_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatedPostProcessingAnalysis::set_started_id(ArgT0&& arg0, ArgT... args) {
 
 started_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id)
}
inline std::string* AssociatedPostProcessingAnalysis::mutable_started_id() {
  std::string* _s = _internal_mutable_started_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id)
  return _s;
}
inline const std::string& AssociatedPostProcessingAnalysis::_internal_started_id() const {
  return started_id_.Get();
}
inline void AssociatedPostProcessingAnalysis::_internal_set_started_id(const std::string& value) {
  
  started_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssociatedPostProcessingAnalysis::_internal_mutable_started_id() {
  
  return started_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssociatedPostProcessingAnalysis::release_started_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id)
  return started_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssociatedPostProcessingAnalysis::set_allocated_started_id(std::string* started_id) {
  if (started_id != nullptr) {
    
  } else {
    
  }
  started_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), started_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id)
}

// .minknow_api.basecaller.StartRequest start_request = 2;
inline bool AssociatedPostProcessingAnalysis::_internal_has_start_request() const {
  return this != internal_default_instance() && start_request_ != nullptr;
}
inline bool AssociatedPostProcessingAnalysis::has_start_request() const {
  return _internal_has_start_request();
}
inline const ::minknow_api::basecaller::StartRequest& AssociatedPostProcessingAnalysis::_internal_start_request() const {
  const ::minknow_api::basecaller::StartRequest* p = start_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::basecaller::StartRequest&>(
      ::minknow_api::basecaller::_StartRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartRequest& AssociatedPostProcessingAnalysis::start_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AssociatedPostProcessingAnalysis.start_request)
  return _internal_start_request();
}
inline void AssociatedPostProcessingAnalysis::unsafe_arena_set_allocated_start_request(
    ::minknow_api::basecaller::StartRequest* start_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request_);
  }
  start_request_ = start_request;
  if (start_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.AssociatedPostProcessingAnalysis.start_request)
}
inline ::minknow_api::basecaller::StartRequest* AssociatedPostProcessingAnalysis::release_start_request() {
  
  ::minknow_api::basecaller::StartRequest* temp = start_request_;
  start_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::basecaller::StartRequest* AssociatedPostProcessingAnalysis::unsafe_arena_release_start_request() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AssociatedPostProcessingAnalysis.start_request)
  
  ::minknow_api::basecaller::StartRequest* temp = start_request_;
  start_request_ = nullptr;
  return temp;
}
inline ::minknow_api::basecaller::StartRequest* AssociatedPostProcessingAnalysis::_internal_mutable_start_request() {
  
  if (start_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::basecaller::StartRequest>(GetArenaForAllocation());
    start_request_ = p;
  }
  return start_request_;
}
inline ::minknow_api::basecaller::StartRequest* AssociatedPostProcessingAnalysis::mutable_start_request() {
  ::minknow_api::basecaller::StartRequest* _msg = _internal_mutable_start_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AssociatedPostProcessingAnalysis.start_request)
  return _msg;
}
inline void AssociatedPostProcessingAnalysis::set_allocated_start_request(::minknow_api::basecaller::StartRequest* start_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request_);
  }
  if (start_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request));
    if (message_arena != submessage_arena) {
      start_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_request, submessage_arena);
    }
    
  } else {
    
  }
  start_request_ = start_request;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AssociatedPostProcessingAnalysis.start_request)
}

// -------------------------------------------------------------------

// PlatformQcResult

// string flow_cell_id = 1;
inline void PlatformQcResult::clear_flow_cell_id() {
  flow_cell_id_.ClearToEmpty();
}
inline const std::string& PlatformQcResult::flow_cell_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.PlatformQcResult.flow_cell_id)
  return _internal_flow_cell_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlatformQcResult::set_flow_cell_id(ArgT0&& arg0, ArgT... args) {
 
 flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.PlatformQcResult.flow_cell_id)
}
inline std::string* PlatformQcResult::mutable_flow_cell_id() {
  std::string* _s = _internal_mutable_flow_cell_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.PlatformQcResult.flow_cell_id)
  return _s;
}
inline const std::string& PlatformQcResult::_internal_flow_cell_id() const {
  return flow_cell_id_.Get();
}
inline void PlatformQcResult::_internal_set_flow_cell_id(const std::string& value) {
  
  flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlatformQcResult::_internal_mutable_flow_cell_id() {
  
  return flow_cell_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlatformQcResult::release_flow_cell_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.PlatformQcResult.flow_cell_id)
  return flow_cell_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlatformQcResult::set_allocated_flow_cell_id(std::string* flow_cell_id) {
  if (flow_cell_id != nullptr) {
    
  } else {
    
  }
  flow_cell_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_cell_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.PlatformQcResult.flow_cell_id)
}

// bool passed = 2;
inline void PlatformQcResult::clear_passed() {
  passed_ = false;
}
inline bool PlatformQcResult::_internal_passed() const {
  return passed_;
}
inline bool PlatformQcResult::passed() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.PlatformQcResult.passed)
  return _internal_passed();
}
inline void PlatformQcResult::_internal_set_passed(bool value) {
  
  passed_ = value;
}
inline void PlatformQcResult::set_passed(bool value) {
  _internal_set_passed(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.PlatformQcResult.passed)
}

// uint32 total_pore_count = 3;
inline void PlatformQcResult::clear_total_pore_count() {
  total_pore_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformQcResult::_internal_total_pore_count() const {
  return total_pore_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlatformQcResult::total_pore_count() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.PlatformQcResult.total_pore_count)
  return _internal_total_pore_count();
}
inline void PlatformQcResult::_internal_set_total_pore_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_pore_count_ = value;
}
inline void PlatformQcResult::set_total_pore_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_pore_count(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.PlatformQcResult.total_pore_count)
}

// -------------------------------------------------------------------

// ProtocolRunInfo

// string run_id = 1;
inline void ProtocolRunInfo::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& ProtocolRunInfo::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolRunInfo::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.run_id)
}
inline std::string* ProtocolRunInfo::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.run_id)
  return _s;
}
inline const std::string& ProtocolRunInfo::_internal_run_id() const {
  return run_id_.Get();
}
inline void ProtocolRunInfo::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolRunInfo::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.run_id)
}

// string protocol_id = 2;
inline void ProtocolRunInfo::clear_protocol_id() {
  protocol_id_.ClearToEmpty();
}
inline const std::string& ProtocolRunInfo::protocol_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.protocol_id)
  return _internal_protocol_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolRunInfo::set_protocol_id(ArgT0&& arg0, ArgT... args) {
 
 protocol_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.protocol_id)
}
inline std::string* ProtocolRunInfo::mutable_protocol_id() {
  std::string* _s = _internal_mutable_protocol_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.protocol_id)
  return _s;
}
inline const std::string& ProtocolRunInfo::_internal_protocol_id() const {
  return protocol_id_.Get();
}
inline void ProtocolRunInfo::_internal_set_protocol_id(const std::string& value) {
  
  protocol_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::_internal_mutable_protocol_id() {
  
  return protocol_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::release_protocol_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.protocol_id)
  return protocol_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolRunInfo::set_allocated_protocol_id(std::string* protocol_id) {
  if (protocol_id != nullptr) {
    
  } else {
    
  }
  protocol_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.protocol_id)
}

// repeated string args = 3;
inline int ProtocolRunInfo::_internal_args_size() const {
  return args_.size();
}
inline int ProtocolRunInfo::args_size() const {
  return _internal_args_size();
}
inline void ProtocolRunInfo::clear_args() {
  args_.Clear();
}
inline std::string* ProtocolRunInfo::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.ProtocolRunInfo.args)
  return _s;
}
inline const std::string& ProtocolRunInfo::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& ProtocolRunInfo::args(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.args)
  return _internal_args(index);
}
inline std::string* ProtocolRunInfo::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.args)
  return args_.Mutable(index);
}
inline void ProtocolRunInfo::set_args(int index, const std::string& value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::set_args(int index, std::string&& value) {
  args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.ProtocolRunInfo.args)
}
inline std::string* ProtocolRunInfo::_internal_add_args() {
  return args_.Add();
}
inline void ProtocolRunInfo::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.ProtocolRunInfo.args)
}
inline void ProtocolRunInfo::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.ProtocolRunInfo.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtocolRunInfo::args() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ProtocolRunInfo.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtocolRunInfo::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ProtocolRunInfo.args)
  return &args_;
}

// string output_path = 11;
inline void ProtocolRunInfo::clear_output_path() {
  output_path_.ClearToEmpty();
}
inline const std::string& ProtocolRunInfo::output_path() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.output_path)
  return _internal_output_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolRunInfo::set_output_path(ArgT0&& arg0, ArgT... args) {
 
 output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.output_path)
}
inline std::string* ProtocolRunInfo::mutable_output_path() {
  std::string* _s = _internal_mutable_output_path();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.output_path)
  return _s;
}
inline const std::string& ProtocolRunInfo::_internal_output_path() const {
  return output_path_.Get();
}
inline void ProtocolRunInfo::_internal_set_output_path(const std::string& value) {
  
  output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::_internal_mutable_output_path() {
  
  return output_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolRunInfo::release_output_path() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.output_path)
  return output_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolRunInfo::set_allocated_output_path(std::string* output_path) {
  if (output_path != nullptr) {
    
  } else {
    
  }
  output_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.output_path)
}

// .minknow_api.protocol.ProtocolState state = 4;
inline void ProtocolRunInfo::clear_state() {
  state_ = 0;
}
inline ::minknow_api::protocol::ProtocolState ProtocolRunInfo::_internal_state() const {
  return static_cast< ::minknow_api::protocol::ProtocolState >(state_);
}
inline ::minknow_api::protocol::ProtocolState ProtocolRunInfo::state() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.state)
  return _internal_state();
}
inline void ProtocolRunInfo::_internal_set_state(::minknow_api::protocol::ProtocolState value) {
  
  state_ = value;
}
inline void ProtocolRunInfo::set_state(::minknow_api::protocol::ProtocolState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.state)
}

// .minknow_api.protocol.ProtocolPhase phase = 16;
inline void ProtocolRunInfo::clear_phase() {
  phase_ = 0;
}
inline ::minknow_api::protocol::ProtocolPhase ProtocolRunInfo::_internal_phase() const {
  return static_cast< ::minknow_api::protocol::ProtocolPhase >(phase_);
}
inline ::minknow_api::protocol::ProtocolPhase ProtocolRunInfo::phase() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.phase)
  return _internal_phase();
}
inline void ProtocolRunInfo::_internal_set_phase(::minknow_api::protocol::ProtocolPhase value) {
  
  phase_ = value;
}
inline void ProtocolRunInfo::set_phase(::minknow_api::protocol::ProtocolPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.phase)
}

// .google.protobuf.Timestamp last_phase_change = 17;
inline bool ProtocolRunInfo::_internal_has_last_phase_change() const {
  return this != internal_default_instance() && last_phase_change_ != nullptr;
}
inline bool ProtocolRunInfo::has_last_phase_change() const {
  return _internal_has_last_phase_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::_internal_last_phase_change() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_phase_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::last_phase_change() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.last_phase_change)
  return _internal_last_phase_change();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_last_phase_change(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_phase_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_phase_change_);
  }
  last_phase_change_ = last_phase_change;
  if (last_phase_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.last_phase_change)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::release_last_phase_change() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_phase_change_;
  last_phase_change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::unsafe_arena_release_last_phase_change() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.last_phase_change)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_phase_change_;
  last_phase_change_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::_internal_mutable_last_phase_change() {
  
  if (last_phase_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_phase_change_ = p;
  }
  return last_phase_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::mutable_last_phase_change() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_phase_change();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.last_phase_change)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_last_phase_change(::PROTOBUF_NAMESPACE_ID::Timestamp* last_phase_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_phase_change_);
  }
  if (last_phase_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_phase_change));
    if (message_arena != submessage_arena) {
      last_phase_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_phase_change, submessage_arena);
    }
    
  } else {
    
  }
  last_phase_change_ = last_phase_change;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.last_phase_change)
}

// bool can_pause = 18;
inline void ProtocolRunInfo::clear_can_pause() {
  can_pause_ = false;
}
inline bool ProtocolRunInfo::_internal_can_pause() const {
  return can_pause_;
}
inline bool ProtocolRunInfo::can_pause() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.can_pause)
  return _internal_can_pause();
}
inline void ProtocolRunInfo::_internal_set_can_pause(bool value) {
  
  can_pause_ = value;
}
inline void ProtocolRunInfo::set_can_pause(bool value) {
  _internal_set_can_pause(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.can_pause)
}

// bool can_trigger_mux_scan = 19;
inline void ProtocolRunInfo::clear_can_trigger_mux_scan() {
  can_trigger_mux_scan_ = false;
}
inline bool ProtocolRunInfo::_internal_can_trigger_mux_scan() const {
  return can_trigger_mux_scan_;
}
inline bool ProtocolRunInfo::can_trigger_mux_scan() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.can_trigger_mux_scan)
  return _internal_can_trigger_mux_scan();
}
inline void ProtocolRunInfo::_internal_set_can_trigger_mux_scan(bool value) {
  
  can_trigger_mux_scan_ = value;
}
inline void ProtocolRunInfo::set_can_trigger_mux_scan(bool value) {
  _internal_set_can_trigger_mux_scan(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.can_trigger_mux_scan)
}

// .google.protobuf.Timestamp start_time = 5;
inline bool ProtocolRunInfo::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool ProtocolRunInfo::has_start_time() const {
  return _internal_has_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::_internal_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::start_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.start_time)
  return _internal_start_time();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::release_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_time_ = p;
  }
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::mutable_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.start_time)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time));
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.start_time)
}

// .google.protobuf.Timestamp script_end_time = 9;
inline bool ProtocolRunInfo::_internal_has_script_end_time() const {
  return this != internal_default_instance() && script_end_time_ != nullptr;
}
inline bool ProtocolRunInfo::has_script_end_time() const {
  return _internal_has_script_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::_internal_script_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = script_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::script_end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.script_end_time)
  return _internal_script_end_time();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_script_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* script_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(script_end_time_);
  }
  script_end_time_ = script_end_time;
  if (script_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.script_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::release_script_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = script_end_time_;
  script_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::unsafe_arena_release_script_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.script_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = script_end_time_;
  script_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::_internal_mutable_script_end_time() {
  
  if (script_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    script_end_time_ = p;
  }
  return script_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::mutable_script_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_script_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.script_end_time)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_script_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* script_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(script_end_time_);
  }
  if (script_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(script_end_time));
    if (message_arena != submessage_arena) {
      script_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, script_end_time, submessage_arena);
    }
    
  } else {
    
  }
  script_end_time_ = script_end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.script_end_time)
}

// .google.protobuf.Timestamp end_time = 6;
inline bool ProtocolRunInfo::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool ProtocolRunInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::_internal_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProtocolRunInfo::end_time() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.end_time)
  return _internal_end_time();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::release_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_time_ = p;
  }
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProtocolRunInfo::mutable_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.end_time)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time));
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.end_time)
}

// repeated string acquisition_run_ids = 7;
inline int ProtocolRunInfo::_internal_acquisition_run_ids_size() const {
  return acquisition_run_ids_.size();
}
inline int ProtocolRunInfo::acquisition_run_ids_size() const {
  return _internal_acquisition_run_ids_size();
}
inline void ProtocolRunInfo::clear_acquisition_run_ids() {
  acquisition_run_ids_.Clear();
}
inline std::string* ProtocolRunInfo::add_acquisition_run_ids() {
  std::string* _s = _internal_add_acquisition_run_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
  return _s;
}
inline const std::string& ProtocolRunInfo::_internal_acquisition_run_ids(int index) const {
  return acquisition_run_ids_.Get(index);
}
inline const std::string& ProtocolRunInfo::acquisition_run_ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
  return _internal_acquisition_run_ids(index);
}
inline std::string* ProtocolRunInfo::mutable_acquisition_run_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
  return acquisition_run_ids_.Mutable(index);
}
inline void ProtocolRunInfo::set_acquisition_run_ids(int index, const std::string& value) {
  acquisition_run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::set_acquisition_run_ids(int index, std::string&& value) {
  acquisition_run_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::set_acquisition_run_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acquisition_run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::set_acquisition_run_ids(int index, const char* value, size_t size) {
  acquisition_run_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline std::string* ProtocolRunInfo::_internal_add_acquisition_run_ids() {
  return acquisition_run_ids_.Add();
}
inline void ProtocolRunInfo::add_acquisition_run_ids(const std::string& value) {
  acquisition_run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::add_acquisition_run_ids(std::string&& value) {
  acquisition_run_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::add_acquisition_run_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acquisition_run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline void ProtocolRunInfo::add_acquisition_run_ids(const char* value, size_t size) {
  acquisition_run_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtocolRunInfo::acquisition_run_ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
  return acquisition_run_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtocolRunInfo::mutable_acquisition_run_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids)
  return &acquisition_run_ids_;
}

// .minknow_api.protocol.ProtocolRunUserInfo user_info = 8;
inline bool ProtocolRunInfo::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool ProtocolRunInfo::has_user_info() const {
  return _internal_has_user_info();
}
inline void ProtocolRunInfo::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolRunUserInfo& ProtocolRunInfo::_internal_user_info() const {
  const ::minknow_api::protocol::ProtocolRunUserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolRunUserInfo&>(
      ::minknow_api::protocol::_ProtocolRunUserInfo_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolRunUserInfo& ProtocolRunInfo::user_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.user_info)
  return _internal_user_info();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_user_info(
    ::minknow_api::protocol::ProtocolRunUserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.user_info)
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* ProtocolRunInfo::release_user_info() {
  
  ::minknow_api::protocol::ProtocolRunUserInfo* temp = user_info_;
  user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* ProtocolRunInfo::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.user_info)
  
  ::minknow_api::protocol::ProtocolRunUserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* ProtocolRunInfo::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolRunUserInfo>(GetArenaForAllocation());
    user_info_ = p;
  }
  return user_info_;
}
inline ::minknow_api::protocol::ProtocolRunUserInfo* ProtocolRunInfo::mutable_user_info() {
  ::minknow_api::protocol::ProtocolRunUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.user_info)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_user_info(::minknow_api::protocol::ProtocolRunUserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolRunUserInfo>::GetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.user_info)
}

// repeated .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflows = 10;
inline int ProtocolRunInfo::_internal_epi2me_workflows_size() const {
  return epi2me_workflows_.size();
}
inline int ProtocolRunInfo::epi2me_workflows_size() const {
  return _internal_epi2me_workflows_size();
}
inline void ProtocolRunInfo::clear_epi2me_workflows() {
  epi2me_workflows_.Clear();
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* ProtocolRunInfo::mutable_epi2me_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.epi2me_workflows)
  return epi2me_workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::Epi2meWorkflowReference >*
ProtocolRunInfo::mutable_epi2me_workflows() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ProtocolRunInfo.epi2me_workflows)
  return &epi2me_workflows_;
}
inline const ::minknow_api::protocol::Epi2meWorkflowReference& ProtocolRunInfo::_internal_epi2me_workflows(int index) const {
  return epi2me_workflows_.Get(index);
}
inline const ::minknow_api::protocol::Epi2meWorkflowReference& ProtocolRunInfo::epi2me_workflows(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.epi2me_workflows)
  return _internal_epi2me_workflows(index);
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* ProtocolRunInfo::_internal_add_epi2me_workflows() {
  return epi2me_workflows_.Add();
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* ProtocolRunInfo::add_epi2me_workflows() {
  ::minknow_api::protocol::Epi2meWorkflowReference* _add = _internal_add_epi2me_workflows();
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.epi2me_workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::Epi2meWorkflowReference >&
ProtocolRunInfo::epi2me_workflows() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ProtocolRunInfo.epi2me_workflows)
  return epi2me_workflows_;
}

// .minknow_api.device.GetDeviceInfoResponse device = 12;
inline bool ProtocolRunInfo::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool ProtocolRunInfo::has_device() const {
  return _internal_has_device();
}
inline const ::minknow_api::device::GetDeviceInfoResponse& ProtocolRunInfo::_internal_device() const {
  const ::minknow_api::device::GetDeviceInfoResponse* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::GetDeviceInfoResponse&>(
      ::minknow_api::device::_GetDeviceInfoResponse_default_instance_);
}
inline const ::minknow_api::device::GetDeviceInfoResponse& ProtocolRunInfo::device() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.device)
  return _internal_device();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_device(
    ::minknow_api::device::GetDeviceInfoResponse* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.device)
}
inline ::minknow_api::device::GetDeviceInfoResponse* ProtocolRunInfo::release_device() {
  
  ::minknow_api::device::GetDeviceInfoResponse* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::GetDeviceInfoResponse* ProtocolRunInfo::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.device)
  
  ::minknow_api::device::GetDeviceInfoResponse* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::minknow_api::device::GetDeviceInfoResponse* ProtocolRunInfo::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::GetDeviceInfoResponse>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::minknow_api::device::GetDeviceInfoResponse* ProtocolRunInfo::mutable_device() {
  ::minknow_api::device::GetDeviceInfoResponse* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.device)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_device(::minknow_api::device::GetDeviceInfoResponse* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.device)
}

// .minknow_api.device.GetFlowCellInfoResponse flow_cell = 13;
inline bool ProtocolRunInfo::_internal_has_flow_cell() const {
  return this != internal_default_instance() && flow_cell_ != nullptr;
}
inline bool ProtocolRunInfo::has_flow_cell() const {
  return _internal_has_flow_cell();
}
inline const ::minknow_api::device::GetFlowCellInfoResponse& ProtocolRunInfo::_internal_flow_cell() const {
  const ::minknow_api::device::GetFlowCellInfoResponse* p = flow_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::device::GetFlowCellInfoResponse&>(
      ::minknow_api::device::_GetFlowCellInfoResponse_default_instance_);
}
inline const ::minknow_api::device::GetFlowCellInfoResponse& ProtocolRunInfo::flow_cell() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.flow_cell)
  return _internal_flow_cell();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_flow_cell(
    ::minknow_api::device::GetFlowCellInfoResponse* flow_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_cell_);
  }
  flow_cell_ = flow_cell;
  if (flow_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.flow_cell)
}
inline ::minknow_api::device::GetFlowCellInfoResponse* ProtocolRunInfo::release_flow_cell() {
  
  ::minknow_api::device::GetFlowCellInfoResponse* temp = flow_cell_;
  flow_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::device::GetFlowCellInfoResponse* ProtocolRunInfo::unsafe_arena_release_flow_cell() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.flow_cell)
  
  ::minknow_api::device::GetFlowCellInfoResponse* temp = flow_cell_;
  flow_cell_ = nullptr;
  return temp;
}
inline ::minknow_api::device::GetFlowCellInfoResponse* ProtocolRunInfo::_internal_mutable_flow_cell() {
  
  if (flow_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::device::GetFlowCellInfoResponse>(GetArenaForAllocation());
    flow_cell_ = p;
  }
  return flow_cell_;
}
inline ::minknow_api::device::GetFlowCellInfoResponse* ProtocolRunInfo::mutable_flow_cell() {
  ::minknow_api::device::GetFlowCellInfoResponse* _msg = _internal_mutable_flow_cell();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.flow_cell)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_flow_cell(::minknow_api::device::GetFlowCellInfoResponse* flow_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_cell_);
  }
  if (flow_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_cell));
    if (message_arena != submessage_arena) {
      flow_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_cell, submessage_arena);
    }
    
  } else {
    
  }
  flow_cell_ = flow_cell;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.flow_cell)
}

// .minknow_api.protocol.ProtocolInfo meta_info = 14;
inline bool ProtocolRunInfo::_internal_has_meta_info() const {
  return this != internal_default_instance() && meta_info_ != nullptr;
}
inline bool ProtocolRunInfo::has_meta_info() const {
  return _internal_has_meta_info();
}
inline void ProtocolRunInfo::clear_meta_info() {
  if (GetArenaForAllocation() == nullptr && meta_info_ != nullptr) {
    delete meta_info_;
  }
  meta_info_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolInfo& ProtocolRunInfo::_internal_meta_info() const {
  const ::minknow_api::protocol::ProtocolInfo* p = meta_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolInfo&>(
      ::minknow_api::protocol::_ProtocolInfo_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolInfo& ProtocolRunInfo::meta_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.meta_info)
  return _internal_meta_info();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_meta_info(
    ::minknow_api::protocol::ProtocolInfo* meta_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_info_);
  }
  meta_info_ = meta_info;
  if (meta_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.meta_info)
}
inline ::minknow_api::protocol::ProtocolInfo* ProtocolRunInfo::release_meta_info() {
  
  ::minknow_api::protocol::ProtocolInfo* temp = meta_info_;
  meta_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolInfo* ProtocolRunInfo::unsafe_arena_release_meta_info() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.meta_info)
  
  ::minknow_api::protocol::ProtocolInfo* temp = meta_info_;
  meta_info_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolInfo* ProtocolRunInfo::_internal_mutable_meta_info() {
  
  if (meta_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolInfo>(GetArenaForAllocation());
    meta_info_ = p;
  }
  return meta_info_;
}
inline ::minknow_api::protocol::ProtocolInfo* ProtocolRunInfo::mutable_meta_info() {
  ::minknow_api::protocol::ProtocolInfo* _msg = _internal_mutable_meta_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.meta_info)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_meta_info(::minknow_api::protocol::ProtocolInfo* meta_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete meta_info_;
  }
  if (meta_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolInfo>::GetOwningArena(meta_info);
    if (message_arena != submessage_arena) {
      meta_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_info, submessage_arena);
    }
    
  } else {
    
  }
  meta_info_ = meta_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.meta_info)
}

// repeated .minknow_api.protocol.AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;
inline int ProtocolRunInfo::_internal_associated_post_processing_analysis_size() const {
  return associated_post_processing_analysis_.size();
}
inline int ProtocolRunInfo::associated_post_processing_analysis_size() const {
  return _internal_associated_post_processing_analysis_size();
}
inline void ProtocolRunInfo::clear_associated_post_processing_analysis() {
  associated_post_processing_analysis_.Clear();
}
inline ::minknow_api::protocol::AssociatedPostProcessingAnalysis* ProtocolRunInfo::mutable_associated_post_processing_analysis(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.associated_post_processing_analysis)
  return associated_post_processing_analysis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >*
ProtocolRunInfo::mutable_associated_post_processing_analysis() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ProtocolRunInfo.associated_post_processing_analysis)
  return &associated_post_processing_analysis_;
}
inline const ::minknow_api::protocol::AssociatedPostProcessingAnalysis& ProtocolRunInfo::_internal_associated_post_processing_analysis(int index) const {
  return associated_post_processing_analysis_.Get(index);
}
inline const ::minknow_api::protocol::AssociatedPostProcessingAnalysis& ProtocolRunInfo::associated_post_processing_analysis(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.associated_post_processing_analysis)
  return _internal_associated_post_processing_analysis(index);
}
inline ::minknow_api::protocol::AssociatedPostProcessingAnalysis* ProtocolRunInfo::_internal_add_associated_post_processing_analysis() {
  return associated_post_processing_analysis_.Add();
}
inline ::minknow_api::protocol::AssociatedPostProcessingAnalysis* ProtocolRunInfo::add_associated_post_processing_analysis() {
  ::minknow_api::protocol::AssociatedPostProcessingAnalysis* _add = _internal_add_associated_post_processing_analysis();
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ProtocolRunInfo.associated_post_processing_analysis)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >&
ProtocolRunInfo::associated_post_processing_analysis() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ProtocolRunInfo.associated_post_processing_analysis)
  return associated_post_processing_analysis_;
}

// .minknow_api.protocol.PlatformQcResult pqc_result = 20;
inline bool ProtocolRunInfo::_internal_has_pqc_result() const {
  return this != internal_default_instance() && pqc_result_ != nullptr;
}
inline bool ProtocolRunInfo::has_pqc_result() const {
  return _internal_has_pqc_result();
}
inline void ProtocolRunInfo::clear_pqc_result() {
  if (GetArenaForAllocation() == nullptr && pqc_result_ != nullptr) {
    delete pqc_result_;
  }
  pqc_result_ = nullptr;
}
inline const ::minknow_api::protocol::PlatformQcResult& ProtocolRunInfo::_internal_pqc_result() const {
  const ::minknow_api::protocol::PlatformQcResult* p = pqc_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::PlatformQcResult&>(
      ::minknow_api::protocol::_PlatformQcResult_default_instance_);
}
inline const ::minknow_api::protocol::PlatformQcResult& ProtocolRunInfo::pqc_result() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolRunInfo.pqc_result)
  return _internal_pqc_result();
}
inline void ProtocolRunInfo::unsafe_arena_set_allocated_pqc_result(
    ::minknow_api::protocol::PlatformQcResult* pqc_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pqc_result_);
  }
  pqc_result_ = pqc_result;
  if (pqc_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolRunInfo.pqc_result)
}
inline ::minknow_api::protocol::PlatformQcResult* ProtocolRunInfo::release_pqc_result() {
  
  ::minknow_api::protocol::PlatformQcResult* temp = pqc_result_;
  pqc_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::PlatformQcResult* ProtocolRunInfo::unsafe_arena_release_pqc_result() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolRunInfo.pqc_result)
  
  ::minknow_api::protocol::PlatformQcResult* temp = pqc_result_;
  pqc_result_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::PlatformQcResult* ProtocolRunInfo::_internal_mutable_pqc_result() {
  
  if (pqc_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::PlatformQcResult>(GetArenaForAllocation());
    pqc_result_ = p;
  }
  return pqc_result_;
}
inline ::minknow_api::protocol::PlatformQcResult* ProtocolRunInfo::mutable_pqc_result() {
  ::minknow_api::protocol::PlatformQcResult* _msg = _internal_mutable_pqc_result();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolRunInfo.pqc_result)
  return _msg;
}
inline void ProtocolRunInfo::set_allocated_pqc_result(::minknow_api::protocol::PlatformQcResult* pqc_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pqc_result_;
  }
  if (pqc_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::PlatformQcResult>::GetOwningArena(pqc_result);
    if (message_arena != submessage_arena) {
      pqc_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pqc_result, submessage_arena);
    }
    
  } else {
    
  }
  pqc_result_ = pqc_result;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolRunInfo.pqc_result)
}

// -------------------------------------------------------------------

// FilteringInfo_PlatformQcFilter

// optional string flow_cell_id = 1;
inline bool FilteringInfo_PlatformQcFilter::_internal_has_flow_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilteringInfo_PlatformQcFilter::has_flow_cell_id() const {
  return _internal_has_flow_cell_id();
}
inline void FilteringInfo_PlatformQcFilter::clear_flow_cell_id() {
  flow_cell_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilteringInfo_PlatformQcFilter::flow_cell_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id)
  return _internal_flow_cell_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilteringInfo_PlatformQcFilter::set_flow_cell_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id)
}
inline std::string* FilteringInfo_PlatformQcFilter::mutable_flow_cell_id() {
  std::string* _s = _internal_mutable_flow_cell_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id)
  return _s;
}
inline const std::string& FilteringInfo_PlatformQcFilter::_internal_flow_cell_id() const {
  return flow_cell_id_.Get();
}
inline void FilteringInfo_PlatformQcFilter::_internal_set_flow_cell_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FilteringInfo_PlatformQcFilter::_internal_mutable_flow_cell_id() {
  _has_bits_[0] |= 0x00000001u;
  return flow_cell_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FilteringInfo_PlatformQcFilter::release_flow_cell_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id)
  if (!_internal_has_flow_cell_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return flow_cell_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FilteringInfo_PlatformQcFilter::set_allocated_flow_cell_id(std::string* flow_cell_id) {
  if (flow_cell_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flow_cell_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_cell_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id)
}

// -------------------------------------------------------------------

// FilteringInfo

// .minknow_api.protocol.FilteringInfo.PlatformQcFilter pqc_filter = 1;
inline bool FilteringInfo::_internal_has_pqc_filter() const {
  return this != internal_default_instance() && pqc_filter_ != nullptr;
}
inline bool FilteringInfo::has_pqc_filter() const {
  return _internal_has_pqc_filter();
}
inline void FilteringInfo::clear_pqc_filter() {
  if (GetArenaForAllocation() == nullptr && pqc_filter_ != nullptr) {
    delete pqc_filter_;
  }
  pqc_filter_ = nullptr;
}
inline const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter& FilteringInfo::_internal_pqc_filter() const {
  const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* p = pqc_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter&>(
      ::minknow_api::protocol::_FilteringInfo_PlatformQcFilter_default_instance_);
}
inline const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter& FilteringInfo::pqc_filter() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.FilteringInfo.pqc_filter)
  return _internal_pqc_filter();
}
inline void FilteringInfo::unsafe_arena_set_allocated_pqc_filter(
    ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* pqc_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pqc_filter_);
  }
  pqc_filter_ = pqc_filter;
  if (pqc_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.FilteringInfo.pqc_filter)
}
inline ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* FilteringInfo::release_pqc_filter() {
  
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* temp = pqc_filter_;
  pqc_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* FilteringInfo::unsafe_arena_release_pqc_filter() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.FilteringInfo.pqc_filter)
  
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* temp = pqc_filter_;
  pqc_filter_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* FilteringInfo::_internal_mutable_pqc_filter() {
  
  if (pqc_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::FilteringInfo_PlatformQcFilter>(GetArenaForAllocation());
    pqc_filter_ = p;
  }
  return pqc_filter_;
}
inline ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* FilteringInfo::mutable_pqc_filter() {
  ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* _msg = _internal_mutable_pqc_filter();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.FilteringInfo.pqc_filter)
  return _msg;
}
inline void FilteringInfo::set_allocated_pqc_filter(::minknow_api::protocol::FilteringInfo_PlatformQcFilter* pqc_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pqc_filter_;
  }
  if (pqc_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::FilteringInfo_PlatformQcFilter>::GetOwningArena(pqc_filter);
    if (message_arena != submessage_arena) {
      pqc_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pqc_filter, submessage_arena);
    }
    
  } else {
    
  }
  pqc_filter_ = pqc_filter;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.FilteringInfo.pqc_filter)
}

// -------------------------------------------------------------------

// ListProtocolRunsRequest

// .minknow_api.protocol.FilteringInfo filter_info = 1;
inline bool ListProtocolRunsRequest::_internal_has_filter_info() const {
  return this != internal_default_instance() && filter_info_ != nullptr;
}
inline bool ListProtocolRunsRequest::has_filter_info() const {
  return _internal_has_filter_info();
}
inline void ListProtocolRunsRequest::clear_filter_info() {
  if (GetArenaForAllocation() == nullptr && filter_info_ != nullptr) {
    delete filter_info_;
  }
  filter_info_ = nullptr;
}
inline const ::minknow_api::protocol::FilteringInfo& ListProtocolRunsRequest::_internal_filter_info() const {
  const ::minknow_api::protocol::FilteringInfo* p = filter_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::FilteringInfo&>(
      ::minknow_api::protocol::_FilteringInfo_default_instance_);
}
inline const ::minknow_api::protocol::FilteringInfo& ListProtocolRunsRequest::filter_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListProtocolRunsRequest.filter_info)
  return _internal_filter_info();
}
inline void ListProtocolRunsRequest::unsafe_arena_set_allocated_filter_info(
    ::minknow_api::protocol::FilteringInfo* filter_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_info_);
  }
  filter_info_ = filter_info;
  if (filter_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListProtocolRunsRequest.filter_info)
}
inline ::minknow_api::protocol::FilteringInfo* ListProtocolRunsRequest::release_filter_info() {
  
  ::minknow_api::protocol::FilteringInfo* temp = filter_info_;
  filter_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::FilteringInfo* ListProtocolRunsRequest::unsafe_arena_release_filter_info() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListProtocolRunsRequest.filter_info)
  
  ::minknow_api::protocol::FilteringInfo* temp = filter_info_;
  filter_info_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::FilteringInfo* ListProtocolRunsRequest::_internal_mutable_filter_info() {
  
  if (filter_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::FilteringInfo>(GetArenaForAllocation());
    filter_info_ = p;
  }
  return filter_info_;
}
inline ::minknow_api::protocol::FilteringInfo* ListProtocolRunsRequest::mutable_filter_info() {
  ::minknow_api::protocol::FilteringInfo* _msg = _internal_mutable_filter_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListProtocolRunsRequest.filter_info)
  return _msg;
}
inline void ListProtocolRunsRequest::set_allocated_filter_info(::minknow_api::protocol::FilteringInfo* filter_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_info_;
  }
  if (filter_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::FilteringInfo>::GetOwningArena(filter_info);
    if (message_arena != submessage_arena) {
      filter_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_info, submessage_arena);
    }
    
  } else {
    
  }
  filter_info_ = filter_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListProtocolRunsRequest.filter_info)
}

// -------------------------------------------------------------------

// ListProtocolRunsResponse

// repeated string run_ids = 1;
inline int ListProtocolRunsResponse::_internal_run_ids_size() const {
  return run_ids_.size();
}
inline int ListProtocolRunsResponse::run_ids_size() const {
  return _internal_run_ids_size();
}
inline void ListProtocolRunsResponse::clear_run_ids() {
  run_ids_.Clear();
}
inline std::string* ListProtocolRunsResponse::add_run_ids() {
  std::string* _s = _internal_add_run_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
  return _s;
}
inline const std::string& ListProtocolRunsResponse::_internal_run_ids(int index) const {
  return run_ids_.Get(index);
}
inline const std::string& ListProtocolRunsResponse::run_ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
  return _internal_run_ids(index);
}
inline std::string* ListProtocolRunsResponse::mutable_run_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
  return run_ids_.Mutable(index);
}
inline void ListProtocolRunsResponse::set_run_ids(int index, const std::string& value) {
  run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::set_run_ids(int index, std::string&& value) {
  run_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::set_run_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::set_run_ids(int index, const char* value, size_t size) {
  run_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline std::string* ListProtocolRunsResponse::_internal_add_run_ids() {
  return run_ids_.Add();
}
inline void ListProtocolRunsResponse::add_run_ids(const std::string& value) {
  run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::add_run_ids(std::string&& value) {
  run_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::add_run_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline void ListProtocolRunsResponse::add_run_ids(const char* value, size_t size) {
  run_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListProtocolRunsResponse::run_ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
  return run_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListProtocolRunsResponse::mutable_run_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ListProtocolRunsResponse.run_ids)
  return &run_ids_;
}

// -------------------------------------------------------------------

// GetCurrentProtocolRunRequest

// -------------------------------------------------------------------

// GetCurrentProtocolRunResponse

// .minknow_api.protocol.ProtocolRunInfo run_info = 3;
inline bool GetCurrentProtocolRunResponse::_internal_has_run_info() const {
  return this != internal_default_instance() && run_info_ != nullptr;
}
inline bool GetCurrentProtocolRunResponse::has_run_info() const {
  return _internal_has_run_info();
}
inline void GetCurrentProtocolRunResponse::clear_run_info() {
  if (GetArenaForAllocation() == nullptr && run_info_ != nullptr) {
    delete run_info_;
  }
  run_info_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolRunInfo& GetCurrentProtocolRunResponse::_internal_run_info() const {
  const ::minknow_api::protocol::ProtocolRunInfo* p = run_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolRunInfo&>(
      ::minknow_api::protocol::_ProtocolRunInfo_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolRunInfo& GetCurrentProtocolRunResponse::run_info() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.GetCurrentProtocolRunResponse.run_info)
  return _internal_run_info();
}
inline void GetCurrentProtocolRunResponse::unsafe_arena_set_allocated_run_info(
    ::minknow_api::protocol::ProtocolRunInfo* run_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_info_);
  }
  run_info_ = run_info;
  if (run_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.GetCurrentProtocolRunResponse.run_info)
}
inline ::minknow_api::protocol::ProtocolRunInfo* GetCurrentProtocolRunResponse::release_run_info() {
  
  ::minknow_api::protocol::ProtocolRunInfo* temp = run_info_;
  run_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunInfo* GetCurrentProtocolRunResponse::unsafe_arena_release_run_info() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.GetCurrentProtocolRunResponse.run_info)
  
  ::minknow_api::protocol::ProtocolRunInfo* temp = run_info_;
  run_info_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolRunInfo* GetCurrentProtocolRunResponse::_internal_mutable_run_info() {
  
  if (run_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolRunInfo>(GetArenaForAllocation());
    run_info_ = p;
  }
  return run_info_;
}
inline ::minknow_api::protocol::ProtocolRunInfo* GetCurrentProtocolRunResponse::mutable_run_info() {
  ::minknow_api::protocol::ProtocolRunInfo* _msg = _internal_mutable_run_info();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.GetCurrentProtocolRunResponse.run_info)
  return _msg;
}
inline void GetCurrentProtocolRunResponse::set_allocated_run_info(::minknow_api::protocol::ProtocolRunInfo* run_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_info_;
  }
  if (run_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolRunInfo>::GetOwningArena(run_info);
    if (message_arena != submessage_arena) {
      run_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_info, submessage_arena);
    }
    
  } else {
    
  }
  run_info_ = run_info;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.GetCurrentProtocolRunResponse.run_info)
}

// -------------------------------------------------------------------

// WatchCurrentProtocolRunRequest

// -------------------------------------------------------------------

// GetContextInfoRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetContextInfoResponse

// map<string, string> context_info = 1;
inline int GetContextInfoResponse::_internal_context_info_size() const {
  return context_info_.size();
}
inline int GetContextInfoResponse::context_info_size() const {
  return _internal_context_info_size();
}
inline void GetContextInfoResponse::clear_context_info() {
  context_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetContextInfoResponse::_internal_context_info() const {
  return context_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetContextInfoResponse::context_info() const {
  // @@protoc_insertion_point(field_map:minknow_api.protocol.GetContextInfoResponse.context_info)
  return _internal_context_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetContextInfoResponse::_internal_mutable_context_info() {
  return context_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetContextInfoResponse::mutable_context_info() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.protocol.GetContextInfoResponse.context_info)
  return _internal_mutable_context_info();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetContextInfoRequest

// map<string, string> context_info = 1;
inline int SetContextInfoRequest::_internal_context_info_size() const {
  return context_info_.size();
}
inline int SetContextInfoRequest::context_info_size() const {
  return _internal_context_info_size();
}
inline void SetContextInfoRequest::clear_context_info() {
  context_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SetContextInfoRequest::_internal_context_info() const {
  return context_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SetContextInfoRequest::context_info() const {
  // @@protoc_insertion_point(field_map:minknow_api.protocol.SetContextInfoRequest.context_info)
  return _internal_context_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SetContextInfoRequest::_internal_mutable_context_info() {
  return context_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SetContextInfoRequest::mutable_context_info() {
  // @@protoc_insertion_point(field_mutable_map:minknow_api.protocol.SetContextInfoRequest.context_info)
  return _internal_mutable_context_info();
}

// -------------------------------------------------------------------

// SetContextInfoResponse

// -------------------------------------------------------------------

// GetProtocolPurposeRequest

// -------------------------------------------------------------------

// GetProtocolPurposeResponse

// string purpose = 1;
inline void GetProtocolPurposeResponse::clear_purpose() {
  purpose_.ClearToEmpty();
}
inline const std::string& GetProtocolPurposeResponse::purpose() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.GetProtocolPurposeResponse.purpose)
  return _internal_purpose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProtocolPurposeResponse::set_purpose(ArgT0&& arg0, ArgT... args) {
 
 purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.GetProtocolPurposeResponse.purpose)
}
inline std::string* GetProtocolPurposeResponse::mutable_purpose() {
  std::string* _s = _internal_mutable_purpose();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.GetProtocolPurposeResponse.purpose)
  return _s;
}
inline const std::string& GetProtocolPurposeResponse::_internal_purpose() const {
  return purpose_.Get();
}
inline void GetProtocolPurposeResponse::_internal_set_purpose(const std::string& value) {
  
  purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetProtocolPurposeResponse::_internal_mutable_purpose() {
  
  return purpose_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetProtocolPurposeResponse::release_purpose() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.GetProtocolPurposeResponse.purpose)
  return purpose_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetProtocolPurposeResponse::set_allocated_purpose(std::string* purpose) {
  if (purpose != nullptr) {
    
  } else {
    
  }
  purpose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purpose,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.GetProtocolPurposeResponse.purpose)
}

// -------------------------------------------------------------------

// SetProtocolPurposeRequest

// string purpose = 1;
inline void SetProtocolPurposeRequest::clear_purpose() {
  purpose_.ClearToEmpty();
}
inline const std::string& SetProtocolPurposeRequest::purpose() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.SetProtocolPurposeRequest.purpose)
  return _internal_purpose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetProtocolPurposeRequest::set_purpose(ArgT0&& arg0, ArgT... args) {
 
 purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.SetProtocolPurposeRequest.purpose)
}
inline std::string* SetProtocolPurposeRequest::mutable_purpose() {
  std::string* _s = _internal_mutable_purpose();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.SetProtocolPurposeRequest.purpose)
  return _s;
}
inline const std::string& SetProtocolPurposeRequest::_internal_purpose() const {
  return purpose_.Get();
}
inline void SetProtocolPurposeRequest::_internal_set_purpose(const std::string& value) {
  
  purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetProtocolPurposeRequest::_internal_mutable_purpose() {
  
  return purpose_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetProtocolPurposeRequest::release_purpose() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.SetProtocolPurposeRequest.purpose)
  return purpose_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetProtocolPurposeRequest::set_allocated_purpose(std::string* purpose) {
  if (purpose != nullptr) {
    
  } else {
    
  }
  purpose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purpose,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.SetProtocolPurposeRequest.purpose)
}

// -------------------------------------------------------------------

// SetProtocolPurposeResponse

// -------------------------------------------------------------------

// AddEpi2meWorkflowRequest

// string run_id = 1 [(.minknow_api.rpc_required) = true];
inline void AddEpi2meWorkflowRequest::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& AddEpi2meWorkflowRequest::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AddEpi2meWorkflowRequest.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddEpi2meWorkflowRequest::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.AddEpi2meWorkflowRequest.run_id)
}
inline std::string* AddEpi2meWorkflowRequest::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AddEpi2meWorkflowRequest.run_id)
  return _s;
}
inline const std::string& AddEpi2meWorkflowRequest::_internal_run_id() const {
  return run_id_.Get();
}
inline void AddEpi2meWorkflowRequest::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddEpi2meWorkflowRequest::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddEpi2meWorkflowRequest::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AddEpi2meWorkflowRequest.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddEpi2meWorkflowRequest::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AddEpi2meWorkflowRequest.run_id)
}

// .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflow = 2 [(.minknow_api.rpc_required) = true];
inline bool AddEpi2meWorkflowRequest::_internal_has_epi2me_workflow() const {
  return this != internal_default_instance() && epi2me_workflow_ != nullptr;
}
inline bool AddEpi2meWorkflowRequest::has_epi2me_workflow() const {
  return _internal_has_epi2me_workflow();
}
inline void AddEpi2meWorkflowRequest::clear_epi2me_workflow() {
  if (GetArenaForAllocation() == nullptr && epi2me_workflow_ != nullptr) {
    delete epi2me_workflow_;
  }
  epi2me_workflow_ = nullptr;
}
inline const ::minknow_api::protocol::Epi2meWorkflowReference& AddEpi2meWorkflowRequest::_internal_epi2me_workflow() const {
  const ::minknow_api::protocol::Epi2meWorkflowReference* p = epi2me_workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::Epi2meWorkflowReference&>(
      ::minknow_api::protocol::_Epi2meWorkflowReference_default_instance_);
}
inline const ::minknow_api::protocol::Epi2meWorkflowReference& AddEpi2meWorkflowRequest::epi2me_workflow() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow)
  return _internal_epi2me_workflow();
}
inline void AddEpi2meWorkflowRequest::unsafe_arena_set_allocated_epi2me_workflow(
    ::minknow_api::protocol::Epi2meWorkflowReference* epi2me_workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epi2me_workflow_);
  }
  epi2me_workflow_ = epi2me_workflow;
  if (epi2me_workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow)
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* AddEpi2meWorkflowRequest::release_epi2me_workflow() {
  
  ::minknow_api::protocol::Epi2meWorkflowReference* temp = epi2me_workflow_;
  epi2me_workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* AddEpi2meWorkflowRequest::unsafe_arena_release_epi2me_workflow() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow)
  
  ::minknow_api::protocol::Epi2meWorkflowReference* temp = epi2me_workflow_;
  epi2me_workflow_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* AddEpi2meWorkflowRequest::_internal_mutable_epi2me_workflow() {
  
  if (epi2me_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::Epi2meWorkflowReference>(GetArenaForAllocation());
    epi2me_workflow_ = p;
  }
  return epi2me_workflow_;
}
inline ::minknow_api::protocol::Epi2meWorkflowReference* AddEpi2meWorkflowRequest::mutable_epi2me_workflow() {
  ::minknow_api::protocol::Epi2meWorkflowReference* _msg = _internal_mutable_epi2me_workflow();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow)
  return _msg;
}
inline void AddEpi2meWorkflowRequest::set_allocated_epi2me_workflow(::minknow_api::protocol::Epi2meWorkflowReference* epi2me_workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete epi2me_workflow_;
  }
  if (epi2me_workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::Epi2meWorkflowReference>::GetOwningArena(epi2me_workflow);
    if (message_arena != submessage_arena) {
      epi2me_workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epi2me_workflow, submessage_arena);
    }
    
  } else {
    
  }
  epi2me_workflow_ = epi2me_workflow;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AddEpi2meWorkflowRequest.epi2me_workflow)
}

// -------------------------------------------------------------------

// AddEpi2meWorkflowResponse

// -------------------------------------------------------------------

// ListProtocolGroupIdsRequest

// -------------------------------------------------------------------

// ListProtocolGroupIdsResponse

// repeated string protocol_group_ids = 1;
inline int ListProtocolGroupIdsResponse::_internal_protocol_group_ids_size() const {
  return protocol_group_ids_.size();
}
inline int ListProtocolGroupIdsResponse::protocol_group_ids_size() const {
  return _internal_protocol_group_ids_size();
}
inline void ListProtocolGroupIdsResponse::clear_protocol_group_ids() {
  protocol_group_ids_.Clear();
}
inline std::string* ListProtocolGroupIdsResponse::add_protocol_group_ids() {
  std::string* _s = _internal_add_protocol_group_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
  return _s;
}
inline const std::string& ListProtocolGroupIdsResponse::_internal_protocol_group_ids(int index) const {
  return protocol_group_ids_.Get(index);
}
inline const std::string& ListProtocolGroupIdsResponse::protocol_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
  return _internal_protocol_group_ids(index);
}
inline std::string* ListProtocolGroupIdsResponse::mutable_protocol_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
  return protocol_group_ids_.Mutable(index);
}
inline void ListProtocolGroupIdsResponse::set_protocol_group_ids(int index, const std::string& value) {
  protocol_group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::set_protocol_group_ids(int index, std::string&& value) {
  protocol_group_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::set_protocol_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocol_group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::set_protocol_group_ids(int index, const char* value, size_t size) {
  protocol_group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline std::string* ListProtocolGroupIdsResponse::_internal_add_protocol_group_ids() {
  return protocol_group_ids_.Add();
}
inline void ListProtocolGroupIdsResponse::add_protocol_group_ids(const std::string& value) {
  protocol_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::add_protocol_group_ids(std::string&& value) {
  protocol_group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::add_protocol_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocol_group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline void ListProtocolGroupIdsResponse::add_protocol_group_ids(const char* value, size_t size) {
  protocol_group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListProtocolGroupIdsResponse::protocol_group_ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
  return protocol_group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListProtocolGroupIdsResponse::mutable_protocol_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids)
  return &protocol_group_ids_;
}

// -------------------------------------------------------------------

// BeginHardwareCheckRequest

// -------------------------------------------------------------------

// BeginHardwareCheckResponse

// string run_id = 1;
inline void BeginHardwareCheckResponse::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& BeginHardwareCheckResponse::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BeginHardwareCheckResponse.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BeginHardwareCheckResponse::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BeginHardwareCheckResponse.run_id)
}
inline std::string* BeginHardwareCheckResponse::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.BeginHardwareCheckResponse.run_id)
  return _s;
}
inline const std::string& BeginHardwareCheckResponse::_internal_run_id() const {
  return run_id_.Get();
}
inline void BeginHardwareCheckResponse::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BeginHardwareCheckResponse::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BeginHardwareCheckResponse::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.BeginHardwareCheckResponse.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BeginHardwareCheckResponse::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.BeginHardwareCheckResponse.run_id)
}

// -------------------------------------------------------------------

// BeginPlatformQcRequest

// -------------------------------------------------------------------

// BeginPlatformQcResponse

// string run_id = 1;
inline void BeginPlatformQcResponse::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& BeginPlatformQcResponse::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.BeginPlatformQcResponse.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BeginPlatformQcResponse::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.BeginPlatformQcResponse.run_id)
}
inline std::string* BeginPlatformQcResponse::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.BeginPlatformQcResponse.run_id)
  return _s;
}
inline const std::string& BeginPlatformQcResponse::_internal_run_id() const {
  return run_id_.Get();
}
inline void BeginPlatformQcResponse::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BeginPlatformQcResponse::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BeginPlatformQcResponse::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.BeginPlatformQcResponse.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BeginPlatformQcResponse::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.BeginPlatformQcResponse.run_id)
}

// -------------------------------------------------------------------

// SetPlatformQcResultRequest

// string protocol_run_id = 1;
inline void SetPlatformQcResultRequest::clear_protocol_run_id() {
  protocol_run_id_.ClearToEmpty();
}
inline const std::string& SetPlatformQcResultRequest::protocol_run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id)
  return _internal_protocol_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPlatformQcResultRequest::set_protocol_run_id(ArgT0&& arg0, ArgT... args) {
 
 protocol_run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id)
}
inline std::string* SetPlatformQcResultRequest::mutable_protocol_run_id() {
  std::string* _s = _internal_mutable_protocol_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id)
  return _s;
}
inline const std::string& SetPlatformQcResultRequest::_internal_protocol_run_id() const {
  return protocol_run_id_.Get();
}
inline void SetPlatformQcResultRequest::_internal_set_protocol_run_id(const std::string& value) {
  
  protocol_run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetPlatformQcResultRequest::_internal_mutable_protocol_run_id() {
  
  return protocol_run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetPlatformQcResultRequest::release_protocol_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id)
  return protocol_run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetPlatformQcResultRequest::set_allocated_protocol_run_id(std::string* protocol_run_id) {
  if (protocol_run_id != nullptr) {
    
  } else {
    
  }
  protocol_run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id)
}

// .minknow_api.protocol.PlatformQcResult pqc_result = 2;
inline bool SetPlatformQcResultRequest::_internal_has_pqc_result() const {
  return this != internal_default_instance() && pqc_result_ != nullptr;
}
inline bool SetPlatformQcResultRequest::has_pqc_result() const {
  return _internal_has_pqc_result();
}
inline void SetPlatformQcResultRequest::clear_pqc_result() {
  if (GetArenaForAllocation() == nullptr && pqc_result_ != nullptr) {
    delete pqc_result_;
  }
  pqc_result_ = nullptr;
}
inline const ::minknow_api::protocol::PlatformQcResult& SetPlatformQcResultRequest::_internal_pqc_result() const {
  const ::minknow_api::protocol::PlatformQcResult* p = pqc_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::PlatformQcResult&>(
      ::minknow_api::protocol::_PlatformQcResult_default_instance_);
}
inline const ::minknow_api::protocol::PlatformQcResult& SetPlatformQcResultRequest::pqc_result() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.SetPlatformQcResultRequest.pqc_result)
  return _internal_pqc_result();
}
inline void SetPlatformQcResultRequest::unsafe_arena_set_allocated_pqc_result(
    ::minknow_api::protocol::PlatformQcResult* pqc_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pqc_result_);
  }
  pqc_result_ = pqc_result;
  if (pqc_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.SetPlatformQcResultRequest.pqc_result)
}
inline ::minknow_api::protocol::PlatformQcResult* SetPlatformQcResultRequest::release_pqc_result() {
  
  ::minknow_api::protocol::PlatformQcResult* temp = pqc_result_;
  pqc_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::PlatformQcResult* SetPlatformQcResultRequest::unsafe_arena_release_pqc_result() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.SetPlatformQcResultRequest.pqc_result)
  
  ::minknow_api::protocol::PlatformQcResult* temp = pqc_result_;
  pqc_result_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::PlatformQcResult* SetPlatformQcResultRequest::_internal_mutable_pqc_result() {
  
  if (pqc_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::PlatformQcResult>(GetArenaForAllocation());
    pqc_result_ = p;
  }
  return pqc_result_;
}
inline ::minknow_api::protocol::PlatformQcResult* SetPlatformQcResultRequest::mutable_pqc_result() {
  ::minknow_api::protocol::PlatformQcResult* _msg = _internal_mutable_pqc_result();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.SetPlatformQcResultRequest.pqc_result)
  return _msg;
}
inline void SetPlatformQcResultRequest::set_allocated_pqc_result(::minknow_api::protocol::PlatformQcResult* pqc_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pqc_result_;
  }
  if (pqc_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::PlatformQcResult>::GetOwningArena(pqc_result);
    if (message_arena != submessage_arena) {
      pqc_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pqc_result, submessage_arena);
    }
    
  } else {
    
  }
  pqc_result_ = pqc_result;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.SetPlatformQcResultRequest.pqc_result)
}

// -------------------------------------------------------------------

// SetPlatformQcResultResponse

// -------------------------------------------------------------------

// ProtocolIdentifierComponents

// .minknow_api.protocol.ProtocolIdentifierComponents.Location location = 1;
inline void ProtocolIdentifierComponents::clear_location() {
  location_ = 0;
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::_internal_location() const {
  return static_cast< ::minknow_api::protocol::ProtocolIdentifierComponents_Location >(location_);
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::location() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolIdentifierComponents.location)
  return _internal_location();
}
inline void ProtocolIdentifierComponents::_internal_set_location(::minknow_api::protocol::ProtocolIdentifierComponents_Location value) {
  
  location_ = value;
}
inline void ProtocolIdentifierComponents::set_location(::minknow_api::protocol::ProtocolIdentifierComponents_Location value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolIdentifierComponents.location)
}

// string experiment_type = 2;
inline void ProtocolIdentifierComponents::clear_experiment_type() {
  experiment_type_.ClearToEmpty();
}
inline const std::string& ProtocolIdentifierComponents::experiment_type() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolIdentifierComponents.experiment_type)
  return _internal_experiment_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolIdentifierComponents::set_experiment_type(ArgT0&& arg0, ArgT... args) {
 
 experiment_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolIdentifierComponents.experiment_type)
}
inline std::string* ProtocolIdentifierComponents::mutable_experiment_type() {
  std::string* _s = _internal_mutable_experiment_type();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolIdentifierComponents.experiment_type)
  return _s;
}
inline const std::string& ProtocolIdentifierComponents::_internal_experiment_type() const {
  return experiment_type_.Get();
}
inline void ProtocolIdentifierComponents::_internal_set_experiment_type(const std::string& value) {
  
  experiment_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::_internal_mutable_experiment_type() {
  
  return experiment_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::release_experiment_type() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolIdentifierComponents.experiment_type)
  return experiment_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolIdentifierComponents::set_allocated_experiment_type(std::string* experiment_type) {
  if (experiment_type != nullptr) {
    
  } else {
    
  }
  experiment_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), experiment_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolIdentifierComponents.experiment_type)
}

// string name = 3;
inline void ProtocolIdentifierComponents::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProtocolIdentifierComponents::name() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolIdentifierComponents.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolIdentifierComponents::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolIdentifierComponents.name)
}
inline std::string* ProtocolIdentifierComponents::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolIdentifierComponents.name)
  return _s;
}
inline const std::string& ProtocolIdentifierComponents::_internal_name() const {
  return name_.Get();
}
inline void ProtocolIdentifierComponents::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::release_name() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolIdentifierComponents.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolIdentifierComponents::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolIdentifierComponents.name)
}

// string flow_cell_product_code = 4;
inline void ProtocolIdentifierComponents::clear_flow_cell_product_code() {
  flow_cell_product_code_.ClearToEmpty();
}
inline const std::string& ProtocolIdentifierComponents::flow_cell_product_code() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code)
  return _internal_flow_cell_product_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolIdentifierComponents::set_flow_cell_product_code(ArgT0&& arg0, ArgT... args) {
 
 flow_cell_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code)
}
inline std::string* ProtocolIdentifierComponents::mutable_flow_cell_product_code() {
  std::string* _s = _internal_mutable_flow_cell_product_code();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code)
  return _s;
}
inline const std::string& ProtocolIdentifierComponents::_internal_flow_cell_product_code() const {
  return flow_cell_product_code_.Get();
}
inline void ProtocolIdentifierComponents::_internal_set_flow_cell_product_code(const std::string& value) {
  
  flow_cell_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::_internal_mutable_flow_cell_product_code() {
  
  return flow_cell_product_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::release_flow_cell_product_code() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code)
  return flow_cell_product_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolIdentifierComponents::set_allocated_flow_cell_product_code(std::string* flow_cell_product_code) {
  if (flow_cell_product_code != nullptr) {
    
  } else {
    
  }
  flow_cell_product_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_cell_product_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code)
}

// string kit = 5;
inline void ProtocolIdentifierComponents::clear_kit() {
  kit_.ClearToEmpty();
}
inline const std::string& ProtocolIdentifierComponents::kit() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolIdentifierComponents.kit)
  return _internal_kit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProtocolIdentifierComponents::set_kit(ArgT0&& arg0, ArgT... args) {
 
 kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolIdentifierComponents.kit)
}
inline std::string* ProtocolIdentifierComponents::mutable_kit() {
  std::string* _s = _internal_mutable_kit();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolIdentifierComponents.kit)
  return _s;
}
inline const std::string& ProtocolIdentifierComponents::_internal_kit() const {
  return kit_.Get();
}
inline void ProtocolIdentifierComponents::_internal_set_kit(const std::string& value) {
  
  kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::_internal_mutable_kit() {
  
  return kit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProtocolIdentifierComponents::release_kit() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolIdentifierComponents.kit)
  return kit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProtocolIdentifierComponents::set_allocated_kit(std::string* kit) {
  if (kit != nullptr) {
    
  } else {
    
  }
  kit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kit,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolIdentifierComponents.kit)
}

// -------------------------------------------------------------------

// ListSettingsForProtocolRequest

// string identifier = 1;
inline bool ListSettingsForProtocolRequest::_internal_has_identifier() const {
  return protocol_identifier_case() == kIdentifier;
}
inline bool ListSettingsForProtocolRequest::has_identifier() const {
  return _internal_has_identifier();
}
inline void ListSettingsForProtocolRequest::set_has_identifier() {
  _oneof_case_[0] = kIdentifier;
}
inline void ListSettingsForProtocolRequest::clear_identifier() {
  if (_internal_has_identifier()) {
    protocol_identifier_.identifier_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_protocol_identifier();
  }
}
inline const std::string& ListSettingsForProtocolRequest::identifier() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolRequest.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline void ListSettingsForProtocolRequest::set_identifier(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_identifier()) {
    clear_protocol_identifier();
    set_has_identifier();
    protocol_identifier_.identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  protocol_identifier_.identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ListSettingsForProtocolRequest.identifier)
}
inline std::string* ListSettingsForProtocolRequest::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolRequest.identifier)
  return _s;
}
inline const std::string& ListSettingsForProtocolRequest::_internal_identifier() const {
  if (_internal_has_identifier()) {
    return protocol_identifier_.identifier_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ListSettingsForProtocolRequest::_internal_set_identifier(const std::string& value) {
  if (!_internal_has_identifier()) {
    clear_protocol_identifier();
    set_has_identifier();
    protocol_identifier_.identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  protocol_identifier_.identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSettingsForProtocolRequest::_internal_mutable_identifier() {
  if (!_internal_has_identifier()) {
    clear_protocol_identifier();
    set_has_identifier();
    protocol_identifier_.identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return protocol_identifier_.identifier_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSettingsForProtocolRequest::release_identifier() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolRequest.identifier)
  if (_internal_has_identifier()) {
    clear_has_protocol_identifier();
    return protocol_identifier_.identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ListSettingsForProtocolRequest::set_allocated_identifier(std::string* identifier) {
  if (has_protocol_identifier()) {
    clear_protocol_identifier();
  }
  if (identifier != nullptr) {
    set_has_identifier();
    protocol_identifier_.identifier_.UnsafeSetDefault(identifier);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(identifier);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolRequest.identifier)
}

// .minknow_api.protocol.ProtocolIdentifierComponents components = 2;
inline bool ListSettingsForProtocolRequest::_internal_has_components() const {
  return protocol_identifier_case() == kComponents;
}
inline bool ListSettingsForProtocolRequest::has_components() const {
  return _internal_has_components();
}
inline void ListSettingsForProtocolRequest::set_has_components() {
  _oneof_case_[0] = kComponents;
}
inline void ListSettingsForProtocolRequest::clear_components() {
  if (_internal_has_components()) {
    if (GetArenaForAllocation() == nullptr) {
      delete protocol_identifier_.components_;
    }
    clear_has_protocol_identifier();
  }
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolRequest::release_components() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolRequest.components)
  if (_internal_has_components()) {
    clear_has_protocol_identifier();
      ::minknow_api::protocol::ProtocolIdentifierComponents* temp = protocol_identifier_.components_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_identifier_.components_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minknow_api::protocol::ProtocolIdentifierComponents& ListSettingsForProtocolRequest::_internal_components() const {
  return _internal_has_components()
      ? *protocol_identifier_.components_
      : reinterpret_cast< ::minknow_api::protocol::ProtocolIdentifierComponents&>(::minknow_api::protocol::_ProtocolIdentifierComponents_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolIdentifierComponents& ListSettingsForProtocolRequest::components() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolRequest.components)
  return _internal_components();
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolRequest::unsafe_arena_release_components() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minknow_api.protocol.ListSettingsForProtocolRequest.components)
  if (_internal_has_components()) {
    clear_has_protocol_identifier();
    ::minknow_api::protocol::ProtocolIdentifierComponents* temp = protocol_identifier_.components_;
    protocol_identifier_.components_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListSettingsForProtocolRequest::unsafe_arena_set_allocated_components(::minknow_api::protocol::ProtocolIdentifierComponents* components) {
  clear_protocol_identifier();
  if (components) {
    set_has_components();
    protocol_identifier_.components_ = components;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolRequest.components)
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolRequest::_internal_mutable_components() {
  if (!_internal_has_components()) {
    clear_protocol_identifier();
    set_has_components();
    protocol_identifier_.components_ = CreateMaybeMessage< ::minknow_api::protocol::ProtocolIdentifierComponents >(GetArenaForAllocation());
  }
  return protocol_identifier_.components_;
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolRequest::mutable_components() {
  ::minknow_api::protocol::ProtocolIdentifierComponents* _msg = _internal_mutable_components();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolRequest.components)
  return _msg;
}

inline bool ListSettingsForProtocolRequest::has_protocol_identifier() const {
  return protocol_identifier_case() != PROTOCOL_IDENTIFIER_NOT_SET;
}
inline void ListSettingsForProtocolRequest::clear_has_protocol_identifier() {
  _oneof_case_[0] = PROTOCOL_IDENTIFIER_NOT_SET;
}
inline ListSettingsForProtocolRequest::ProtocolIdentifierCase ListSettingsForProtocolRequest::protocol_identifier_case() const {
  return ListSettingsForProtocolRequest::ProtocolIdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListSettingsForProtocolResponse_RunOptions

// .minknow_api.protocol_settings.ProtocolSetting run_length = 1;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_run_length() const {
  return this != internal_default_instance() && run_length_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_run_length() const {
  return _internal_has_run_length();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_run_length() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = run_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::run_length() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length)
  return _internal_run_length();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_run_length(
    ::minknow_api::protocol_settings::ProtocolSetting* run_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_length_);
  }
  run_length_ = run_length;
  if (run_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_run_length() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = run_length_;
  run_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_run_length() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = run_length_;
  run_length_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_run_length() {
  
  if (run_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    run_length_ = p;
  }
  return run_length_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_run_length() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_run_length();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_run_length(::minknow_api::protocol_settings::ProtocolSetting* run_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_length_);
  }
  if (run_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_length));
    if (message_arena != submessage_arena) {
      run_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_length, submessage_arena);
    }
    
  } else {
    
  }
  run_length_ = run_length;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.run_length)
}

// .minknow_api.protocol_settings.ProtocolSetting bias_voltage = 2;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_bias_voltage() const {
  return this != internal_default_instance() && bias_voltage_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_bias_voltage() const {
  return _internal_has_bias_voltage();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_bias_voltage() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bias_voltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::bias_voltage() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage)
  return _internal_bias_voltage();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_bias_voltage(
    ::minknow_api::protocol_settings::ProtocolSetting* bias_voltage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_voltage_);
  }
  bias_voltage_ = bias_voltage;
  if (bias_voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_bias_voltage() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bias_voltage_;
  bias_voltage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_bias_voltage() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bias_voltage_;
  bias_voltage_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_bias_voltage() {
  
  if (bias_voltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bias_voltage_ = p;
  }
  return bias_voltage_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_bias_voltage() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bias_voltage();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_bias_voltage(::minknow_api::protocol_settings::ProtocolSetting* bias_voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_voltage_);
  }
  if (bias_voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bias_voltage));
    if (message_arena != submessage_arena) {
      bias_voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_voltage, submessage_arena);
    }
    
  } else {
    
  }
  bias_voltage_ = bias_voltage;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.bias_voltage)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_enabled = 3;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_enabled() const {
  return this != internal_default_instance() && read_until_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_enabled() const {
  return _internal_has_read_until_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled)
  return _internal_read_until_enabled();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enabled_);
  }
  read_until_enabled_ = read_until_enabled;
  if (read_until_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_enabled_;
  read_until_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_enabled_;
  read_until_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_enabled() {
  
  if (read_until_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_enabled_ = p;
  }
  return read_until_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_until_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enabled_);
  }
  if (read_until_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enabled));
    if (message_arena != submessage_arena) {
      read_until_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_enabled, submessage_arena);
    }
    
  } else {
    
  }
  read_until_enabled_ = read_until_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_ref_file = 4;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_ref_file() const {
  return this != internal_default_instance() && read_until_ref_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_ref_file() const {
  return _internal_has_read_until_ref_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_ref_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_ref_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_ref_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file)
  return _internal_read_until_ref_file();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_ref_file(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_ref_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_ref_file_);
  }
  read_until_ref_file_ = read_until_ref_file;
  if (read_until_ref_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_ref_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_ref_file_;
  read_until_ref_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_ref_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_ref_file_;
  read_until_ref_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_ref_file() {
  
  if (read_until_ref_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_ref_file_ = p;
  }
  return read_until_ref_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_ref_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_ref_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_ref_file(::minknow_api::protocol_settings::ProtocolSetting* read_until_ref_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_ref_file_);
  }
  if (read_until_ref_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_ref_file));
    if (message_arena != submessage_arena) {
      read_until_ref_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_ref_file, submessage_arena);
    }
    
  } else {
    
  }
  read_until_ref_file_ = read_until_ref_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_ref_file)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_channels = 5;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_channels() const {
  return this != internal_default_instance() && read_until_channels_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_channels() const {
  return _internal_has_read_until_channels();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_channels() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_channels_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_channels() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels)
  return _internal_read_until_channels();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_channels(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_channels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_channels_);
  }
  read_until_channels_ = read_until_channels;
  if (read_until_channels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_channels() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_channels_;
  read_until_channels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_channels() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_channels_;
  read_until_channels_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_channels() {
  
  if (read_until_channels_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_channels_ = p;
  }
  return read_until_channels_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_channels() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_channels();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_channels(::minknow_api::protocol_settings::ProtocolSetting* read_until_channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_channels_);
  }
  if (read_until_channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_channels));
    if (message_arena != submessage_arena) {
      read_until_channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_channels, submessage_arena);
    }
    
  } else {
    
  }
  read_until_channels_ = read_until_channels;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_channels)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_bed_file_enabled() const {
  return this != internal_default_instance() && read_until_bed_file_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_bed_file_enabled() const {
  return _internal_has_read_until_bed_file_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_bed_file_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_bed_file_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_bed_file_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled)
  return _internal_read_until_bed_file_enabled();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_bed_file_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file_enabled_);
  }
  read_until_bed_file_enabled_ = read_until_bed_file_enabled;
  if (read_until_bed_file_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_bed_file_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_bed_file_enabled_;
  read_until_bed_file_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_bed_file_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_bed_file_enabled_;
  read_until_bed_file_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_bed_file_enabled() {
  
  if (read_until_bed_file_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_bed_file_enabled_ = p;
  }
  return read_until_bed_file_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_bed_file_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_bed_file_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_bed_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file_enabled_);
  }
  if (read_until_bed_file_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file_enabled));
    if (message_arena != submessage_arena) {
      read_until_bed_file_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_bed_file_enabled, submessage_arena);
    }
    
  } else {
    
  }
  read_until_bed_file_enabled_ = read_until_bed_file_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file = 7;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_bed_file() const {
  return this != internal_default_instance() && read_until_bed_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_bed_file() const {
  return _internal_has_read_until_bed_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_bed_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_bed_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_bed_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file)
  return _internal_read_until_bed_file();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_bed_file(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file_);
  }
  read_until_bed_file_ = read_until_bed_file;
  if (read_until_bed_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_bed_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_bed_file_;
  read_until_bed_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_bed_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_bed_file_;
  read_until_bed_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_bed_file() {
  
  if (read_until_bed_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_bed_file_ = p;
  }
  return read_until_bed_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_bed_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_bed_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_bed_file(::minknow_api::protocol_settings::ProtocolSetting* read_until_bed_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file_);
  }
  if (read_until_bed_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_bed_file));
    if (message_arena != submessage_arena) {
      read_until_bed_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_bed_file, submessage_arena);
    }
    
  } else {
    
  }
  read_until_bed_file_ = read_until_bed_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_bed_file)
}

// .minknow_api.protocol_settings.ProtocolSetting read_until_enrichment = 8;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_read_until_enrichment() const {
  return this != internal_default_instance() && read_until_enrichment_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_read_until_enrichment() const {
  return _internal_has_read_until_enrichment();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_read_until_enrichment() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_until_enrichment_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::read_until_enrichment() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment)
  return _internal_read_until_enrichment();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_read_until_enrichment(
    ::minknow_api::protocol_settings::ProtocolSetting* read_until_enrichment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enrichment_);
  }
  read_until_enrichment_ = read_until_enrichment;
  if (read_until_enrichment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_read_until_enrichment() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_enrichment_;
  read_until_enrichment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_read_until_enrichment() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_until_enrichment_;
  read_until_enrichment_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_read_until_enrichment() {
  
  if (read_until_enrichment_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_until_enrichment_ = p;
  }
  return read_until_enrichment_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_read_until_enrichment() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_until_enrichment();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_read_until_enrichment(::minknow_api::protocol_settings::ProtocolSetting* read_until_enrichment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enrichment_);
  }
  if (read_until_enrichment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_until_enrichment));
    if (message_arena != submessage_arena) {
      read_until_enrichment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_until_enrichment, submessage_arena);
    }
    
  } else {
    
  }
  read_until_enrichment_ = read_until_enrichment;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.read_until_enrichment)
}

// .minknow_api.protocol_settings.ProtocolSetting active_channel_selection = 9;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_active_channel_selection() const {
  return this != internal_default_instance() && active_channel_selection_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_active_channel_selection() const {
  return _internal_has_active_channel_selection();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_active_channel_selection() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = active_channel_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::active_channel_selection() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection)
  return _internal_active_channel_selection();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_active_channel_selection(
    ::minknow_api::protocol_settings::ProtocolSetting* active_channel_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_channel_selection_);
  }
  active_channel_selection_ = active_channel_selection;
  if (active_channel_selection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_active_channel_selection() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = active_channel_selection_;
  active_channel_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_active_channel_selection() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = active_channel_selection_;
  active_channel_selection_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_active_channel_selection() {
  
  if (active_channel_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    active_channel_selection_ = p;
  }
  return active_channel_selection_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_active_channel_selection() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_active_channel_selection();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_active_channel_selection(::minknow_api::protocol_settings::ProtocolSetting* active_channel_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_channel_selection_);
  }
  if (active_channel_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_channel_selection));
    if (message_arena != submessage_arena) {
      active_channel_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_channel_selection, submessage_arena);
    }
    
  } else {
    
  }
  active_channel_selection_ = active_channel_selection;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.active_channel_selection)
}

// .minknow_api.protocol_settings.ProtocolSetting mux_scan_period = 10;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_mux_scan_period() const {
  return this != internal_default_instance() && mux_scan_period_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_mux_scan_period() const {
  return _internal_has_mux_scan_period();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_mux_scan_period() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = mux_scan_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::mux_scan_period() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period)
  return _internal_mux_scan_period();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_mux_scan_period(
    ::minknow_api::protocol_settings::ProtocolSetting* mux_scan_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mux_scan_period_);
  }
  mux_scan_period_ = mux_scan_period;
  if (mux_scan_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_mux_scan_period() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = mux_scan_period_;
  mux_scan_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_mux_scan_period() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = mux_scan_period_;
  mux_scan_period_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_mux_scan_period() {
  
  if (mux_scan_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    mux_scan_period_ = p;
  }
  return mux_scan_period_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_mux_scan_period() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_mux_scan_period();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_mux_scan_period(::minknow_api::protocol_settings::ProtocolSetting* mux_scan_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mux_scan_period_);
  }
  if (mux_scan_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mux_scan_period));
    if (message_arena != submessage_arena) {
      mux_scan_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mux_scan_period, submessage_arena);
    }
    
  } else {
    
  }
  mux_scan_period_ = mux_scan_period;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.mux_scan_period)
}

// .minknow_api.protocol_settings.ProtocolSetting group_change_period = 11;
inline bool ListSettingsForProtocolResponse_RunOptions::_internal_has_group_change_period() const {
  return this != internal_default_instance() && group_change_period_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_RunOptions::has_group_change_period() const {
  return _internal_has_group_change_period();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::_internal_group_change_period() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = group_change_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_RunOptions::group_change_period() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period)
  return _internal_group_change_period();
}
inline void ListSettingsForProtocolResponse_RunOptions::unsafe_arena_set_allocated_group_change_period(
    ::minknow_api::protocol_settings::ProtocolSetting* group_change_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_change_period_);
  }
  group_change_period_ = group_change_period;
  if (group_change_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::release_group_change_period() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = group_change_period_;
  group_change_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::unsafe_arena_release_group_change_period() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = group_change_period_;
  group_change_period_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::_internal_mutable_group_change_period() {
  
  if (group_change_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    group_change_period_ = p;
  }
  return group_change_period_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_RunOptions::mutable_group_change_period() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_group_change_period();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period)
  return _msg;
}
inline void ListSettingsForProtocolResponse_RunOptions::set_allocated_group_change_period(::minknow_api::protocol_settings::ProtocolSetting* group_change_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_change_period_);
  }
  if (group_change_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_change_period));
    if (message_arena != submessage_arena) {
      group_change_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_change_period, submessage_arena);
    }
    
  } else {
    
  }
  group_change_period_ = group_change_period;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions.group_change_period)
}

// -------------------------------------------------------------------

// ListSettingsForProtocolResponse_Basecalling

// .minknow_api.protocol_settings.ProtocolSetting basecalling_enabled = 1;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_basecalling_enabled() const {
  return this != internal_default_instance() && basecalling_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_basecalling_enabled() const {
  return _internal_has_basecalling_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_basecalling_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = basecalling_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::basecalling_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled)
  return _internal_basecalling_enabled();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_basecalling_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* basecalling_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecalling_enabled_);
  }
  basecalling_enabled_ = basecalling_enabled;
  if (basecalling_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_basecalling_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = basecalling_enabled_;
  basecalling_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_basecalling_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = basecalling_enabled_;
  basecalling_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_basecalling_enabled() {
  
  if (basecalling_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    basecalling_enabled_ = p;
  }
  return basecalling_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_basecalling_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_basecalling_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_basecalling_enabled(::minknow_api::protocol_settings::ProtocolSetting* basecalling_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecalling_enabled_);
  }
  if (basecalling_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecalling_enabled));
    if (message_arena != submessage_arena) {
      basecalling_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecalling_enabled, submessage_arena);
    }
    
  } else {
    
  }
  basecalling_enabled_ = basecalling_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecalling_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting barcoding_enabled = 2;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_barcoding_enabled() const {
  return this != internal_default_instance() && barcoding_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_barcoding_enabled() const {
  return _internal_has_barcoding_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_barcoding_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = barcoding_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::barcoding_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled)
  return _internal_barcoding_enabled();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_barcoding_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* barcoding_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_enabled_);
  }
  barcoding_enabled_ = barcoding_enabled;
  if (barcoding_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_barcoding_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = barcoding_enabled_;
  barcoding_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_barcoding_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = barcoding_enabled_;
  barcoding_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_barcoding_enabled() {
  
  if (barcoding_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    barcoding_enabled_ = p;
  }
  return barcoding_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_barcoding_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_barcoding_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_barcoding_enabled(::minknow_api::protocol_settings::ProtocolSetting* barcoding_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_enabled_);
  }
  if (barcoding_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(barcoding_enabled));
    if (message_arena != submessage_arena) {
      barcoding_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, barcoding_enabled, submessage_arena);
    }
    
  } else {
    
  }
  barcoding_enabled_ = barcoding_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.barcoding_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting basecall_model = 3;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_basecall_model() const {
  return this != internal_default_instance() && basecall_model_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_basecall_model() const {
  return _internal_has_basecall_model();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_basecall_model() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = basecall_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::basecall_model() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model)
  return _internal_basecall_model();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_basecall_model(
    ::minknow_api::protocol_settings::ProtocolSetting* basecall_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecall_model_);
  }
  basecall_model_ = basecall_model;
  if (basecall_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_basecall_model() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = basecall_model_;
  basecall_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_basecall_model() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = basecall_model_;
  basecall_model_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_basecall_model() {
  
  if (basecall_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    basecall_model_ = p;
  }
  return basecall_model_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_basecall_model() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_basecall_model();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_basecall_model(::minknow_api::protocol_settings::ProtocolSetting* basecall_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecall_model_);
  }
  if (basecall_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecall_model));
    if (message_arena != submessage_arena) {
      basecall_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecall_model, submessage_arena);
    }
    
  } else {
    
  }
  basecall_model_ = basecall_model;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.basecall_model)
}

// .minknow_api.protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_trim_barcodes_enabled() const {
  return this != internal_default_instance() && trim_barcodes_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_trim_barcodes_enabled() const {
  return _internal_has_trim_barcodes_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_trim_barcodes_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = trim_barcodes_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::trim_barcodes_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled)
  return _internal_trim_barcodes_enabled();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_trim_barcodes_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* trim_barcodes_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trim_barcodes_enabled_);
  }
  trim_barcodes_enabled_ = trim_barcodes_enabled;
  if (trim_barcodes_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_trim_barcodes_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = trim_barcodes_enabled_;
  trim_barcodes_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_trim_barcodes_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = trim_barcodes_enabled_;
  trim_barcodes_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_trim_barcodes_enabled() {
  
  if (trim_barcodes_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    trim_barcodes_enabled_ = p;
  }
  return trim_barcodes_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_trim_barcodes_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_trim_barcodes_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_trim_barcodes_enabled(::minknow_api::protocol_settings::ProtocolSetting* trim_barcodes_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trim_barcodes_enabled_);
  }
  if (trim_barcodes_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trim_barcodes_enabled));
    if (message_arena != submessage_arena) {
      trim_barcodes_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trim_barcodes_enabled, submessage_arena);
    }
    
  } else {
    
  }
  trim_barcodes_enabled_ = trim_barcodes_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.trim_barcodes_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_require_barcodes_both_ends() const {
  return this != internal_default_instance() && require_barcodes_both_ends_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_require_barcodes_both_ends() const {
  return _internal_has_require_barcodes_both_ends();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_require_barcodes_both_ends() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = require_barcodes_both_ends_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::require_barcodes_both_ends() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends)
  return _internal_require_barcodes_both_ends();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_require_barcodes_both_ends(
    ::minknow_api::protocol_settings::ProtocolSetting* require_barcodes_both_ends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_barcodes_both_ends_);
  }
  require_barcodes_both_ends_ = require_barcodes_both_ends;
  if (require_barcodes_both_ends) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_require_barcodes_both_ends() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = require_barcodes_both_ends_;
  require_barcodes_both_ends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_require_barcodes_both_ends() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = require_barcodes_both_ends_;
  require_barcodes_both_ends_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_require_barcodes_both_ends() {
  
  if (require_barcodes_both_ends_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    require_barcodes_both_ends_ = p;
  }
  return require_barcodes_both_ends_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_require_barcodes_both_ends() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_require_barcodes_both_ends();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_require_barcodes_both_ends(::minknow_api::protocol_settings::ProtocolSetting* require_barcodes_both_ends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_barcodes_both_ends_);
  }
  if (require_barcodes_both_ends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_barcodes_both_ends));
    if (message_arena != submessage_arena) {
      require_barcodes_both_ends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, require_barcodes_both_ends, submessage_arena);
    }
    
  } else {
    
  }
  require_barcodes_both_ends_ = require_barcodes_both_ends;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.require_barcodes_both_ends)
}

// .minknow_api.protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_detect_mid_strand_barcodes() const {
  return this != internal_default_instance() && detect_mid_strand_barcodes_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_detect_mid_strand_barcodes() const {
  return _internal_has_detect_mid_strand_barcodes();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_detect_mid_strand_barcodes() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = detect_mid_strand_barcodes_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::detect_mid_strand_barcodes() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes)
  return _internal_detect_mid_strand_barcodes();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_detect_mid_strand_barcodes(
    ::minknow_api::protocol_settings::ProtocolSetting* detect_mid_strand_barcodes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detect_mid_strand_barcodes_);
  }
  detect_mid_strand_barcodes_ = detect_mid_strand_barcodes;
  if (detect_mid_strand_barcodes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_detect_mid_strand_barcodes() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = detect_mid_strand_barcodes_;
  detect_mid_strand_barcodes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_detect_mid_strand_barcodes() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = detect_mid_strand_barcodes_;
  detect_mid_strand_barcodes_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_detect_mid_strand_barcodes() {
  
  if (detect_mid_strand_barcodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    detect_mid_strand_barcodes_ = p;
  }
  return detect_mid_strand_barcodes_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_detect_mid_strand_barcodes() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_detect_mid_strand_barcodes();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_detect_mid_strand_barcodes(::minknow_api::protocol_settings::ProtocolSetting* detect_mid_strand_barcodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detect_mid_strand_barcodes_);
  }
  if (detect_mid_strand_barcodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detect_mid_strand_barcodes));
    if (message_arena != submessage_arena) {
      detect_mid_strand_barcodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detect_mid_strand_barcodes, submessage_arena);
    }
    
  } else {
    
  }
  detect_mid_strand_barcodes_ = detect_mid_strand_barcodes;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.detect_mid_strand_barcodes)
}

// .minknow_api.protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_override_mid_barcoding_score() const {
  return this != internal_default_instance() && override_mid_barcoding_score_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_override_mid_barcoding_score() const {
  return _internal_has_override_mid_barcoding_score();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_override_mid_barcoding_score() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = override_mid_barcoding_score_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::override_mid_barcoding_score() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score)
  return _internal_override_mid_barcoding_score();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_override_mid_barcoding_score(
    ::minknow_api::protocol_settings::ProtocolSetting* override_mid_barcoding_score) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_mid_barcoding_score_);
  }
  override_mid_barcoding_score_ = override_mid_barcoding_score;
  if (override_mid_barcoding_score) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_override_mid_barcoding_score() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = override_mid_barcoding_score_;
  override_mid_barcoding_score_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_override_mid_barcoding_score() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = override_mid_barcoding_score_;
  override_mid_barcoding_score_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_override_mid_barcoding_score() {
  
  if (override_mid_barcoding_score_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    override_mid_barcoding_score_ = p;
  }
  return override_mid_barcoding_score_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_override_mid_barcoding_score() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_override_mid_barcoding_score();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_override_mid_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* override_mid_barcoding_score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_mid_barcoding_score_);
  }
  if (override_mid_barcoding_score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_mid_barcoding_score));
    if (message_arena != submessage_arena) {
      override_mid_barcoding_score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override_mid_barcoding_score, submessage_arena);
    }
    
  } else {
    
  }
  override_mid_barcoding_score_ = override_mid_barcoding_score;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_mid_barcoding_score)
}

// .minknow_api.protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_override_rear_barcoding_score() const {
  return this != internal_default_instance() && override_rear_barcoding_score_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_override_rear_barcoding_score() const {
  return _internal_has_override_rear_barcoding_score();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_override_rear_barcoding_score() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = override_rear_barcoding_score_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::override_rear_barcoding_score() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score)
  return _internal_override_rear_barcoding_score();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_override_rear_barcoding_score(
    ::minknow_api::protocol_settings::ProtocolSetting* override_rear_barcoding_score) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_rear_barcoding_score_);
  }
  override_rear_barcoding_score_ = override_rear_barcoding_score;
  if (override_rear_barcoding_score) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_override_rear_barcoding_score() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = override_rear_barcoding_score_;
  override_rear_barcoding_score_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_override_rear_barcoding_score() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = override_rear_barcoding_score_;
  override_rear_barcoding_score_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_override_rear_barcoding_score() {
  
  if (override_rear_barcoding_score_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    override_rear_barcoding_score_ = p;
  }
  return override_rear_barcoding_score_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_override_rear_barcoding_score() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_override_rear_barcoding_score();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_override_rear_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* override_rear_barcoding_score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_rear_barcoding_score_);
  }
  if (override_rear_barcoding_score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_rear_barcoding_score));
    if (message_arena != submessage_arena) {
      override_rear_barcoding_score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override_rear_barcoding_score, submessage_arena);
    }
    
  } else {
    
  }
  override_rear_barcoding_score_ = override_rear_barcoding_score;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.override_rear_barcoding_score)
}

// .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score = 9;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_min_barcoding_score() const {
  return this != internal_default_instance() && min_barcoding_score_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_min_barcoding_score() const {
  return _internal_has_min_barcoding_score();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_min_barcoding_score() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = min_barcoding_score_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::min_barcoding_score() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score)
  return _internal_min_barcoding_score();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_min_barcoding_score(
    ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_);
  }
  min_barcoding_score_ = min_barcoding_score;
  if (min_barcoding_score) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_min_barcoding_score() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_;
  min_barcoding_score_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_min_barcoding_score() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_;
  min_barcoding_score_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_min_barcoding_score() {
  
  if (min_barcoding_score_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    min_barcoding_score_ = p;
  }
  return min_barcoding_score_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_min_barcoding_score() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_min_barcoding_score();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_min_barcoding_score(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_);
  }
  if (min_barcoding_score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score));
    if (message_arena != submessage_arena) {
      min_barcoding_score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_barcoding_score, submessage_arena);
    }
    
  } else {
    
  }
  min_barcoding_score_ = min_barcoding_score;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score)
}

// .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_min_barcoding_score_rear() const {
  return this != internal_default_instance() && min_barcoding_score_rear_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_min_barcoding_score_rear() const {
  return _internal_has_min_barcoding_score_rear();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_min_barcoding_score_rear() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = min_barcoding_score_rear_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::min_barcoding_score_rear() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear)
  return _internal_min_barcoding_score_rear();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_min_barcoding_score_rear(
    ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_rear) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_rear_);
  }
  min_barcoding_score_rear_ = min_barcoding_score_rear;
  if (min_barcoding_score_rear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_min_barcoding_score_rear() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_rear_;
  min_barcoding_score_rear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_min_barcoding_score_rear() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_rear_;
  min_barcoding_score_rear_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_min_barcoding_score_rear() {
  
  if (min_barcoding_score_rear_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    min_barcoding_score_rear_ = p;
  }
  return min_barcoding_score_rear_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_min_barcoding_score_rear() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_min_barcoding_score_rear();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_min_barcoding_score_rear(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_rear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_rear_);
  }
  if (min_barcoding_score_rear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_rear));
    if (message_arena != submessage_arena) {
      min_barcoding_score_rear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_barcoding_score_rear, submessage_arena);
    }
    
  } else {
    
  }
  min_barcoding_score_rear_ = min_barcoding_score_rear;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_rear)
}

// .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_min_barcoding_score_mid() const {
  return this != internal_default_instance() && min_barcoding_score_mid_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_min_barcoding_score_mid() const {
  return _internal_has_min_barcoding_score_mid();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_min_barcoding_score_mid() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = min_barcoding_score_mid_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::min_barcoding_score_mid() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid)
  return _internal_min_barcoding_score_mid();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_min_barcoding_score_mid(
    ::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_mid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_mid_);
  }
  min_barcoding_score_mid_ = min_barcoding_score_mid;
  if (min_barcoding_score_mid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_min_barcoding_score_mid() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_mid_;
  min_barcoding_score_mid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_min_barcoding_score_mid() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = min_barcoding_score_mid_;
  min_barcoding_score_mid_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_min_barcoding_score_mid() {
  
  if (min_barcoding_score_mid_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    min_barcoding_score_mid_ = p;
  }
  return min_barcoding_score_mid_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_min_barcoding_score_mid() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_min_barcoding_score_mid();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_min_barcoding_score_mid(::minknow_api::protocol_settings::ProtocolSetting* min_barcoding_score_mid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_mid_);
  }
  if (min_barcoding_score_mid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_barcoding_score_mid));
    if (message_arena != submessage_arena) {
      min_barcoding_score_mid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_barcoding_score_mid, submessage_arena);
    }
    
  } else {
    
  }
  min_barcoding_score_mid_ = min_barcoding_score_mid;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.min_barcoding_score_mid)
}

// .minknow_api.protocol_settings.ProtocolSetting alignment_enabled = 12;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_alignment_enabled() const {
  return this != internal_default_instance() && alignment_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_alignment_enabled() const {
  return _internal_has_alignment_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_alignment_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = alignment_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::alignment_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled)
  return _internal_alignment_enabled();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_alignment_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* alignment_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_enabled_);
  }
  alignment_enabled_ = alignment_enabled;
  if (alignment_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_alignment_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_enabled_;
  alignment_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_alignment_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_enabled_;
  alignment_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_alignment_enabled() {
  
  if (alignment_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    alignment_enabled_ = p;
  }
  return alignment_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_alignment_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_alignment_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_alignment_enabled(::minknow_api::protocol_settings::ProtocolSetting* alignment_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_enabled_);
  }
  if (alignment_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_enabled));
    if (message_arena != submessage_arena) {
      alignment_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_enabled, submessage_arena);
    }
    
  } else {
    
  }
  alignment_enabled_ = alignment_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting alignment_ref_file = 13;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_alignment_ref_file() const {
  return this != internal_default_instance() && alignment_ref_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_alignment_ref_file() const {
  return _internal_has_alignment_ref_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_alignment_ref_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = alignment_ref_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::alignment_ref_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file)
  return _internal_alignment_ref_file();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_alignment_ref_file(
    ::minknow_api::protocol_settings::ProtocolSetting* alignment_ref_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_ref_file_);
  }
  alignment_ref_file_ = alignment_ref_file;
  if (alignment_ref_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_alignment_ref_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_ref_file_;
  alignment_ref_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_alignment_ref_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_ref_file_;
  alignment_ref_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_alignment_ref_file() {
  
  if (alignment_ref_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    alignment_ref_file_ = p;
  }
  return alignment_ref_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_alignment_ref_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_alignment_ref_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_alignment_ref_file(::minknow_api::protocol_settings::ProtocolSetting* alignment_ref_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_ref_file_);
  }
  if (alignment_ref_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_ref_file));
    if (message_arena != submessage_arena) {
      alignment_ref_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_ref_file, submessage_arena);
    }
    
  } else {
    
  }
  alignment_ref_file_ = alignment_ref_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_ref_file)
}

// .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_alignment_bed_file_enabled() const {
  return this != internal_default_instance() && alignment_bed_file_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_alignment_bed_file_enabled() const {
  return _internal_has_alignment_bed_file_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_alignment_bed_file_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = alignment_bed_file_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::alignment_bed_file_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled)
  return _internal_alignment_bed_file_enabled();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_alignment_bed_file_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file_enabled_);
  }
  alignment_bed_file_enabled_ = alignment_bed_file_enabled;
  if (alignment_bed_file_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_alignment_bed_file_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_bed_file_enabled_;
  alignment_bed_file_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_alignment_bed_file_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_bed_file_enabled_;
  alignment_bed_file_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_alignment_bed_file_enabled() {
  
  if (alignment_bed_file_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    alignment_bed_file_enabled_ = p;
  }
  return alignment_bed_file_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_alignment_bed_file_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_alignment_bed_file_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_alignment_bed_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file_enabled_);
  }
  if (alignment_bed_file_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file_enabled));
    if (message_arena != submessage_arena) {
      alignment_bed_file_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_bed_file_enabled, submessage_arena);
    }
    
  } else {
    
  }
  alignment_bed_file_enabled_ = alignment_bed_file_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file = 15;
inline bool ListSettingsForProtocolResponse_Basecalling::_internal_has_alignment_bed_file() const {
  return this != internal_default_instance() && alignment_bed_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Basecalling::has_alignment_bed_file() const {
  return _internal_has_alignment_bed_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::_internal_alignment_bed_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = alignment_bed_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Basecalling::alignment_bed_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file)
  return _internal_alignment_bed_file();
}
inline void ListSettingsForProtocolResponse_Basecalling::unsafe_arena_set_allocated_alignment_bed_file(
    ::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file_);
  }
  alignment_bed_file_ = alignment_bed_file;
  if (alignment_bed_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::release_alignment_bed_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_bed_file_;
  alignment_bed_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::unsafe_arena_release_alignment_bed_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = alignment_bed_file_;
  alignment_bed_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::_internal_mutable_alignment_bed_file() {
  
  if (alignment_bed_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    alignment_bed_file_ = p;
  }
  return alignment_bed_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Basecalling::mutable_alignment_bed_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_alignment_bed_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Basecalling::set_allocated_alignment_bed_file(::minknow_api::protocol_settings::ProtocolSetting* alignment_bed_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file_);
  }
  if (alignment_bed_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment_bed_file));
    if (message_arena != submessage_arena) {
      alignment_bed_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment_bed_file, submessage_arena);
    }
    
  } else {
    
  }
  alignment_bed_file_ = alignment_bed_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling.alignment_bed_file)
}

// -------------------------------------------------------------------

// ListSettingsForProtocolResponse_Output

// .minknow_api.protocol_settings.ProtocolSetting output_location = 1;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_output_location() const {
  return this != internal_default_instance() && output_location_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_output_location() const {
  return _internal_has_output_location();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_output_location() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = output_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::output_location() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location)
  return _internal_output_location();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_output_location(
    ::minknow_api::protocol_settings::ProtocolSetting* output_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_location_);
  }
  output_location_ = output_location;
  if (output_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_output_location() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = output_location_;
  output_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_output_location() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = output_location_;
  output_location_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_output_location() {
  
  if (output_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    output_location_ = p;
  }
  return output_location_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_output_location() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_output_location();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_output_location(::minknow_api::protocol_settings::ProtocolSetting* output_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_location_);
  }
  if (output_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_location));
    if (message_arena != submessage_arena) {
      output_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_location, submessage_arena);
    }
    
  } else {
    
  }
  output_location_ = output_location;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.output_location)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_q_enabled = 2;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_q_enabled() const {
  return this != internal_default_instance() && fast_q_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_q_enabled() const {
  return _internal_has_fast_q_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_q_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_q_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_q_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled)
  return _internal_fast_q_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_q_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_q_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_enabled_);
  }
  fast_q_enabled_ = fast_q_enabled;
  if (fast_q_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_q_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_enabled_;
  fast_q_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_q_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_enabled_;
  fast_q_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_q_enabled() {
  
  if (fast_q_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_q_enabled_ = p;
  }
  return fast_q_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_q_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_q_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_q_enabled(::minknow_api::protocol_settings::ProtocolSetting* fast_q_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_enabled_);
  }
  if (fast_q_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_enabled));
    if (message_arena != submessage_arena) {
      fast_q_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_q_enabled, submessage_arena);
    }
    
  } else {
    
  }
  fast_q_enabled_ = fast_q_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_q_reads_per_file() const {
  return this != internal_default_instance() && fast_q_reads_per_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_q_reads_per_file() const {
  return _internal_has_fast_q_reads_per_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_q_reads_per_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_q_reads_per_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_q_reads_per_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file)
  return _internal_fast_q_reads_per_file();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_q_reads_per_file(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_q_reads_per_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_reads_per_file_);
  }
  fast_q_reads_per_file_ = fast_q_reads_per_file;
  if (fast_q_reads_per_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_q_reads_per_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_reads_per_file_;
  fast_q_reads_per_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_q_reads_per_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_reads_per_file_;
  fast_q_reads_per_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_q_reads_per_file() {
  
  if (fast_q_reads_per_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_q_reads_per_file_ = p;
  }
  return fast_q_reads_per_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_q_reads_per_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_q_reads_per_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_q_reads_per_file(::minknow_api::protocol_settings::ProtocolSetting* fast_q_reads_per_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_reads_per_file_);
  }
  if (fast_q_reads_per_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_reads_per_file));
    if (message_arena != submessage_arena) {
      fast_q_reads_per_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_q_reads_per_file, submessage_arena);
    }
    
  } else {
    
  }
  fast_q_reads_per_file_ = fast_q_reads_per_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_reads_per_file)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_q_data_compression = 4;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_q_data_compression() const {
  return this != internal_default_instance() && fast_q_data_compression_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_q_data_compression() const {
  return _internal_has_fast_q_data_compression();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_q_data_compression() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_q_data_compression_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_q_data_compression() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression)
  return _internal_fast_q_data_compression();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_q_data_compression(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_q_data_compression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_data_compression_);
  }
  fast_q_data_compression_ = fast_q_data_compression;
  if (fast_q_data_compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_q_data_compression() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_data_compression_;
  fast_q_data_compression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_q_data_compression() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_q_data_compression_;
  fast_q_data_compression_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_q_data_compression() {
  
  if (fast_q_data_compression_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_q_data_compression_ = p;
  }
  return fast_q_data_compression_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_q_data_compression() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_q_data_compression();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_q_data_compression(::minknow_api::protocol_settings::ProtocolSetting* fast_q_data_compression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_data_compression_);
  }
  if (fast_q_data_compression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_q_data_compression));
    if (message_arena != submessage_arena) {
      fast_q_data_compression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_q_data_compression, submessage_arena);
    }
    
  } else {
    
  }
  fast_q_data_compression_ = fast_q_data_compression;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_q_data_compression)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_enabled = 5;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_enabled() const {
  return this != internal_default_instance() && fast_5_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_enabled() const {
  return _internal_has_fast_5_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled)
  return _internal_fast_5_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_enabled_);
  }
  fast_5_enabled_ = fast_5_enabled;
  if (fast_5_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_enabled_;
  fast_5_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_enabled_;
  fast_5_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_enabled() {
  
  if (fast_5_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_enabled_ = p;
  }
  return fast_5_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_enabled(::minknow_api::protocol_settings::ProtocolSetting* fast_5_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_enabled_);
  }
  if (fast_5_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_enabled));
    if (message_arena != submessage_arena) {
      fast_5_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_enabled, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_enabled_ = fast_5_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_reads_per_file() const {
  return this != internal_default_instance() && fast_5_reads_per_file_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_reads_per_file() const {
  return _internal_has_fast_5_reads_per_file();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_reads_per_file() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_reads_per_file_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_reads_per_file() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file)
  return _internal_fast_5_reads_per_file();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_reads_per_file(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_reads_per_file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_reads_per_file_);
  }
  fast_5_reads_per_file_ = fast_5_reads_per_file;
  if (fast_5_reads_per_file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_reads_per_file() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_reads_per_file_;
  fast_5_reads_per_file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_reads_per_file() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_reads_per_file_;
  fast_5_reads_per_file_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_reads_per_file() {
  
  if (fast_5_reads_per_file_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_reads_per_file_ = p;
  }
  return fast_5_reads_per_file_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_reads_per_file() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_reads_per_file();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_reads_per_file(::minknow_api::protocol_settings::ProtocolSetting* fast_5_reads_per_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_reads_per_file_);
  }
  if (fast_5_reads_per_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_reads_per_file));
    if (message_arena != submessage_arena) {
      fast_5_reads_per_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_reads_per_file, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_reads_per_file_ = fast_5_reads_per_file;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_reads_per_file)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_data_trace_table() const {
  return this != internal_default_instance() && fast_5_data_trace_table_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_data_trace_table() const {
  return _internal_has_fast_5_data_trace_table();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_data_trace_table() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_data_trace_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_data_trace_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table)
  return _internal_fast_5_data_trace_table();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_data_trace_table(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_trace_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_trace_table_);
  }
  fast_5_data_trace_table_ = fast_5_data_trace_table;
  if (fast_5_data_trace_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_data_trace_table() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_trace_table_;
  fast_5_data_trace_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_data_trace_table() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_trace_table_;
  fast_5_data_trace_table_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_data_trace_table() {
  
  if (fast_5_data_trace_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_data_trace_table_ = p;
  }
  return fast_5_data_trace_table_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_data_trace_table() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_data_trace_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_data_trace_table(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_trace_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_trace_table_);
  }
  if (fast_5_data_trace_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_trace_table));
    if (message_arena != submessage_arena) {
      fast_5_data_trace_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_data_trace_table, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_data_trace_table_ = fast_5_data_trace_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_trace_table)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_data_move_table() const {
  return this != internal_default_instance() && fast_5_data_move_table_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_data_move_table() const {
  return _internal_has_fast_5_data_move_table();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_data_move_table() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_data_move_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_data_move_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table)
  return _internal_fast_5_data_move_table();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_data_move_table(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_move_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_move_table_);
  }
  fast_5_data_move_table_ = fast_5_data_move_table;
  if (fast_5_data_move_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_data_move_table() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_move_table_;
  fast_5_data_move_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_data_move_table() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_move_table_;
  fast_5_data_move_table_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_data_move_table() {
  
  if (fast_5_data_move_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_data_move_table_ = p;
  }
  return fast_5_data_move_table_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_data_move_table() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_data_move_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_data_move_table(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_move_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_move_table_);
  }
  if (fast_5_data_move_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_move_table));
    if (message_arena != submessage_arena) {
      fast_5_data_move_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_data_move_table, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_data_move_table_ = fast_5_data_move_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_move_table)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_data_fast_q() const {
  return this != internal_default_instance() && fast_5_data_fast_q_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_data_fast_q() const {
  return _internal_has_fast_5_data_fast_q();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_data_fast_q() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_data_fast_q_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_data_fast_q() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q)
  return _internal_fast_5_data_fast_q();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_data_fast_q(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_fast_q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_fast_q_);
  }
  fast_5_data_fast_q_ = fast_5_data_fast_q;
  if (fast_5_data_fast_q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_data_fast_q() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_fast_q_;
  fast_5_data_fast_q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_data_fast_q() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_fast_q_;
  fast_5_data_fast_q_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_data_fast_q() {
  
  if (fast_5_data_fast_q_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_data_fast_q_ = p;
  }
  return fast_5_data_fast_q_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_data_fast_q() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_data_fast_q();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_data_fast_q(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_fast_q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_fast_q_);
  }
  if (fast_5_data_fast_q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_fast_q));
    if (message_arena != submessage_arena) {
      fast_5_data_fast_q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_data_fast_q, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_data_fast_q_ = fast_5_data_fast_q;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_fast_q)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_data_raw = 10;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_data_raw() const {
  return this != internal_default_instance() && fast_5_data_raw_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_data_raw() const {
  return _internal_has_fast_5_data_raw();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_data_raw() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_data_raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_data_raw() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw)
  return _internal_fast_5_data_raw();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_data_raw(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_raw_);
  }
  fast_5_data_raw_ = fast_5_data_raw;
  if (fast_5_data_raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_data_raw() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_raw_;
  fast_5_data_raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_data_raw() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_raw_;
  fast_5_data_raw_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_data_raw() {
  
  if (fast_5_data_raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_data_raw_ = p;
  }
  return fast_5_data_raw_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_data_raw() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_data_raw();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_data_raw(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_raw_);
  }
  if (fast_5_data_raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_raw));
    if (message_arena != submessage_arena) {
      fast_5_data_raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_data_raw, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_data_raw_ = fast_5_data_raw;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_raw)
}

// .minknow_api.protocol_settings.ProtocolSetting fast_5_data_compression = 11;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_fast_5_data_compression() const {
  return this != internal_default_instance() && fast_5_data_compression_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_fast_5_data_compression() const {
  return _internal_has_fast_5_data_compression();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_fast_5_data_compression() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = fast_5_data_compression_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::fast_5_data_compression() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression)
  return _internal_fast_5_data_compression();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_fast_5_data_compression(
    ::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_compression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_compression_);
  }
  fast_5_data_compression_ = fast_5_data_compression;
  if (fast_5_data_compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_fast_5_data_compression() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_compression_;
  fast_5_data_compression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_fast_5_data_compression() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = fast_5_data_compression_;
  fast_5_data_compression_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_fast_5_data_compression() {
  
  if (fast_5_data_compression_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    fast_5_data_compression_ = p;
  }
  return fast_5_data_compression_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_fast_5_data_compression() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_fast_5_data_compression();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_fast_5_data_compression(::minknow_api::protocol_settings::ProtocolSetting* fast_5_data_compression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_compression_);
  }
  if (fast_5_data_compression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_5_data_compression));
    if (message_arena != submessage_arena) {
      fast_5_data_compression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_5_data_compression, submessage_arena);
    }
    
  } else {
    
  }
  fast_5_data_compression_ = fast_5_data_compression;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.fast_5_data_compression)
}

// .minknow_api.protocol_settings.ProtocolSetting bam_enabled = 12;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bam_enabled() const {
  return this != internal_default_instance() && bam_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bam_enabled() const {
  return _internal_has_bam_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bam_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bam_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bam_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled)
  return _internal_bam_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bam_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* bam_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bam_enabled_);
  }
  bam_enabled_ = bam_enabled;
  if (bam_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bam_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bam_enabled_;
  bam_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bam_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bam_enabled_;
  bam_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bam_enabled() {
  
  if (bam_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bam_enabled_ = p;
  }
  return bam_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bam_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bam_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bam_enabled(::minknow_api::protocol_settings::ProtocolSetting* bam_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bam_enabled_);
  }
  if (bam_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bam_enabled));
    if (message_arena != submessage_arena) {
      bam_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bam_enabled, submessage_arena);
    }
    
  } else {
    
  }
  bam_enabled_ = bam_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bam_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting read_filtering_enabled = 13;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_read_filtering_enabled() const {
  return this != internal_default_instance() && read_filtering_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_read_filtering_enabled() const {
  return _internal_has_read_filtering_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_read_filtering_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_filtering_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::read_filtering_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled)
  return _internal_read_filtering_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_read_filtering_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_enabled_);
  }
  read_filtering_enabled_ = read_filtering_enabled;
  if (read_filtering_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_read_filtering_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_enabled_;
  read_filtering_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_read_filtering_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_enabled_;
  read_filtering_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_read_filtering_enabled() {
  
  if (read_filtering_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_filtering_enabled_ = p;
  }
  return read_filtering_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_read_filtering_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_filtering_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_read_filtering_enabled(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_enabled_);
  }
  if (read_filtering_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_enabled));
    if (message_arena != submessage_arena) {
      read_filtering_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_filtering_enabled, submessage_arena);
    }
    
  } else {
    
  }
  read_filtering_enabled_ = read_filtering_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_read_filtering_min_qscore() const {
  return this != internal_default_instance() && read_filtering_min_qscore_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_read_filtering_min_qscore() const {
  return _internal_has_read_filtering_min_qscore();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_read_filtering_min_qscore() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_filtering_min_qscore_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::read_filtering_min_qscore() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore)
  return _internal_read_filtering_min_qscore();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_read_filtering_min_qscore(
    ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_qscore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_qscore_);
  }
  read_filtering_min_qscore_ = read_filtering_min_qscore;
  if (read_filtering_min_qscore) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_read_filtering_min_qscore() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_min_qscore_;
  read_filtering_min_qscore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_read_filtering_min_qscore() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_min_qscore_;
  read_filtering_min_qscore_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_read_filtering_min_qscore() {
  
  if (read_filtering_min_qscore_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_filtering_min_qscore_ = p;
  }
  return read_filtering_min_qscore_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_read_filtering_min_qscore() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_filtering_min_qscore();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_read_filtering_min_qscore(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_qscore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_qscore_);
  }
  if (read_filtering_min_qscore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_qscore));
    if (message_arena != submessage_arena) {
      read_filtering_min_qscore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_filtering_min_qscore, submessage_arena);
    }
    
  } else {
    
  }
  read_filtering_min_qscore_ = read_filtering_min_qscore;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_qscore)
}

// .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_read_filtering_min_read_length() const {
  return this != internal_default_instance() && read_filtering_min_read_length_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_read_filtering_min_read_length() const {
  return _internal_has_read_filtering_min_read_length();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_read_filtering_min_read_length() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_filtering_min_read_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::read_filtering_min_read_length() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length)
  return _internal_read_filtering_min_read_length();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_read_filtering_min_read_length(
    ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_read_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_read_length_);
  }
  read_filtering_min_read_length_ = read_filtering_min_read_length;
  if (read_filtering_min_read_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_read_filtering_min_read_length() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_min_read_length_;
  read_filtering_min_read_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_read_filtering_min_read_length() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_min_read_length_;
  read_filtering_min_read_length_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_read_filtering_min_read_length() {
  
  if (read_filtering_min_read_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_filtering_min_read_length_ = p;
  }
  return read_filtering_min_read_length_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_read_filtering_min_read_length() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_filtering_min_read_length();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_read_filtering_min_read_length(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_min_read_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_read_length_);
  }
  if (read_filtering_min_read_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_min_read_length));
    if (message_arena != submessage_arena) {
      read_filtering_min_read_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_filtering_min_read_length, submessage_arena);
    }
    
  } else {
    
  }
  read_filtering_min_read_length_ = read_filtering_min_read_length;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_min_read_length)
}

// .minknow_api.protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_read_filtering_max_read_length() const {
  return this != internal_default_instance() && read_filtering_max_read_length_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_read_filtering_max_read_length() const {
  return _internal_has_read_filtering_max_read_length();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_read_filtering_max_read_length() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = read_filtering_max_read_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::read_filtering_max_read_length() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length)
  return _internal_read_filtering_max_read_length();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_read_filtering_max_read_length(
    ::minknow_api::protocol_settings::ProtocolSetting* read_filtering_max_read_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_max_read_length_);
  }
  read_filtering_max_read_length_ = read_filtering_max_read_length;
  if (read_filtering_max_read_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_read_filtering_max_read_length() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_max_read_length_;
  read_filtering_max_read_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_read_filtering_max_read_length() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = read_filtering_max_read_length_;
  read_filtering_max_read_length_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_read_filtering_max_read_length() {
  
  if (read_filtering_max_read_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    read_filtering_max_read_length_ = p;
  }
  return read_filtering_max_read_length_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_read_filtering_max_read_length() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_read_filtering_max_read_length();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_read_filtering_max_read_length(::minknow_api::protocol_settings::ProtocolSetting* read_filtering_max_read_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_max_read_length_);
  }
  if (read_filtering_max_read_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_filtering_max_read_length));
    if (message_arena != submessage_arena) {
      read_filtering_max_read_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_filtering_max_read_length, submessage_arena);
    }
    
  } else {
    
  }
  read_filtering_max_read_length_ = read_filtering_max_read_length;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.read_filtering_max_read_length)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_enabled = 17;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_enabled() const {
  return this != internal_default_instance() && bulk_file_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_enabled() const {
  return _internal_has_bulk_file_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled)
  return _internal_bulk_file_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_enabled_);
  }
  bulk_file_enabled_ = bulk_file_enabled;
  if (bulk_file_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_enabled_;
  bulk_file_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_enabled_;
  bulk_file_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_enabled() {
  
  if (bulk_file_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_enabled_ = p;
  }
  return bulk_file_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_enabled_);
  }
  if (bulk_file_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_enabled));
    if (message_arena != submessage_arena) {
      bulk_file_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_enabled, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_enabled_ = bulk_file_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw = 18;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_raw() const {
  return this != internal_default_instance() && bulk_file_raw_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_raw() const {
  return _internal_has_bulk_file_raw();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_raw() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_raw_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_raw() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw)
  return _internal_bulk_file_raw();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_raw(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw_);
  }
  bulk_file_raw_ = bulk_file_raw;
  if (bulk_file_raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_raw() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_raw_;
  bulk_file_raw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_raw() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_raw_;
  bulk_file_raw_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_raw() {
  
  if (bulk_file_raw_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_raw_ = p;
  }
  return bulk_file_raw_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_raw() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_raw();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_raw(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw_);
  }
  if (bulk_file_raw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw));
    if (message_arena != submessage_arena) {
      bulk_file_raw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_raw, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_raw_ = bulk_file_raw;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_events = 19;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_events() const {
  return this != internal_default_instance() && bulk_file_events_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_events() const {
  return _internal_has_bulk_file_events();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_events() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_events_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_events() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events)
  return _internal_bulk_file_events();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_events(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events_);
  }
  bulk_file_events_ = bulk_file_events;
  if (bulk_file_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_events() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_events_;
  bulk_file_events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_events() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_events_;
  bulk_file_events_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_events() {
  
  if (bulk_file_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_events_ = p;
  }
  return bulk_file_events_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_events() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_events();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_events(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events_);
  }
  if (bulk_file_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events));
    if (message_arena != submessage_arena) {
      bulk_file_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_events, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_events_ = bulk_file_events;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table = 20;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_read_table() const {
  return this != internal_default_instance() && bulk_file_read_table_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_read_table() const {
  return _internal_has_bulk_file_read_table();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_read_table() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_read_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_read_table() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table)
  return _internal_bulk_file_read_table();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_read_table(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table_);
  }
  bulk_file_read_table_ = bulk_file_read_table;
  if (bulk_file_read_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_read_table() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_read_table_;
  bulk_file_read_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_read_table() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_read_table_;
  bulk_file_read_table_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_read_table() {
  
  if (bulk_file_read_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_read_table_ = p;
  }
  return bulk_file_read_table_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_read_table() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_read_table();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_read_table(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table_);
  }
  if (bulk_file_read_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table));
    if (message_arena != submessage_arena) {
      bulk_file_read_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_read_table, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_read_table_ = bulk_file_read_table;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_raw_enabled() const {
  return this != internal_default_instance() && bulk_file_raw_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_raw_enabled() const {
  return _internal_has_bulk_file_raw_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_raw_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_raw_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_raw_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled)
  return _internal_bulk_file_raw_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_raw_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw_enabled_);
  }
  bulk_file_raw_enabled_ = bulk_file_raw_enabled;
  if (bulk_file_raw_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_raw_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_raw_enabled_;
  bulk_file_raw_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_raw_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_raw_enabled_;
  bulk_file_raw_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_raw_enabled() {
  
  if (bulk_file_raw_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_raw_enabled_ = p;
  }
  return bulk_file_raw_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_raw_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_raw_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_raw_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_raw_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw_enabled_);
  }
  if (bulk_file_raw_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_raw_enabled));
    if (message_arena != submessage_arena) {
      bulk_file_raw_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_raw_enabled, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_raw_enabled_ = bulk_file_raw_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_raw_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_events_enabled() const {
  return this != internal_default_instance() && bulk_file_events_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_events_enabled() const {
  return _internal_has_bulk_file_events_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_events_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_events_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_events_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled)
  return _internal_bulk_file_events_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_events_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events_enabled_);
  }
  bulk_file_events_enabled_ = bulk_file_events_enabled;
  if (bulk_file_events_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_events_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_events_enabled_;
  bulk_file_events_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_events_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_events_enabled_;
  bulk_file_events_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_events_enabled() {
  
  if (bulk_file_events_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_events_enabled_ = p;
  }
  return bulk_file_events_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_events_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_events_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_events_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_events_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events_enabled_);
  }
  if (bulk_file_events_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_events_enabled));
    if (message_arena != submessage_arena) {
      bulk_file_events_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_events_enabled, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_events_enabled_ = bulk_file_events_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_events_enabled)
}

// .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
inline bool ListSettingsForProtocolResponse_Output::_internal_has_bulk_file_read_table_enabled() const {
  return this != internal_default_instance() && bulk_file_read_table_enabled_ != nullptr;
}
inline bool ListSettingsForProtocolResponse_Output::has_bulk_file_read_table_enabled() const {
  return _internal_has_bulk_file_read_table_enabled();
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::_internal_bulk_file_read_table_enabled() const {
  const ::minknow_api::protocol_settings::ProtocolSetting* p = bulk_file_read_table_enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol_settings::ProtocolSetting&>(
      ::minknow_api::protocol_settings::_ProtocolSetting_default_instance_);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse_Output::bulk_file_read_table_enabled() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled)
  return _internal_bulk_file_read_table_enabled();
}
inline void ListSettingsForProtocolResponse_Output::unsafe_arena_set_allocated_bulk_file_read_table_enabled(
    ::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table_enabled_);
  }
  bulk_file_read_table_enabled_ = bulk_file_read_table_enabled;
  if (bulk_file_read_table_enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled)
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::release_bulk_file_read_table_enabled() {
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_read_table_enabled_;
  bulk_file_read_table_enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::unsafe_arena_release_bulk_file_read_table_enabled() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled)
  
  ::minknow_api::protocol_settings::ProtocolSetting* temp = bulk_file_read_table_enabled_;
  bulk_file_read_table_enabled_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::_internal_mutable_bulk_file_read_table_enabled() {
  
  if (bulk_file_read_table_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol_settings::ProtocolSetting>(GetArenaForAllocation());
    bulk_file_read_table_enabled_ = p;
  }
  return bulk_file_read_table_enabled_;
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse_Output::mutable_bulk_file_read_table_enabled() {
  ::minknow_api::protocol_settings::ProtocolSetting* _msg = _internal_mutable_bulk_file_read_table_enabled();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled)
  return _msg;
}
inline void ListSettingsForProtocolResponse_Output::set_allocated_bulk_file_read_table_enabled(::minknow_api::protocol_settings::ProtocolSetting* bulk_file_read_table_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table_enabled_);
  }
  if (bulk_file_read_table_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bulk_file_read_table_enabled));
    if (message_arena != submessage_arena) {
      bulk_file_read_table_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bulk_file_read_table_enabled, submessage_arena);
    }
    
  } else {
    
  }
  bulk_file_read_table_enabled_ = bulk_file_read_table_enabled;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.Output.bulk_file_read_table_enabled)
}

// -------------------------------------------------------------------

// ListSettingsForProtocolResponse

// .minknow_api.protocol.ProtocolIdentifierComponents protocol = 1;
inline bool ListSettingsForProtocolResponse::_internal_has_protocol() const {
  return this != internal_default_instance() && protocol_ != nullptr;
}
inline bool ListSettingsForProtocolResponse::has_protocol() const {
  return _internal_has_protocol();
}
inline void ListSettingsForProtocolResponse::clear_protocol() {
  if (GetArenaForAllocation() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolIdentifierComponents& ListSettingsForProtocolResponse::_internal_protocol() const {
  const ::minknow_api::protocol::ProtocolIdentifierComponents* p = protocol_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolIdentifierComponents&>(
      ::minknow_api::protocol::_ProtocolIdentifierComponents_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolIdentifierComponents& ListSettingsForProtocolResponse::protocol() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.protocol)
  return _internal_protocol();
}
inline void ListSettingsForProtocolResponse::unsafe_arena_set_allocated_protocol(
    ::minknow_api::protocol::ProtocolIdentifierComponents* protocol) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_);
  }
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.protocol)
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolResponse::release_protocol() {
  
  ::minknow_api::protocol::ProtocolIdentifierComponents* temp = protocol_;
  protocol_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolResponse::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.protocol)
  
  ::minknow_api::protocol::ProtocolIdentifierComponents* temp = protocol_;
  protocol_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolResponse::_internal_mutable_protocol() {
  
  if (protocol_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolIdentifierComponents>(GetArenaForAllocation());
    protocol_ = p;
  }
  return protocol_;
}
inline ::minknow_api::protocol::ProtocolIdentifierComponents* ListSettingsForProtocolResponse::mutable_protocol() {
  ::minknow_api::protocol::ProtocolIdentifierComponents* _msg = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.protocol)
  return _msg;
}
inline void ListSettingsForProtocolResponse::set_allocated_protocol(::minknow_api::protocol::ProtocolIdentifierComponents* protocol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protocol_;
  }
  if (protocol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolIdentifierComponents>::GetOwningArena(protocol);
    if (message_arena != submessage_arena) {
      protocol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol, submessage_arena);
    }
    
  } else {
    
  }
  protocol_ = protocol;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.protocol)
}

// .minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions run_options = 2;
inline bool ListSettingsForProtocolResponse::_internal_has_run_options() const {
  return this != internal_default_instance() && run_options_ != nullptr;
}
inline bool ListSettingsForProtocolResponse::has_run_options() const {
  return _internal_has_run_options();
}
inline void ListSettingsForProtocolResponse::clear_run_options() {
  if (GetArenaForAllocation() == nullptr && run_options_ != nullptr) {
    delete run_options_;
  }
  run_options_ = nullptr;
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions& ListSettingsForProtocolResponse::_internal_run_options() const {
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* p = run_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions&>(
      ::minknow_api::protocol::_ListSettingsForProtocolResponse_RunOptions_default_instance_);
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions& ListSettingsForProtocolResponse::run_options() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.run_options)
  return _internal_run_options();
}
inline void ListSettingsForProtocolResponse::unsafe_arena_set_allocated_run_options(
    ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* run_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_options_);
  }
  run_options_ = run_options;
  if (run_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.run_options)
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* ListSettingsForProtocolResponse::release_run_options() {
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* temp = run_options_;
  run_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* ListSettingsForProtocolResponse::unsafe_arena_release_run_options() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.run_options)
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* temp = run_options_;
  run_options_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* ListSettingsForProtocolResponse::_internal_mutable_run_options() {
  
  if (run_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions>(GetArenaForAllocation());
    run_options_ = p;
  }
  return run_options_;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* ListSettingsForProtocolResponse::mutable_run_options() {
  ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* _msg = _internal_mutable_run_options();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.run_options)
  return _msg;
}
inline void ListSettingsForProtocolResponse::set_allocated_run_options(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* run_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete run_options_;
  }
  if (run_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions>::GetOwningArena(run_options);
    if (message_arena != submessage_arena) {
      run_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run_options, submessage_arena);
    }
    
  } else {
    
  }
  run_options_ = run_options;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.run_options)
}

// .minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling basecalling = 3;
inline bool ListSettingsForProtocolResponse::_internal_has_basecalling() const {
  return this != internal_default_instance() && basecalling_ != nullptr;
}
inline bool ListSettingsForProtocolResponse::has_basecalling() const {
  return _internal_has_basecalling();
}
inline void ListSettingsForProtocolResponse::clear_basecalling() {
  if (GetArenaForAllocation() == nullptr && basecalling_ != nullptr) {
    delete basecalling_;
  }
  basecalling_ = nullptr;
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling& ListSettingsForProtocolResponse::_internal_basecalling() const {
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* p = basecalling_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling&>(
      ::minknow_api::protocol::_ListSettingsForProtocolResponse_Basecalling_default_instance_);
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling& ListSettingsForProtocolResponse::basecalling() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.basecalling)
  return _internal_basecalling();
}
inline void ListSettingsForProtocolResponse::unsafe_arena_set_allocated_basecalling(
    ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* basecalling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basecalling_);
  }
  basecalling_ = basecalling;
  if (basecalling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.basecalling)
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* ListSettingsForProtocolResponse::release_basecalling() {
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* temp = basecalling_;
  basecalling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* ListSettingsForProtocolResponse::unsafe_arena_release_basecalling() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.basecalling)
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* temp = basecalling_;
  basecalling_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* ListSettingsForProtocolResponse::_internal_mutable_basecalling() {
  
  if (basecalling_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling>(GetArenaForAllocation());
    basecalling_ = p;
  }
  return basecalling_;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* ListSettingsForProtocolResponse::mutable_basecalling() {
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* _msg = _internal_mutable_basecalling();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.basecalling)
  return _msg;
}
inline void ListSettingsForProtocolResponse::set_allocated_basecalling(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* basecalling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete basecalling_;
  }
  if (basecalling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling>::GetOwningArena(basecalling);
    if (message_arena != submessage_arena) {
      basecalling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecalling, submessage_arena);
    }
    
  } else {
    
  }
  basecalling_ = basecalling;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.basecalling)
}

// .minknow_api.protocol.ListSettingsForProtocolResponse.Output output = 4;
inline bool ListSettingsForProtocolResponse::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool ListSettingsForProtocolResponse::has_output() const {
  return _internal_has_output();
}
inline void ListSettingsForProtocolResponse::clear_output() {
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output& ListSettingsForProtocolResponse::_internal_output() const {
  const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output&>(
      ::minknow_api::protocol::_ListSettingsForProtocolResponse_Output_default_instance_);
}
inline const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output& ListSettingsForProtocolResponse::output() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.output)
  return _internal_output();
}
inline void ListSettingsForProtocolResponse::unsafe_arena_set_allocated_output(
    ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.output)
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* ListSettingsForProtocolResponse::release_output() {
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* ListSettingsForProtocolResponse::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ListSettingsForProtocolResponse.output)
  
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* ListSettingsForProtocolResponse::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ListSettingsForProtocolResponse_Output>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* ListSettingsForProtocolResponse::mutable_output() {
  ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.output)
  return _msg;
}
inline void ListSettingsForProtocolResponse::set_allocated_output(::minknow_api::protocol::ListSettingsForProtocolResponse_Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ListSettingsForProtocolResponse_Output>::GetOwningArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolResponse.output)
}

// repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 5;
inline int ListSettingsForProtocolResponse::_internal_protocol_settings_size() const {
  return protocol_settings_.size();
}
inline int ListSettingsForProtocolResponse::protocol_settings_size() const {
  return _internal_protocol_settings_size();
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse::mutable_protocol_settings(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings)
  return protocol_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >*
ListSettingsForProtocolResponse::mutable_protocol_settings() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings)
  return &protocol_settings_;
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse::_internal_protocol_settings(int index) const {
  return protocol_settings_.Get(index);
}
inline const ::minknow_api::protocol_settings::ProtocolSetting& ListSettingsForProtocolResponse::protocol_settings(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings)
  return _internal_protocol_settings(index);
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse::_internal_add_protocol_settings() {
  return protocol_settings_.Add();
}
inline ::minknow_api::protocol_settings::ProtocolSetting* ListSettingsForProtocolResponse::add_protocol_settings() {
  ::minknow_api::protocol_settings::ProtocolSetting* _add = _internal_add_protocol_settings();
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minknow_api::protocol_settings::ProtocolSetting >&
ListSettingsForProtocolResponse::protocol_settings() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ListSettingsForProtocolResponse.protocol_settings)
  return protocol_settings_;
}

// -------------------------------------------------------------------

// AssociatePostProcessingAnalysisRequest

// string run_id = 1;
inline void AssociatePostProcessingAnalysisRequest::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& AssociatePostProcessingAnalysisRequest::run_id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatePostProcessingAnalysisRequest::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id)
}
inline std::string* AssociatePostProcessingAnalysisRequest::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id)
  return _s;
}
inline const std::string& AssociatePostProcessingAnalysisRequest::_internal_run_id() const {
  return run_id_.Get();
}
inline void AssociatePostProcessingAnalysisRequest::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssociatePostProcessingAnalysisRequest::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssociatePostProcessingAnalysisRequest::release_run_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssociatePostProcessingAnalysisRequest::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id)
}

// .minknow_api.basecaller.StartRequest start_request = 2;
inline bool AssociatePostProcessingAnalysisRequest::_internal_has_start_request() const {
  return this != internal_default_instance() && start_request_ != nullptr;
}
inline bool AssociatePostProcessingAnalysisRequest::has_start_request() const {
  return _internal_has_start_request();
}
inline const ::minknow_api::basecaller::StartRequest& AssociatePostProcessingAnalysisRequest::_internal_start_request() const {
  const ::minknow_api::basecaller::StartRequest* p = start_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::basecaller::StartRequest&>(
      ::minknow_api::basecaller::_StartRequest_default_instance_);
}
inline const ::minknow_api::basecaller::StartRequest& AssociatePostProcessingAnalysisRequest::start_request() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.start_request)
  return _internal_start_request();
}
inline void AssociatePostProcessingAnalysisRequest::unsafe_arena_set_allocated_start_request(
    ::minknow_api::basecaller::StartRequest* start_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request_);
  }
  start_request_ = start_request;
  if (start_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.start_request)
}
inline ::minknow_api::basecaller::StartRequest* AssociatePostProcessingAnalysisRequest::release_start_request() {
  
  ::minknow_api::basecaller::StartRequest* temp = start_request_;
  start_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::basecaller::StartRequest* AssociatePostProcessingAnalysisRequest::unsafe_arena_release_start_request() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.start_request)
  
  ::minknow_api::basecaller::StartRequest* temp = start_request_;
  start_request_ = nullptr;
  return temp;
}
inline ::minknow_api::basecaller::StartRequest* AssociatePostProcessingAnalysisRequest::_internal_mutable_start_request() {
  
  if (start_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::basecaller::StartRequest>(GetArenaForAllocation());
    start_request_ = p;
  }
  return start_request_;
}
inline ::minknow_api::basecaller::StartRequest* AssociatePostProcessingAnalysisRequest::mutable_start_request() {
  ::minknow_api::basecaller::StartRequest* _msg = _internal_mutable_start_request();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.start_request)
  return _msg;
}
inline void AssociatePostProcessingAnalysisRequest::set_allocated_start_request(::minknow_api::basecaller::StartRequest* start_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request_);
  }
  if (start_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_request));
    if (message_arena != submessage_arena) {
      start_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_request, submessage_arena);
    }
    
  } else {
    
  }
  start_request_ = start_request;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AssociatePostProcessingAnalysisRequest.start_request)
}

// -------------------------------------------------------------------

// AssociatePostProcessingAnalysisResponse

// string id = 1;
inline void AssociatePostProcessingAnalysisResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AssociatePostProcessingAnalysisResponse::id() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatePostProcessingAnalysisResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id)
}
inline std::string* AssociatePostProcessingAnalysisResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id)
  return _s;
}
inline const std::string& AssociatePostProcessingAnalysisResponse::_internal_id() const {
  return id_.Get();
}
inline void AssociatePostProcessingAnalysisResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssociatePostProcessingAnalysisResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssociatePostProcessingAnalysisResponse::release_id() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssociatePostProcessingAnalysisResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id)
}

// -------------------------------------------------------------------

// ClearProtocolHistoryDataRequest

// repeated string protocol_ids = 1;
inline int ClearProtocolHistoryDataRequest::_internal_protocol_ids_size() const {
  return protocol_ids_.size();
}
inline int ClearProtocolHistoryDataRequest::protocol_ids_size() const {
  return _internal_protocol_ids_size();
}
inline void ClearProtocolHistoryDataRequest::clear_protocol_ids() {
  protocol_ids_.Clear();
}
inline std::string* ClearProtocolHistoryDataRequest::add_protocol_ids() {
  std::string* _s = _internal_add_protocol_ids();
  // @@protoc_insertion_point(field_add_mutable:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
  return _s;
}
inline const std::string& ClearProtocolHistoryDataRequest::_internal_protocol_ids(int index) const {
  return protocol_ids_.Get(index);
}
inline const std::string& ClearProtocolHistoryDataRequest::protocol_ids(int index) const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
  return _internal_protocol_ids(index);
}
inline std::string* ClearProtocolHistoryDataRequest::mutable_protocol_ids(int index) {
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
  return protocol_ids_.Mutable(index);
}
inline void ClearProtocolHistoryDataRequest::set_protocol_ids(int index, const std::string& value) {
  protocol_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::set_protocol_ids(int index, std::string&& value) {
  protocol_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::set_protocol_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocol_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::set_protocol_ids(int index, const char* value, size_t size) {
  protocol_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline std::string* ClearProtocolHistoryDataRequest::_internal_add_protocol_ids() {
  return protocol_ids_.Add();
}
inline void ClearProtocolHistoryDataRequest::add_protocol_ids(const std::string& value) {
  protocol_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::add_protocol_ids(std::string&& value) {
  protocol_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::add_protocol_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  protocol_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline void ClearProtocolHistoryDataRequest::add_protocol_ids(const char* value, size_t size) {
  protocol_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClearProtocolHistoryDataRequest::protocol_ids() const {
  // @@protoc_insertion_point(field_list:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
  return protocol_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClearProtocolHistoryDataRequest::mutable_protocol_ids() {
  // @@protoc_insertion_point(field_mutable_list:minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids)
  return &protocol_ids_;
}

// -------------------------------------------------------------------

// ClearProtocolHistoryDataResponse

// -------------------------------------------------------------------

// ProtocolPhaseManagementRequest_Capabilities

// bool can_pause = 1;
inline void ProtocolPhaseManagementRequest_Capabilities::clear_can_pause() {
  can_pause_ = false;
}
inline bool ProtocolPhaseManagementRequest_Capabilities::_internal_can_pause() const {
  return can_pause_;
}
inline bool ProtocolPhaseManagementRequest_Capabilities::can_pause() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities.can_pause)
  return _internal_can_pause();
}
inline void ProtocolPhaseManagementRequest_Capabilities::_internal_set_can_pause(bool value) {
  
  can_pause_ = value;
}
inline void ProtocolPhaseManagementRequest_Capabilities::set_can_pause(bool value) {
  _internal_set_can_pause(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities.can_pause)
}

// bool can_trigger_mux_scan = 2;
inline void ProtocolPhaseManagementRequest_Capabilities::clear_can_trigger_mux_scan() {
  can_trigger_mux_scan_ = false;
}
inline bool ProtocolPhaseManagementRequest_Capabilities::_internal_can_trigger_mux_scan() const {
  return can_trigger_mux_scan_;
}
inline bool ProtocolPhaseManagementRequest_Capabilities::can_trigger_mux_scan() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities.can_trigger_mux_scan)
  return _internal_can_trigger_mux_scan();
}
inline void ProtocolPhaseManagementRequest_Capabilities::_internal_set_can_trigger_mux_scan(bool value) {
  
  can_trigger_mux_scan_ = value;
}
inline void ProtocolPhaseManagementRequest_Capabilities::set_can_trigger_mux_scan(bool value) {
  _internal_set_can_trigger_mux_scan(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities.can_trigger_mux_scan)
}

// -------------------------------------------------------------------

// ProtocolPhaseManagementRequest

// .minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities set_capabilities = 1;
inline bool ProtocolPhaseManagementRequest::_internal_has_set_capabilities() const {
  return this != internal_default_instance() && set_capabilities_ != nullptr;
}
inline bool ProtocolPhaseManagementRequest::has_set_capabilities() const {
  return _internal_has_set_capabilities();
}
inline void ProtocolPhaseManagementRequest::clear_set_capabilities() {
  if (GetArenaForAllocation() == nullptr && set_capabilities_ != nullptr) {
    delete set_capabilities_;
  }
  set_capabilities_ = nullptr;
}
inline const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities& ProtocolPhaseManagementRequest::_internal_set_capabilities() const {
  const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* p = set_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities&>(
      ::minknow_api::protocol::_ProtocolPhaseManagementRequest_Capabilities_default_instance_);
}
inline const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities& ProtocolPhaseManagementRequest::set_capabilities() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolPhaseManagementRequest.set_capabilities)
  return _internal_set_capabilities();
}
inline void ProtocolPhaseManagementRequest::unsafe_arena_set_allocated_set_capabilities(
    ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* set_capabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_capabilities_);
  }
  set_capabilities_ = set_capabilities;
  if (set_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minknow_api.protocol.ProtocolPhaseManagementRequest.set_capabilities)
}
inline ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* ProtocolPhaseManagementRequest::release_set_capabilities() {
  
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* temp = set_capabilities_;
  set_capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* ProtocolPhaseManagementRequest::unsafe_arena_release_set_capabilities() {
  // @@protoc_insertion_point(field_release:minknow_api.protocol.ProtocolPhaseManagementRequest.set_capabilities)
  
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* temp = set_capabilities_;
  set_capabilities_ = nullptr;
  return temp;
}
inline ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* ProtocolPhaseManagementRequest::_internal_mutable_set_capabilities() {
  
  if (set_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities>(GetArenaForAllocation());
    set_capabilities_ = p;
  }
  return set_capabilities_;
}
inline ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* ProtocolPhaseManagementRequest::mutable_set_capabilities() {
  ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* _msg = _internal_mutable_set_capabilities();
  // @@protoc_insertion_point(field_mutable:minknow_api.protocol.ProtocolPhaseManagementRequest.set_capabilities)
  return _msg;
}
inline void ProtocolPhaseManagementRequest::set_allocated_set_capabilities(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* set_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_capabilities_;
  }
  if (set_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities>::GetOwningArena(set_capabilities);
    if (message_arena != submessage_arena) {
      set_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  set_capabilities_ = set_capabilities;
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ProtocolPhaseManagementRequest.set_capabilities)
}

// .minknow_api.protocol.ProtocolPhase phase = 2;
inline void ProtocolPhaseManagementRequest::clear_phase() {
  phase_ = 0;
}
inline ::minknow_api::protocol::ProtocolPhase ProtocolPhaseManagementRequest::_internal_phase() const {
  return static_cast< ::minknow_api::protocol::ProtocolPhase >(phase_);
}
inline ::minknow_api::protocol::ProtocolPhase ProtocolPhaseManagementRequest::phase() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolPhaseManagementRequest.phase)
  return _internal_phase();
}
inline void ProtocolPhaseManagementRequest::_internal_set_phase(::minknow_api::protocol::ProtocolPhase value) {
  
  phase_ = value;
}
inline void ProtocolPhaseManagementRequest::set_phase(::minknow_api::protocol::ProtocolPhase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolPhaseManagementRequest.phase)
}

// -------------------------------------------------------------------

// ProtocolPhaseManagementResponse

// .minknow_api.protocol.Action action = 1;
inline void ProtocolPhaseManagementResponse::clear_action() {
  action_ = 0;
}
inline ::minknow_api::protocol::Action ProtocolPhaseManagementResponse::_internal_action() const {
  return static_cast< ::minknow_api::protocol::Action >(action_);
}
inline ::minknow_api::protocol::Action ProtocolPhaseManagementResponse::action() const {
  // @@protoc_insertion_point(field_get:minknow_api.protocol.ProtocolPhaseManagementResponse.action)
  return _internal_action();
}
inline void ProtocolPhaseManagementResponse::_internal_set_action(::minknow_api::protocol::Action value) {
  
  action_ = value;
}
inline void ProtocolPhaseManagementResponse::set_action(::minknow_api::protocol::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:minknow_api.protocol.ProtocolPhaseManagementResponse.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace minknow_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minknow_api::protocol::BarcodeUserData_SampleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::BarcodeUserData_SampleType>() {
  return ::minknow_api::protocol::BarcodeUserData_SampleType_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol::WaitForFinishedRequest_NotificationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::WaitForFinishedRequest_NotificationState>() {
  return ::minknow_api::protocol::WaitForFinishedRequest_NotificationState_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol::ProtocolIdentifierComponents_Location> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::ProtocolIdentifierComponents_Location>() {
  return ::minknow_api::protocol::ProtocolIdentifierComponents_Location_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol::ProtocolState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::ProtocolState>() {
  return ::minknow_api::protocol::ProtocolState_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol::ProtocolPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::ProtocolPhase>() {
  return ::minknow_api::protocol::ProtocolPhase_descriptor();
}
template <> struct is_proto_enum< ::minknow_api::protocol::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minknow_api::protocol::Action>() {
  return ::minknow_api::protocol::Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minknow_5fapi_2fprotocol_2eproto
