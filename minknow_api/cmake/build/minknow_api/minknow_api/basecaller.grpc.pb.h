// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/basecaller.proto
#ifndef GRPC_minknow_5fapi_2fbasecaller_2eproto__INCLUDED
#define GRPC_minknow_5fapi_2fbasecaller_2eproto__INCLUDED

#include "minknow_api/basecaller.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace minknow_api {
namespace basecaller {

// Basecall reads files from previous sequencing runs.
//
// NB: this is not available from a MinKNOW device instance. It should be accessed on its own
// connection, using one of the ports provided by the
// minknow_api.manager.ManagerService.basecaller_api() method.
//
// Since 3.5
class Basecaller final {
 public:
  static constexpr char const* service_full_name() {
    return "minknow_api.basecaller.Basecaller";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // List the available basecalling configurations sorted by flow cell and kit.
    //
    // Since 3.5
    virtual ::grpc::Status list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::minknow_api::basecaller::ListConfigsByKitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>> Asynclist_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>>(Asynclist_configs_by_kitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>> PrepareAsynclist_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>>(PrepareAsynclist_configs_by_kitRaw(context, request, cq));
    }
    // Start basecalling reads files.
    //
    // Since 4.0
    virtual ::grpc::Status start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::minknow_api::basecaller::StartBasecallingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>> Asyncstart_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>>(Asyncstart_basecallingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>> PrepareAsyncstart_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>>(PrepareAsyncstart_basecallingRaw(context, request, cq));
    }
    // Start barcoding fastq files.
    //
    // Since 3.8
    virtual ::grpc::Status start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::minknow_api::basecaller::StartBarcodingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>> Asyncstart_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>>(Asyncstart_barcodingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>> PrepareAsyncstart_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>>(PrepareAsyncstart_barcodingRaw(context, request, cq));
    }
    // Start an post processing analysis protocol.
    //
    // Post processing protocols allow processing already generated sequencing files in some way, eg: running an
    // ARTIC workflow on some fastq files, or barcoding a set of fastq input files.
    //
    // Since 4.4
    virtual ::grpc::Status start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>> Asyncstart_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>>(Asyncstart_post_processing_protocolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>> PrepareAsyncstart_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>>(PrepareAsyncstart_post_processing_protocolRaw(context, request, cq));
    }
    // Start aligning fastq files.
    //
    // Since 3.8
    virtual ::grpc::Status start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::minknow_api::basecaller::StartAlignmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>> Asyncstart_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>>(Asyncstart_alignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>> PrepareAsyncstart_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>>(PrepareAsyncstart_alignmentRaw(context, request, cq));
    }
    // Stop a basecalling that was started by start_basecalling_reads().
    //
    // Since 3.5
    virtual ::grpc::Status cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::minknow_api::basecaller::CancelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>> Asynccancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>>(AsynccancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>> PrepareAsynccancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>>(PrepareAsynccancelRaw(context, request, cq));
    }
    // Gets information about one or more basecalling operations.
    //
    // Since 3.5
    std::unique_ptr< ::grpc::ClientReaderInterface< ::minknow_api::basecaller::GetInfoResponse>> get_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::minknow_api::basecaller::GetInfoResponse>>(get_infoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>> Asyncget_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>>(Asyncget_infoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>> PrepareAsyncget_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>>(PrepareAsyncget_infoRaw(context, request, cq));
    }
    // Monitors basecalls, returning messages when basecalls are started, stopped or receive
    // progress updates.
    //
    // The current state of all currently-running basecalls will be returned in the initial set of
    // messages. Optionally, the state of all already-finished runs can be included. Note that this
    // initial state may be split among several responses.
    //
    // Note that progress updates may be rate limited to avoid affecting performance.
    //
    // Since 3.5
    std::unique_ptr< ::grpc::ClientReaderInterface< ::minknow_api::basecaller::WatchResponse>> watch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::minknow_api::basecaller::WatchResponse>>(watchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>> Asyncwatch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>>(AsyncwatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>> PrepareAsyncwatch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>>(PrepareAsyncwatchRaw(context, request, cq));
    }
    // Build an alignment index file from an input fasta reference.
    //
    // This call blocks whilst the index is built.
    //
    // Since 4.3
    virtual ::grpc::Status make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>> Asyncmake_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>>(Asyncmake_alignment_indexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>> PrepareAsyncmake_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>>(PrepareAsyncmake_alignment_indexRaw(context, request, cq));
    }
    // Gives back a list that contains info about each possible post processing protocol script minknow is aware of.
    // This will most likely be used to retrieve a suitable post processing protocol script that can be passed on to `start_post_processing_protocol`
    //
    // Since 4.4
    virtual ::grpc::Status list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>> Asynclist_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>>(Asynclist_post_processing_protocolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>> PrepareAsynclist_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>>(PrepareAsynclist_post_processing_protocolsRaw(context, request, cq));
    }
    // Find available display settings for an post processing protocol
    //
    // Since 4.4
    virtual ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>> Asynclist_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>>(Asynclist_settings_for_post_processing_protocolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>> PrepareAsynclist_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>>(PrepareAsynclist_settings_for_post_processing_protocolRaw(context, request, cq));
    }
    // Set the progress of the currently executing post processing protocol (this API expects a run_id as more than one can be active).
    virtual ::grpc::Status update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::minknow_api::basecaller::UpdateProgressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>> Asyncupdate_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>>(Asyncupdate_post_processing_protocol_progressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>> PrepareAsyncupdate_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>>(PrepareAsyncupdate_post_processing_protocol_progressRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // List the available basecalling configurations sorted by flow cell and kit.
      //
      // Since 3.5
      virtual void list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start basecalling reads files.
      //
      // Since 4.0
      virtual void start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start barcoding fastq files.
      //
      // Since 3.8
      virtual void start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start an post processing analysis protocol.
      //
      // Post processing protocols allow processing already generated sequencing files in some way, eg: running an
      // ARTIC workflow on some fastq files, or barcoding a set of fastq input files.
      //
      // Since 4.4
      virtual void start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start aligning fastq files.
      //
      // Since 3.8
      virtual void start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop a basecalling that was started by start_basecalling_reads().
      //
      // Since 3.5
      virtual void cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets information about one or more basecalling operations.
      //
      // Since 3.5
      virtual void get_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::GetInfoResponse>* reactor) = 0;
      // Monitors basecalls, returning messages when basecalls are started, stopped or receive
      // progress updates.
      //
      // The current state of all currently-running basecalls will be returned in the initial set of
      // messages. Optionally, the state of all already-finished runs can be included. Note that this
      // initial state may be split among several responses.
      //
      // Note that progress updates may be rate limited to avoid affecting performance.
      //
      // Since 3.5
      virtual void watch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::WatchResponse>* reactor) = 0;
      // Build an alignment index file from an input fasta reference.
      //
      // This call blocks whilst the index is built.
      //
      // Since 4.3
      virtual void make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gives back a list that contains info about each possible post processing protocol script minknow is aware of.
      // This will most likely be used to retrieve a suitable post processing protocol script that can be passed on to `start_post_processing_protocol`
      //
      // Since 4.4
      virtual void list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Find available display settings for an post processing protocol
      //
      // Since 4.4
      virtual void list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set the progress of the currently executing post processing protocol (this API expects a run_id as more than one can be active).
      virtual void update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>* Asynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListConfigsByKitResponse>* PrepareAsynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>* Asyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBasecallingResponse>* PrepareAsyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>* Asyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartBarcodingResponse>* PrepareAsyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* Asyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* PrepareAsyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>* Asyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::StartAlignmentResponse>* PrepareAsyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>* AsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::CancelResponse>* PrepareAsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::minknow_api::basecaller::GetInfoResponse>* get_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>* Asyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::GetInfoResponse>* PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::minknow_api::basecaller::WatchResponse>* watchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>* AsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minknow_api::basecaller::WatchResponse>* PrepareAsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* Asyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* PrepareAsyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* Asynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* PrepareAsynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* Asynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* PrepareAsynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>* Asyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minknow_api::basecaller::UpdateProgressResponse>* PrepareAsyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::minknow_api::basecaller::ListConfigsByKitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>> Asynclist_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>>(Asynclist_configs_by_kitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>> PrepareAsynclist_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>>(PrepareAsynclist_configs_by_kitRaw(context, request, cq));
    }
    ::grpc::Status start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::minknow_api::basecaller::StartBasecallingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>> Asyncstart_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>>(Asyncstart_basecallingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>> PrepareAsyncstart_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>>(PrepareAsyncstart_basecallingRaw(context, request, cq));
    }
    ::grpc::Status start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::minknow_api::basecaller::StartBarcodingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>> Asyncstart_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>>(Asyncstart_barcodingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>> PrepareAsyncstart_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>>(PrepareAsyncstart_barcodingRaw(context, request, cq));
    }
    ::grpc::Status start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>> Asyncstart_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>>(Asyncstart_post_processing_protocolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>> PrepareAsyncstart_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>>(PrepareAsyncstart_post_processing_protocolRaw(context, request, cq));
    }
    ::grpc::Status start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::minknow_api::basecaller::StartAlignmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>> Asyncstart_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>>(Asyncstart_alignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>> PrepareAsyncstart_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>>(PrepareAsyncstart_alignmentRaw(context, request, cq));
    }
    ::grpc::Status cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::minknow_api::basecaller::CancelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>> Asynccancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>>(AsynccancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>> PrepareAsynccancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>>(PrepareAsynccancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::minknow_api::basecaller::GetInfoResponse>> get_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::minknow_api::basecaller::GetInfoResponse>>(get_infoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>> Asyncget_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>>(Asyncget_infoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>> PrepareAsyncget_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>>(PrepareAsyncget_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::minknow_api::basecaller::WatchResponse>> watch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::minknow_api::basecaller::WatchResponse>>(watchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>> Asyncwatch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>>(AsyncwatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>> PrepareAsyncwatch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>>(PrepareAsyncwatchRaw(context, request, cq));
    }
    ::grpc::Status make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>> Asyncmake_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>>(Asyncmake_alignment_indexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>> PrepareAsyncmake_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>>(PrepareAsyncmake_alignment_indexRaw(context, request, cq));
    }
    ::grpc::Status list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>> Asynclist_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>>(Asynclist_post_processing_protocolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>> PrepareAsynclist_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>>(PrepareAsynclist_post_processing_protocolsRaw(context, request, cq));
    }
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>> Asynclist_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>>(Asynclist_settings_for_post_processing_protocolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>> PrepareAsynclist_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>>(PrepareAsynclist_settings_for_post_processing_protocolRaw(context, request, cq));
    }
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::minknow_api::basecaller::UpdateProgressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>> Asyncupdate_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>>(Asyncupdate_post_processing_protocol_progressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>> PrepareAsyncupdate_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>>(PrepareAsyncupdate_post_processing_protocol_progressRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, std::function<void(::grpc::Status)>) override;
      void list_configs_by_kit(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, std::function<void(::grpc::Status)>) override;
      void start_basecalling(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, std::function<void(::grpc::Status)>) override;
      void start_barcoding(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)>) override;
      void start_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, std::function<void(::grpc::Status)>) override;
      void start_alignment(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, std::function<void(::grpc::Status)>) override;
      void cancel(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_info(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::GetInfoResponse>* reactor) override;
      void watch(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest* request, ::grpc::ClientReadReactor< ::minknow_api::basecaller::WatchResponse>* reactor) override;
      void make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, std::function<void(::grpc::Status)>) override;
      void make_alignment_index(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, std::function<void(::grpc::Status)>) override;
      void list_post_processing_protocols(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, std::function<void(::grpc::Status)>) override;
      void list_settings_for_post_processing_protocol(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, std::function<void(::grpc::Status)>) override;
      void update_post_processing_protocol_progress(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>* Asynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListConfigsByKitResponse>* PrepareAsynclist_configs_by_kitRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>* Asyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBasecallingResponse>* PrepareAsyncstart_basecallingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBasecallingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>* Asyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartBarcodingResponse>* PrepareAsyncstart_barcodingRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartBarcodingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* Asyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* PrepareAsyncstart_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>* Asyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::StartAlignmentResponse>* PrepareAsyncstart_alignmentRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::StartAlignmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>* AsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::CancelResponse>* PrepareAsynccancelRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::minknow_api::basecaller::GetInfoResponse>* get_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request) override;
    ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>* Asyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::minknow_api::basecaller::GetInfoResponse>* PrepareAsyncget_infoRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::GetInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::minknow_api::basecaller::WatchResponse>* watchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request) override;
    ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>* AsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::minknow_api::basecaller::WatchResponse>* PrepareAsyncwatchRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::WatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* Asyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* PrepareAsyncmake_alignment_indexRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* Asynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* PrepareAsynclist_post_processing_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* Asynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* PrepareAsynclist_settings_for_post_processing_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>* Asyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minknow_api::basecaller::UpdateProgressResponse>* PrepareAsyncupdate_post_processing_protocol_progressRaw(::grpc::ClientContext* context, const ::minknow_api::basecaller::UpdateProgressRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_list_configs_by_kit_;
    const ::grpc::internal::RpcMethod rpcmethod_start_basecalling_;
    const ::grpc::internal::RpcMethod rpcmethod_start_barcoding_;
    const ::grpc::internal::RpcMethod rpcmethod_start_post_processing_protocol_;
    const ::grpc::internal::RpcMethod rpcmethod_start_alignment_;
    const ::grpc::internal::RpcMethod rpcmethod_cancel_;
    const ::grpc::internal::RpcMethod rpcmethod_get_info_;
    const ::grpc::internal::RpcMethod rpcmethod_watch_;
    const ::grpc::internal::RpcMethod rpcmethod_make_alignment_index_;
    const ::grpc::internal::RpcMethod rpcmethod_list_post_processing_protocols_;
    const ::grpc::internal::RpcMethod rpcmethod_list_settings_for_post_processing_protocol_;
    const ::grpc::internal::RpcMethod rpcmethod_update_post_processing_protocol_progress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // List the available basecalling configurations sorted by flow cell and kit.
    //
    // Since 3.5
    virtual ::grpc::Status list_configs_by_kit(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response);
    // Start basecalling reads files.
    //
    // Since 4.0
    virtual ::grpc::Status start_basecalling(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response);
    // Start barcoding fastq files.
    //
    // Since 3.8
    virtual ::grpc::Status start_barcoding(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response);
    // Start an post processing analysis protocol.
    //
    // Post processing protocols allow processing already generated sequencing files in some way, eg: running an
    // ARTIC workflow on some fastq files, or barcoding a set of fastq input files.
    //
    // Since 4.4
    virtual ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response);
    // Start aligning fastq files.
    //
    // Since 3.8
    virtual ::grpc::Status start_alignment(::grpc::ServerContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response);
    // Stop a basecalling that was started by start_basecalling_reads().
    //
    // Since 3.5
    virtual ::grpc::Status cancel(::grpc::ServerContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response);
    // Gets information about one or more basecalling operations.
    //
    // Since 3.5
    virtual ::grpc::Status get_info(::grpc::ServerContext* context, const ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* writer);
    // Monitors basecalls, returning messages when basecalls are started, stopped or receive
    // progress updates.
    //
    // The current state of all currently-running basecalls will be returned in the initial set of
    // messages. Optionally, the state of all already-finished runs can be included. Note that this
    // initial state may be split among several responses.
    //
    // Note that progress updates may be rate limited to avoid affecting performance.
    //
    // Since 3.5
    virtual ::grpc::Status watch(::grpc::ServerContext* context, const ::minknow_api::basecaller::WatchRequest* request, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* writer);
    // Build an alignment index file from an input fasta reference.
    //
    // This call blocks whilst the index is built.
    //
    // Since 4.3
    virtual ::grpc::Status make_alignment_index(::grpc::ServerContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response);
    // Gives back a list that contains info about each possible post processing protocol script minknow is aware of.
    // This will most likely be used to retrieve a suitable post processing protocol script that can be passed on to `start_post_processing_protocol`
    //
    // Since 4.4
    virtual ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response);
    // Find available display settings for an post processing protocol
    //
    // Since 4.4
    virtual ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response);
    // Set the progress of the currently executing post processing protocol (this API expects a run_id as more than one can be active).
    virtual ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_configs_by_kit(::grpc::ServerContext* context, ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::ListConfigsByKitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start_basecalling() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_basecalling(::grpc::ServerContext* context, ::minknow_api::basecaller::StartBasecallingRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::StartBasecallingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start_barcoding() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_barcoding(::grpc::ServerContext* context, ::minknow_api::basecaller::StartBarcodingRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::StartBarcodingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_post_processing_protocol(::grpc::ServerContext* context, ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start_alignment() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_alignment(::grpc::ServerContext* context, ::minknow_api::basecaller::StartAlignmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::StartAlignmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_cancel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcancel(::grpc::ServerContext* context, ::minknow_api::basecaller::CancelRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::CancelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_info() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_info(::grpc::ServerContext* context, ::minknow_api::basecaller::GetInfoRequest* request, ::grpc::ServerAsyncWriter< ::minknow_api::basecaller::GetInfoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_watch() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwatch(::grpc::ServerContext* context, ::minknow_api::basecaller::WatchRequest* request, ::grpc::ServerAsyncWriter< ::minknow_api::basecaller::WatchResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake_alignment_index(::grpc::ServerContext* context, ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::MakeAlignmentIndexResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_post_processing_protocols(::grpc::ServerContext* context, ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_settings_for_post_processing_protocol(::grpc::ServerContext* context, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_post_processing_protocol_progress(::grpc::ServerContext* context, ::minknow_api::basecaller::UpdateProgressRequest* request, ::grpc::ServerAsyncResponseWriter< ::minknow_api::basecaller::UpdateProgressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_list_configs_by_kit<WithAsyncMethod_start_basecalling<WithAsyncMethod_start_barcoding<WithAsyncMethod_start_post_processing_protocol<WithAsyncMethod_start_alignment<WithAsyncMethod_cancel<WithAsyncMethod_get_info<WithAsyncMethod_watch<WithAsyncMethod_make_alignment_index<WithAsyncMethod_list_post_processing_protocols<WithAsyncMethod_list_settings_for_post_processing_protocol<WithAsyncMethod_update_post_processing_protocol_progress<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::ListConfigsByKitRequest* request, ::minknow_api::basecaller::ListConfigsByKitResponse* response) { return this->list_configs_by_kit(context, request, response); }));}
    void SetMessageAllocatorFor_list_configs_by_kit(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_configs_by_kit(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start_basecalling() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::StartBasecallingRequest* request, ::minknow_api::basecaller::StartBasecallingResponse* response) { return this->start_basecalling(context, request, response); }));}
    void SetMessageAllocatorFor_start_basecalling(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_basecalling(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start_barcoding() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::StartBarcodingRequest* request, ::minknow_api::basecaller::StartBarcodingResponse* response) { return this->start_barcoding(context, request, response); }));}
    void SetMessageAllocatorFor_start_barcoding(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_barcoding(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* request, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* response) { return this->start_post_processing_protocol(context, request, response); }));}
    void SetMessageAllocatorFor_start_post_processing_protocol(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_post_processing_protocol(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start_alignment() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::StartAlignmentRequest* request, ::minknow_api::basecaller::StartAlignmentResponse* response) { return this->start_alignment(context, request, response); }));}
    void SetMessageAllocatorFor_start_alignment(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_alignment(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_cancel() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::CancelRequest* request, ::minknow_api::basecaller::CancelResponse* response) { return this->cancel(context, request, response); }));}
    void SetMessageAllocatorFor_cancel(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_info() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::minknow_api::basecaller::GetInfoRequest, ::minknow_api::basecaller::GetInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::GetInfoRequest* request) { return this->get_info(context, request); }));
    }
    ~WithCallbackMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::minknow_api::basecaller::GetInfoResponse>* get_info(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_watch() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::minknow_api::basecaller::WatchRequest, ::minknow_api::basecaller::WatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::WatchRequest* request) { return this->watch(context, request); }));
    }
    ~WithCallbackMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::minknow_api::basecaller::WatchResponse>* watch(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* request, ::minknow_api::basecaller::MakeAlignmentIndexResponse* response) { return this->make_alignment_index(context, request, response); }));}
    void SetMessageAllocatorFor_make_alignment_index(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make_alignment_index(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* request, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* response) { return this->list_post_processing_protocols(context, request, response); }));}
    void SetMessageAllocatorFor_list_post_processing_protocols(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_post_processing_protocols(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* request, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* response) { return this->list_settings_for_post_processing_protocol(context, request, response); }));}
    void SetMessageAllocatorFor_list_settings_for_post_processing_protocol(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_settings_for_post_processing_protocol(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::minknow_api::basecaller::UpdateProgressRequest* request, ::minknow_api::basecaller::UpdateProgressResponse* response) { return this->update_post_processing_protocol_progress(context, request, response); }));}
    void SetMessageAllocatorFor_update_post_processing_protocol_progress(
        ::grpc::MessageAllocator< ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_post_processing_protocol_progress(
      ::grpc::CallbackServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_list_configs_by_kit<WithCallbackMethod_start_basecalling<WithCallbackMethod_start_barcoding<WithCallbackMethod_start_post_processing_protocol<WithCallbackMethod_start_alignment<WithCallbackMethod_cancel<WithCallbackMethod_get_info<WithCallbackMethod_watch<WithCallbackMethod_make_alignment_index<WithCallbackMethod_list_post_processing_protocols<WithCallbackMethod_list_settings_for_post_processing_protocol<WithCallbackMethod_update_post_processing_protocol_progress<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start_basecalling() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start_barcoding() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start_alignment() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_cancel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_info() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_watch() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_configs_by_kit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start_basecalling() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_basecalling(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start_barcoding() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_barcoding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_post_processing_protocol(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start_alignment() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart_alignment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_cancel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_info() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_watch() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmake_alignment_index(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_post_processing_protocols(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_settings_for_post_processing_protocol(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate_post_processing_protocol_progress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->list_configs_by_kit(context, request, response); }));
    }
    ~WithRawCallbackMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_configs_by_kit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start_basecalling() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start_basecalling(context, request, response); }));
    }
    ~WithRawCallbackMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_basecalling(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start_barcoding() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start_barcoding(context, request, response); }));
    }
    ~WithRawCallbackMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_barcoding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start_post_processing_protocol(context, request, response); }));
    }
    ~WithRawCallbackMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_post_processing_protocol(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start_alignment() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start_alignment(context, request, response); }));
    }
    ~WithRawCallbackMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start_alignment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_cancel() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->cancel(context, request, response); }));
    }
    ~WithRawCallbackMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_info() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->get_info(context, request); }));
    }
    ~WithRawCallbackMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* get_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_watch() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->watch(context, request); }));
    }
    ~WithRawCallbackMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* watch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->make_alignment_index(context, request, response); }));
    }
    ~WithRawCallbackMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* make_alignment_index(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->list_post_processing_protocols(context, request, response); }));
    }
    ~WithRawCallbackMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_post_processing_protocols(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->list_settings_for_post_processing_protocol(context, request, response); }));
    }
    ~WithRawCallbackMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_settings_for_post_processing_protocol(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update_post_processing_protocol_progress(context, request, response); }));
    }
    ~WithRawCallbackMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* update_post_processing_protocol_progress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_configs_by_kit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_list_configs_by_kit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::ListConfigsByKitRequest, ::minknow_api::basecaller::ListConfigsByKitResponse>* streamer) {
                       return this->Streamedlist_configs_by_kit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_list_configs_by_kit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_configs_by_kit(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListConfigsByKitRequest* /*request*/, ::minknow_api::basecaller::ListConfigsByKitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_configs_by_kit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::ListConfigsByKitRequest,::minknow_api::basecaller::ListConfigsByKitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start_basecalling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start_basecalling() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::StartBasecallingRequest, ::minknow_api::basecaller::StartBasecallingResponse>* streamer) {
                       return this->Streamedstart_basecalling(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start_basecalling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start_basecalling(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBasecallingRequest* /*request*/, ::minknow_api::basecaller::StartBasecallingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart_basecalling(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::StartBasecallingRequest,::minknow_api::basecaller::StartBasecallingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start_barcoding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start_barcoding() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::StartBarcodingRequest, ::minknow_api::basecaller::StartBarcodingResponse>* streamer) {
                       return this->Streamedstart_barcoding(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start_barcoding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start_barcoding(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartBarcodingRequest* /*request*/, ::minknow_api::basecaller::StartBarcodingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart_barcoding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::StartBarcodingRequest,::minknow_api::basecaller::StartBarcodingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start_post_processing_protocol() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::StartPostProcessingProtocolRequest, ::minknow_api::basecaller::StartPostProcessingProtocolResponse>* streamer) {
                       return this->Streamedstart_post_processing_protocol(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::StartPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart_post_processing_protocol(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::StartPostProcessingProtocolRequest,::minknow_api::basecaller::StartPostProcessingProtocolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start_alignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start_alignment() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::StartAlignmentRequest, ::minknow_api::basecaller::StartAlignmentResponse>* streamer) {
                       return this->Streamedstart_alignment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start_alignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start_alignment(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::StartAlignmentRequest* /*request*/, ::minknow_api::basecaller::StartAlignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart_alignment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::StartAlignmentRequest,::minknow_api::basecaller::StartAlignmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_cancel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::CancelRequest, ::minknow_api::basecaller::CancelResponse>* streamer) {
                       return this->Streamedcancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cancel(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::CancelRequest* /*request*/, ::minknow_api::basecaller::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::CancelRequest,::minknow_api::basecaller::CancelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_make_alignment_index : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_make_alignment_index() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::MakeAlignmentIndexRequest, ::minknow_api::basecaller::MakeAlignmentIndexResponse>* streamer) {
                       return this->Streamedmake_alignment_index(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_make_alignment_index() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status make_alignment_index(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::MakeAlignmentIndexRequest* /*request*/, ::minknow_api::basecaller::MakeAlignmentIndexResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmake_alignment_index(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::MakeAlignmentIndexRequest,::minknow_api::basecaller::MakeAlignmentIndexResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_post_processing_protocols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_list_post_processing_protocols() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::ListPostProcessingProtocolsRequest, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* streamer) {
                       return this->Streamedlist_post_processing_protocols(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_list_post_processing_protocols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_post_processing_protocols(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListPostProcessingProtocolsRequest* /*request*/, ::minknow_api::basecaller::ListPostProcessingProtocolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_post_processing_protocols(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::ListPostProcessingProtocolsRequest,::minknow_api::basecaller::ListPostProcessingProtocolsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_settings_for_post_processing_protocol : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_list_settings_for_post_processing_protocol() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* streamer) {
                       return this->Streamedlist_settings_for_post_processing_protocol(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_list_settings_for_post_processing_protocol() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_settings_for_post_processing_protocol(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest* /*request*/, ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_settings_for_post_processing_protocol(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::ListSettingsForPostProcessingProtocolRequest,::minknow_api::basecaller::ListSettingsForPostProcessingProtocolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update_post_processing_protocol_progress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update_post_processing_protocol_progress() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minknow_api::basecaller::UpdateProgressRequest, ::minknow_api::basecaller::UpdateProgressResponse>* streamer) {
                       return this->Streamedupdate_post_processing_protocol_progress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_update_post_processing_protocol_progress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update_post_processing_protocol_progress(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::UpdateProgressRequest* /*request*/, ::minknow_api::basecaller::UpdateProgressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate_post_processing_protocol_progress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minknow_api::basecaller::UpdateProgressRequest,::minknow_api::basecaller::UpdateProgressResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_list_configs_by_kit<WithStreamedUnaryMethod_start_basecalling<WithStreamedUnaryMethod_start_barcoding<WithStreamedUnaryMethod_start_post_processing_protocol<WithStreamedUnaryMethod_start_alignment<WithStreamedUnaryMethod_cancel<WithStreamedUnaryMethod_make_alignment_index<WithStreamedUnaryMethod_list_post_processing_protocols<WithStreamedUnaryMethod_list_settings_for_post_processing_protocol<WithStreamedUnaryMethod_update_post_processing_protocol_progress<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_get_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_get_info() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::minknow_api::basecaller::GetInfoRequest, ::minknow_api::basecaller::GetInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::minknow_api::basecaller::GetInfoRequest, ::minknow_api::basecaller::GetInfoResponse>* streamer) {
                       return this->Streamedget_info(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_get_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_info(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::GetInfoRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::GetInfoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedget_info(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::minknow_api::basecaller::GetInfoRequest,::minknow_api::basecaller::GetInfoResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_watch() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::minknow_api::basecaller::WatchRequest, ::minknow_api::basecaller::WatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::minknow_api::basecaller::WatchRequest, ::minknow_api::basecaller::WatchResponse>* streamer) {
                       return this->Streamedwatch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status watch(::grpc::ServerContext* /*context*/, const ::minknow_api::basecaller::WatchRequest* /*request*/, ::grpc::ServerWriter< ::minknow_api::basecaller::WatchResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedwatch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::minknow_api::basecaller::WatchRequest,::minknow_api::basecaller::WatchResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_get_info<WithSplitStreamingMethod_watch<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_list_configs_by_kit<WithStreamedUnaryMethod_start_basecalling<WithStreamedUnaryMethod_start_barcoding<WithStreamedUnaryMethod_start_post_processing_protocol<WithStreamedUnaryMethod_start_alignment<WithStreamedUnaryMethod_cancel<WithSplitStreamingMethod_get_info<WithSplitStreamingMethod_watch<WithStreamedUnaryMethod_make_alignment_index<WithStreamedUnaryMethod_list_post_processing_protocols<WithStreamedUnaryMethod_list_settings_for_post_processing_protocol<WithStreamedUnaryMethod_update_post_processing_protocol_progress<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace basecaller
}  // namespace minknow_api


#endif  // GRPC_minknow_5fapi_2fbasecaller_2eproto__INCLUDED
