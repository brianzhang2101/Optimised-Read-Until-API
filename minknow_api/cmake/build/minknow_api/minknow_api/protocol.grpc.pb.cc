// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/protocol.proto

#include "minknow_api/protocol.pb.h"
#include "minknow_api/protocol.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace protocol {

static const char* ProtocolService_method_names[] = {
  "/minknow_api.protocol.ProtocolService/start_protocol",
  "/minknow_api.protocol.ProtocolService/stop_protocol",
  "/minknow_api.protocol.ProtocolService/pause_protocol",
  "/minknow_api.protocol.ProtocolService/resume_protocol",
  "/minknow_api.protocol.ProtocolService/trigger_mux_scan",
  "/minknow_api.protocol.ProtocolService/wait_for_finished",
  "/minknow_api.protocol.ProtocolService/get_run_info",
  "/minknow_api.protocol.ProtocolService/list_protocol_runs",
  "/minknow_api.protocol.ProtocolService/get_current_protocol_run",
  "/minknow_api.protocol.ProtocolService/watch_current_protocol_run",
  "/minknow_api.protocol.ProtocolService/list_protocols",
  "/minknow_api.protocol.ProtocolService/get_context_info",
  "/minknow_api.protocol.ProtocolService/set_context_info",
  "/minknow_api.protocol.ProtocolService/get_protocol_purpose",
  "/minknow_api.protocol.ProtocolService/set_protocol_purpose",
  "/minknow_api.protocol.ProtocolService/add_epi2me_workflow",
  "/minknow_api.protocol.ProtocolService/list_protocol_group_ids",
  "/minknow_api.protocol.ProtocolService/begin_hardware_check",
  "/minknow_api.protocol.ProtocolService/begin_platform_qc",
  "/minknow_api.protocol.ProtocolService/set_platform_qc_result",
  "/minknow_api.protocol.ProtocolService/list_settings_for_protocol",
  "/minknow_api.protocol.ProtocolService/associate_post_processing_analysis_for_protocol",
  "/minknow_api.protocol.ProtocolService/clear_protocol_history_data",
  "/minknow_api.protocol.ProtocolService/protocol_phase_management",
};

std::unique_ptr< ProtocolService::Stub> ProtocolService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProtocolService::Stub> stub(new ProtocolService::Stub(channel, options));
  return stub;
}

ProtocolService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_start_protocol_(ProtocolService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_protocol_(ProtocolService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pause_protocol_(ProtocolService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resume_protocol_(ProtocolService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_trigger_mux_scan_(ProtocolService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wait_for_finished_(ProtocolService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_run_info_(ProtocolService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_protocol_runs_(ProtocolService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_current_protocol_run_(ProtocolService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_watch_current_protocol_run_(ProtocolService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_list_protocols_(ProtocolService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_context_info_(ProtocolService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_context_info_(ProtocolService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_protocol_purpose_(ProtocolService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_protocol_purpose_(ProtocolService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_epi2me_workflow_(ProtocolService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_protocol_group_ids_(ProtocolService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_begin_hardware_check_(ProtocolService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_begin_platform_qc_(ProtocolService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_platform_qc_result_(ProtocolService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_settings_for_protocol_(ProtocolService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_associate_post_processing_analysis_for_protocol_(ProtocolService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_protocol_history_data_(ProtocolService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_protocol_phase_management_(ProtocolService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ProtocolService::Stub::start_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StartProtocolRequest& request, ::minknow_api::protocol::StartProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::StartProtocolRequest, ::minknow_api::protocol::StartProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_protocol_, context, request, response);
}

void ProtocolService::Stub::async::start_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StartProtocolRequest* request, ::minknow_api::protocol::StartProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::StartProtocolRequest, ::minknow_api::protocol::StartProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::start_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StartProtocolRequest* request, ::minknow_api::protocol::StartProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::StartProtocolResponse>* ProtocolService::Stub::PrepareAsyncstart_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::StartProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::StartProtocolResponse, ::minknow_api::protocol::StartProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::StartProtocolResponse>* ProtocolService::Stub::Asyncstart_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::StartProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::stop_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StopProtocolRequest& request, ::minknow_api::protocol::StopProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::StopProtocolRequest, ::minknow_api::protocol::StopProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_protocol_, context, request, response);
}

void ProtocolService::Stub::async::stop_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StopProtocolRequest* request, ::minknow_api::protocol::StopProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::StopProtocolRequest, ::minknow_api::protocol::StopProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::stop_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::StopProtocolRequest* request, ::minknow_api::protocol::StopProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::StopProtocolResponse>* ProtocolService::Stub::PrepareAsyncstop_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::StopProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::StopProtocolResponse, ::minknow_api::protocol::StopProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::StopProtocolResponse>* ProtocolService::Stub::Asyncstop_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::StopProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstop_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::pause_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::PauseProtocolRequest& request, ::minknow_api::protocol::PauseProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::PauseProtocolRequest, ::minknow_api::protocol::PauseProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pause_protocol_, context, request, response);
}

void ProtocolService::Stub::async::pause_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::PauseProtocolRequest* request, ::minknow_api::protocol::PauseProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::PauseProtocolRequest, ::minknow_api::protocol::PauseProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::pause_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::PauseProtocolRequest* request, ::minknow_api::protocol::PauseProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pause_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::PauseProtocolResponse>* ProtocolService::Stub::PrepareAsyncpause_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::PauseProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::PauseProtocolResponse, ::minknow_api::protocol::PauseProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pause_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::PauseProtocolResponse>* ProtocolService::Stub::Asyncpause_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::PauseProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpause_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::resume_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ResumeProtocolRequest& request, ::minknow_api::protocol::ResumeProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ResumeProtocolRequest, ::minknow_api::protocol::ResumeProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resume_protocol_, context, request, response);
}

void ProtocolService::Stub::async::resume_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ResumeProtocolRequest* request, ::minknow_api::protocol::ResumeProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ResumeProtocolRequest, ::minknow_api::protocol::ResumeProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resume_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::resume_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ResumeProtocolRequest* request, ::minknow_api::protocol::ResumeProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resume_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ResumeProtocolResponse>* ProtocolService::Stub::PrepareAsyncresume_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ResumeProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ResumeProtocolResponse, ::minknow_api::protocol::ResumeProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resume_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ResumeProtocolResponse>* ProtocolService::Stub::Asyncresume_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ResumeProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresume_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::trigger_mux_scan(::grpc::ClientContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest& request, ::minknow_api::protocol::TriggerMuxScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::TriggerMuxScanRequest, ::minknow_api::protocol::TriggerMuxScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_trigger_mux_scan_, context, request, response);
}

void ProtocolService::Stub::async::trigger_mux_scan(::grpc::ClientContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest* request, ::minknow_api::protocol::TriggerMuxScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::TriggerMuxScanRequest, ::minknow_api::protocol::TriggerMuxScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_trigger_mux_scan_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::trigger_mux_scan(::grpc::ClientContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest* request, ::minknow_api::protocol::TriggerMuxScanResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_trigger_mux_scan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::TriggerMuxScanResponse>* ProtocolService::Stub::PrepareAsynctrigger_mux_scanRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::TriggerMuxScanResponse, ::minknow_api::protocol::TriggerMuxScanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_trigger_mux_scan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::TriggerMuxScanResponse>* ProtocolService::Stub::Asynctrigger_mux_scanRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctrigger_mux_scanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::wait_for_finished(::grpc::ClientContext* context, const ::minknow_api::protocol::WaitForFinishedRequest& request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::WaitForFinishedRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wait_for_finished_, context, request, response);
}

void ProtocolService::Stub::async::wait_for_finished(::grpc::ClientContext* context, const ::minknow_api::protocol::WaitForFinishedRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::WaitForFinishedRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_for_finished_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::wait_for_finished(::grpc::ClientContext* context, const ::minknow_api::protocol::WaitForFinishedRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_for_finished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::PrepareAsyncwait_for_finishedRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::WaitForFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ProtocolRunInfo, ::minknow_api::protocol::WaitForFinishedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wait_for_finished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::Asyncwait_for_finishedRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::WaitForFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwait_for_finishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::get_run_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetRunInfoRequest& request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::GetRunInfoRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_run_info_, context, request, response);
}

void ProtocolService::Stub::async::get_run_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetRunInfoRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::GetRunInfoRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_run_info_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::get_run_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetRunInfoRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_run_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::PrepareAsyncget_run_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetRunInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ProtocolRunInfo, ::minknow_api::protocol::GetRunInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_run_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::Asyncget_run_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetRunInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_run_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::list_protocol_runs(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest& request, ::minknow_api::protocol::ListProtocolRunsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ListProtocolRunsRequest, ::minknow_api::protocol::ListProtocolRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_protocol_runs_, context, request, response);
}

void ProtocolService::Stub::async::list_protocol_runs(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest* request, ::minknow_api::protocol::ListProtocolRunsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ListProtocolRunsRequest, ::minknow_api::protocol::ListProtocolRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocol_runs_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::list_protocol_runs(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest* request, ::minknow_api::protocol::ListProtocolRunsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocol_runs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolRunsResponse>* ProtocolService::Stub::PrepareAsynclist_protocol_runsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ListProtocolRunsResponse, ::minknow_api::protocol::ListProtocolRunsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_protocol_runs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolRunsResponse>* ProtocolService::Stub::Asynclist_protocol_runsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_protocol_runsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::get_current_protocol_run(::grpc::ClientContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest& request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::GetCurrentProtocolRunRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_current_protocol_run_, context, request, response);
}

void ProtocolService::Stub::async::get_current_protocol_run(::grpc::ClientContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::GetCurrentProtocolRunRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_current_protocol_run_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::get_current_protocol_run(::grpc::ClientContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_current_protocol_run_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::PrepareAsyncget_current_protocol_runRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ProtocolRunInfo, ::minknow_api::protocol::GetCurrentProtocolRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_current_protocol_run_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::Asyncget_current_protocol_runRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_current_protocol_runRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::watch_current_protocol_runRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::WatchCurrentProtocolRunRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::protocol::ProtocolRunInfo>::Create(channel_.get(), rpcmethod_watch_current_protocol_run_, context, request);
}

void ProtocolService::Stub::async::watch_current_protocol_run(::grpc::ClientContext* context, const ::minknow_api::protocol::WatchCurrentProtocolRunRequest* request, ::grpc::ClientReadReactor< ::minknow_api::protocol::ProtocolRunInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::protocol::ProtocolRunInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_watch_current_protocol_run_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::Asyncwatch_current_protocol_runRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::WatchCurrentProtocolRunRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::protocol::ProtocolRunInfo>::Create(channel_.get(), cq, rpcmethod_watch_current_protocol_run_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::protocol::ProtocolRunInfo>* ProtocolService::Stub::PrepareAsyncwatch_current_protocol_runRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::WatchCurrentProtocolRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::protocol::ProtocolRunInfo>::Create(channel_.get(), cq, rpcmethod_watch_current_protocol_run_, context, request, false, nullptr);
}

::grpc::Status ProtocolService::Stub::list_protocols(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolsRequest& request, ::minknow_api::protocol::ListProtocolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ListProtocolsRequest, ::minknow_api::protocol::ListProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_protocols_, context, request, response);
}

void ProtocolService::Stub::async::list_protocols(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolsRequest* request, ::minknow_api::protocol::ListProtocolsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ListProtocolsRequest, ::minknow_api::protocol::ListProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocols_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::list_protocols(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolsRequest* request, ::minknow_api::protocol::ListProtocolsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolsResponse>* ProtocolService::Stub::PrepareAsynclist_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ListProtocolsResponse, ::minknow_api::protocol::ListProtocolsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_protocols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolsResponse>* ProtocolService::Stub::Asynclist_protocolsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_protocolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::get_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetContextInfoRequest& request, ::minknow_api::protocol::GetContextInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::GetContextInfoRequest, ::minknow_api::protocol::GetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_context_info_, context, request, response);
}

void ProtocolService::Stub::async::get_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetContextInfoRequest* request, ::minknow_api::protocol::GetContextInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::GetContextInfoRequest, ::minknow_api::protocol::GetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_context_info_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::get_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::GetContextInfoRequest* request, ::minknow_api::protocol::GetContextInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_context_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::GetContextInfoResponse>* ProtocolService::Stub::PrepareAsyncget_context_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetContextInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::GetContextInfoResponse, ::minknow_api::protocol::GetContextInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_context_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::GetContextInfoResponse>* ProtocolService::Stub::Asyncget_context_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetContextInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_context_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::set_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::SetContextInfoRequest& request, ::minknow_api::protocol::SetContextInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::SetContextInfoRequest, ::minknow_api::protocol::SetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_context_info_, context, request, response);
}

void ProtocolService::Stub::async::set_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::SetContextInfoRequest* request, ::minknow_api::protocol::SetContextInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::SetContextInfoRequest, ::minknow_api::protocol::SetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_context_info_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::set_context_info(::grpc::ClientContext* context, const ::minknow_api::protocol::SetContextInfoRequest* request, ::minknow_api::protocol::SetContextInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_context_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetContextInfoResponse>* ProtocolService::Stub::PrepareAsyncset_context_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetContextInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::SetContextInfoResponse, ::minknow_api::protocol::SetContextInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_context_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetContextInfoResponse>* ProtocolService::Stub::Asyncset_context_infoRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetContextInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_context_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::get_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest& request, ::minknow_api::protocol::GetProtocolPurposeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::GetProtocolPurposeRequest, ::minknow_api::protocol::GetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_protocol_purpose_, context, request, response);
}

void ProtocolService::Stub::async::get_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest* request, ::minknow_api::protocol::GetProtocolPurposeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::GetProtocolPurposeRequest, ::minknow_api::protocol::GetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_protocol_purpose_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::get_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest* request, ::minknow_api::protocol::GetProtocolPurposeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_protocol_purpose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::GetProtocolPurposeResponse>* ProtocolService::Stub::PrepareAsyncget_protocol_purposeRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::GetProtocolPurposeResponse, ::minknow_api::protocol::GetProtocolPurposeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_protocol_purpose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::GetProtocolPurposeResponse>* ProtocolService::Stub::Asyncget_protocol_purposeRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_protocol_purposeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::set_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest& request, ::minknow_api::protocol::SetProtocolPurposeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::SetProtocolPurposeRequest, ::minknow_api::protocol::SetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_protocol_purpose_, context, request, response);
}

void ProtocolService::Stub::async::set_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest* request, ::minknow_api::protocol::SetProtocolPurposeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::SetProtocolPurposeRequest, ::minknow_api::protocol::SetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_protocol_purpose_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::set_protocol_purpose(::grpc::ClientContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest* request, ::minknow_api::protocol::SetProtocolPurposeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_protocol_purpose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetProtocolPurposeResponse>* ProtocolService::Stub::PrepareAsyncset_protocol_purposeRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::SetProtocolPurposeResponse, ::minknow_api::protocol::SetProtocolPurposeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_protocol_purpose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetProtocolPurposeResponse>* ProtocolService::Stub::Asyncset_protocol_purposeRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_protocol_purposeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::add_epi2me_workflow(::grpc::ClientContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest& request, ::minknow_api::protocol::AddEpi2meWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::AddEpi2meWorkflowRequest, ::minknow_api::protocol::AddEpi2meWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_epi2me_workflow_, context, request, response);
}

void ProtocolService::Stub::async::add_epi2me_workflow(::grpc::ClientContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest* request, ::minknow_api::protocol::AddEpi2meWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::AddEpi2meWorkflowRequest, ::minknow_api::protocol::AddEpi2meWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_epi2me_workflow_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::add_epi2me_workflow(::grpc::ClientContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest* request, ::minknow_api::protocol::AddEpi2meWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_epi2me_workflow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::AddEpi2meWorkflowResponse>* ProtocolService::Stub::PrepareAsyncadd_epi2me_workflowRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::AddEpi2meWorkflowResponse, ::minknow_api::protocol::AddEpi2meWorkflowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_epi2me_workflow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::AddEpi2meWorkflowResponse>* ProtocolService::Stub::Asyncadd_epi2me_workflowRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncadd_epi2me_workflowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::list_protocol_group_ids(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest& request, ::minknow_api::protocol::ListProtocolGroupIdsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ListProtocolGroupIdsRequest, ::minknow_api::protocol::ListProtocolGroupIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_protocol_group_ids_, context, request, response);
}

void ProtocolService::Stub::async::list_protocol_group_ids(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest* request, ::minknow_api::protocol::ListProtocolGroupIdsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ListProtocolGroupIdsRequest, ::minknow_api::protocol::ListProtocolGroupIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocol_group_ids_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::list_protocol_group_ids(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest* request, ::minknow_api::protocol::ListProtocolGroupIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_protocol_group_ids_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolGroupIdsResponse>* ProtocolService::Stub::PrepareAsynclist_protocol_group_idsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ListProtocolGroupIdsResponse, ::minknow_api::protocol::ListProtocolGroupIdsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_protocol_group_ids_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListProtocolGroupIdsResponse>* ProtocolService::Stub::Asynclist_protocol_group_idsRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_protocol_group_idsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::begin_hardware_check(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest& request, ::minknow_api::protocol::BeginHardwareCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::BeginHardwareCheckRequest, ::minknow_api::protocol::BeginHardwareCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_begin_hardware_check_, context, request, response);
}

void ProtocolService::Stub::async::begin_hardware_check(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest* request, ::minknow_api::protocol::BeginHardwareCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::BeginHardwareCheckRequest, ::minknow_api::protocol::BeginHardwareCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin_hardware_check_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::begin_hardware_check(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest* request, ::minknow_api::protocol::BeginHardwareCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin_hardware_check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::BeginHardwareCheckResponse>* ProtocolService::Stub::PrepareAsyncbegin_hardware_checkRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::BeginHardwareCheckResponse, ::minknow_api::protocol::BeginHardwareCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_begin_hardware_check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::BeginHardwareCheckResponse>* ProtocolService::Stub::Asyncbegin_hardware_checkRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbegin_hardware_checkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::begin_platform_qc(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest& request, ::minknow_api::protocol::BeginPlatformQcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::BeginPlatformQcRequest, ::minknow_api::protocol::BeginPlatformQcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_begin_platform_qc_, context, request, response);
}

void ProtocolService::Stub::async::begin_platform_qc(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest* request, ::minknow_api::protocol::BeginPlatformQcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::BeginPlatformQcRequest, ::minknow_api::protocol::BeginPlatformQcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin_platform_qc_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::begin_platform_qc(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest* request, ::minknow_api::protocol::BeginPlatformQcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_begin_platform_qc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::BeginPlatformQcResponse>* ProtocolService::Stub::PrepareAsyncbegin_platform_qcRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::BeginPlatformQcResponse, ::minknow_api::protocol::BeginPlatformQcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_begin_platform_qc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::BeginPlatformQcResponse>* ProtocolService::Stub::Asyncbegin_platform_qcRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbegin_platform_qcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::set_platform_qc_result(::grpc::ClientContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest& request, ::minknow_api::protocol::SetPlatformQcResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::SetPlatformQcResultRequest, ::minknow_api::protocol::SetPlatformQcResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_platform_qc_result_, context, request, response);
}

void ProtocolService::Stub::async::set_platform_qc_result(::grpc::ClientContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest* request, ::minknow_api::protocol::SetPlatformQcResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::SetPlatformQcResultRequest, ::minknow_api::protocol::SetPlatformQcResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_platform_qc_result_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::set_platform_qc_result(::grpc::ClientContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest* request, ::minknow_api::protocol::SetPlatformQcResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_platform_qc_result_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetPlatformQcResultResponse>* ProtocolService::Stub::PrepareAsyncset_platform_qc_resultRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::SetPlatformQcResultResponse, ::minknow_api::protocol::SetPlatformQcResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_platform_qc_result_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::SetPlatformQcResultResponse>* ProtocolService::Stub::Asyncset_platform_qc_resultRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_platform_qc_resultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::list_settings_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest& request, ::minknow_api::protocol::ListSettingsForProtocolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ListSettingsForProtocolRequest, ::minknow_api::protocol::ListSettingsForProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_settings_for_protocol_, context, request, response);
}

void ProtocolService::Stub::async::list_settings_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest* request, ::minknow_api::protocol::ListSettingsForProtocolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ListSettingsForProtocolRequest, ::minknow_api::protocol::ListSettingsForProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_settings_for_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::list_settings_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest* request, ::minknow_api::protocol::ListSettingsForProtocolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_settings_for_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListSettingsForProtocolResponse>* ProtocolService::Stub::PrepareAsynclist_settings_for_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ListSettingsForProtocolResponse, ::minknow_api::protocol::ListSettingsForProtocolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_settings_for_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ListSettingsForProtocolResponse>* ProtocolService::Stub::Asynclist_settings_for_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_settings_for_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::associate_post_processing_analysis_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest& request, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_associate_post_processing_analysis_for_protocol_, context, request, response);
}

void ProtocolService::Stub::async::associate_post_processing_analysis_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* request, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_associate_post_processing_analysis_for_protocol_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::associate_post_processing_analysis_for_protocol(::grpc::ClientContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* request, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_associate_post_processing_analysis_for_protocol_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse>* ProtocolService::Stub::PrepareAsyncassociate_post_processing_analysis_for_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_associate_post_processing_analysis_for_protocol_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse>* ProtocolService::Stub::Asyncassociate_post_processing_analysis_for_protocolRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncassociate_post_processing_analysis_for_protocolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProtocolService::Stub::clear_protocol_history_data(::grpc::ClientContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest& request, ::minknow_api::protocol::ClearProtocolHistoryDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::protocol::ClearProtocolHistoryDataRequest, ::minknow_api::protocol::ClearProtocolHistoryDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_protocol_history_data_, context, request, response);
}

void ProtocolService::Stub::async::clear_protocol_history_data(::grpc::ClientContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest* request, ::minknow_api::protocol::ClearProtocolHistoryDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::protocol::ClearProtocolHistoryDataRequest, ::minknow_api::protocol::ClearProtocolHistoryDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_protocol_history_data_, context, request, response, std::move(f));
}

void ProtocolService::Stub::async::clear_protocol_history_data(::grpc::ClientContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest* request, ::minknow_api::protocol::ClearProtocolHistoryDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_protocol_history_data_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ClearProtocolHistoryDataResponse>* ProtocolService::Stub::PrepareAsyncclear_protocol_history_dataRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::protocol::ClearProtocolHistoryDataResponse, ::minknow_api::protocol::ClearProtocolHistoryDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_protocol_history_data_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::protocol::ClearProtocolHistoryDataResponse>* ProtocolService::Stub::Asyncclear_protocol_history_dataRaw(::grpc::ClientContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclear_protocol_history_dataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>* ProtocolService::Stub::protocol_phase_managementRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>::Create(channel_.get(), rpcmethod_protocol_phase_management_, context);
}

void ProtocolService::Stub::async::protocol_phase_management(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::minknow_api::protocol::ProtocolPhaseManagementRequest,::minknow_api::protocol::ProtocolPhaseManagementResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::minknow_api::protocol::ProtocolPhaseManagementRequest,::minknow_api::protocol::ProtocolPhaseManagementResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_protocol_phase_management_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>* ProtocolService::Stub::Asyncprotocol_phase_managementRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>::Create(channel_.get(), cq, rpcmethod_protocol_phase_management_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>* ProtocolService::Stub::PrepareAsyncprotocol_phase_managementRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>::Create(channel_.get(), cq, rpcmethod_protocol_phase_management_, context, false, nullptr);
}

ProtocolService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::StartProtocolRequest, ::minknow_api::protocol::StartProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::StartProtocolRequest* req,
             ::minknow_api::protocol::StartProtocolResponse* resp) {
               return service->start_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::StopProtocolRequest, ::minknow_api::protocol::StopProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::StopProtocolRequest* req,
             ::minknow_api::protocol::StopProtocolResponse* resp) {
               return service->stop_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::PauseProtocolRequest, ::minknow_api::protocol::PauseProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::PauseProtocolRequest* req,
             ::minknow_api::protocol::PauseProtocolResponse* resp) {
               return service->pause_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ResumeProtocolRequest, ::minknow_api::protocol::ResumeProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ResumeProtocolRequest* req,
             ::minknow_api::protocol::ResumeProtocolResponse* resp) {
               return service->resume_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::TriggerMuxScanRequest, ::minknow_api::protocol::TriggerMuxScanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::TriggerMuxScanRequest* req,
             ::minknow_api::protocol::TriggerMuxScanResponse* resp) {
               return service->trigger_mux_scan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::WaitForFinishedRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::WaitForFinishedRequest* req,
             ::minknow_api::protocol::ProtocolRunInfo* resp) {
               return service->wait_for_finished(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::GetRunInfoRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::GetRunInfoRequest* req,
             ::minknow_api::protocol::ProtocolRunInfo* resp) {
               return service->get_run_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ListProtocolRunsRequest, ::minknow_api::protocol::ListProtocolRunsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ListProtocolRunsRequest* req,
             ::minknow_api::protocol::ListProtocolRunsResponse* resp) {
               return service->list_protocol_runs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::GetCurrentProtocolRunRequest, ::minknow_api::protocol::ProtocolRunInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::GetCurrentProtocolRunRequest* req,
             ::minknow_api::protocol::ProtocolRunInfo* resp) {
               return service->get_current_protocol_run(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ProtocolService::Service, ::minknow_api::protocol::WatchCurrentProtocolRunRequest, ::minknow_api::protocol::ProtocolRunInfo>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::WatchCurrentProtocolRunRequest* req,
             ::grpc::ServerWriter<::minknow_api::protocol::ProtocolRunInfo>* writer) {
               return service->watch_current_protocol_run(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ListProtocolsRequest, ::minknow_api::protocol::ListProtocolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ListProtocolsRequest* req,
             ::minknow_api::protocol::ListProtocolsResponse* resp) {
               return service->list_protocols(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::GetContextInfoRequest, ::minknow_api::protocol::GetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::GetContextInfoRequest* req,
             ::minknow_api::protocol::GetContextInfoResponse* resp) {
               return service->get_context_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::SetContextInfoRequest, ::minknow_api::protocol::SetContextInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::SetContextInfoRequest* req,
             ::minknow_api::protocol::SetContextInfoResponse* resp) {
               return service->set_context_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::GetProtocolPurposeRequest, ::minknow_api::protocol::GetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::GetProtocolPurposeRequest* req,
             ::minknow_api::protocol::GetProtocolPurposeResponse* resp) {
               return service->get_protocol_purpose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::SetProtocolPurposeRequest, ::minknow_api::protocol::SetProtocolPurposeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::SetProtocolPurposeRequest* req,
             ::minknow_api::protocol::SetProtocolPurposeResponse* resp) {
               return service->set_protocol_purpose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::AddEpi2meWorkflowRequest, ::minknow_api::protocol::AddEpi2meWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::AddEpi2meWorkflowRequest* req,
             ::minknow_api::protocol::AddEpi2meWorkflowResponse* resp) {
               return service->add_epi2me_workflow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ListProtocolGroupIdsRequest, ::minknow_api::protocol::ListProtocolGroupIdsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ListProtocolGroupIdsRequest* req,
             ::minknow_api::protocol::ListProtocolGroupIdsResponse* resp) {
               return service->list_protocol_group_ids(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::BeginHardwareCheckRequest, ::minknow_api::protocol::BeginHardwareCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::BeginHardwareCheckRequest* req,
             ::minknow_api::protocol::BeginHardwareCheckResponse* resp) {
               return service->begin_hardware_check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::BeginPlatformQcRequest, ::minknow_api::protocol::BeginPlatformQcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::BeginPlatformQcRequest* req,
             ::minknow_api::protocol::BeginPlatformQcResponse* resp) {
               return service->begin_platform_qc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::SetPlatformQcResultRequest, ::minknow_api::protocol::SetPlatformQcResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::SetPlatformQcResultRequest* req,
             ::minknow_api::protocol::SetPlatformQcResultResponse* resp) {
               return service->set_platform_qc_result(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ListSettingsForProtocolRequest, ::minknow_api::protocol::ListSettingsForProtocolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ListSettingsForProtocolRequest* req,
             ::minknow_api::protocol::ListSettingsForProtocolResponse* resp) {
               return service->list_settings_for_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* req,
             ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* resp) {
               return service->associate_post_processing_analysis_for_protocol(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProtocolService::Service, ::minknow_api::protocol::ClearProtocolHistoryDataRequest, ::minknow_api::protocol::ClearProtocolHistoryDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::protocol::ClearProtocolHistoryDataRequest* req,
             ::minknow_api::protocol::ClearProtocolHistoryDataResponse* resp) {
               return service->clear_protocol_history_data(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProtocolService_method_names[23],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ProtocolService::Service, ::minknow_api::protocol::ProtocolPhaseManagementRequest, ::minknow_api::protocol::ProtocolPhaseManagementResponse>(
          [](ProtocolService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::minknow_api::protocol::ProtocolPhaseManagementResponse,
             ::minknow_api::protocol::ProtocolPhaseManagementRequest>* stream) {
               return service->protocol_phase_management(ctx, stream);
             }, this)));
}

ProtocolService::Service::~Service() {
}

::grpc::Status ProtocolService::Service::start_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::StartProtocolRequest* request, ::minknow_api::protocol::StartProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::stop_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::StopProtocolRequest* request, ::minknow_api::protocol::StopProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::pause_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::PauseProtocolRequest* request, ::minknow_api::protocol::PauseProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::resume_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::ResumeProtocolRequest* request, ::minknow_api::protocol::ResumeProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::trigger_mux_scan(::grpc::ServerContext* context, const ::minknow_api::protocol::TriggerMuxScanRequest* request, ::minknow_api::protocol::TriggerMuxScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::wait_for_finished(::grpc::ServerContext* context, const ::minknow_api::protocol::WaitForFinishedRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::get_run_info(::grpc::ServerContext* context, const ::minknow_api::protocol::GetRunInfoRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::list_protocol_runs(::grpc::ServerContext* context, const ::minknow_api::protocol::ListProtocolRunsRequest* request, ::minknow_api::protocol::ListProtocolRunsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::get_current_protocol_run(::grpc::ServerContext* context, const ::minknow_api::protocol::GetCurrentProtocolRunRequest* request, ::minknow_api::protocol::ProtocolRunInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::watch_current_protocol_run(::grpc::ServerContext* context, const ::minknow_api::protocol::WatchCurrentProtocolRunRequest* request, ::grpc::ServerWriter< ::minknow_api::protocol::ProtocolRunInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::list_protocols(::grpc::ServerContext* context, const ::minknow_api::protocol::ListProtocolsRequest* request, ::minknow_api::protocol::ListProtocolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::get_context_info(::grpc::ServerContext* context, const ::minknow_api::protocol::GetContextInfoRequest* request, ::minknow_api::protocol::GetContextInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::set_context_info(::grpc::ServerContext* context, const ::minknow_api::protocol::SetContextInfoRequest* request, ::minknow_api::protocol::SetContextInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::get_protocol_purpose(::grpc::ServerContext* context, const ::minknow_api::protocol::GetProtocolPurposeRequest* request, ::minknow_api::protocol::GetProtocolPurposeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::set_protocol_purpose(::grpc::ServerContext* context, const ::minknow_api::protocol::SetProtocolPurposeRequest* request, ::minknow_api::protocol::SetProtocolPurposeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::add_epi2me_workflow(::grpc::ServerContext* context, const ::minknow_api::protocol::AddEpi2meWorkflowRequest* request, ::minknow_api::protocol::AddEpi2meWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::list_protocol_group_ids(::grpc::ServerContext* context, const ::minknow_api::protocol::ListProtocolGroupIdsRequest* request, ::minknow_api::protocol::ListProtocolGroupIdsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::begin_hardware_check(::grpc::ServerContext* context, const ::minknow_api::protocol::BeginHardwareCheckRequest* request, ::minknow_api::protocol::BeginHardwareCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::begin_platform_qc(::grpc::ServerContext* context, const ::minknow_api::protocol::BeginPlatformQcRequest* request, ::minknow_api::protocol::BeginPlatformQcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::set_platform_qc_result(::grpc::ServerContext* context, const ::minknow_api::protocol::SetPlatformQcResultRequest* request, ::minknow_api::protocol::SetPlatformQcResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::list_settings_for_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::ListSettingsForProtocolRequest* request, ::minknow_api::protocol::ListSettingsForProtocolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::associate_post_processing_analysis_for_protocol(::grpc::ServerContext* context, const ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* request, ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::clear_protocol_history_data(::grpc::ServerContext* context, const ::minknow_api::protocol::ClearProtocolHistoryDataRequest* request, ::minknow_api::protocol::ClearProtocolHistoryDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProtocolService::Service::protocol_phase_management(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::minknow_api::protocol::ProtocolPhaseManagementResponse, ::minknow_api::protocol::ProtocolPhaseManagementRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace protocol

