// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/instance.proto

#include "minknow_api/instance.pb.h"
#include "minknow_api/instance.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace instance {

static const char* InstanceService_method_names[] = {
  "/minknow_api.instance.InstanceService/get_version_info",
  "/minknow_api.instance.InstanceService/get_output_directories",
  "/minknow_api.instance.InstanceService/get_default_output_directories",
  "/minknow_api.instance.InstanceService/set_output_directory",
  "/minknow_api.instance.InstanceService/set_reads_directory",
  "/minknow_api.instance.InstanceService/get_disk_space_info",
  "/minknow_api.instance.InstanceService/stream_disk_space_info",
  "/minknow_api.instance.InstanceService/get_machine_id",
  "/minknow_api.instance.InstanceService/stream_instance_activity",
};

std::unique_ptr< InstanceService::Stub> InstanceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InstanceService::Stub> stub(new InstanceService::Stub(channel, options));
  return stub;
}

InstanceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_version_info_(InstanceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_output_directories_(InstanceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_default_output_directories_(InstanceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_output_directory_(InstanceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_reads_directory_(InstanceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_disk_space_info_(InstanceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_disk_space_info_(InstanceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_get_machine_id_(InstanceService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stream_instance_activity_(InstanceService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InstanceService::Stub::get_version_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetVersionInfoRequest& request, ::minknow_api::instance::GetVersionInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetVersionInfoRequest, ::minknow_api::instance::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_version_info_, context, request, response);
}

void InstanceService::Stub::async::get_version_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetVersionInfoRequest* request, ::minknow_api::instance::GetVersionInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetVersionInfoRequest, ::minknow_api::instance::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_info_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::get_version_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetVersionInfoRequest* request, ::minknow_api::instance::GetVersionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_version_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetVersionInfoResponse>* InstanceService::Stub::PrepareAsyncget_version_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::GetVersionInfoResponse, ::minknow_api::instance::GetVersionInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_version_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetVersionInfoResponse>* InstanceService::Stub::Asyncget_version_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetVersionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_version_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceService::Stub::get_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest& request, ::minknow_api::instance::OutputDirectories* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_output_directories_, context, request, response);
}

void InstanceService::Stub::async::get_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_output_directories_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::get_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_output_directories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* InstanceService::Stub::PrepareAsyncget_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::OutputDirectories, ::minknow_api::instance::GetOutputDirectoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_output_directories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* InstanceService::Stub::Asyncget_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_output_directoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceService::Stub::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::minknow_api::instance::OutputDirectories* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_default_output_directories_, context, request, response);
}

void InstanceService::Stub::async::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_default_output_directories_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::get_default_output_directories(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_default_output_directories_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* InstanceService::Stub::PrepareAsyncget_default_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::OutputDirectories, ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_default_output_directories_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::OutputDirectories>* InstanceService::Stub::Asyncget_default_output_directoriesRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_default_output_directoriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceService::Stub::set_output_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest& request, ::minknow_api::instance::SetOutputDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::SetOutputDirectoryRequest, ::minknow_api::instance::SetOutputDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_output_directory_, context, request, response);
}

void InstanceService::Stub::async::set_output_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest* request, ::minknow_api::instance::SetOutputDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::SetOutputDirectoryRequest, ::minknow_api::instance::SetOutputDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_output_directory_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::set_output_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest* request, ::minknow_api::instance::SetOutputDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_output_directory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::SetOutputDirectoryResponse>* InstanceService::Stub::PrepareAsyncset_output_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::SetOutputDirectoryResponse, ::minknow_api::instance::SetOutputDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_output_directory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::SetOutputDirectoryResponse>* InstanceService::Stub::Asyncset_output_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_output_directoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceService::Stub::set_reads_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest& request, ::minknow_api::instance::SetReadsDirectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::SetReadsDirectoryRequest, ::minknow_api::instance::SetReadsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_reads_directory_, context, request, response);
}

void InstanceService::Stub::async::set_reads_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest* request, ::minknow_api::instance::SetReadsDirectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::SetReadsDirectoryRequest, ::minknow_api::instance::SetReadsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_reads_directory_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::set_reads_directory(::grpc::ClientContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest* request, ::minknow_api::instance::SetReadsDirectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_reads_directory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::SetReadsDirectoryResponse>* InstanceService::Stub::PrepareAsyncset_reads_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::SetReadsDirectoryResponse, ::minknow_api::instance::SetReadsDirectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_reads_directory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::SetReadsDirectoryResponse>* InstanceService::Stub::Asyncset_reads_directoryRaw(::grpc::ClientContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_reads_directoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InstanceService::Stub::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest& request, ::minknow_api::instance::GetDiskSpaceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetDiskSpaceInfoRequest, ::minknow_api::instance::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_disk_space_info_, context, request, response);
}

void InstanceService::Stub::async::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest* request, ::minknow_api::instance::GetDiskSpaceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetDiskSpaceInfoRequest, ::minknow_api::instance::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_disk_space_info_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::get_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest* request, ::minknow_api::instance::GetDiskSpaceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_disk_space_info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetDiskSpaceInfoResponse>* InstanceService::Stub::PrepareAsyncget_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::GetDiskSpaceInfoResponse, ::minknow_api::instance::GetDiskSpaceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_disk_space_info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetDiskSpaceInfoResponse>* InstanceService::Stub::Asyncget_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_disk_space_infoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::instance::GetDiskSpaceInfoResponse>* InstanceService::Stub::stream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamDiskSpaceInfoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::instance::GetDiskSpaceInfoResponse>::Create(channel_.get(), rpcmethod_stream_disk_space_info_, context, request);
}

void InstanceService::Stub::async::stream_disk_space_info(::grpc::ClientContext* context, const ::minknow_api::instance::StreamDiskSpaceInfoRequest* request, ::grpc::ClientReadReactor< ::minknow_api::instance::GetDiskSpaceInfoResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::instance::GetDiskSpaceInfoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_disk_space_info_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::instance::GetDiskSpaceInfoResponse>* InstanceService::Stub::Asyncstream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::instance::GetDiskSpaceInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_disk_space_info_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::instance::GetDiskSpaceInfoResponse>* InstanceService::Stub::PrepareAsyncstream_disk_space_infoRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamDiskSpaceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::instance::GetDiskSpaceInfoResponse>::Create(channel_.get(), cq, rpcmethod_stream_disk_space_info_, context, request, false, nullptr);
}

::grpc::Status InstanceService::Stub::get_machine_id(::grpc::ClientContext* context, const ::minknow_api::instance::GetMachineIdRequest& request, ::minknow_api::instance::GetMachineIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::instance::GetMachineIdRequest, ::minknow_api::instance::GetMachineIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_machine_id_, context, request, response);
}

void InstanceService::Stub::async::get_machine_id(::grpc::ClientContext* context, const ::minknow_api::instance::GetMachineIdRequest* request, ::minknow_api::instance::GetMachineIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::instance::GetMachineIdRequest, ::minknow_api::instance::GetMachineIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_machine_id_, context, request, response, std::move(f));
}

void InstanceService::Stub::async::get_machine_id(::grpc::ClientContext* context, const ::minknow_api::instance::GetMachineIdRequest* request, ::minknow_api::instance::GetMachineIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_machine_id_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetMachineIdResponse>* InstanceService::Stub::PrepareAsyncget_machine_idRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetMachineIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::instance::GetMachineIdResponse, ::minknow_api::instance::GetMachineIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_machine_id_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::instance::GetMachineIdResponse>* InstanceService::Stub::Asyncget_machine_idRaw(::grpc::ClientContext* context, const ::minknow_api::instance::GetMachineIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_machine_idRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minknow_api::instance::StreamInstanceActivityResponse>* InstanceService::Stub::stream_instance_activityRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamInstanceActivityRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minknow_api::instance::StreamInstanceActivityResponse>::Create(channel_.get(), rpcmethod_stream_instance_activity_, context, request);
}

void InstanceService::Stub::async::stream_instance_activity(::grpc::ClientContext* context, const ::minknow_api::instance::StreamInstanceActivityRequest* request, ::grpc::ClientReadReactor< ::minknow_api::instance::StreamInstanceActivityResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minknow_api::instance::StreamInstanceActivityResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_stream_instance_activity_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minknow_api::instance::StreamInstanceActivityResponse>* InstanceService::Stub::Asyncstream_instance_activityRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamInstanceActivityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::instance::StreamInstanceActivityResponse>::Create(channel_.get(), cq, rpcmethod_stream_instance_activity_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minknow_api::instance::StreamInstanceActivityResponse>* InstanceService::Stub::PrepareAsyncstream_instance_activityRaw(::grpc::ClientContext* context, const ::minknow_api::instance::StreamInstanceActivityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minknow_api::instance::StreamInstanceActivityResponse>::Create(channel_.get(), cq, rpcmethod_stream_instance_activity_, context, request, false, nullptr);
}

InstanceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::GetVersionInfoRequest, ::minknow_api::instance::GetVersionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetVersionInfoRequest* req,
             ::minknow_api::instance::GetVersionInfoResponse* resp) {
               return service->get_version_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::GetOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetOutputDirectoriesRequest* req,
             ::minknow_api::instance::OutputDirectories* resp) {
               return service->get_output_directories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::GetDefaultOutputDirectoriesRequest, ::minknow_api::instance::OutputDirectories, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* req,
             ::minknow_api::instance::OutputDirectories* resp) {
               return service->get_default_output_directories(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::SetOutputDirectoryRequest, ::minknow_api::instance::SetOutputDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::SetOutputDirectoryRequest* req,
             ::minknow_api::instance::SetOutputDirectoryResponse* resp) {
               return service->set_output_directory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::SetReadsDirectoryRequest, ::minknow_api::instance::SetReadsDirectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::SetReadsDirectoryRequest* req,
             ::minknow_api::instance::SetReadsDirectoryResponse* resp) {
               return service->set_reads_directory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::GetDiskSpaceInfoRequest, ::minknow_api::instance::GetDiskSpaceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetDiskSpaceInfoRequest* req,
             ::minknow_api::instance::GetDiskSpaceInfoResponse* resp) {
               return service->get_disk_space_info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InstanceService::Service, ::minknow_api::instance::StreamDiskSpaceInfoRequest, ::minknow_api::instance::GetDiskSpaceInfoResponse>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::StreamDiskSpaceInfoRequest* req,
             ::grpc::ServerWriter<::minknow_api::instance::GetDiskSpaceInfoResponse>* writer) {
               return service->stream_disk_space_info(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceService::Service, ::minknow_api::instance::GetMachineIdRequest, ::minknow_api::instance::GetMachineIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::GetMachineIdRequest* req,
             ::minknow_api::instance::GetMachineIdResponse* resp) {
               return service->get_machine_id(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InstanceService::Service, ::minknow_api::instance::StreamInstanceActivityRequest, ::minknow_api::instance::StreamInstanceActivityResponse>(
          [](InstanceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::instance::StreamInstanceActivityRequest* req,
             ::grpc::ServerWriter<::minknow_api::instance::StreamInstanceActivityResponse>* writer) {
               return service->stream_instance_activity(ctx, req, writer);
             }, this)));
}

InstanceService::Service::~Service() {
}

::grpc::Status InstanceService::Service::get_version_info(::grpc::ServerContext* context, const ::minknow_api::instance::GetVersionInfoRequest* request, ::minknow_api::instance::GetVersionInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::get_output_directories(::grpc::ServerContext* context, const ::minknow_api::instance::GetOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::get_default_output_directories(::grpc::ServerContext* context, const ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* request, ::minknow_api::instance::OutputDirectories* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::set_output_directory(::grpc::ServerContext* context, const ::minknow_api::instance::SetOutputDirectoryRequest* request, ::minknow_api::instance::SetOutputDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::set_reads_directory(::grpc::ServerContext* context, const ::minknow_api::instance::SetReadsDirectoryRequest* request, ::minknow_api::instance::SetReadsDirectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::get_disk_space_info(::grpc::ServerContext* context, const ::minknow_api::instance::GetDiskSpaceInfoRequest* request, ::minknow_api::instance::GetDiskSpaceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::stream_disk_space_info(::grpc::ServerContext* context, const ::minknow_api::instance::StreamDiskSpaceInfoRequest* request, ::grpc::ServerWriter< ::minknow_api::instance::GetDiskSpaceInfoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::get_machine_id(::grpc::ServerContext* context, const ::minknow_api::instance::GetMachineIdRequest* request, ::minknow_api::instance::GetMachineIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceService::Service::stream_instance_activity(::grpc::ServerContext* context, const ::minknow_api::instance::StreamInstanceActivityRequest* request, ::grpc::ServerWriter< ::minknow_api::instance::StreamInstanceActivityResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace instance

