// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/protocol.proto

#include "minknow_api/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace protocol {
constexpr BarcodeUserData::BarcodeUserData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcode_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lamp_barcode_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct BarcodeUserDataDefaultTypeInternal {
  constexpr BarcodeUserDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BarcodeUserDataDefaultTypeInternal() {}
  union {
    BarcodeUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BarcodeUserDataDefaultTypeInternal _BarcodeUserData_default_instance_;
constexpr ProtocolRunUserInfo::ProtocolRunUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcode_user_info_()
  , protocol_group_id_(nullptr)
  , sample_id_(nullptr){}
struct ProtocolRunUserInfoDefaultTypeInternal {
  constexpr ProtocolRunUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolRunUserInfoDefaultTypeInternal() {}
  union {
    ProtocolRunUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolRunUserInfoDefaultTypeInternal _ProtocolRunUserInfo_default_instance_;
constexpr StartProtocolRequest::StartProtocolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr){}
struct StartProtocolRequestDefaultTypeInternal {
  constexpr StartProtocolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartProtocolRequestDefaultTypeInternal() {}
  union {
    StartProtocolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartProtocolRequestDefaultTypeInternal _StartProtocolRequest_default_instance_;
constexpr StartProtocolResponse::StartProtocolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StartProtocolResponseDefaultTypeInternal {
  constexpr StartProtocolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartProtocolResponseDefaultTypeInternal() {}
  union {
    StartProtocolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartProtocolResponseDefaultTypeInternal _StartProtocolResponse_default_instance_;
constexpr StopProtocolRequest::StopProtocolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_action_on_stop_(0)
{}
struct StopProtocolRequestDefaultTypeInternal {
  constexpr StopProtocolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopProtocolRequestDefaultTypeInternal() {}
  union {
    StopProtocolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopProtocolRequestDefaultTypeInternal _StopProtocolRequest_default_instance_;
constexpr StopProtocolResponse::StopProtocolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StopProtocolResponseDefaultTypeInternal {
  constexpr StopProtocolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopProtocolResponseDefaultTypeInternal() {}
  union {
    StopProtocolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopProtocolResponseDefaultTypeInternal _StopProtocolResponse_default_instance_;
constexpr PauseProtocolRequest::PauseProtocolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PauseProtocolRequestDefaultTypeInternal {
  constexpr PauseProtocolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseProtocolRequestDefaultTypeInternal() {}
  union {
    PauseProtocolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseProtocolRequestDefaultTypeInternal _PauseProtocolRequest_default_instance_;
constexpr PauseProtocolResponse::PauseProtocolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PauseProtocolResponseDefaultTypeInternal {
  constexpr PauseProtocolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseProtocolResponseDefaultTypeInternal() {}
  union {
    PauseProtocolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseProtocolResponseDefaultTypeInternal _PauseProtocolResponse_default_instance_;
constexpr ResumeProtocolRequest::ResumeProtocolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResumeProtocolRequestDefaultTypeInternal {
  constexpr ResumeProtocolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResumeProtocolRequestDefaultTypeInternal() {}
  union {
    ResumeProtocolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResumeProtocolRequestDefaultTypeInternal _ResumeProtocolRequest_default_instance_;
constexpr ResumeProtocolResponse::ResumeProtocolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResumeProtocolResponseDefaultTypeInternal {
  constexpr ResumeProtocolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResumeProtocolResponseDefaultTypeInternal() {}
  union {
    ResumeProtocolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResumeProtocolResponseDefaultTypeInternal _ResumeProtocolResponse_default_instance_;
constexpr TriggerMuxScanRequest::TriggerMuxScanRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TriggerMuxScanRequestDefaultTypeInternal {
  constexpr TriggerMuxScanRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TriggerMuxScanRequestDefaultTypeInternal() {}
  union {
    TriggerMuxScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TriggerMuxScanRequestDefaultTypeInternal _TriggerMuxScanRequest_default_instance_;
constexpr TriggerMuxScanResponse::TriggerMuxScanResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TriggerMuxScanResponseDefaultTypeInternal {
  constexpr TriggerMuxScanResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TriggerMuxScanResponseDefaultTypeInternal() {}
  union {
    TriggerMuxScanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TriggerMuxScanResponseDefaultTypeInternal _TriggerMuxScanResponse_default_instance_;
constexpr ListProtocolsRequest::ListProtocolsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : force_reload_(false){}
struct ListProtocolsRequestDefaultTypeInternal {
  constexpr ListProtocolsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolsRequestDefaultTypeInternal() {}
  union {
    ListProtocolsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolsRequestDefaultTypeInternal _ListProtocolsRequest_default_instance_;
constexpr ProtocolInfo_TagValue::ProtocolInfo_TagValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProtocolInfo_TagValueDefaultTypeInternal {
  constexpr ProtocolInfo_TagValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolInfo_TagValueDefaultTypeInternal() {}
  union {
    ProtocolInfo_TagValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolInfo_TagValueDefaultTypeInternal _ProtocolInfo_TagValue_default_instance_;
constexpr ProtocolInfo_TagExtractionResult::ProtocolInfo_TagExtractionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_report_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ProtocolInfo_TagExtractionResultDefaultTypeInternal {
  constexpr ProtocolInfo_TagExtractionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolInfo_TagExtractionResultDefaultTypeInternal() {}
  union {
    ProtocolInfo_TagExtractionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolInfo_TagExtractionResultDefaultTypeInternal _ProtocolInfo_TagExtractionResult_default_instance_;
constexpr ProtocolInfo_TagsEntry_DoNotUse::ProtocolInfo_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProtocolInfo_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolInfo_TagsEntry_DoNotUseDefaultTypeInternal _ProtocolInfo_TagsEntry_DoNotUse_default_instance_;
constexpr ProtocolInfo::ProtocolInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_extraction_result_(nullptr){}
struct ProtocolInfoDefaultTypeInternal {
  constexpr ProtocolInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolInfoDefaultTypeInternal() {}
  union {
    ProtocolInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolInfoDefaultTypeInternal _ProtocolInfo_default_instance_;
constexpr ListProtocolsResponse::ListProtocolsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocols_(){}
struct ListProtocolsResponseDefaultTypeInternal {
  constexpr ListProtocolsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolsResponseDefaultTypeInternal() {}
  union {
    ListProtocolsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolsResponseDefaultTypeInternal _ListProtocolsResponse_default_instance_;
constexpr WaitForFinishedRequest::WaitForFinishedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)

  , timeout_(0){}
struct WaitForFinishedRequestDefaultTypeInternal {
  constexpr WaitForFinishedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitForFinishedRequestDefaultTypeInternal() {}
  union {
    WaitForFinishedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitForFinishedRequestDefaultTypeInternal _WaitForFinishedRequest_default_instance_;
constexpr GetRunInfoRequest::GetRunInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRunInfoRequestDefaultTypeInternal {
  constexpr GetRunInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRunInfoRequestDefaultTypeInternal() {}
  union {
    GetRunInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRunInfoRequestDefaultTypeInternal _GetRunInfoRequest_default_instance_;
constexpr Epi2meWorkflowReference::Epi2meWorkflowReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct Epi2meWorkflowReferenceDefaultTypeInternal {
  constexpr Epi2meWorkflowReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Epi2meWorkflowReferenceDefaultTypeInternal() {}
  union {
    Epi2meWorkflowReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Epi2meWorkflowReferenceDefaultTypeInternal _Epi2meWorkflowReference_default_instance_;
constexpr AssociatedPostProcessingAnalysis::AssociatedPostProcessingAnalysis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : started_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_request_(nullptr){}
struct AssociatedPostProcessingAnalysisDefaultTypeInternal {
  constexpr AssociatedPostProcessingAnalysisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociatedPostProcessingAnalysisDefaultTypeInternal() {}
  union {
    AssociatedPostProcessingAnalysis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociatedPostProcessingAnalysisDefaultTypeInternal _AssociatedPostProcessingAnalysis_default_instance_;
constexpr PlatformQcResult::PlatformQcResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_cell_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , passed_(false)
  , total_pore_count_(0u){}
struct PlatformQcResultDefaultTypeInternal {
  constexpr PlatformQcResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlatformQcResultDefaultTypeInternal() {}
  union {
    PlatformQcResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlatformQcResultDefaultTypeInternal _PlatformQcResult_default_instance_;
constexpr ProtocolRunInfo::ProtocolRunInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , acquisition_run_ids_()
  , epi2me_workflows_()
  , associated_post_processing_analysis_()
  , run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , end_time_(nullptr)
  , user_info_(nullptr)
  , script_end_time_(nullptr)
  , device_(nullptr)
  , flow_cell_(nullptr)
  , meta_info_(nullptr)
  , last_phase_change_(nullptr)
  , pqc_result_(nullptr)
  , state_(0)

  , phase_(0)

  , can_pause_(false)
  , can_trigger_mux_scan_(false){}
struct ProtocolRunInfoDefaultTypeInternal {
  constexpr ProtocolRunInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolRunInfoDefaultTypeInternal() {}
  union {
    ProtocolRunInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolRunInfoDefaultTypeInternal _ProtocolRunInfo_default_instance_;
constexpr FilteringInfo_PlatformQcFilter::FilteringInfo_PlatformQcFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flow_cell_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FilteringInfo_PlatformQcFilterDefaultTypeInternal {
  constexpr FilteringInfo_PlatformQcFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilteringInfo_PlatformQcFilterDefaultTypeInternal() {}
  union {
    FilteringInfo_PlatformQcFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilteringInfo_PlatformQcFilterDefaultTypeInternal _FilteringInfo_PlatformQcFilter_default_instance_;
constexpr FilteringInfo::FilteringInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pqc_filter_(nullptr){}
struct FilteringInfoDefaultTypeInternal {
  constexpr FilteringInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilteringInfoDefaultTypeInternal() {}
  union {
    FilteringInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilteringInfoDefaultTypeInternal _FilteringInfo_default_instance_;
constexpr ListProtocolRunsRequest::ListProtocolRunsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_info_(nullptr){}
struct ListProtocolRunsRequestDefaultTypeInternal {
  constexpr ListProtocolRunsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolRunsRequestDefaultTypeInternal() {}
  union {
    ListProtocolRunsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolRunsRequestDefaultTypeInternal _ListProtocolRunsRequest_default_instance_;
constexpr ListProtocolRunsResponse::ListProtocolRunsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_ids_(){}
struct ListProtocolRunsResponseDefaultTypeInternal {
  constexpr ListProtocolRunsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolRunsResponseDefaultTypeInternal() {}
  union {
    ListProtocolRunsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolRunsResponseDefaultTypeInternal _ListProtocolRunsResponse_default_instance_;
constexpr GetCurrentProtocolRunRequest::GetCurrentProtocolRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetCurrentProtocolRunRequestDefaultTypeInternal {
  constexpr GetCurrentProtocolRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCurrentProtocolRunRequestDefaultTypeInternal() {}
  union {
    GetCurrentProtocolRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCurrentProtocolRunRequestDefaultTypeInternal _GetCurrentProtocolRunRequest_default_instance_;
constexpr GetCurrentProtocolRunResponse::GetCurrentProtocolRunResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_info_(nullptr){}
struct GetCurrentProtocolRunResponseDefaultTypeInternal {
  constexpr GetCurrentProtocolRunResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCurrentProtocolRunResponseDefaultTypeInternal() {}
  union {
    GetCurrentProtocolRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCurrentProtocolRunResponseDefaultTypeInternal _GetCurrentProtocolRunResponse_default_instance_;
constexpr WatchCurrentProtocolRunRequest::WatchCurrentProtocolRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WatchCurrentProtocolRunRequestDefaultTypeInternal {
  constexpr WatchCurrentProtocolRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchCurrentProtocolRunRequestDefaultTypeInternal() {}
  union {
    WatchCurrentProtocolRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchCurrentProtocolRunRequestDefaultTypeInternal _WatchCurrentProtocolRunRequest_default_instance_;
constexpr GetContextInfoRequest::GetContextInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetContextInfoRequestDefaultTypeInternal {
  constexpr GetContextInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetContextInfoRequestDefaultTypeInternal() {}
  union {
    GetContextInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetContextInfoRequestDefaultTypeInternal _GetContextInfoRequest_default_instance_;
constexpr GetContextInfoResponse_ContextInfoEntry_DoNotUse::GetContextInfoResponse_ContextInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetContextInfoResponse_ContextInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetContextInfoResponse_ContextInfoEntry_DoNotUseDefaultTypeInternal _GetContextInfoResponse_ContextInfoEntry_DoNotUse_default_instance_;
constexpr GetContextInfoResponse::GetContextInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : context_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct GetContextInfoResponseDefaultTypeInternal {
  constexpr GetContextInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetContextInfoResponseDefaultTypeInternal() {}
  union {
    GetContextInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetContextInfoResponseDefaultTypeInternal _GetContextInfoResponse_default_instance_;
constexpr SetContextInfoRequest_ContextInfoEntry_DoNotUse::SetContextInfoRequest_ContextInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetContextInfoRequest_ContextInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetContextInfoRequest_ContextInfoEntry_DoNotUseDefaultTypeInternal _SetContextInfoRequest_ContextInfoEntry_DoNotUse_default_instance_;
constexpr SetContextInfoRequest::SetContextInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : context_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SetContextInfoRequestDefaultTypeInternal {
  constexpr SetContextInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetContextInfoRequestDefaultTypeInternal() {}
  union {
    SetContextInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetContextInfoRequestDefaultTypeInternal _SetContextInfoRequest_default_instance_;
constexpr SetContextInfoResponse::SetContextInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetContextInfoResponseDefaultTypeInternal {
  constexpr SetContextInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetContextInfoResponseDefaultTypeInternal() {}
  union {
    SetContextInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetContextInfoResponseDefaultTypeInternal _SetContextInfoResponse_default_instance_;
constexpr GetProtocolPurposeRequest::GetProtocolPurposeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetProtocolPurposeRequestDefaultTypeInternal {
  constexpr GetProtocolPurposeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProtocolPurposeRequestDefaultTypeInternal() {}
  union {
    GetProtocolPurposeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProtocolPurposeRequestDefaultTypeInternal _GetProtocolPurposeRequest_default_instance_;
constexpr GetProtocolPurposeResponse::GetProtocolPurposeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purpose_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetProtocolPurposeResponseDefaultTypeInternal {
  constexpr GetProtocolPurposeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetProtocolPurposeResponseDefaultTypeInternal() {}
  union {
    GetProtocolPurposeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetProtocolPurposeResponseDefaultTypeInternal _GetProtocolPurposeResponse_default_instance_;
constexpr SetProtocolPurposeRequest::SetProtocolPurposeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purpose_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetProtocolPurposeRequestDefaultTypeInternal {
  constexpr SetProtocolPurposeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProtocolPurposeRequestDefaultTypeInternal() {}
  union {
    SetProtocolPurposeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProtocolPurposeRequestDefaultTypeInternal _SetProtocolPurposeRequest_default_instance_;
constexpr SetProtocolPurposeResponse::SetProtocolPurposeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetProtocolPurposeResponseDefaultTypeInternal {
  constexpr SetProtocolPurposeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetProtocolPurposeResponseDefaultTypeInternal() {}
  union {
    SetProtocolPurposeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetProtocolPurposeResponseDefaultTypeInternal _SetProtocolPurposeResponse_default_instance_;
constexpr AddEpi2meWorkflowRequest::AddEpi2meWorkflowRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epi2me_workflow_(nullptr){}
struct AddEpi2meWorkflowRequestDefaultTypeInternal {
  constexpr AddEpi2meWorkflowRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddEpi2meWorkflowRequestDefaultTypeInternal() {}
  union {
    AddEpi2meWorkflowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddEpi2meWorkflowRequestDefaultTypeInternal _AddEpi2meWorkflowRequest_default_instance_;
constexpr AddEpi2meWorkflowResponse::AddEpi2meWorkflowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddEpi2meWorkflowResponseDefaultTypeInternal {
  constexpr AddEpi2meWorkflowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddEpi2meWorkflowResponseDefaultTypeInternal() {}
  union {
    AddEpi2meWorkflowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddEpi2meWorkflowResponseDefaultTypeInternal _AddEpi2meWorkflowResponse_default_instance_;
constexpr ListProtocolGroupIdsRequest::ListProtocolGroupIdsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListProtocolGroupIdsRequestDefaultTypeInternal {
  constexpr ListProtocolGroupIdsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolGroupIdsRequestDefaultTypeInternal() {}
  union {
    ListProtocolGroupIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolGroupIdsRequestDefaultTypeInternal _ListProtocolGroupIdsRequest_default_instance_;
constexpr ListProtocolGroupIdsResponse::ListProtocolGroupIdsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_group_ids_(){}
struct ListProtocolGroupIdsResponseDefaultTypeInternal {
  constexpr ListProtocolGroupIdsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProtocolGroupIdsResponseDefaultTypeInternal() {}
  union {
    ListProtocolGroupIdsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProtocolGroupIdsResponseDefaultTypeInternal _ListProtocolGroupIdsResponse_default_instance_;
constexpr BeginHardwareCheckRequest::BeginHardwareCheckRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BeginHardwareCheckRequestDefaultTypeInternal {
  constexpr BeginHardwareCheckRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginHardwareCheckRequestDefaultTypeInternal() {}
  union {
    BeginHardwareCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginHardwareCheckRequestDefaultTypeInternal _BeginHardwareCheckRequest_default_instance_;
constexpr BeginHardwareCheckResponse::BeginHardwareCheckResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BeginHardwareCheckResponseDefaultTypeInternal {
  constexpr BeginHardwareCheckResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginHardwareCheckResponseDefaultTypeInternal() {}
  union {
    BeginHardwareCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginHardwareCheckResponseDefaultTypeInternal _BeginHardwareCheckResponse_default_instance_;
constexpr BeginPlatformQcRequest::BeginPlatformQcRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BeginPlatformQcRequestDefaultTypeInternal {
  constexpr BeginPlatformQcRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginPlatformQcRequestDefaultTypeInternal() {}
  union {
    BeginPlatformQcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginPlatformQcRequestDefaultTypeInternal _BeginPlatformQcRequest_default_instance_;
constexpr BeginPlatformQcResponse::BeginPlatformQcResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BeginPlatformQcResponseDefaultTypeInternal {
  constexpr BeginPlatformQcResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginPlatformQcResponseDefaultTypeInternal() {}
  union {
    BeginPlatformQcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginPlatformQcResponseDefaultTypeInternal _BeginPlatformQcResponse_default_instance_;
constexpr SetPlatformQcResultRequest::SetPlatformQcResultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pqc_result_(nullptr){}
struct SetPlatformQcResultRequestDefaultTypeInternal {
  constexpr SetPlatformQcResultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPlatformQcResultRequestDefaultTypeInternal() {}
  union {
    SetPlatformQcResultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPlatformQcResultRequestDefaultTypeInternal _SetPlatformQcResultRequest_default_instance_;
constexpr SetPlatformQcResultResponse::SetPlatformQcResultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetPlatformQcResultResponseDefaultTypeInternal {
  constexpr SetPlatformQcResultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPlatformQcResultResponseDefaultTypeInternal() {}
  union {
    SetPlatformQcResultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPlatformQcResultResponseDefaultTypeInternal _SetPlatformQcResultResponse_default_instance_;
constexpr ProtocolIdentifierComponents::ProtocolIdentifierComponents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : experiment_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flow_cell_product_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(0)
{}
struct ProtocolIdentifierComponentsDefaultTypeInternal {
  constexpr ProtocolIdentifierComponentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolIdentifierComponentsDefaultTypeInternal() {}
  union {
    ProtocolIdentifierComponents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolIdentifierComponentsDefaultTypeInternal _ProtocolIdentifierComponents_default_instance_;
constexpr ListSettingsForProtocolRequest::ListSettingsForProtocolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ListSettingsForProtocolRequestDefaultTypeInternal {
  constexpr ListSettingsForProtocolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSettingsForProtocolRequestDefaultTypeInternal() {}
  union {
    ListSettingsForProtocolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSettingsForProtocolRequestDefaultTypeInternal _ListSettingsForProtocolRequest_default_instance_;
constexpr ListSettingsForProtocolResponse_RunOptions::ListSettingsForProtocolResponse_RunOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_length_(nullptr)
  , bias_voltage_(nullptr)
  , read_until_enabled_(nullptr)
  , read_until_ref_file_(nullptr)
  , read_until_channels_(nullptr)
  , read_until_bed_file_enabled_(nullptr)
  , read_until_bed_file_(nullptr)
  , read_until_enrichment_(nullptr)
  , active_channel_selection_(nullptr)
  , mux_scan_period_(nullptr)
  , group_change_period_(nullptr){}
struct ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal {
  constexpr ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal() {}
  union {
    ListSettingsForProtocolResponse_RunOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSettingsForProtocolResponse_RunOptionsDefaultTypeInternal _ListSettingsForProtocolResponse_RunOptions_default_instance_;
constexpr ListSettingsForProtocolResponse_Basecalling::ListSettingsForProtocolResponse_Basecalling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basecalling_enabled_(nullptr)
  , barcoding_enabled_(nullptr)
  , basecall_model_(nullptr)
  , trim_barcodes_enabled_(nullptr)
  , require_barcodes_both_ends_(nullptr)
  , detect_mid_strand_barcodes_(nullptr)
  , override_mid_barcoding_score_(nullptr)
  , override_rear_barcoding_score_(nullptr)
  , min_barcoding_score_(nullptr)
  , min_barcoding_score_rear_(nullptr)
  , min_barcoding_score_mid_(nullptr)
  , alignment_enabled_(nullptr)
  , alignment_ref_file_(nullptr)
  , alignment_bed_file_enabled_(nullptr)
  , alignment_bed_file_(nullptr){}
struct ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal {
  constexpr ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal() {}
  union {
    ListSettingsForProtocolResponse_Basecalling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSettingsForProtocolResponse_BasecallingDefaultTypeInternal _ListSettingsForProtocolResponse_Basecalling_default_instance_;
constexpr ListSettingsForProtocolResponse_Output::ListSettingsForProtocolResponse_Output(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_location_(nullptr)
  , fast_q_enabled_(nullptr)
  , fast_q_reads_per_file_(nullptr)
  , fast_q_data_compression_(nullptr)
  , fast_5_enabled_(nullptr)
  , fast_5_reads_per_file_(nullptr)
  , fast_5_data_trace_table_(nullptr)
  , fast_5_data_move_table_(nullptr)
  , fast_5_data_fast_q_(nullptr)
  , fast_5_data_raw_(nullptr)
  , fast_5_data_compression_(nullptr)
  , bam_enabled_(nullptr)
  , read_filtering_enabled_(nullptr)
  , read_filtering_min_qscore_(nullptr)
  , read_filtering_min_read_length_(nullptr)
  , read_filtering_max_read_length_(nullptr)
  , bulk_file_enabled_(nullptr)
  , bulk_file_raw_(nullptr)
  , bulk_file_events_(nullptr)
  , bulk_file_read_table_(nullptr)
  , bulk_file_raw_enabled_(nullptr)
  , bulk_file_events_enabled_(nullptr)
  , bulk_file_read_table_enabled_(nullptr){}
struct ListSettingsForProtocolResponse_OutputDefaultTypeInternal {
  constexpr ListSettingsForProtocolResponse_OutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSettingsForProtocolResponse_OutputDefaultTypeInternal() {}
  union {
    ListSettingsForProtocolResponse_Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSettingsForProtocolResponse_OutputDefaultTypeInternal _ListSettingsForProtocolResponse_Output_default_instance_;
constexpr ListSettingsForProtocolResponse::ListSettingsForProtocolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_settings_()
  , protocol_(nullptr)
  , run_options_(nullptr)
  , basecalling_(nullptr)
  , output_(nullptr){}
struct ListSettingsForProtocolResponseDefaultTypeInternal {
  constexpr ListSettingsForProtocolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSettingsForProtocolResponseDefaultTypeInternal() {}
  union {
    ListSettingsForProtocolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSettingsForProtocolResponseDefaultTypeInternal _ListSettingsForProtocolResponse_default_instance_;
constexpr AssociatePostProcessingAnalysisRequest::AssociatePostProcessingAnalysisRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : run_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_request_(nullptr){}
struct AssociatePostProcessingAnalysisRequestDefaultTypeInternal {
  constexpr AssociatePostProcessingAnalysisRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociatePostProcessingAnalysisRequestDefaultTypeInternal() {}
  union {
    AssociatePostProcessingAnalysisRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociatePostProcessingAnalysisRequestDefaultTypeInternal _AssociatePostProcessingAnalysisRequest_default_instance_;
constexpr AssociatePostProcessingAnalysisResponse::AssociatePostProcessingAnalysisResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AssociatePostProcessingAnalysisResponseDefaultTypeInternal {
  constexpr AssociatePostProcessingAnalysisResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssociatePostProcessingAnalysisResponseDefaultTypeInternal() {}
  union {
    AssociatePostProcessingAnalysisResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssociatePostProcessingAnalysisResponseDefaultTypeInternal _AssociatePostProcessingAnalysisResponse_default_instance_;
constexpr ClearProtocolHistoryDataRequest::ClearProtocolHistoryDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_ids_(){}
struct ClearProtocolHistoryDataRequestDefaultTypeInternal {
  constexpr ClearProtocolHistoryDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearProtocolHistoryDataRequestDefaultTypeInternal() {}
  union {
    ClearProtocolHistoryDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearProtocolHistoryDataRequestDefaultTypeInternal _ClearProtocolHistoryDataRequest_default_instance_;
constexpr ClearProtocolHistoryDataResponse::ClearProtocolHistoryDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClearProtocolHistoryDataResponseDefaultTypeInternal {
  constexpr ClearProtocolHistoryDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearProtocolHistoryDataResponseDefaultTypeInternal() {}
  union {
    ClearProtocolHistoryDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearProtocolHistoryDataResponseDefaultTypeInternal _ClearProtocolHistoryDataResponse_default_instance_;
constexpr ProtocolPhaseManagementRequest_Capabilities::ProtocolPhaseManagementRequest_Capabilities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : can_pause_(false)
  , can_trigger_mux_scan_(false){}
struct ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal {
  constexpr ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal() {}
  union {
    ProtocolPhaseManagementRequest_Capabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolPhaseManagementRequest_CapabilitiesDefaultTypeInternal _ProtocolPhaseManagementRequest_Capabilities_default_instance_;
constexpr ProtocolPhaseManagementRequest::ProtocolPhaseManagementRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_capabilities_(nullptr)
  , phase_(0)
{}
struct ProtocolPhaseManagementRequestDefaultTypeInternal {
  constexpr ProtocolPhaseManagementRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolPhaseManagementRequestDefaultTypeInternal() {}
  union {
    ProtocolPhaseManagementRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolPhaseManagementRequestDefaultTypeInternal _ProtocolPhaseManagementRequest_default_instance_;
constexpr ProtocolPhaseManagementResponse::ProtocolPhaseManagementResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(0)
{}
struct ProtocolPhaseManagementResponseDefaultTypeInternal {
  constexpr ProtocolPhaseManagementResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolPhaseManagementResponseDefaultTypeInternal() {}
  union {
    ProtocolPhaseManagementResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolPhaseManagementResponseDefaultTypeInternal _ProtocolPhaseManagementResponse_default_instance_;
}  // namespace protocol
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2fprotocol_2eproto[64];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BarcodeUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BarcodeUserData, barcode_name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BarcodeUserData, lamp_barcode_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BarcodeUserData, alias_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BarcodeUserData, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunUserInfo, protocol_group_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunUserInfo, sample_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunUserInfo, barcode_user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolRequest, identifier_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolRequest, args_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolRequest, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StartProtocolResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StopProtocolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StopProtocolRequest, data_action_on_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::StopProtocolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PauseProtocolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PauseProtocolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ResumeProtocolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ResumeProtocolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::TriggerMuxScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::TriggerMuxScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolsRequest, force_reload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagValue, tag_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagExtractionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagExtractionResult, success_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagExtractionResult, error_report_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo, identifier_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo, tags_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolInfo, tag_extraction_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolsResponse, protocols_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::WaitForFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::WaitForFinishedRequest, run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::WaitForFinishedRequest, state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::WaitForFinishedRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetRunInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetRunInfoRequest, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::Epi2meWorkflowReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::Epi2meWorkflowReference, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::Epi2meWorkflowReference, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatedPostProcessingAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatedPostProcessingAnalysis, started_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatedPostProcessingAnalysis, start_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PlatformQcResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PlatformQcResult, flow_cell_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PlatformQcResult, passed_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::PlatformQcResult, total_pore_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, protocol_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, args_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, output_path_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, phase_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, last_phase_change_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, can_pause_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, can_trigger_mux_scan_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, script_end_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, acquisition_run_ids_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, user_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, epi2me_workflows_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, device_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, flow_cell_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, meta_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, associated_post_processing_analysis_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolRunInfo, pqc_result_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::FilteringInfo_PlatformQcFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::FilteringInfo_PlatformQcFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::FilteringInfo_PlatformQcFilter, flow_cell_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::FilteringInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::FilteringInfo, pqc_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolRunsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolRunsRequest, filter_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolRunsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolRunsResponse, run_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetCurrentProtocolRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetCurrentProtocolRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetCurrentProtocolRunResponse, run_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::WatchCurrentProtocolRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetContextInfoResponse, context_info_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoRequest, context_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetContextInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetProtocolPurposeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetProtocolPurposeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::GetProtocolPurposeResponse, purpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetProtocolPurposeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetProtocolPurposeRequest, purpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetProtocolPurposeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AddEpi2meWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AddEpi2meWorkflowRequest, run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AddEpi2meWorkflowRequest, epi2me_workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AddEpi2meWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolGroupIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolGroupIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListProtocolGroupIdsResponse, protocol_group_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginHardwareCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginHardwareCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginHardwareCheckResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginPlatformQcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginPlatformQcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::BeginPlatformQcResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetPlatformQcResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetPlatformQcResultRequest, protocol_run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetPlatformQcResultRequest, pqc_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::SetPlatformQcResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, location_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, experiment_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, flow_cell_product_code_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolIdentifierComponents, kit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolRequest, protocol_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, run_length_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, bias_voltage_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_ref_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_channels_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_bed_file_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_bed_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, read_until_enrichment_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, active_channel_selection_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, mux_scan_period_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions, group_change_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, basecalling_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, barcoding_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, basecall_model_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, trim_barcodes_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, require_barcodes_both_ends_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, detect_mid_strand_barcodes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, override_mid_barcoding_score_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, override_rear_barcoding_score_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, min_barcoding_score_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, min_barcoding_score_rear_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, min_barcoding_score_mid_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, alignment_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, alignment_ref_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, alignment_bed_file_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling, alignment_bed_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, output_location_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_q_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_q_reads_per_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_q_data_compression_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_reads_per_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_data_trace_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_data_move_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_data_fast_q_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_data_raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, fast_5_data_compression_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bam_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, read_filtering_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, read_filtering_min_qscore_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, read_filtering_min_read_length_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, read_filtering_max_read_length_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_read_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_raw_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_events_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse_Output, bulk_file_read_table_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, protocol_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, run_options_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, basecalling_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, output_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ListSettingsForProtocolResponse, protocol_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, run_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatePostProcessingAnalysisRequest, start_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::AssociatePostProcessingAnalysisResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ClearProtocolHistoryDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ClearProtocolHistoryDataRequest, protocol_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ClearProtocolHistoryDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities, can_pause_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities, can_trigger_mux_scan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest, set_capabilities_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementRequest, phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::protocol::ProtocolPhaseManagementResponse, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::protocol::BarcodeUserData)},
  { 10, -1, -1, sizeof(::minknow_api::protocol::ProtocolRunUserInfo)},
  { 19, -1, -1, sizeof(::minknow_api::protocol::StartProtocolRequest)},
  { 28, -1, -1, sizeof(::minknow_api::protocol::StartProtocolResponse)},
  { 35, -1, -1, sizeof(::minknow_api::protocol::StopProtocolRequest)},
  { 42, -1, -1, sizeof(::minknow_api::protocol::StopProtocolResponse)},
  { 48, -1, -1, sizeof(::minknow_api::protocol::PauseProtocolRequest)},
  { 54, -1, -1, sizeof(::minknow_api::protocol::PauseProtocolResponse)},
  { 60, -1, -1, sizeof(::minknow_api::protocol::ResumeProtocolRequest)},
  { 66, -1, -1, sizeof(::minknow_api::protocol::ResumeProtocolResponse)},
  { 72, -1, -1, sizeof(::minknow_api::protocol::TriggerMuxScanRequest)},
  { 78, -1, -1, sizeof(::minknow_api::protocol::TriggerMuxScanResponse)},
  { 84, -1, -1, sizeof(::minknow_api::protocol::ListProtocolsRequest)},
  { 91, -1, -1, sizeof(::minknow_api::protocol::ProtocolInfo_TagValue)},
  { 104, -1, -1, sizeof(::minknow_api::protocol::ProtocolInfo_TagExtractionResult)},
  { 112, 120, -1, sizeof(::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse)},
  { 122, -1, -1, sizeof(::minknow_api::protocol::ProtocolInfo)},
  { 132, -1, -1, sizeof(::minknow_api::protocol::ListProtocolsResponse)},
  { 139, -1, -1, sizeof(::minknow_api::protocol::WaitForFinishedRequest)},
  { 148, -1, -1, sizeof(::minknow_api::protocol::GetRunInfoRequest)},
  { 155, -1, -1, sizeof(::minknow_api::protocol::Epi2meWorkflowReference)},
  { 163, -1, -1, sizeof(::minknow_api::protocol::AssociatedPostProcessingAnalysis)},
  { 171, -1, -1, sizeof(::minknow_api::protocol::PlatformQcResult)},
  { 180, -1, -1, sizeof(::minknow_api::protocol::ProtocolRunInfo)},
  { 206, 213, -1, sizeof(::minknow_api::protocol::FilteringInfo_PlatformQcFilter)},
  { 214, -1, -1, sizeof(::minknow_api::protocol::FilteringInfo)},
  { 221, -1, -1, sizeof(::minknow_api::protocol::ListProtocolRunsRequest)},
  { 228, -1, -1, sizeof(::minknow_api::protocol::ListProtocolRunsResponse)},
  { 235, -1, -1, sizeof(::minknow_api::protocol::GetCurrentProtocolRunRequest)},
  { 241, -1, -1, sizeof(::minknow_api::protocol::GetCurrentProtocolRunResponse)},
  { 248, -1, -1, sizeof(::minknow_api::protocol::WatchCurrentProtocolRunRequest)},
  { 254, -1, -1, sizeof(::minknow_api::protocol::GetContextInfoRequest)},
  { 260, 268, -1, sizeof(::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse)},
  { 270, -1, -1, sizeof(::minknow_api::protocol::GetContextInfoResponse)},
  { 277, 285, -1, sizeof(::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse)},
  { 287, -1, -1, sizeof(::minknow_api::protocol::SetContextInfoRequest)},
  { 294, -1, -1, sizeof(::minknow_api::protocol::SetContextInfoResponse)},
  { 300, -1, -1, sizeof(::minknow_api::protocol::GetProtocolPurposeRequest)},
  { 306, -1, -1, sizeof(::minknow_api::protocol::GetProtocolPurposeResponse)},
  { 313, -1, -1, sizeof(::minknow_api::protocol::SetProtocolPurposeRequest)},
  { 320, -1, -1, sizeof(::minknow_api::protocol::SetProtocolPurposeResponse)},
  { 326, -1, -1, sizeof(::minknow_api::protocol::AddEpi2meWorkflowRequest)},
  { 334, -1, -1, sizeof(::minknow_api::protocol::AddEpi2meWorkflowResponse)},
  { 340, -1, -1, sizeof(::minknow_api::protocol::ListProtocolGroupIdsRequest)},
  { 346, -1, -1, sizeof(::minknow_api::protocol::ListProtocolGroupIdsResponse)},
  { 353, -1, -1, sizeof(::minknow_api::protocol::BeginHardwareCheckRequest)},
  { 359, -1, -1, sizeof(::minknow_api::protocol::BeginHardwareCheckResponse)},
  { 366, -1, -1, sizeof(::minknow_api::protocol::BeginPlatformQcRequest)},
  { 372, -1, -1, sizeof(::minknow_api::protocol::BeginPlatformQcResponse)},
  { 379, -1, -1, sizeof(::minknow_api::protocol::SetPlatformQcResultRequest)},
  { 387, -1, -1, sizeof(::minknow_api::protocol::SetPlatformQcResultResponse)},
  { 393, -1, -1, sizeof(::minknow_api::protocol::ProtocolIdentifierComponents)},
  { 404, -1, -1, sizeof(::minknow_api::protocol::ListSettingsForProtocolRequest)},
  { 413, -1, -1, sizeof(::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions)},
  { 430, -1, -1, sizeof(::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling)},
  { 451, -1, -1, sizeof(::minknow_api::protocol::ListSettingsForProtocolResponse_Output)},
  { 480, -1, -1, sizeof(::minknow_api::protocol::ListSettingsForProtocolResponse)},
  { 491, -1, -1, sizeof(::minknow_api::protocol::AssociatePostProcessingAnalysisRequest)},
  { 499, -1, -1, sizeof(::minknow_api::protocol::AssociatePostProcessingAnalysisResponse)},
  { 506, -1, -1, sizeof(::minknow_api::protocol::ClearProtocolHistoryDataRequest)},
  { 513, -1, -1, sizeof(::minknow_api::protocol::ClearProtocolHistoryDataResponse)},
  { 519, -1, -1, sizeof(::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities)},
  { 527, -1, -1, sizeof(::minknow_api::protocol::ProtocolPhaseManagementRequest)},
  { 535, -1, -1, sizeof(::minknow_api::protocol::ProtocolPhaseManagementResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_BarcodeUserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolRunUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_StartProtocolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_StartProtocolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_StopProtocolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_StopProtocolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_PauseProtocolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_PauseProtocolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ResumeProtocolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ResumeProtocolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_TriggerMuxScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_TriggerMuxScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolInfo_TagValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolInfo_TagExtractionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolInfo_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_WaitForFinishedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetRunInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_Epi2meWorkflowReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_AssociatedPostProcessingAnalysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_PlatformQcResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolRunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_FilteringInfo_PlatformQcFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_FilteringInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolRunsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolRunsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetCurrentProtocolRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetCurrentProtocolRunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_WatchCurrentProtocolRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetContextInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetContextInfoResponse_ContextInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetContextInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetContextInfoRequest_ContextInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetContextInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetContextInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetProtocolPurposeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_GetProtocolPurposeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetProtocolPurposeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetProtocolPurposeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_AddEpi2meWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_AddEpi2meWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolGroupIdsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListProtocolGroupIdsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_BeginHardwareCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_BeginHardwareCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_BeginPlatformQcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_BeginPlatformQcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetPlatformQcResultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_SetPlatformQcResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolIdentifierComponents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListSettingsForProtocolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListSettingsForProtocolResponse_RunOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListSettingsForProtocolResponse_Basecalling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListSettingsForProtocolResponse_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ListSettingsForProtocolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_AssociatePostProcessingAnalysisRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_AssociatePostProcessingAnalysisResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ClearProtocolHistoryDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ClearProtocolHistoryDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolPhaseManagementRequest_Capabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolPhaseManagementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::protocol::_ProtocolPhaseManagementResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032minknow_api/protocol.proto\022\024minknow_ap"
  "i.protocol\032\035minknow_api/acquisition.prot"
  "o\032\034minknow_api/basecaller.proto\032\030minknow"
  "_api/device.proto\032#minknow_api/protocol_"
  "settings.proto\032\035minknow_api/rpc_options."
  "proto\032\037google/protobuf/timestamp.proto\032\036"
  "google/protobuf/wrappers.proto\"\244\002\n\017Barco"
  "deUserData\022\024\n\014barcode_name\030\001 \001(\t\022\027\n\017lamp"
  "_barcode_id\030\002 \001(\t\022\r\n\005alias\030\003 \001(\t\022>\n\004type"
  "\030\004 \001(\01620.minknow_api.protocol.BarcodeUse"
  "rData.SampleType\"\222\001\n\nSampleType\022\017\n\013test_"
  "sample\020\000\022\024\n\020positive_control\020\001\022\024\n\020negati"
  "ve_control\020\002\022\027\n\023no_template_control\020\003\022\026\n"
  "\022positive_control_1\020\004\022\026\n\022positive_contro"
  "l_2\020\005\"\301\001\n\023ProtocolRunUserInfo\0227\n\021protoco"
  "l_group_id\030\001 \001(\0132\034.google.protobuf.Strin"
  "gValue\022/\n\tsample_id\030\002 \001(\0132\034.google.proto"
  "buf.StringValue\022@\n\021barcode_user_info\030\003 \003"
  "(\0132%.minknow_api.protocol.BarcodeUserDat"
  "a\"|\n\024StartProtocolRequest\022\030\n\nidentifier\030"
  "\001 \001(\tB\004\210\265\030\001\022\014\n\004args\030\002 \003(\t\022<\n\tuser_info\030\003"
  " \001(\0132).minknow_api.protocol.ProtocolRunU"
  "serInfo\"\'\n\025StartProtocolResponse\022\016\n\006run_"
  "id\030\001 \001(\t\"c\n\023StopProtocolRequest\022L\n\023data_"
  "action_on_stop\030\001 \001(\0162/.minknow_api.acqui"
  "sition.StopRequest.DataAction\"\026\n\024StopPro"
  "tocolResponse\"\026\n\024PauseProtocolRequest\"\027\n"
  "\025PauseProtocolResponse\"\027\n\025ResumeProtocol"
  "Request\"\030\n\026ResumeProtocolResponse\"\027\n\025Tri"
  "ggerMuxScanRequest\"\030\n\026TriggerMuxScanResp"
  "onse\",\n\024ListProtocolsRequest\022\024\n\014force_re"
  "load\030\001 \001(\010\"\377\003\n\014ProtocolInfo\022\022\n\nidentifie"
  "r\030\001 \001(\t\022:\n\004tags\030\002 \003(\0132,.minknow_api.prot"
  "ocol.ProtocolInfo.TagsEntry\022\014\n\004name\030\003 \001("
  "\t\022U\n\025tag_extraction_result\030\004 \001(\01326.minkn"
  "ow_api.protocol.ProtocolInfo.TagExtracti"
  "onResult\032\241\001\n\010TagValue\022\026\n\014string_value\030\001 "
  "\001(\tH\000\022\024\n\nbool_value\030\002 \001(\010H\000\022\023\n\tint_value"
  "\030\003 \001(\003H\000\022\026\n\014double_value\030\004 \001(\001H\000\022\025\n\013arra"
  "y_value\030\005 \001(\tH\000\022\026\n\014object_value\030\006 \001(\tH\000B"
  "\013\n\ttag_value\032<\n\023TagExtractionResult\022\017\n\007s"
  "uccess\030\001 \001(\010\022\024\n\014error_report\030\002 \001(\t\032X\n\tTa"
  "gsEntry\022\013\n\003key\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.mi"
  "nknow_api.protocol.ProtocolInfo.TagValue"
  ":\0028\001\"N\n\025ListProtocolsResponse\0225\n\tprotoco"
  "ls\030\001 \003(\0132\".minknow_api.protocol.Protocol"
  "Info\"\377\001\n\026WaitForFinishedRequest\022\024\n\006run_i"
  "d\030\001 \001(\tB\004\210\265\030\001\022M\n\005state\030\002 \001(\0162>.minknow_a"
  "pi.protocol.WaitForFinishedRequest.Notif"
  "icationState\022\017\n\007timeout\030\003 \001(\002\"o\n\021Notific"
  "ationState\022\031\n\025NOTIFY_ON_TERMINATION\020\000\022\035\n"
  "\031NOTIFY_BEFORE_TERMINATION\020\001\022 \n\034NOTIFY_O"
  "N_SCRIPT_TERMINATION\020\002\"#\n\021GetRunInfoRequ"
  "est\022\016\n\006run_id\030\001 \001(\t\"2\n\027Epi2meWorkflowRef"
  "erence\022\n\n\002id\030\001 \001(\003\022\013\n\003url\030\002 \001(\t\"s\n Assoc"
  "iatedPostProcessingAnalysis\022\022\n\nstarted_i"
  "d\030\001 \001(\t\022;\n\rstart_request\030\002 \001(\0132$.minknow"
  "_api.basecaller.StartRequest\"R\n\020Platform"
  "QcResult\022\024\n\014flow_cell_id\030\001 \001(\t\022\016\n\006passed"
  "\030\002 \001(\010\022\030\n\020total_pore_count\030\003 \001(\r\"\263\007\n\017Pro"
  "tocolRunInfo\022\016\n\006run_id\030\001 \001(\t\022\023\n\013protocol"
  "_id\030\002 \001(\t\022\014\n\004args\030\003 \003(\t\022\023\n\013output_path\030\013"
  " \001(\t\0222\n\005state\030\004 \001(\0162#.minknow_api.protoc"
  "ol.ProtocolState\0222\n\005phase\030\020 \001(\0162#.minkno"
  "w_api.protocol.ProtocolPhase\0225\n\021last_pha"
  "se_change\030\021 \001(\0132\032.google.protobuf.Timest"
  "amp\022\021\n\tcan_pause\030\022 \001(\010\022\034\n\024can_trigger_mu"
  "x_scan\030\023 \001(\010\022.\n\nstart_time\030\005 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0223\n\017script_end_time\030"
  "\t \001(\0132\032.google.protobuf.Timestamp\022,\n\010end"
  "_time\030\006 \001(\0132\032.google.protobuf.Timestamp\022"
  "\033\n\023acquisition_run_ids\030\007 \003(\t\022<\n\tuser_inf"
  "o\030\010 \001(\0132).minknow_api.protocol.ProtocolR"
  "unUserInfo\022G\n\020epi2me_workflows\030\n \003(\0132-.m"
  "inknow_api.protocol.Epi2meWorkflowRefere"
  "nce\0229\n\006device\030\014 \001(\0132).minknow_api.device"
  ".GetDeviceInfoResponse\022>\n\tflow_cell\030\r \001("
  "\0132+.minknow_api.device.GetFlowCellInfoRe"
  "sponse\0225\n\tmeta_info\030\016 \001(\0132\".minknow_api."
  "protocol.ProtocolInfo\022c\n#associated_post"
  "_processing_analysis\030\017 \003(\01326.minknow_api"
  ".protocol.AssociatedPostProcessingAnalys"
  "is\022:\n\npqc_result\030\024 \001(\0132&.minknow_api.pro"
  "tocol.PlatformQcResult\"\231\001\n\rFilteringInfo"
  "\022H\n\npqc_filter\030\001 \001(\01324.minknow_api.proto"
  "col.FilteringInfo.PlatformQcFilter\032>\n\020Pl"
  "atformQcFilter\022\031\n\014flow_cell_id\030\001 \001(\tH\000\210\001"
  "\001B\017\n\r_flow_cell_id\"S\n\027ListProtocolRunsRe"
  "quest\0228\n\013filter_info\030\001 \001(\0132#.minknow_api"
  ".protocol.FilteringInfo\"+\n\030ListProtocolR"
  "unsResponse\022\017\n\007run_ids\030\001 \003(\t\"\036\n\034GetCurre"
  "ntProtocolRunRequest\"X\n\035GetCurrentProtoc"
  "olRunResponse\0227\n\010run_info\030\003 \001(\0132%.minkno"
  "w_api.protocol.ProtocolRunInfo\" \n\036WatchC"
  "urrentProtocolRunRequest\"\027\n\025GetContextIn"
  "foRequest\"\241\001\n\026GetContextInfoResponse\022S\n\014"
  "context_info\030\001 \003(\0132=.minknow_api.protoco"
  "l.GetContextInfoResponse.ContextInfoEntr"
  "y\0322\n\020ContextInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"\237\001\n\025SetContextInfoRequest\022"
  "R\n\014context_info\030\001 \003(\0132<.minknow_api.prot"
  "ocol.SetContextInfoRequest.ContextInfoEn"
  "try\0322\n\020ContextInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"\030\n\026SetContextInfoRespons"
  "e\"\033\n\031GetProtocolPurposeRequest\"-\n\032GetPro"
  "tocolPurposeResponse\022\017\n\007purpose\030\001 \001(\t\",\n"
  "\031SetProtocolPurposeRequest\022\017\n\007purpose\030\001 "
  "\001(\t\"\034\n\032SetProtocolPurposeResponse\"~\n\030Add"
  "Epi2meWorkflowRequest\022\024\n\006run_id\030\001 \001(\tB\004\210"
  "\265\030\001\022L\n\017epi2me_workflow\030\002 \001(\0132-.minknow_a"
  "pi.protocol.Epi2meWorkflowReferenceB\004\210\265\030"
  "\001\"\033\n\031AddEpi2meWorkflowResponse\"\035\n\033ListPr"
  "otocolGroupIdsRequest\":\n\034ListProtocolGro"
  "upIdsResponse\022\032\n\022protocol_group_ids\030\001 \003("
  "\t\"\033\n\031BeginHardwareCheckRequest\",\n\032BeginH"
  "ardwareCheckResponse\022\016\n\006run_id\030\001 \001(\t\"\030\n\026"
  "BeginPlatformQcRequest\")\n\027BeginPlatformQ"
  "cResponse\022\016\n\006run_id\030\001 \001(\t\"q\n\032SetPlatform"
  "QcResultRequest\022\027\n\017protocol_run_id\030\001 \001(\t"
  "\022:\n\npqc_result\030\002 \001(\0132&.minknow_api.proto"
  "col.PlatformQcResult\"\035\n\033SetPlatformQcRes"
  "ultResponse\"\374\001\n\034ProtocolIdentifierCompon"
  "ents\022M\n\010location\030\001 \001(\0162;.minknow_api.pro"
  "tocol.ProtocolIdentifierComponents.Locat"
  "ion\022\027\n\017experiment_type\030\002 \001(\t\022\014\n\004name\030\003 \001"
  "(\t\022\036\n\026flow_cell_product_code\030\004 \001(\t\022\013\n\003ki"
  "t\030\005 \001(\t\"9\n\010Location\022\007\n\003ANY\020\000\022\022\n\016SYSTEM_S"
  "CRIPTS\020\001\022\020\n\014USER_SCRIPTS\020\002\"\227\001\n\036ListSetti"
  "ngsForProtocolRequest\022\024\n\nidentifier\030\001 \001("
  "\tH\000\022H\n\ncomponents\030\002 \001(\01322.minknow_api.pr"
  "otocol.ProtocolIdentifierComponentsH\000B\025\n"
  "\023protocol_identifier\"\325!\n\037ListSettingsFor"
  "ProtocolResponse\022D\n\010protocol\030\001 \001(\01322.min"
  "know_api.protocol.ProtocolIdentifierComp"
  "onents\022U\n\013run_options\030\002 \001(\0132@.minknow_ap"
  "i.protocol.ListSettingsForProtocolRespon"
  "se.RunOptions\022V\n\013basecalling\030\003 \001(\0132A.min"
  "know_api.protocol.ListSettingsForProtoco"
  "lResponse.Basecalling\022L\n\006output\030\004 \001(\0132<."
  "minknow_api.protocol.ListSettingsForProt"
  "ocolResponse.Output\022I\n\021protocol_settings"
  "\030\005 \003(\0132..minknow_api.protocol_settings.P"
  "rotocolSetting\032\325\006\n\nRunOptions\022B\n\nrun_len"
  "gth\030\001 \001(\0132..minknow_api.protocol_setting"
  "s.ProtocolSetting\022D\n\014bias_voltage\030\002 \001(\0132"
  "..minknow_api.protocol_settings.Protocol"
  "Setting\022J\n\022read_until_enabled\030\003 \001(\0132..mi"
  "nknow_api.protocol_settings.ProtocolSett"
  "ing\022K\n\023read_until_ref_file\030\004 \001(\0132..minkn"
  "ow_api.protocol_settings.ProtocolSetting"
  "\022K\n\023read_until_channels\030\005 \001(\0132..minknow_"
  "api.protocol_settings.ProtocolSetting\022S\n"
  "\033read_until_bed_file_enabled\030\006 \001(\0132..min"
  "know_api.protocol_settings.ProtocolSetti"
  "ng\022K\n\023read_until_bed_file\030\007 \001(\0132..minkno"
  "w_api.protocol_settings.ProtocolSetting\022"
  "M\n\025read_until_enrichment\030\010 \001(\0132..minknow"
  "_api.protocol_settings.ProtocolSetting\022P"
  "\n\030active_channel_selection\030\t \001(\0132..minkn"
  "ow_api.protocol_settings.ProtocolSetting"
  "\022G\n\017mux_scan_period\030\n \001(\0132..minknow_api."
  "protocol_settings.ProtocolSetting\022K\n\023gro"
  "up_change_period\030\013 \001(\0132..minknow_api.pro"
  "tocol_settings.ProtocolSetting\032\270\t\n\013Basec"
  "alling\022K\n\023basecalling_enabled\030\001 \001(\0132..mi"
  "nknow_api.protocol_settings.ProtocolSett"
  "ing\022I\n\021barcoding_enabled\030\002 \001(\0132..minknow"
  "_api.protocol_settings.ProtocolSetting\022F"
  "\n\016basecall_model\030\003 \001(\0132..minknow_api.pro"
  "tocol_settings.ProtocolSetting\022M\n\025trim_b"
  "arcodes_enabled\030\004 \001(\0132..minknow_api.prot"
  "ocol_settings.ProtocolSetting\022R\n\032require"
  "_barcodes_both_ends\030\005 \001(\0132..minknow_api."
  "protocol_settings.ProtocolSetting\022R\n\032det"
  "ect_mid_strand_barcodes\030\006 \001(\0132..minknow_"
  "api.protocol_settings.ProtocolSetting\022T\n"
  "\034override_mid_barcoding_score\030\007 \001(\0132..mi"
  "nknow_api.protocol_settings.ProtocolSett"
  "ing\022U\n\035override_rear_barcoding_score\030\010 \001"
  "(\0132..minknow_api.protocol_settings.Proto"
  "colSetting\022K\n\023min_barcoding_score\030\t \001(\0132"
  "..minknow_api.protocol_settings.Protocol"
  "Setting\022P\n\030min_barcoding_score_rear\030\n \001("
  "\0132..minknow_api.protocol_settings.Protoc"
  "olSetting\022O\n\027min_barcoding_score_mid\030\013 \001"
  "(\0132..minknow_api.protocol_settings.Proto"
  "colSetting\022I\n\021alignment_enabled\030\014 \001(\0132.."
  "minknow_api.protocol_settings.ProtocolSe"
  "tting\022J\n\022alignment_ref_file\030\r \001(\0132..mink"
  "now_api.protocol_settings.ProtocolSettin"
  "g\022R\n\032alignment_bed_file_enabled\030\016 \001(\0132.."
  "minknow_api.protocol_settings.ProtocolSe"
  "tting\022J\n\022alignment_bed_file\030\017 \001(\0132..mink"
  "now_api.protocol_settings.ProtocolSettin"
  "g\032\220\016\n\006Output\022G\n\017output_location\030\001 \001(\0132.."
  "minknow_api.protocol_settings.ProtocolSe"
  "tting\022F\n\016fast_q_enabled\030\002 \001(\0132..minknow_"
  "api.protocol_settings.ProtocolSetting\022M\n"
  "\025fast_q_reads_per_file\030\003 \001(\0132..minknow_a"
  "pi.protocol_settings.ProtocolSetting\022O\n\027"
  "fast_q_data_compression\030\004 \001(\0132..minknow_"
  "api.protocol_settings.ProtocolSetting\022F\n"
  "\016fast_5_enabled\030\005 \001(\0132..minknow_api.prot"
  "ocol_settings.ProtocolSetting\022M\n\025fast_5_"
  "reads_per_file\030\006 \001(\0132..minknow_api.proto"
  "col_settings.ProtocolSetting\022O\n\027fast_5_d"
  "ata_trace_table\030\007 \001(\0132..minknow_api.prot"
  "ocol_settings.ProtocolSetting\022N\n\026fast_5_"
  "data_move_table\030\010 \001(\0132..minknow_api.prot"
  "ocol_settings.ProtocolSetting\022J\n\022fast_5_"
  "data_fast_q\030\t \001(\0132..minknow_api.protocol"
  "_settings.ProtocolSetting\022G\n\017fast_5_data"
  "_raw\030\n \001(\0132..minknow_api.protocol_settin"
  "gs.ProtocolSetting\022O\n\027fast_5_data_compre"
  "ssion\030\013 \001(\0132..minknow_api.protocol_setti"
  "ngs.ProtocolSetting\022C\n\013bam_enabled\030\014 \001(\013"
  "2..minknow_api.protocol_settings.Protoco"
  "lSetting\022N\n\026read_filtering_enabled\030\r \001(\013"
  "2..minknow_api.protocol_settings.Protoco"
  "lSetting\022Q\n\031read_filtering_min_qscore\030\016 "
  "\001(\0132..minknow_api.protocol_settings.Prot"
  "ocolSetting\022V\n\036read_filtering_min_read_l"
  "ength\030\017 \001(\0132..minknow_api.protocol_setti"
  "ngs.ProtocolSetting\022V\n\036read_filtering_ma"
  "x_read_length\030\020 \001(\0132..minknow_api.protoc"
  "ol_settings.ProtocolSetting\022I\n\021bulk_file"
  "_enabled\030\021 \001(\0132..minknow_api.protocol_se"
  "ttings.ProtocolSetting\022E\n\rbulk_file_raw\030"
  "\022 \001(\0132..minknow_api.protocol_settings.Pr"
  "otocolSetting\022H\n\020bulk_file_events\030\023 \001(\0132"
  "..minknow_api.protocol_settings.Protocol"
  "Setting\022L\n\024bulk_file_read_table\030\024 \001(\0132.."
  "minknow_api.protocol_settings.ProtocolSe"
  "tting\022M\n\025bulk_file_raw_enabled\030\025 \001(\0132..m"
  "inknow_api.protocol_settings.ProtocolSet"
  "ting\022P\n\030bulk_file_events_enabled\030\026 \001(\0132."
  ".minknow_api.protocol_settings.ProtocolS"
  "etting\022T\n\034bulk_file_read_table_enabled\030\027"
  " \001(\0132..minknow_api.protocol_settings.Pro"
  "tocolSetting\"u\n&AssociatePostProcessingA"
  "nalysisRequest\022\016\n\006run_id\030\001 \001(\t\022;\n\rstart_"
  "request\030\002 \001(\0132$.minknow_api.basecaller.S"
  "tartRequest\"5\n\'AssociatePostProcessingAn"
  "alysisResponse\022\n\n\002id\030\001 \001(\t\"7\n\037ClearProto"
  "colHistoryDataRequest\022\024\n\014protocol_ids\030\001 "
  "\003(\t\"\"\n ClearProtocolHistoryDataResponse\""
  "\362\001\n\036ProtocolPhaseManagementRequest\022[\n\020se"
  "t_capabilities\030\001 \001(\0132A.minknow_api.proto"
  "col.ProtocolPhaseManagementRequest.Capab"
  "ilities\0222\n\005phase\030\002 \001(\0162#.minknow_api.pro"
  "tocol.ProtocolPhase\032\?\n\014Capabilities\022\021\n\tc"
  "an_pause\030\001 \001(\010\022\034\n\024can_trigger_mux_scan\030\002"
  " \001(\010\"O\n\037ProtocolPhaseManagementResponse\022"
  ",\n\006action\030\001 \001(\0162\034.minknow_api.protocol.A"
  "ction*\242\002\n\rProtocolState\022\024\n\020PROTOCOL_RUNN"
  "ING\020\000\022$\n PROTOCOL_WAITING_FOR_TEMPERATUR"
  "E\020\004\022$\n PROTOCOL_WAITING_FOR_ACQUISITION\020"
  "\005\022\026\n\022PROTOCOL_COMPLETED\020\001\022\034\n\030PROTOCOL_ST"
  "OPPED_BY_USER\020\002\022 \n\034PROTOCOL_FINISHED_WIT"
  "H_ERROR\020\003\022\'\n#PROTOCOL_FINISHED_WITH_DEVI"
  "CE_ERROR\020\006\022.\n*PROTOCOL_FINISHED_UNABLE_T"
  "O_SEND_TELEMETRY\020\007*\277\001\n\rProtocolPhase\022\021\n\r"
  "PHASE_UNKNOWN\020\000\022\026\n\022PHASE_INITIALISING\020\001\022"
  "\024\n\020PHASE_SEQUENCING\020\002\022 \n\034PHASE_PREPARING"
  "_FOR_MUX_SCAN\020\003\022\022\n\016PHASE_MUX_SCAN\020\004\022\020\n\014P"
  "HASE_PAUSED\020\005\022\021\n\rPHASE_PAUSING\020\006\022\022\n\016PHAS"
  "E_RESUMING\020\007*[\n\006Action\022\017\n\013ACTION_NONE\020\000\022"
  "\020\n\014ACTION_PAUSE\020\001\022\021\n\rACTION_RESUME\020\002\022\033\n\027"
  "ACTION_TRIGGER_MUX_SCAN\020\0032\316\027\n\017ProtocolSe"
  "rvice\022k\n\016start_protocol\022*.minknow_api.pr"
  "otocol.StartProtocolRequest\032+.minknow_ap"
  "i.protocol.StartProtocolResponse\"\000\022h\n\rst"
  "op_protocol\022).minknow_api.protocol.StopP"
  "rotocolRequest\032*.minknow_api.protocol.St"
  "opProtocolResponse\"\000\022n\n\016pause_protocol\022*"
  ".minknow_api.protocol.PauseProtocolReque"
  "st\032+.minknow_api.protocol.PauseProtocolR"
  "esponse\"\003\220\002\002\022q\n\017resume_protocol\022+.minkno"
  "w_api.protocol.ResumeProtocolRequest\032,.m"
  "inknow_api.protocol.ResumeProtocolRespon"
  "se\"\003\220\002\002\022r\n\020trigger_mux_scan\022+.minknow_ap"
  "i.protocol.TriggerMuxScanRequest\032,.minkn"
  "ow_api.protocol.TriggerMuxScanResponse\"\003"
  "\220\002\002\022m\n\021wait_for_finished\022,.minknow_api.p"
  "rotocol.WaitForFinishedRequest\032%.minknow"
  "_api.protocol.ProtocolRunInfo\"\003\220\002\001\022c\n\014ge"
  "t_run_info\022\'.minknow_api.protocol.GetRun"
  "InfoRequest\032%.minknow_api.protocol.Proto"
  "colRunInfo\"\003\220\002\001\022x\n\022list_protocol_runs\022-."
  "minknow_api.protocol.ListProtocolRunsReq"
  "uest\032..minknow_api.protocol.ListProtocol"
  "RunsResponse\"\003\220\002\001\022z\n\030get_current_protoco"
  "l_run\0222.minknow_api.protocol.GetCurrentP"
  "rotocolRunRequest\032%.minknow_api.protocol"
  ".ProtocolRunInfo\"\003\220\002\001\022\200\001\n\032watch_current_"
  "protocol_run\0224.minknow_api.protocol.Watc"
  "hCurrentProtocolRunRequest\032%.minknow_api"
  ".protocol.ProtocolRunInfo\"\003\220\002\0010\001\022n\n\016list"
  "_protocols\022*.minknow_api.protocol.ListPr"
  "otocolsRequest\032+.minknow_api.protocol.Li"
  "stProtocolsResponse\"\003\220\002\002\022r\n\020get_context_"
  "info\022+.minknow_api.protocol.GetContextIn"
  "foRequest\032,.minknow_api.protocol.GetCont"
  "extInfoResponse\"\003\220\002\001\022r\n\020set_context_info"
  "\022+.minknow_api.protocol.SetContextInfoRe"
  "quest\032,.minknow_api.protocol.SetContextI"
  "nfoResponse\"\003\220\002\002\022~\n\024get_protocol_purpose"
  "\022/.minknow_api.protocol.GetProtocolPurpo"
  "seRequest\0320.minknow_api.protocol.GetProt"
  "ocolPurposeResponse\"\003\220\002\001\022~\n\024set_protocol"
  "_purpose\022/.minknow_api.protocol.SetProto"
  "colPurposeRequest\0320.minknow_api.protocol"
  ".SetProtocolPurposeResponse\"\003\220\002\002\022x\n\023add_"
  "epi2me_workflow\022..minknow_api.protocol.A"
  "ddEpi2meWorkflowRequest\032/.minknow_api.pr"
  "otocol.AddEpi2meWorkflowResponse\"\000\022\205\001\n\027l"
  "ist_protocol_group_ids\0221.minknow_api.pro"
  "tocol.ListProtocolGroupIdsRequest\0322.mink"
  "now_api.protocol.ListProtocolGroupIdsRes"
  "ponse\"\003\220\002\001\022\177\n\024begin_hardware_check\022/.min"
  "know_api.protocol.BeginHardwareCheckRequ"
  "est\0320.minknow_api.protocol.BeginHardware"
  "CheckResponse\"\004\230\265\030\001\022v\n\021begin_platform_qc"
  "\022,.minknow_api.protocol.BeginPlatformQcR"
  "equest\032-.minknow_api.protocol.BeginPlatf"
  "ormQcResponse\"\004\230\265\030\001\022\202\001\n\026set_platform_qc_"
  "result\0220.minknow_api.protocol.SetPlatfor"
  "mQcResultRequest\0321.minknow_api.protocol."
  "SetPlatformQcResultResponse\"\003\220\002\002\022\222\001\n\032lis"
  "t_settings_for_protocol\0224.minknow_api.pr"
  "otocol.ListSettingsForProtocolRequest\0325."
  "minknow_api.protocol.ListSettingsForProt"
  "ocolResponse\"\007\220\002\001\230\265\030\001\022\260\001\n/associate_post"
  "_processing_analysis_for_protocol\022<.mink"
  "now_api.protocol.AssociatePostProcessing"
  "AnalysisRequest\032=.minknow_api.protocol.A"
  "ssociatePostProcessingAnalysisResponse\"\000"
  "\022\216\001\n\033clear_protocol_history_data\0225.minkn"
  "ow_api.protocol.ClearProtocolHistoryData"
  "Request\0326.minknow_api.protocol.ClearProt"
  "ocolHistoryDataResponse\"\000\022\216\001\n\031protocol_p"
  "hase_management\0224.minknow_api.protocol.P"
  "rotocolPhaseManagementRequest\0325.minknow_"
  "api.protocol.ProtocolPhaseManagementResp"
  "onse\"\000(\0010\001B&\n\034com.nanoporetech.minknow_a"
  "pi\242\002\005MKAPIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2fprotocol_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_minknow_5fapi_2facquisition_2eproto,
  &::descriptor_table_minknow_5fapi_2fbasecaller_2eproto,
  &::descriptor_table_minknow_5fapi_2fdevice_2eproto,
  &::descriptor_table_minknow_5fapi_2fprotocol_5fsettings_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fprotocol_2eproto = {
  false, false, 13818, descriptor_table_protodef_minknow_5fapi_2fprotocol_2eproto, "minknow_api/protocol.proto", 
  &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once, descriptor_table_minknow_5fapi_2fprotocol_2eproto_deps, 7, 64,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2fprotocol_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2fprotocol_2eproto, file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto, file_level_service_descriptors_minknow_5fapi_2fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2fprotocol_2eproto(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
namespace minknow_api {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BarcodeUserData_SampleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[0];
}
bool BarcodeUserData_SampleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BarcodeUserData_SampleType BarcodeUserData::test_sample;
constexpr BarcodeUserData_SampleType BarcodeUserData::positive_control;
constexpr BarcodeUserData_SampleType BarcodeUserData::negative_control;
constexpr BarcodeUserData_SampleType BarcodeUserData::no_template_control;
constexpr BarcodeUserData_SampleType BarcodeUserData::positive_control_1;
constexpr BarcodeUserData_SampleType BarcodeUserData::positive_control_2;
constexpr BarcodeUserData_SampleType BarcodeUserData::SampleType_MIN;
constexpr BarcodeUserData_SampleType BarcodeUserData::SampleType_MAX;
constexpr int BarcodeUserData::SampleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaitForFinishedRequest_NotificationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[1];
}
bool WaitForFinishedRequest_NotificationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest::NOTIFY_ON_TERMINATION;
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest::NOTIFY_BEFORE_TERMINATION;
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest::NOTIFY_ON_SCRIPT_TERMINATION;
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest::NotificationState_MIN;
constexpr WaitForFinishedRequest_NotificationState WaitForFinishedRequest::NotificationState_MAX;
constexpr int WaitForFinishedRequest::NotificationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolIdentifierComponents_Location_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[2];
}
bool ProtocolIdentifierComponents_Location_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::ANY;
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::SYSTEM_SCRIPTS;
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::USER_SCRIPTS;
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::Location_MIN;
constexpr ProtocolIdentifierComponents_Location ProtocolIdentifierComponents::Location_MAX;
constexpr int ProtocolIdentifierComponents::Location_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[3];
}
bool ProtocolState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[4];
}
bool ProtocolPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fprotocol_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fprotocol_2eproto[5];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BarcodeUserData::_Internal {
 public:
};

BarcodeUserData::BarcodeUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.BarcodeUserData)
}
BarcodeUserData::BarcodeUserData(const BarcodeUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  barcode_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_barcode_name().empty()) {
    barcode_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_barcode_name(), 
      GetArenaForAllocation());
  }
  lamp_barcode_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lamp_barcode_id().empty()) {
    lamp_barcode_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lamp_barcode_id(), 
      GetArenaForAllocation());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.BarcodeUserData)
}

void BarcodeUserData::SharedCtor() {
barcode_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lamp_barcode_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

BarcodeUserData::~BarcodeUserData() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.BarcodeUserData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BarcodeUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  barcode_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lamp_barcode_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BarcodeUserData::ArenaDtor(void* object) {
  BarcodeUserData* _this = reinterpret_cast< BarcodeUserData* >(object);
  (void)_this;
}
void BarcodeUserData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarcodeUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BarcodeUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.BarcodeUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcode_name_.ClearToEmpty();
  lamp_barcode_id_.ClearToEmpty();
  alias_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarcodeUserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string barcode_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_barcode_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.BarcodeUserData.barcode_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lamp_barcode_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lamp_barcode_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.BarcodeUserData.lamp_barcode_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.BarcodeUserData.alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.BarcodeUserData.SampleType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minknow_api::protocol::BarcodeUserData_SampleType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarcodeUserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.BarcodeUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string barcode_name = 1;
  if (!this->_internal_barcode_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_barcode_name().data(), static_cast<int>(this->_internal_barcode_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.BarcodeUserData.barcode_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_barcode_name(), target);
  }

  // string lamp_barcode_id = 2;
  if (!this->_internal_lamp_barcode_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lamp_barcode_id().data(), static_cast<int>(this->_internal_lamp_barcode_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.BarcodeUserData.lamp_barcode_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lamp_barcode_id(), target);
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.BarcodeUserData.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // .minknow_api.protocol.BarcodeUserData.SampleType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.BarcodeUserData)
  return target;
}

size_t BarcodeUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.BarcodeUserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string barcode_name = 1;
  if (!this->_internal_barcode_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_barcode_name());
  }

  // string lamp_barcode_id = 2;
  if (!this->_internal_lamp_barcode_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lamp_barcode_id());
  }

  // string alias = 3;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .minknow_api.protocol.BarcodeUserData.SampleType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarcodeUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BarcodeUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarcodeUserData::GetClassData() const { return &_class_data_; }

void BarcodeUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BarcodeUserData *>(to)->MergeFrom(
      static_cast<const BarcodeUserData &>(from));
}


void BarcodeUserData::MergeFrom(const BarcodeUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.BarcodeUserData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_barcode_name().empty()) {
    _internal_set_barcode_name(from._internal_barcode_name());
  }
  if (!from._internal_lamp_barcode_id().empty()) {
    _internal_set_lamp_barcode_id(from._internal_lamp_barcode_id());
  }
  if (!from._internal_alias().empty()) {
    _internal_set_alias(from._internal_alias());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BarcodeUserData::CopyFrom(const BarcodeUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.BarcodeUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarcodeUserData::IsInitialized() const {
  return true;
}

void BarcodeUserData::InternalSwap(BarcodeUserData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &barcode_name_, lhs_arena,
      &other->barcode_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lamp_barcode_id_, lhs_arena,
      &other->lamp_barcode_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alias_, lhs_arena,
      &other->alias_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarcodeUserData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[0]);
}

// ===================================================================

class ProtocolRunUserInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& protocol_group_id(const ProtocolRunUserInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& sample_id(const ProtocolRunUserInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
ProtocolRunUserInfo::_Internal::protocol_group_id(const ProtocolRunUserInfo* msg) {
  return *msg->protocol_group_id_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
ProtocolRunUserInfo::_Internal::sample_id(const ProtocolRunUserInfo* msg) {
  return *msg->sample_id_;
}
void ProtocolRunUserInfo::clear_protocol_group_id() {
  if (GetArenaForAllocation() == nullptr && protocol_group_id_ != nullptr) {
    delete protocol_group_id_;
  }
  protocol_group_id_ = nullptr;
}
void ProtocolRunUserInfo::clear_sample_id() {
  if (GetArenaForAllocation() == nullptr && sample_id_ != nullptr) {
    delete sample_id_;
  }
  sample_id_ = nullptr;
}
ProtocolRunUserInfo::ProtocolRunUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcode_user_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolRunUserInfo)
}
ProtocolRunUserInfo::ProtocolRunUserInfo(const ProtocolRunUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barcode_user_info_(from.barcode_user_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_protocol_group_id()) {
    protocol_group_id_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.protocol_group_id_);
  } else {
    protocol_group_id_ = nullptr;
  }
  if (from._internal_has_sample_id()) {
    sample_id_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from.sample_id_);
  } else {
    sample_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolRunUserInfo)
}

void ProtocolRunUserInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_id_) -
    reinterpret_cast<char*>(&protocol_group_id_)) + sizeof(sample_id_));
}

ProtocolRunUserInfo::~ProtocolRunUserInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolRunUserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolRunUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete protocol_group_id_;
  if (this != internal_default_instance()) delete sample_id_;
}

void ProtocolRunUserInfo::ArenaDtor(void* object) {
  ProtocolRunUserInfo* _this = reinterpret_cast< ProtocolRunUserInfo* >(object);
  (void)_this;
}
void ProtocolRunUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolRunUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolRunUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolRunUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcode_user_info_.Clear();
  if (GetArenaForAllocation() == nullptr && protocol_group_id_ != nullptr) {
    delete protocol_group_id_;
  }
  protocol_group_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sample_id_ != nullptr) {
    delete sample_id_;
  }
  sample_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolRunUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.StringValue protocol_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_group_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue sample_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.protocol.BarcodeUserData barcode_user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_barcode_user_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolRunUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolRunUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue protocol_group_id = 1;
  if (this->_internal_has_protocol_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::protocol_group_id(this), target, stream);
  }

  // .google.protobuf.StringValue sample_id = 2;
  if (this->_internal_has_sample_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sample_id(this), target, stream);
  }

  // repeated .minknow_api.protocol.BarcodeUserData barcode_user_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_barcode_user_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_barcode_user_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolRunUserInfo)
  return target;
}

size_t ProtocolRunUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolRunUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.protocol.BarcodeUserData barcode_user_info = 3;
  total_size += 1UL * this->_internal_barcode_user_info_size();
  for (const auto& msg : this->barcode_user_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue protocol_group_id = 1;
  if (this->_internal_has_protocol_group_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocol_group_id_);
  }

  // .google.protobuf.StringValue sample_id = 2;
  if (this->_internal_has_sample_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sample_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolRunUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolRunUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolRunUserInfo::GetClassData() const { return &_class_data_; }

void ProtocolRunUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolRunUserInfo *>(to)->MergeFrom(
      static_cast<const ProtocolRunUserInfo &>(from));
}


void ProtocolRunUserInfo::MergeFrom(const ProtocolRunUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolRunUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcode_user_info_.MergeFrom(from.barcode_user_info_);
  if (from._internal_has_protocol_group_id()) {
    _internal_mutable_protocol_group_id()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_protocol_group_id());
  }
  if (from._internal_has_sample_id()) {
    _internal_mutable_sample_id()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_sample_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolRunUserInfo::CopyFrom(const ProtocolRunUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolRunUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolRunUserInfo::IsInitialized() const {
  return true;
}

void ProtocolRunUserInfo::InternalSwap(ProtocolRunUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcode_user_info_.InternalSwap(&other->barcode_user_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolRunUserInfo, sample_id_)
      + sizeof(ProtocolRunUserInfo::sample_id_)
      - PROTOBUF_FIELD_OFFSET(ProtocolRunUserInfo, protocol_group_id_)>(
          reinterpret_cast<char*>(&protocol_group_id_),
          reinterpret_cast<char*>(&other->protocol_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolRunUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[1]);
}

// ===================================================================

class StartProtocolRequest::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolRunUserInfo& user_info(const StartProtocolRequest* msg);
};

const ::minknow_api::protocol::ProtocolRunUserInfo&
StartProtocolRequest::_Internal::user_info(const StartProtocolRequest* msg) {
  return *msg->user_info_;
}
StartProtocolRequest::StartProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.StartProtocolRequest)
}
StartProtocolRequest::StartProtocolRequest(const StartProtocolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::minknow_api::protocol::ProtocolRunUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.StartProtocolRequest)
}

void StartProtocolRequest::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_info_ = nullptr;
}

StartProtocolRequest::~StartProtocolRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.StartProtocolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartProtocolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void StartProtocolRequest::ArenaDtor(void* object) {
  StartProtocolRequest* _this = reinterpret_cast< StartProtocolRequest* >(object);
  (void)_this;
}
void StartProtocolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartProtocolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartProtocolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.StartProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  identifier_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartProtocolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.StartProtocolRequest.identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.StartProtocolRequest.args"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolRunUserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartProtocolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.StartProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.StartProtocolRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // repeated string args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.StartProtocolRequest.args");
    target = stream->WriteString(2, s, target);
  }

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.StartProtocolRequest)
  return target;
}

size_t StartProtocolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.StartProtocolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      args_.Get(i));
  }

  // string identifier = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartProtocolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartProtocolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartProtocolRequest::GetClassData() const { return &_class_data_; }

void StartProtocolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartProtocolRequest *>(to)->MergeFrom(
      static_cast<const StartProtocolRequest &>(from));
}


void StartProtocolRequest::MergeFrom(const StartProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.StartProtocolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::minknow_api::protocol::ProtocolRunUserInfo::MergeFrom(from._internal_user_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartProtocolRequest::CopyFrom(const StartProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.StartProtocolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartProtocolRequest::IsInitialized() const {
  return true;
}

void StartProtocolRequest::InternalSwap(StartProtocolRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  swap(user_info_, other->user_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartProtocolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[2]);
}

// ===================================================================

class StartProtocolResponse::_Internal {
 public:
};

StartProtocolResponse::StartProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.StartProtocolResponse)
}
StartProtocolResponse::StartProtocolResponse(const StartProtocolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.StartProtocolResponse)
}

void StartProtocolResponse::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StartProtocolResponse::~StartProtocolResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.StartProtocolResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartProtocolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartProtocolResponse::ArenaDtor(void* object) {
  StartProtocolResponse* _this = reinterpret_cast< StartProtocolResponse* >(object);
  (void)_this;
}
void StartProtocolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartProtocolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartProtocolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.StartProtocolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartProtocolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.StartProtocolResponse.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartProtocolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.StartProtocolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.StartProtocolResponse.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.StartProtocolResponse)
  return target;
}

size_t StartProtocolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.StartProtocolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartProtocolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartProtocolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartProtocolResponse::GetClassData() const { return &_class_data_; }

void StartProtocolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartProtocolResponse *>(to)->MergeFrom(
      static_cast<const StartProtocolResponse &>(from));
}


void StartProtocolResponse::MergeFrom(const StartProtocolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.StartProtocolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartProtocolResponse::CopyFrom(const StartProtocolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.StartProtocolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartProtocolResponse::IsInitialized() const {
  return true;
}

void StartProtocolResponse::InternalSwap(StartProtocolResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StartProtocolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[3]);
}

// ===================================================================

class StopProtocolRequest::_Internal {
 public:
};

StopProtocolRequest::StopProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.StopProtocolRequest)
}
StopProtocolRequest::StopProtocolRequest(const StopProtocolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_action_on_stop_ = from.data_action_on_stop_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.StopProtocolRequest)
}

void StopProtocolRequest::SharedCtor() {
data_action_on_stop_ = 0;
}

StopProtocolRequest::~StopProtocolRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.StopProtocolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopProtocolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopProtocolRequest::ArenaDtor(void* object) {
  StopProtocolRequest* _this = reinterpret_cast< StopProtocolRequest* >(object);
  (void)_this;
}
void StopProtocolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopProtocolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopProtocolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.StopProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_action_on_stop_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopProtocolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_action_on_stop(static_cast<::minknow_api::acquisition::StopRequest_DataAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopProtocolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.StopProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  if (this->_internal_data_action_on_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_action_on_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.StopProtocolRequest)
  return target;
}

size_t StopProtocolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.StopProtocolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.acquisition.StopRequest.DataAction data_action_on_stop = 1;
  if (this->_internal_data_action_on_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_action_on_stop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopProtocolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopProtocolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopProtocolRequest::GetClassData() const { return &_class_data_; }

void StopProtocolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopProtocolRequest *>(to)->MergeFrom(
      static_cast<const StopProtocolRequest &>(from));
}


void StopProtocolRequest::MergeFrom(const StopProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.StopProtocolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data_action_on_stop() != 0) {
    _internal_set_data_action_on_stop(from._internal_data_action_on_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopProtocolRequest::CopyFrom(const StopProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.StopProtocolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopProtocolRequest::IsInitialized() const {
  return true;
}

void StopProtocolRequest::InternalSwap(StopProtocolRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_action_on_stop_, other->data_action_on_stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopProtocolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[4]);
}

// ===================================================================

class StopProtocolResponse::_Internal {
 public:
};

StopProtocolResponse::StopProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.StopProtocolResponse)
}
StopProtocolResponse::StopProtocolResponse(const StopProtocolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.StopProtocolResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopProtocolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopProtocolResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopProtocolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[5]);
}

// ===================================================================

class PauseProtocolRequest::_Internal {
 public:
};

PauseProtocolRequest::PauseProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.PauseProtocolRequest)
}
PauseProtocolRequest::PauseProtocolRequest(const PauseProtocolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.PauseProtocolRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseProtocolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseProtocolRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PauseProtocolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[6]);
}

// ===================================================================

class PauseProtocolResponse::_Internal {
 public:
};

PauseProtocolResponse::PauseProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.PauseProtocolResponse)
}
PauseProtocolResponse::PauseProtocolResponse(const PauseProtocolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.PauseProtocolResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseProtocolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseProtocolResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PauseProtocolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[7]);
}

// ===================================================================

class ResumeProtocolRequest::_Internal {
 public:
};

ResumeProtocolRequest::ResumeProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ResumeProtocolRequest)
}
ResumeProtocolRequest::ResumeProtocolRequest(const ResumeProtocolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ResumeProtocolRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResumeProtocolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResumeProtocolRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResumeProtocolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[8]);
}

// ===================================================================

class ResumeProtocolResponse::_Internal {
 public:
};

ResumeProtocolResponse::ResumeProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ResumeProtocolResponse)
}
ResumeProtocolResponse::ResumeProtocolResponse(const ResumeProtocolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ResumeProtocolResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResumeProtocolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResumeProtocolResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResumeProtocolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[9]);
}

// ===================================================================

class TriggerMuxScanRequest::_Internal {
 public:
};

TriggerMuxScanRequest::TriggerMuxScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.TriggerMuxScanRequest)
}
TriggerMuxScanRequest::TriggerMuxScanRequest(const TriggerMuxScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.TriggerMuxScanRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TriggerMuxScanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TriggerMuxScanRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TriggerMuxScanRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[10]);
}

// ===================================================================

class TriggerMuxScanResponse::_Internal {
 public:
};

TriggerMuxScanResponse::TriggerMuxScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.TriggerMuxScanResponse)
}
TriggerMuxScanResponse::TriggerMuxScanResponse(const TriggerMuxScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.TriggerMuxScanResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TriggerMuxScanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TriggerMuxScanResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TriggerMuxScanResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[11]);
}

// ===================================================================

class ListProtocolsRequest::_Internal {
 public:
};

ListProtocolsRequest::ListProtocolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolsRequest)
}
ListProtocolsRequest::ListProtocolsRequest(const ListProtocolsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  force_reload_ = from.force_reload_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolsRequest)
}

void ListProtocolsRequest::SharedCtor() {
force_reload_ = false;
}

ListProtocolsRequest::~ListProtocolsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListProtocolsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProtocolsRequest::ArenaDtor(void* object) {
  ListProtocolsRequest* _this = reinterpret_cast< ListProtocolsRequest* >(object);
  (void)_this;
}
void ListProtocolsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListProtocolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  force_reload_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force_reload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          force_reload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListProtocolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force_reload = 1;
  if (this->_internal_force_reload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_force_reload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListProtocolsRequest)
  return target;
}

size_t ListProtocolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListProtocolsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool force_reload = 1;
  if (this->_internal_force_reload() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolsRequest::GetClassData() const { return &_class_data_; }

void ListProtocolsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolsRequest *>(to)->MergeFrom(
      static_cast<const ListProtocolsRequest &>(from));
}


void ListProtocolsRequest::MergeFrom(const ListProtocolsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListProtocolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_force_reload() != 0) {
    _internal_set_force_reload(from._internal_force_reload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolsRequest::CopyFrom(const ListProtocolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListProtocolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolsRequest::IsInitialized() const {
  return true;
}

void ListProtocolsRequest::InternalSwap(ListProtocolsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(force_reload_, other->force_reload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[12]);
}

// ===================================================================

class ProtocolInfo_TagValue::_Internal {
 public:
};

ProtocolInfo_TagValue::ProtocolInfo_TagValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolInfo.TagValue)
}
ProtocolInfo_TagValue::ProtocolInfo_TagValue(const ProtocolInfo_TagValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_tag_value();
  switch (from.tag_value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kArrayValue: {
      _internal_set_array_value(from._internal_array_value());
      break;
    }
    case kObjectValue: {
      _internal_set_object_value(from._internal_object_value());
      break;
    }
    case TAG_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolInfo.TagValue)
}

void ProtocolInfo_TagValue::SharedCtor() {
clear_has_tag_value();
}

ProtocolInfo_TagValue::~ProtocolInfo_TagValue() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolInfo.TagValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolInfo_TagValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_tag_value()) {
    clear_tag_value();
  }
}

void ProtocolInfo_TagValue::ArenaDtor(void* object) {
  ProtocolInfo_TagValue* _this = reinterpret_cast< ProtocolInfo_TagValue* >(object);
  (void)_this;
}
void ProtocolInfo_TagValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolInfo_TagValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolInfo_TagValue::clear_tag_value() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.protocol.ProtocolInfo.TagValue)
  switch (tag_value_case()) {
    case kStringValue: {
      tag_value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kArrayValue: {
      tag_value_.array_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kObjectValue: {
      tag_value_.object_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case TAG_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TAG_VALUE_NOT_SET;
}


void ProtocolInfo_TagValue::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolInfo.TagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_tag_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolInfo_TagValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.TagValue.string_value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string array_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_array_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.TagValue.array_value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string object_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_object_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.TagValue.object_value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolInfo_TagValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolInfo.TagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.TagValue.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // bool bool_value = 2;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_value(), target);
  }

  // int64 int_value = 3;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_int_value(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // string array_value = 5;
  if (_internal_has_array_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_array_value().data(), static_cast<int>(this->_internal_array_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.TagValue.array_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_array_value(), target);
  }

  // string object_value = 6;
  if (_internal_has_object_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_value().data(), static_cast<int>(this->_internal_object_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.TagValue.object_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_object_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolInfo.TagValue)
  return target;
}

size_t ProtocolInfo_TagValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolInfo.TagValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (tag_value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int64 int_value = 3;
    case kIntValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int_value());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string array_value = 5;
    case kArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_array_value());
      break;
    }
    // string object_value = 6;
    case kObjectValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_object_value());
      break;
    }
    case TAG_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolInfo_TagValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolInfo_TagValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolInfo_TagValue::GetClassData() const { return &_class_data_; }

void ProtocolInfo_TagValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolInfo_TagValue *>(to)->MergeFrom(
      static_cast<const ProtocolInfo_TagValue &>(from));
}


void ProtocolInfo_TagValue::MergeFrom(const ProtocolInfo_TagValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolInfo.TagValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.tag_value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kArrayValue: {
      _internal_set_array_value(from._internal_array_value());
      break;
    }
    case kObjectValue: {
      _internal_set_object_value(from._internal_object_value());
      break;
    }
    case TAG_VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolInfo_TagValue::CopyFrom(const ProtocolInfo_TagValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolInfo.TagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolInfo_TagValue::IsInitialized() const {
  return true;
}

void ProtocolInfo_TagValue::InternalSwap(ProtocolInfo_TagValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tag_value_, other->tag_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolInfo_TagValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[13]);
}

// ===================================================================

class ProtocolInfo_TagExtractionResult::_Internal {
 public:
};

ProtocolInfo_TagExtractionResult::ProtocolInfo_TagExtractionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
}
ProtocolInfo_TagExtractionResult::ProtocolInfo_TagExtractionResult(const ProtocolInfo_TagExtractionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_report().empty()) {
    error_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_report(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
}

void ProtocolInfo_TagExtractionResult::SharedCtor() {
error_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ProtocolInfo_TagExtractionResult::~ProtocolInfo_TagExtractionResult() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolInfo_TagExtractionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtocolInfo_TagExtractionResult::ArenaDtor(void* object) {
  ProtocolInfo_TagExtractionResult* _this = reinterpret_cast< ProtocolInfo_TagExtractionResult* >(object);
  (void)_this;
}
void ProtocolInfo_TagExtractionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolInfo_TagExtractionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolInfo_TagExtractionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_report_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolInfo_TagExtractionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolInfo_TagExtractionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string error_report = 2;
  if (!this->_internal_error_report().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_report().data(), static_cast<int>(this->_internal_error_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.TagExtractionResult.error_report");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_report(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  return target;
}

size_t ProtocolInfo_TagExtractionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_report = 2;
  if (!this->_internal_error_report().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_report());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolInfo_TagExtractionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolInfo_TagExtractionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolInfo_TagExtractionResult::GetClassData() const { return &_class_data_; }

void ProtocolInfo_TagExtractionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolInfo_TagExtractionResult *>(to)->MergeFrom(
      static_cast<const ProtocolInfo_TagExtractionResult &>(from));
}


void ProtocolInfo_TagExtractionResult::MergeFrom(const ProtocolInfo_TagExtractionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_report().empty()) {
    _internal_set_error_report(from._internal_error_report());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolInfo_TagExtractionResult::CopyFrom(const ProtocolInfo_TagExtractionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolInfo.TagExtractionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolInfo_TagExtractionResult::IsInitialized() const {
  return true;
}

void ProtocolInfo_TagExtractionResult::InternalSwap(ProtocolInfo_TagExtractionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_report_, lhs_arena,
      &other->error_report_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolInfo_TagExtractionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[14]);
}

// ===================================================================

ProtocolInfo_TagsEntry_DoNotUse::ProtocolInfo_TagsEntry_DoNotUse() {}
ProtocolInfo_TagsEntry_DoNotUse::ProtocolInfo_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProtocolInfo_TagsEntry_DoNotUse::MergeFrom(const ProtocolInfo_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProtocolInfo_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[15]);
}

// ===================================================================

class ProtocolInfo::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult& tag_extraction_result(const ProtocolInfo* msg);
};

const ::minknow_api::protocol::ProtocolInfo_TagExtractionResult&
ProtocolInfo::_Internal::tag_extraction_result(const ProtocolInfo* msg) {
  return *msg->tag_extraction_result_;
}
ProtocolInfo::ProtocolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolInfo)
}
ProtocolInfo::ProtocolInfo(const ProtocolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tag_extraction_result()) {
    tag_extraction_result_ = new ::minknow_api::protocol::ProtocolInfo_TagExtractionResult(*from.tag_extraction_result_);
  } else {
    tag_extraction_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolInfo)
}

void ProtocolInfo::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_extraction_result_ = nullptr;
}

ProtocolInfo::~ProtocolInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tag_extraction_result_;
}

void ProtocolInfo::ArenaDtor(void* object) {
  ProtocolInfo* _this = reinterpret_cast< ProtocolInfo* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void ProtocolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ProtocolInfo::ArenaDtor);
  }
}
void ProtocolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  identifier_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tag_extraction_result_ != nullptr) {
    delete tag_extraction_result_;
  }
  tag_extraction_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .minknow_api.protocol.ProtocolInfo.TagValue> tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolInfo.TagExtractionResult tag_extraction_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_extraction_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // map<string, .minknow_api.protocol.ProtocolInfo.TagValue> tags = 2;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.protocol.ProtocolInfo.TagsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProtocolInfo_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = ProtocolInfo_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .minknow_api.protocol.ProtocolInfo.TagExtractionResult tag_extraction_result = 4;
  if (this->_internal_has_tag_extraction_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tag_extraction_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolInfo)
  return target;
}

size_t ProtocolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .minknow_api.protocol.ProtocolInfo.TagValue> tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::protocol::ProtocolInfo_TagValue >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += ProtocolInfo_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.protocol.ProtocolInfo.TagExtractionResult tag_extraction_result = 4;
  if (this->_internal_has_tag_extraction_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_extraction_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolInfo::GetClassData() const { return &_class_data_; }

void ProtocolInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolInfo *>(to)->MergeFrom(
      static_cast<const ProtocolInfo &>(from));
}


void ProtocolInfo::MergeFrom(const ProtocolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_tag_extraction_result()) {
    _internal_mutable_tag_extraction_result()->::minknow_api::protocol::ProtocolInfo_TagExtractionResult::MergeFrom(from._internal_tag_extraction_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolInfo::CopyFrom(const ProtocolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolInfo::IsInitialized() const {
  return true;
}

void ProtocolInfo::InternalSwap(ProtocolInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(tag_extraction_result_, other->tag_extraction_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[16]);
}

// ===================================================================

class ListProtocolsResponse::_Internal {
 public:
};

ListProtocolsResponse::ListProtocolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  protocols_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolsResponse)
}
ListProtocolsResponse::ListProtocolsResponse(const ListProtocolsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protocols_(from.protocols_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolsResponse)
}

void ListProtocolsResponse::SharedCtor() {
}

ListProtocolsResponse::~ListProtocolsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListProtocolsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProtocolsResponse::ArenaDtor(void* object) {
  ListProtocolsResponse* _this = reinterpret_cast< ListProtocolsResponse* >(object);
  (void)_this;
}
void ListProtocolsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListProtocolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocols_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.protocol.ProtocolInfo protocols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protocols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListProtocolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.protocol.ProtocolInfo protocols = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protocols_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_protocols(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListProtocolsResponse)
  return target;
}

size_t ListProtocolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListProtocolsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.protocol.ProtocolInfo protocols = 1;
  total_size += 1UL * this->_internal_protocols_size();
  for (const auto& msg : this->protocols_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolsResponse::GetClassData() const { return &_class_data_; }

void ListProtocolsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolsResponse *>(to)->MergeFrom(
      static_cast<const ListProtocolsResponse &>(from));
}


void ListProtocolsResponse::MergeFrom(const ListProtocolsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListProtocolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocols_.MergeFrom(from.protocols_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolsResponse::CopyFrom(const ListProtocolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListProtocolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolsResponse::IsInitialized() const {
  return true;
}

void ListProtocolsResponse::InternalSwap(ListProtocolsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  protocols_.InternalSwap(&other->protocols_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[17]);
}

// ===================================================================

class WaitForFinishedRequest::_Internal {
 public:
};

WaitForFinishedRequest::WaitForFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.WaitForFinishedRequest)
}
WaitForFinishedRequest::WaitForFinishedRequest(const WaitForFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&state_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.WaitForFinishedRequest)
}

void WaitForFinishedRequest::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&state_)) + sizeof(timeout_));
}

WaitForFinishedRequest::~WaitForFinishedRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.WaitForFinishedRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitForFinishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WaitForFinishedRequest::ArenaDtor(void* object) {
  WaitForFinishedRequest* _this = reinterpret_cast< WaitForFinishedRequest* >(object);
  (void)_this;
}
void WaitForFinishedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitForFinishedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitForFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.WaitForFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&state_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitForFinishedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.WaitForFinishedRequest.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.WaitForFinishedRequest.NotificationState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minknow_api::protocol::WaitForFinishedRequest_NotificationState>(val));
        } else
          goto handle_unusual;
        continue;
      // float timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitForFinishedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.WaitForFinishedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.WaitForFinishedRequest.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  // .minknow_api.protocol.WaitForFinishedRequest.NotificationState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // float timeout = 3;
  if (!(this->_internal_timeout() <= 0 && this->_internal_timeout() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.WaitForFinishedRequest)
  return target;
}

size_t WaitForFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.WaitForFinishedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // .minknow_api.protocol.WaitForFinishedRequest.NotificationState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float timeout = 3;
  if (!(this->_internal_timeout() <= 0 && this->_internal_timeout() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitForFinishedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitForFinishedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitForFinishedRequest::GetClassData() const { return &_class_data_; }

void WaitForFinishedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WaitForFinishedRequest *>(to)->MergeFrom(
      static_cast<const WaitForFinishedRequest &>(from));
}


void WaitForFinishedRequest::MergeFrom(const WaitForFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.WaitForFinishedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from._internal_timeout() <= 0 && from._internal_timeout() >= 0)) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitForFinishedRequest::CopyFrom(const WaitForFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.WaitForFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForFinishedRequest::IsInitialized() const {
  return true;
}

void WaitForFinishedRequest::InternalSwap(WaitForFinishedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitForFinishedRequest, timeout_)
      + sizeof(WaitForFinishedRequest::timeout_)
      - PROTOBUF_FIELD_OFFSET(WaitForFinishedRequest, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitForFinishedRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[18]);
}

// ===================================================================

class GetRunInfoRequest::_Internal {
 public:
};

GetRunInfoRequest::GetRunInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetRunInfoRequest)
}
GetRunInfoRequest::GetRunInfoRequest(const GetRunInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetRunInfoRequest)
}

void GetRunInfoRequest::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRunInfoRequest::~GetRunInfoRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.GetRunInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRunInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRunInfoRequest::ArenaDtor(void* object) {
  GetRunInfoRequest* _this = reinterpret_cast< GetRunInfoRequest* >(object);
  (void)_this;
}
void GetRunInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRunInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRunInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.GetRunInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.GetRunInfoRequest.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRunInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.GetRunInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.GetRunInfoRequest.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.GetRunInfoRequest)
  return target;
}

size_t GetRunInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.GetRunInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRunInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunInfoRequest::GetClassData() const { return &_class_data_; }

void GetRunInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRunInfoRequest *>(to)->MergeFrom(
      static_cast<const GetRunInfoRequest &>(from));
}


void GetRunInfoRequest::MergeFrom(const GetRunInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.GetRunInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunInfoRequest::CopyFrom(const GetRunInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.GetRunInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunInfoRequest::IsInitialized() const {
  return true;
}

void GetRunInfoRequest::InternalSwap(GetRunInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[19]);
}

// ===================================================================

class Epi2meWorkflowReference::_Internal {
 public:
};

Epi2meWorkflowReference::Epi2meWorkflowReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.Epi2meWorkflowReference)
}
Epi2meWorkflowReference::Epi2meWorkflowReference(const Epi2meWorkflowReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.Epi2meWorkflowReference)
}

void Epi2meWorkflowReference::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = int64_t{0};
}

Epi2meWorkflowReference::~Epi2meWorkflowReference() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.Epi2meWorkflowReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Epi2meWorkflowReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Epi2meWorkflowReference::ArenaDtor(void* object) {
  Epi2meWorkflowReference* _this = reinterpret_cast< Epi2meWorkflowReference* >(object);
  (void)_this;
}
void Epi2meWorkflowReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Epi2meWorkflowReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Epi2meWorkflowReference::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.Epi2meWorkflowReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Epi2meWorkflowReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.Epi2meWorkflowReference.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Epi2meWorkflowReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.Epi2meWorkflowReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.Epi2meWorkflowReference.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.Epi2meWorkflowReference)
  return target;
}

size_t Epi2meWorkflowReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.Epi2meWorkflowReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Epi2meWorkflowReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Epi2meWorkflowReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Epi2meWorkflowReference::GetClassData() const { return &_class_data_; }

void Epi2meWorkflowReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Epi2meWorkflowReference *>(to)->MergeFrom(
      static_cast<const Epi2meWorkflowReference &>(from));
}


void Epi2meWorkflowReference::MergeFrom(const Epi2meWorkflowReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.Epi2meWorkflowReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Epi2meWorkflowReference::CopyFrom(const Epi2meWorkflowReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.Epi2meWorkflowReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epi2meWorkflowReference::IsInitialized() const {
  return true;
}

void Epi2meWorkflowReference::InternalSwap(Epi2meWorkflowReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Epi2meWorkflowReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[20]);
}

// ===================================================================

class AssociatedPostProcessingAnalysis::_Internal {
 public:
  static const ::minknow_api::basecaller::StartRequest& start_request(const AssociatedPostProcessingAnalysis* msg);
};

const ::minknow_api::basecaller::StartRequest&
AssociatedPostProcessingAnalysis::_Internal::start_request(const AssociatedPostProcessingAnalysis* msg) {
  return *msg->start_request_;
}
void AssociatedPostProcessingAnalysis::clear_start_request() {
  if (GetArenaForAllocation() == nullptr && start_request_ != nullptr) {
    delete start_request_;
  }
  start_request_ = nullptr;
}
AssociatedPostProcessingAnalysis::AssociatedPostProcessingAnalysis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.AssociatedPostProcessingAnalysis)
}
AssociatedPostProcessingAnalysis::AssociatedPostProcessingAnalysis(const AssociatedPostProcessingAnalysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  started_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_started_id().empty()) {
    started_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_started_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_request()) {
    start_request_ = new ::minknow_api::basecaller::StartRequest(*from.start_request_);
  } else {
    start_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.AssociatedPostProcessingAnalysis)
}

void AssociatedPostProcessingAnalysis::SharedCtor() {
started_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_request_ = nullptr;
}

AssociatedPostProcessingAnalysis::~AssociatedPostProcessingAnalysis() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociatedPostProcessingAnalysis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  started_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_request_;
}

void AssociatedPostProcessingAnalysis::ArenaDtor(void* object) {
  AssociatedPostProcessingAnalysis* _this = reinterpret_cast< AssociatedPostProcessingAnalysis* >(object);
  (void)_this;
}
void AssociatedPostProcessingAnalysis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociatedPostProcessingAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociatedPostProcessingAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  started_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_request_ != nullptr) {
    delete start_request_;
  }
  start_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociatedPostProcessingAnalysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string started_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_started_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.basecaller.StartRequest start_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociatedPostProcessingAnalysis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string started_id = 1;
  if (!this->_internal_started_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_started_id().data(), static_cast<int>(this->_internal_started_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.AssociatedPostProcessingAnalysis.started_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_started_id(), target);
  }

  // .minknow_api.basecaller.StartRequest start_request = 2;
  if (this->_internal_has_start_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  return target;
}

size_t AssociatedPostProcessingAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string started_id = 1;
  if (!this->_internal_started_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_started_id());
  }

  // .minknow_api.basecaller.StartRequest start_request = 2;
  if (this->_internal_has_start_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociatedPostProcessingAnalysis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociatedPostProcessingAnalysis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociatedPostProcessingAnalysis::GetClassData() const { return &_class_data_; }

void AssociatedPostProcessingAnalysis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociatedPostProcessingAnalysis *>(to)->MergeFrom(
      static_cast<const AssociatedPostProcessingAnalysis &>(from));
}


void AssociatedPostProcessingAnalysis::MergeFrom(const AssociatedPostProcessingAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_started_id().empty()) {
    _internal_set_started_id(from._internal_started_id());
  }
  if (from._internal_has_start_request()) {
    _internal_mutable_start_request()->::minknow_api::basecaller::StartRequest::MergeFrom(from._internal_start_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociatedPostProcessingAnalysis::CopyFrom(const AssociatedPostProcessingAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.AssociatedPostProcessingAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociatedPostProcessingAnalysis::IsInitialized() const {
  return true;
}

void AssociatedPostProcessingAnalysis::InternalSwap(AssociatedPostProcessingAnalysis* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &started_id_, lhs_arena,
      &other->started_id_, rhs_arena
  );
  swap(start_request_, other->start_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociatedPostProcessingAnalysis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[21]);
}

// ===================================================================

class PlatformQcResult::_Internal {
 public:
};

PlatformQcResult::PlatformQcResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.PlatformQcResult)
}
PlatformQcResult::PlatformQcResult(const PlatformQcResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_cell_id().empty()) {
    flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&passed_, &from.passed_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_pore_count_) -
    reinterpret_cast<char*>(&passed_)) + sizeof(total_pore_count_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.PlatformQcResult)
}

void PlatformQcResult::SharedCtor() {
flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&passed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_pore_count_) -
    reinterpret_cast<char*>(&passed_)) + sizeof(total_pore_count_));
}

PlatformQcResult::~PlatformQcResult() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.PlatformQcResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlatformQcResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flow_cell_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlatformQcResult::ArenaDtor(void* object) {
  PlatformQcResult* _this = reinterpret_cast< PlatformQcResult* >(object);
  (void)_this;
}
void PlatformQcResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlatformQcResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlatformQcResult::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.PlatformQcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_cell_id_.ClearToEmpty();
  ::memset(&passed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_pore_count_) -
      reinterpret_cast<char*>(&passed_)) + sizeof(total_pore_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatformQcResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string flow_cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_flow_cell_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.PlatformQcResult.flow_cell_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool passed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          passed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_pore_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_pore_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlatformQcResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.PlatformQcResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flow_cell_id = 1;
  if (!this->_internal_flow_cell_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_id().data(), static_cast<int>(this->_internal_flow_cell_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.PlatformQcResult.flow_cell_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flow_cell_id(), target);
  }

  // bool passed = 2;
  if (this->_internal_passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_passed(), target);
  }

  // uint32 total_pore_count = 3;
  if (this->_internal_total_pore_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_pore_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.PlatformQcResult)
  return target;
}

size_t PlatformQcResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.PlatformQcResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flow_cell_id = 1;
  if (!this->_internal_flow_cell_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_id());
  }

  // bool passed = 2;
  if (this->_internal_passed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 total_pore_count = 3;
  if (this->_internal_total_pore_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_pore_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatformQcResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlatformQcResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatformQcResult::GetClassData() const { return &_class_data_; }

void PlatformQcResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlatformQcResult *>(to)->MergeFrom(
      static_cast<const PlatformQcResult &>(from));
}


void PlatformQcResult::MergeFrom(const PlatformQcResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.PlatformQcResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flow_cell_id().empty()) {
    _internal_set_flow_cell_id(from._internal_flow_cell_id());
  }
  if (from._internal_passed() != 0) {
    _internal_set_passed(from._internal_passed());
  }
  if (from._internal_total_pore_count() != 0) {
    _internal_set_total_pore_count(from._internal_total_pore_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatformQcResult::CopyFrom(const PlatformQcResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.PlatformQcResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformQcResult::IsInitialized() const {
  return true;
}

void PlatformQcResult::InternalSwap(PlatformQcResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_id_, lhs_arena,
      &other->flow_cell_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlatformQcResult, total_pore_count_)
      + sizeof(PlatformQcResult::total_pore_count_)
      - PROTOBUF_FIELD_OFFSET(PlatformQcResult, passed_)>(
          reinterpret_cast<char*>(&passed_),
          reinterpret_cast<char*>(&other->passed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatformQcResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[22]);
}

// ===================================================================

class ProtocolRunInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_phase_change(const ProtocolRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const ProtocolRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& script_end_time(const ProtocolRunInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const ProtocolRunInfo* msg);
  static const ::minknow_api::protocol::ProtocolRunUserInfo& user_info(const ProtocolRunInfo* msg);
  static const ::minknow_api::device::GetDeviceInfoResponse& device(const ProtocolRunInfo* msg);
  static const ::minknow_api::device::GetFlowCellInfoResponse& flow_cell(const ProtocolRunInfo* msg);
  static const ::minknow_api::protocol::ProtocolInfo& meta_info(const ProtocolRunInfo* msg);
  static const ::minknow_api::protocol::PlatformQcResult& pqc_result(const ProtocolRunInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ProtocolRunInfo::_Internal::last_phase_change(const ProtocolRunInfo* msg) {
  return *msg->last_phase_change_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ProtocolRunInfo::_Internal::start_time(const ProtocolRunInfo* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ProtocolRunInfo::_Internal::script_end_time(const ProtocolRunInfo* msg) {
  return *msg->script_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ProtocolRunInfo::_Internal::end_time(const ProtocolRunInfo* msg) {
  return *msg->end_time_;
}
const ::minknow_api::protocol::ProtocolRunUserInfo&
ProtocolRunInfo::_Internal::user_info(const ProtocolRunInfo* msg) {
  return *msg->user_info_;
}
const ::minknow_api::device::GetDeviceInfoResponse&
ProtocolRunInfo::_Internal::device(const ProtocolRunInfo* msg) {
  return *msg->device_;
}
const ::minknow_api::device::GetFlowCellInfoResponse&
ProtocolRunInfo::_Internal::flow_cell(const ProtocolRunInfo* msg) {
  return *msg->flow_cell_;
}
const ::minknow_api::protocol::ProtocolInfo&
ProtocolRunInfo::_Internal::meta_info(const ProtocolRunInfo* msg) {
  return *msg->meta_info_;
}
const ::minknow_api::protocol::PlatformQcResult&
ProtocolRunInfo::_Internal::pqc_result(const ProtocolRunInfo* msg) {
  return *msg->pqc_result_;
}
void ProtocolRunInfo::clear_last_phase_change() {
  if (GetArenaForAllocation() == nullptr && last_phase_change_ != nullptr) {
    delete last_phase_change_;
  }
  last_phase_change_ = nullptr;
}
void ProtocolRunInfo::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void ProtocolRunInfo::clear_script_end_time() {
  if (GetArenaForAllocation() == nullptr && script_end_time_ != nullptr) {
    delete script_end_time_;
  }
  script_end_time_ = nullptr;
}
void ProtocolRunInfo::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
void ProtocolRunInfo::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
void ProtocolRunInfo::clear_flow_cell() {
  if (GetArenaForAllocation() == nullptr && flow_cell_ != nullptr) {
    delete flow_cell_;
  }
  flow_cell_ = nullptr;
}
ProtocolRunInfo::ProtocolRunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena),
  acquisition_run_ids_(arena),
  epi2me_workflows_(arena),
  associated_post_processing_analysis_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolRunInfo)
}
ProtocolRunInfo::ProtocolRunInfo(const ProtocolRunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_),
      acquisition_run_ids_(from.acquisition_run_ids_),
      epi2me_workflows_(from.epi2me_workflows_),
      associated_post_processing_analysis_(from.associated_post_processing_analysis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  protocol_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_id().empty()) {
    protocol_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_id(), 
      GetArenaForAllocation());
  }
  output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_path().empty()) {
    output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::minknow_api::protocol::ProtocolRunUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_script_end_time()) {
    script_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.script_end_time_);
  } else {
    script_end_time_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::minknow_api::device::GetDeviceInfoResponse(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_flow_cell()) {
    flow_cell_ = new ::minknow_api::device::GetFlowCellInfoResponse(*from.flow_cell_);
  } else {
    flow_cell_ = nullptr;
  }
  if (from._internal_has_meta_info()) {
    meta_info_ = new ::minknow_api::protocol::ProtocolInfo(*from.meta_info_);
  } else {
    meta_info_ = nullptr;
  }
  if (from._internal_has_last_phase_change()) {
    last_phase_change_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_phase_change_);
  } else {
    last_phase_change_ = nullptr;
  }
  if (from._internal_has_pqc_result()) {
    pqc_result_ = new ::minknow_api::protocol::PlatformQcResult(*from.pqc_result_);
  } else {
    pqc_result_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_trigger_mux_scan_) -
    reinterpret_cast<char*>(&state_)) + sizeof(can_trigger_mux_scan_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolRunInfo)
}

void ProtocolRunInfo::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocol_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_trigger_mux_scan_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(can_trigger_mux_scan_));
}

ProtocolRunInfo::~ProtocolRunInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolRunInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolRunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete script_end_time_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete flow_cell_;
  if (this != internal_default_instance()) delete meta_info_;
  if (this != internal_default_instance()) delete last_phase_change_;
  if (this != internal_default_instance()) delete pqc_result_;
}

void ProtocolRunInfo::ArenaDtor(void* object) {
  ProtocolRunInfo* _this = reinterpret_cast< ProtocolRunInfo* >(object);
  (void)_this;
}
void ProtocolRunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolRunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolRunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  acquisition_run_ids_.Clear();
  epi2me_workflows_.Clear();
  associated_post_processing_analysis_.Clear();
  run_id_.ClearToEmpty();
  protocol_id_.ClearToEmpty();
  output_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && script_end_time_ != nullptr) {
    delete script_end_time_;
  }
  script_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArenaForAllocation() == nullptr && flow_cell_ != nullptr) {
    delete flow_cell_;
  }
  flow_cell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && meta_info_ != nullptr) {
    delete meta_info_;
  }
  meta_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_phase_change_ != nullptr) {
    delete last_phase_change_;
  }
  last_phase_change_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pqc_result_ != nullptr) {
    delete pqc_result_;
  }
  pqc_result_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_trigger_mux_scan_) -
      reinterpret_cast<char*>(&state_)) + sizeof(can_trigger_mux_scan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolRunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolRunInfo.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocol_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolRunInfo.protocol_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolRunInfo.args"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minknow_api::protocol::ProtocolState>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string acquisition_run_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_acquisition_run_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolRunUserInfo user_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp script_end_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_script_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflows = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epi2me_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string output_path = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_output_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolRunInfo.output_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetDeviceInfoResponse device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetFlowCellInfoResponse flow_cell = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolInfo meta_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.protocol.AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associated_post_processing_analysis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolPhase phase = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::minknow_api::protocol::ProtocolPhase>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_phase_change = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_phase_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_pause = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          can_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_trigger_mux_scan = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          can_trigger_mux_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.PlatformQcResult pqc_result = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pqc_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolRunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolRunInfo.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  // string protocol_id = 2;
  if (!this->_internal_protocol_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_id().data(), static_cast<int>(this->_internal_protocol_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolRunInfo.protocol_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol_id(), target);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolRunInfo.args");
    target = stream->WriteString(3, s, target);
  }

  // .minknow_api.protocol.ProtocolState state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end_time(this), target, stream);
  }

  // repeated string acquisition_run_ids = 7;
  for (int i = 0, n = this->_internal_acquisition_run_ids_size(); i < n; i++) {
    const auto& s = this->_internal_acquisition_run_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolRunInfo.acquisition_run_ids");
    target = stream->WriteString(7, s, target);
  }

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 8;
  if (this->_internal_has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user_info(this), target, stream);
  }

  // .google.protobuf.Timestamp script_end_time = 9;
  if (this->_internal_has_script_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::script_end_time(this), target, stream);
  }

  // repeated .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflows = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epi2me_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_epi2me_workflows(i), target, stream);
  }

  // string output_path = 11;
  if (!this->_internal_output_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_path().data(), static_cast<int>(this->_internal_output_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolRunInfo.output_path");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_output_path(), target);
  }

  // .minknow_api.device.GetDeviceInfoResponse device = 12;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::device(this), target, stream);
  }

  // .minknow_api.device.GetFlowCellInfoResponse flow_cell = 13;
  if (this->_internal_has_flow_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::flow_cell(this), target, stream);
  }

  // .minknow_api.protocol.ProtocolInfo meta_info = 14;
  if (this->_internal_has_meta_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::meta_info(this), target, stream);
  }

  // repeated .minknow_api.protocol.AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associated_post_processing_analysis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_associated_post_processing_analysis(i), target, stream);
  }

  // .minknow_api.protocol.ProtocolPhase phase = 16;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_phase(), target);
  }

  // .google.protobuf.Timestamp last_phase_change = 17;
  if (this->_internal_has_last_phase_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::last_phase_change(this), target, stream);
  }

  // bool can_pause = 18;
  if (this->_internal_can_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_can_pause(), target);
  }

  // bool can_trigger_mux_scan = 19;
  if (this->_internal_can_trigger_mux_scan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_can_trigger_mux_scan(), target);
  }

  // .minknow_api.protocol.PlatformQcResult pqc_result = 20;
  if (this->_internal_has_pqc_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::pqc_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolRunInfo)
  return target;
}

size_t ProtocolRunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolRunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      args_.Get(i));
  }

  // repeated string acquisition_run_ids = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(acquisition_run_ids_.size());
  for (int i = 0, n = acquisition_run_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      acquisition_run_ids_.Get(i));
  }

  // repeated .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflows = 10;
  total_size += 1UL * this->_internal_epi2me_workflows_size();
  for (const auto& msg : this->epi2me_workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minknow_api.protocol.AssociatedPostProcessingAnalysis associated_post_processing_analysis = 15;
  total_size += 1UL * this->_internal_associated_post_processing_analysis_size();
  for (const auto& msg : this->associated_post_processing_analysis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // string protocol_id = 2;
  if (!this->_internal_protocol_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_id());
  }

  // string output_path = 11;
  if (!this->_internal_output_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_path());
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .minknow_api.protocol.ProtocolRunUserInfo user_info = 8;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .google.protobuf.Timestamp script_end_time = 9;
  if (this->_internal_has_script_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *script_end_time_);
  }

  // .minknow_api.device.GetDeviceInfoResponse device = 12;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .minknow_api.device.GetFlowCellInfoResponse flow_cell = 13;
  if (this->_internal_has_flow_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_cell_);
  }

  // .minknow_api.protocol.ProtocolInfo meta_info = 14;
  if (this->_internal_has_meta_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_info_);
  }

  // .google.protobuf.Timestamp last_phase_change = 17;
  if (this->_internal_has_last_phase_change()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_phase_change_);
  }

  // .minknow_api.protocol.PlatformQcResult pqc_result = 20;
  if (this->_internal_has_pqc_result()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pqc_result_);
  }

  // .minknow_api.protocol.ProtocolState state = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .minknow_api.protocol.ProtocolPhase phase = 16;
  if (this->_internal_phase() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // bool can_pause = 18;
  if (this->_internal_can_pause() != 0) {
    total_size += 2 + 1;
  }

  // bool can_trigger_mux_scan = 19;
  if (this->_internal_can_trigger_mux_scan() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolRunInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolRunInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolRunInfo::GetClassData() const { return &_class_data_; }

void ProtocolRunInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolRunInfo *>(to)->MergeFrom(
      static_cast<const ProtocolRunInfo &>(from));
}


void ProtocolRunInfo::MergeFrom(const ProtocolRunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolRunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  acquisition_run_ids_.MergeFrom(from.acquisition_run_ids_);
  epi2me_workflows_.MergeFrom(from.epi2me_workflows_);
  associated_post_processing_analysis_.MergeFrom(from.associated_post_processing_analysis_);
  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (!from._internal_protocol_id().empty()) {
    _internal_set_protocol_id(from._internal_protocol_id());
  }
  if (!from._internal_output_path().empty()) {
    _internal_set_output_path(from._internal_output_path());
  }
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::minknow_api::protocol::ProtocolRunUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_has_script_end_time()) {
    _internal_mutable_script_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_script_end_time());
  }
  if (from._internal_has_device()) {
    _internal_mutable_device()->::minknow_api::device::GetDeviceInfoResponse::MergeFrom(from._internal_device());
  }
  if (from._internal_has_flow_cell()) {
    _internal_mutable_flow_cell()->::minknow_api::device::GetFlowCellInfoResponse::MergeFrom(from._internal_flow_cell());
  }
  if (from._internal_has_meta_info()) {
    _internal_mutable_meta_info()->::minknow_api::protocol::ProtocolInfo::MergeFrom(from._internal_meta_info());
  }
  if (from._internal_has_last_phase_change()) {
    _internal_mutable_last_phase_change()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_phase_change());
  }
  if (from._internal_has_pqc_result()) {
    _internal_mutable_pqc_result()->::minknow_api::protocol::PlatformQcResult::MergeFrom(from._internal_pqc_result());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from._internal_can_pause() != 0) {
    _internal_set_can_pause(from._internal_can_pause());
  }
  if (from._internal_can_trigger_mux_scan() != 0) {
    _internal_set_can_trigger_mux_scan(from._internal_can_trigger_mux_scan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolRunInfo::CopyFrom(const ProtocolRunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolRunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolRunInfo::IsInitialized() const {
  return true;
}

void ProtocolRunInfo::InternalSwap(ProtocolRunInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  acquisition_run_ids_.InternalSwap(&other->acquisition_run_ids_);
  epi2me_workflows_.InternalSwap(&other->epi2me_workflows_);
  associated_post_processing_analysis_.InternalSwap(&other->associated_post_processing_analysis_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_id_, lhs_arena,
      &other->protocol_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_path_, lhs_arena,
      &other->output_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolRunInfo, can_trigger_mux_scan_)
      + sizeof(ProtocolRunInfo::can_trigger_mux_scan_)
      - PROTOBUF_FIELD_OFFSET(ProtocolRunInfo, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolRunInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[23]);
}

// ===================================================================

class FilteringInfo_PlatformQcFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FilteringInfo_PlatformQcFilter>()._has_bits_);
  static void set_has_flow_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilteringInfo_PlatformQcFilter::FilteringInfo_PlatformQcFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
}
FilteringInfo_PlatformQcFilter::FilteringInfo_PlatformQcFilter(const FilteringInfo_PlatformQcFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_flow_cell_id()) {
    flow_cell_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
}

void FilteringInfo_PlatformQcFilter::SharedCtor() {
flow_cell_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FilteringInfo_PlatformQcFilter::~FilteringInfo_PlatformQcFilter() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilteringInfo_PlatformQcFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flow_cell_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilteringInfo_PlatformQcFilter::ArenaDtor(void* object) {
  FilteringInfo_PlatformQcFilter* _this = reinterpret_cast< FilteringInfo_PlatformQcFilter* >(object);
  (void)_this;
}
void FilteringInfo_PlatformQcFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilteringInfo_PlatformQcFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilteringInfo_PlatformQcFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    flow_cell_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilteringInfo_PlatformQcFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string flow_cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_flow_cell_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilteringInfo_PlatformQcFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string flow_cell_id = 1;
  if (_internal_has_flow_cell_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_id().data(), static_cast<int>(this->_internal_flow_cell_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.FilteringInfo.PlatformQcFilter.flow_cell_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flow_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  return target;
}

size_t FilteringInfo_PlatformQcFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string flow_cell_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilteringInfo_PlatformQcFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilteringInfo_PlatformQcFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilteringInfo_PlatformQcFilter::GetClassData() const { return &_class_data_; }

void FilteringInfo_PlatformQcFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilteringInfo_PlatformQcFilter *>(to)->MergeFrom(
      static_cast<const FilteringInfo_PlatformQcFilter &>(from));
}


void FilteringInfo_PlatformQcFilter::MergeFrom(const FilteringInfo_PlatformQcFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flow_cell_id()) {
    _internal_set_flow_cell_id(from._internal_flow_cell_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilteringInfo_PlatformQcFilter::CopyFrom(const FilteringInfo_PlatformQcFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.FilteringInfo.PlatformQcFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilteringInfo_PlatformQcFilter::IsInitialized() const {
  return true;
}

void FilteringInfo_PlatformQcFilter::InternalSwap(FilteringInfo_PlatformQcFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_id_, lhs_arena,
      &other->flow_cell_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FilteringInfo_PlatformQcFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[24]);
}

// ===================================================================

class FilteringInfo::_Internal {
 public:
  static const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter& pqc_filter(const FilteringInfo* msg);
};

const ::minknow_api::protocol::FilteringInfo_PlatformQcFilter&
FilteringInfo::_Internal::pqc_filter(const FilteringInfo* msg) {
  return *msg->pqc_filter_;
}
FilteringInfo::FilteringInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.FilteringInfo)
}
FilteringInfo::FilteringInfo(const FilteringInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pqc_filter()) {
    pqc_filter_ = new ::minknow_api::protocol::FilteringInfo_PlatformQcFilter(*from.pqc_filter_);
  } else {
    pqc_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.FilteringInfo)
}

void FilteringInfo::SharedCtor() {
pqc_filter_ = nullptr;
}

FilteringInfo::~FilteringInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.FilteringInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilteringInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pqc_filter_;
}

void FilteringInfo::ArenaDtor(void* object) {
  FilteringInfo* _this = reinterpret_cast< FilteringInfo* >(object);
  (void)_this;
}
void FilteringInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilteringInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilteringInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.FilteringInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pqc_filter_ != nullptr) {
    delete pqc_filter_;
  }
  pqc_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilteringInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.FilteringInfo.PlatformQcFilter pqc_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pqc_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilteringInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.FilteringInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.FilteringInfo.PlatformQcFilter pqc_filter = 1;
  if (this->_internal_has_pqc_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pqc_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.FilteringInfo)
  return target;
}

size_t FilteringInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.FilteringInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol.FilteringInfo.PlatformQcFilter pqc_filter = 1;
  if (this->_internal_has_pqc_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pqc_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilteringInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilteringInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilteringInfo::GetClassData() const { return &_class_data_; }

void FilteringInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilteringInfo *>(to)->MergeFrom(
      static_cast<const FilteringInfo &>(from));
}


void FilteringInfo::MergeFrom(const FilteringInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.FilteringInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pqc_filter()) {
    _internal_mutable_pqc_filter()->::minknow_api::protocol::FilteringInfo_PlatformQcFilter::MergeFrom(from._internal_pqc_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilteringInfo::CopyFrom(const FilteringInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.FilteringInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilteringInfo::IsInitialized() const {
  return true;
}

void FilteringInfo::InternalSwap(FilteringInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pqc_filter_, other->pqc_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilteringInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[25]);
}

// ===================================================================

class ListProtocolRunsRequest::_Internal {
 public:
  static const ::minknow_api::protocol::FilteringInfo& filter_info(const ListProtocolRunsRequest* msg);
};

const ::minknow_api::protocol::FilteringInfo&
ListProtocolRunsRequest::_Internal::filter_info(const ListProtocolRunsRequest* msg) {
  return *msg->filter_info_;
}
ListProtocolRunsRequest::ListProtocolRunsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolRunsRequest)
}
ListProtocolRunsRequest::ListProtocolRunsRequest(const ListProtocolRunsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter_info()) {
    filter_info_ = new ::minknow_api::protocol::FilteringInfo(*from.filter_info_);
  } else {
    filter_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolRunsRequest)
}

void ListProtocolRunsRequest::SharedCtor() {
filter_info_ = nullptr;
}

ListProtocolRunsRequest::~ListProtocolRunsRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListProtocolRunsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolRunsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_info_;
}

void ListProtocolRunsRequest::ArenaDtor(void* object) {
  ListProtocolRunsRequest* _this = reinterpret_cast< ListProtocolRunsRequest* >(object);
  (void)_this;
}
void ListProtocolRunsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolRunsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolRunsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListProtocolRunsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_info_ != nullptr) {
    delete filter_info_;
  }
  filter_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolRunsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.FilteringInfo filter_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolRunsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListProtocolRunsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.FilteringInfo filter_info = 1;
  if (this->_internal_has_filter_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filter_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListProtocolRunsRequest)
  return target;
}

size_t ListProtocolRunsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListProtocolRunsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol.FilteringInfo filter_info = 1;
  if (this->_internal_has_filter_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolRunsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolRunsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolRunsRequest::GetClassData() const { return &_class_data_; }

void ListProtocolRunsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolRunsRequest *>(to)->MergeFrom(
      static_cast<const ListProtocolRunsRequest &>(from));
}


void ListProtocolRunsRequest::MergeFrom(const ListProtocolRunsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListProtocolRunsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter_info()) {
    _internal_mutable_filter_info()->::minknow_api::protocol::FilteringInfo::MergeFrom(from._internal_filter_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolRunsRequest::CopyFrom(const ListProtocolRunsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListProtocolRunsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolRunsRequest::IsInitialized() const {
  return true;
}

void ListProtocolRunsRequest::InternalSwap(ListProtocolRunsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_info_, other->filter_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolRunsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[26]);
}

// ===================================================================

class ListProtocolRunsResponse::_Internal {
 public:
};

ListProtocolRunsResponse::ListProtocolRunsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  run_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolRunsResponse)
}
ListProtocolRunsResponse::ListProtocolRunsResponse(const ListProtocolRunsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      run_ids_(from.run_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolRunsResponse)
}

void ListProtocolRunsResponse::SharedCtor() {
}

ListProtocolRunsResponse::~ListProtocolRunsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListProtocolRunsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolRunsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProtocolRunsResponse::ArenaDtor(void* object) {
  ListProtocolRunsResponse* _this = reinterpret_cast< ListProtocolRunsResponse* >(object);
  (void)_this;
}
void ListProtocolRunsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolRunsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolRunsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListProtocolRunsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolRunsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string run_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_run_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ListProtocolRunsResponse.run_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolRunsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListProtocolRunsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string run_ids = 1;
  for (int i = 0, n = this->_internal_run_ids_size(); i < n; i++) {
    const auto& s = this->_internal_run_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ListProtocolRunsResponse.run_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListProtocolRunsResponse)
  return target;
}

size_t ListProtocolRunsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListProtocolRunsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string run_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(run_ids_.size());
  for (int i = 0, n = run_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      run_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolRunsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolRunsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolRunsResponse::GetClassData() const { return &_class_data_; }

void ListProtocolRunsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolRunsResponse *>(to)->MergeFrom(
      static_cast<const ListProtocolRunsResponse &>(from));
}


void ListProtocolRunsResponse::MergeFrom(const ListProtocolRunsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListProtocolRunsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  run_ids_.MergeFrom(from.run_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolRunsResponse::CopyFrom(const ListProtocolRunsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListProtocolRunsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolRunsResponse::IsInitialized() const {
  return true;
}

void ListProtocolRunsResponse::InternalSwap(ListProtocolRunsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  run_ids_.InternalSwap(&other->run_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolRunsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[27]);
}

// ===================================================================

class GetCurrentProtocolRunRequest::_Internal {
 public:
};

GetCurrentProtocolRunRequest::GetCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetCurrentProtocolRunRequest)
}
GetCurrentProtocolRunRequest::GetCurrentProtocolRunRequest(const GetCurrentProtocolRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetCurrentProtocolRunRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentProtocolRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentProtocolRunRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentProtocolRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[28]);
}

// ===================================================================

class GetCurrentProtocolRunResponse::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolRunInfo& run_info(const GetCurrentProtocolRunResponse* msg);
};

const ::minknow_api::protocol::ProtocolRunInfo&
GetCurrentProtocolRunResponse::_Internal::run_info(const GetCurrentProtocolRunResponse* msg) {
  return *msg->run_info_;
}
GetCurrentProtocolRunResponse::GetCurrentProtocolRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetCurrentProtocolRunResponse)
}
GetCurrentProtocolRunResponse::GetCurrentProtocolRunResponse(const GetCurrentProtocolRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_run_info()) {
    run_info_ = new ::minknow_api::protocol::ProtocolRunInfo(*from.run_info_);
  } else {
    run_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetCurrentProtocolRunResponse)
}

void GetCurrentProtocolRunResponse::SharedCtor() {
run_info_ = nullptr;
}

GetCurrentProtocolRunResponse::~GetCurrentProtocolRunResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.GetCurrentProtocolRunResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCurrentProtocolRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_info_;
}

void GetCurrentProtocolRunResponse::ArenaDtor(void* object) {
  GetCurrentProtocolRunResponse* _this = reinterpret_cast< GetCurrentProtocolRunResponse* >(object);
  (void)_this;
}
void GetCurrentProtocolRunResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCurrentProtocolRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentProtocolRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.GetCurrentProtocolRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && run_info_ != nullptr) {
    delete run_info_;
  }
  run_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentProtocolRunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.ProtocolRunInfo run_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCurrentProtocolRunResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.GetCurrentProtocolRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolRunInfo run_info = 3;
  if (this->_internal_has_run_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::run_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.GetCurrentProtocolRunResponse)
  return target;
}

size_t GetCurrentProtocolRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.GetCurrentProtocolRunResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolRunInfo run_info = 3;
  if (this->_internal_has_run_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentProtocolRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentProtocolRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentProtocolRunResponse::GetClassData() const { return &_class_data_; }

void GetCurrentProtocolRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentProtocolRunResponse *>(to)->MergeFrom(
      static_cast<const GetCurrentProtocolRunResponse &>(from));
}


void GetCurrentProtocolRunResponse::MergeFrom(const GetCurrentProtocolRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.GetCurrentProtocolRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_run_info()) {
    _internal_mutable_run_info()->::minknow_api::protocol::ProtocolRunInfo::MergeFrom(from._internal_run_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentProtocolRunResponse::CopyFrom(const GetCurrentProtocolRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.GetCurrentProtocolRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentProtocolRunResponse::IsInitialized() const {
  return true;
}

void GetCurrentProtocolRunResponse::InternalSwap(GetCurrentProtocolRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_info_, other->run_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentProtocolRunResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[29]);
}

// ===================================================================

class WatchCurrentProtocolRunRequest::_Internal {
 public:
};

WatchCurrentProtocolRunRequest::WatchCurrentProtocolRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.WatchCurrentProtocolRunRequest)
}
WatchCurrentProtocolRunRequest::WatchCurrentProtocolRunRequest(const WatchCurrentProtocolRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.WatchCurrentProtocolRunRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchCurrentProtocolRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchCurrentProtocolRunRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WatchCurrentProtocolRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[30]);
}

// ===================================================================

class GetContextInfoRequest::_Internal {
 public:
};

GetContextInfoRequest::GetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetContextInfoRequest)
}
GetContextInfoRequest::GetContextInfoRequest(const GetContextInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetContextInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContextInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContextInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetContextInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[31]);
}

// ===================================================================

GetContextInfoResponse_ContextInfoEntry_DoNotUse::GetContextInfoResponse_ContextInfoEntry_DoNotUse() {}
GetContextInfoResponse_ContextInfoEntry_DoNotUse::GetContextInfoResponse_ContextInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetContextInfoResponse_ContextInfoEntry_DoNotUse::MergeFrom(const GetContextInfoResponse_ContextInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetContextInfoResponse_ContextInfoEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[32]);
}

// ===================================================================

class GetContextInfoResponse::_Internal {
 public:
};

GetContextInfoResponse::GetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  context_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetContextInfoResponse)
}
GetContextInfoResponse::GetContextInfoResponse(const GetContextInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_info_.MergeFrom(from.context_info_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetContextInfoResponse)
}

void GetContextInfoResponse::SharedCtor() {
}

GetContextInfoResponse::~GetContextInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.GetContextInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetContextInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetContextInfoResponse::ArenaDtor(void* object) {
  GetContextInfoResponse* _this = reinterpret_cast< GetContextInfoResponse* >(object);
  (void)_this;
  _this->context_info_. ~MapField();
}
inline void GetContextInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetContextInfoResponse::ArenaDtor);
  }
}
void GetContextInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetContextInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.GetContextInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContextInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> context_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&context_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetContextInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.GetContextInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> context_info = 1;
  if (!this->_internal_context_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.protocol.GetContextInfoResponse.ContextInfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_context_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_context_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context_info().begin();
          it != this->_internal_context_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetContextInfoResponse_ContextInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context_info().begin();
          it != this->_internal_context_info().end(); ++it) {
        target = GetContextInfoResponse_ContextInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.GetContextInfoResponse)
  return target;
}

size_t GetContextInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.GetContextInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> context_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_context_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_context_info().begin();
      it != this->_internal_context_info().end(); ++it) {
    total_size += GetContextInfoResponse_ContextInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContextInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetContextInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContextInfoResponse::GetClassData() const { return &_class_data_; }

void GetContextInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetContextInfoResponse *>(to)->MergeFrom(
      static_cast<const GetContextInfoResponse &>(from));
}


void GetContextInfoResponse::MergeFrom(const GetContextInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.GetContextInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_info_.MergeFrom(from.context_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetContextInfoResponse::CopyFrom(const GetContextInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.GetContextInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContextInfoResponse::IsInitialized() const {
  return true;
}

void GetContextInfoResponse::InternalSwap(GetContextInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  context_info_.InternalSwap(&other->context_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContextInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[33]);
}

// ===================================================================

SetContextInfoRequest_ContextInfoEntry_DoNotUse::SetContextInfoRequest_ContextInfoEntry_DoNotUse() {}
SetContextInfoRequest_ContextInfoEntry_DoNotUse::SetContextInfoRequest_ContextInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetContextInfoRequest_ContextInfoEntry_DoNotUse::MergeFrom(const SetContextInfoRequest_ContextInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetContextInfoRequest_ContextInfoEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[34]);
}

// ===================================================================

class SetContextInfoRequest::_Internal {
 public:
};

SetContextInfoRequest::SetContextInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  context_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetContextInfoRequest)
}
SetContextInfoRequest::SetContextInfoRequest(const SetContextInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_info_.MergeFrom(from.context_info_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetContextInfoRequest)
}

void SetContextInfoRequest::SharedCtor() {
}

SetContextInfoRequest::~SetContextInfoRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.SetContextInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetContextInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetContextInfoRequest::ArenaDtor(void* object) {
  SetContextInfoRequest* _this = reinterpret_cast< SetContextInfoRequest* >(object);
  (void)_this;
  _this->context_info_. ~MapField();
}
inline void SetContextInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SetContextInfoRequest::ArenaDtor);
  }
}
void SetContextInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetContextInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.SetContextInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetContextInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> context_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&context_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetContextInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.SetContextInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> context_info = 1;
  if (!this->_internal_context_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.protocol.SetContextInfoRequest.ContextInfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_context_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_context_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context_info().begin();
          it != this->_internal_context_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SetContextInfoRequest_ContextInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_context_info().begin();
          it != this->_internal_context_info().end(); ++it) {
        target = SetContextInfoRequest_ContextInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.SetContextInfoRequest)
  return target;
}

size_t SetContextInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.SetContextInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> context_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_context_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_context_info().begin();
      it != this->_internal_context_info().end(); ++it) {
    total_size += SetContextInfoRequest_ContextInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetContextInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetContextInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetContextInfoRequest::GetClassData() const { return &_class_data_; }

void SetContextInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetContextInfoRequest *>(to)->MergeFrom(
      static_cast<const SetContextInfoRequest &>(from));
}


void SetContextInfoRequest::MergeFrom(const SetContextInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.SetContextInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_info_.MergeFrom(from.context_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetContextInfoRequest::CopyFrom(const SetContextInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.SetContextInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetContextInfoRequest::IsInitialized() const {
  return true;
}

void SetContextInfoRequest::InternalSwap(SetContextInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  context_info_.InternalSwap(&other->context_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetContextInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[35]);
}

// ===================================================================

class SetContextInfoResponse::_Internal {
 public:
};

SetContextInfoResponse::SetContextInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetContextInfoResponse)
}
SetContextInfoResponse::SetContextInfoResponse(const SetContextInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetContextInfoResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetContextInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetContextInfoResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetContextInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[36]);
}

// ===================================================================

class GetProtocolPurposeRequest::_Internal {
 public:
};

GetProtocolPurposeRequest::GetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetProtocolPurposeRequest)
}
GetProtocolPurposeRequest::GetProtocolPurposeRequest(const GetProtocolPurposeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetProtocolPurposeRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProtocolPurposeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProtocolPurposeRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetProtocolPurposeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[37]);
}

// ===================================================================

class GetProtocolPurposeResponse::_Internal {
 public:
};

GetProtocolPurposeResponse::GetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.GetProtocolPurposeResponse)
}
GetProtocolPurposeResponse::GetProtocolPurposeResponse(const GetProtocolPurposeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purpose().empty()) {
    purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purpose(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.GetProtocolPurposeResponse)
}

void GetProtocolPurposeResponse::SharedCtor() {
purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProtocolPurposeResponse::~GetProtocolPurposeResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.GetProtocolPurposeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetProtocolPurposeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  purpose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProtocolPurposeResponse::ArenaDtor(void* object) {
  GetProtocolPurposeResponse* _this = reinterpret_cast< GetProtocolPurposeResponse* >(object);
  (void)_this;
}
void GetProtocolPurposeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProtocolPurposeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetProtocolPurposeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.GetProtocolPurposeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purpose_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProtocolPurposeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string purpose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_purpose();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.GetProtocolPurposeResponse.purpose"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProtocolPurposeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.GetProtocolPurposeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string purpose = 1;
  if (!this->_internal_purpose().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purpose().data(), static_cast<int>(this->_internal_purpose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.GetProtocolPurposeResponse.purpose");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.GetProtocolPurposeResponse)
  return target;
}

size_t GetProtocolPurposeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.GetProtocolPurposeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string purpose = 1;
  if (!this->_internal_purpose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProtocolPurposeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetProtocolPurposeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProtocolPurposeResponse::GetClassData() const { return &_class_data_; }

void GetProtocolPurposeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetProtocolPurposeResponse *>(to)->MergeFrom(
      static_cast<const GetProtocolPurposeResponse &>(from));
}


void GetProtocolPurposeResponse::MergeFrom(const GetProtocolPurposeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.GetProtocolPurposeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_purpose().empty()) {
    _internal_set_purpose(from._internal_purpose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProtocolPurposeResponse::CopyFrom(const GetProtocolPurposeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.GetProtocolPurposeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProtocolPurposeResponse::IsInitialized() const {
  return true;
}

void GetProtocolPurposeResponse::InternalSwap(GetProtocolPurposeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &purpose_, lhs_arena,
      &other->purpose_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProtocolPurposeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[38]);
}

// ===================================================================

class SetProtocolPurposeRequest::_Internal {
 public:
};

SetProtocolPurposeRequest::SetProtocolPurposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetProtocolPurposeRequest)
}
SetProtocolPurposeRequest::SetProtocolPurposeRequest(const SetProtocolPurposeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purpose().empty()) {
    purpose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purpose(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetProtocolPurposeRequest)
}

void SetProtocolPurposeRequest::SharedCtor() {
purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetProtocolPurposeRequest::~SetProtocolPurposeRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.SetProtocolPurposeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetProtocolPurposeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  purpose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetProtocolPurposeRequest::ArenaDtor(void* object) {
  SetProtocolPurposeRequest* _this = reinterpret_cast< SetProtocolPurposeRequest* >(object);
  (void)_this;
}
void SetProtocolPurposeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProtocolPurposeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetProtocolPurposeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.SetProtocolPurposeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purpose_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProtocolPurposeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string purpose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_purpose();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.SetProtocolPurposeRequest.purpose"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProtocolPurposeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.SetProtocolPurposeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string purpose = 1;
  if (!this->_internal_purpose().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purpose().data(), static_cast<int>(this->_internal_purpose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.SetProtocolPurposeRequest.purpose");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_purpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.SetProtocolPurposeRequest)
  return target;
}

size_t SetProtocolPurposeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.SetProtocolPurposeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string purpose = 1;
  if (!this->_internal_purpose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purpose());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProtocolPurposeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetProtocolPurposeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProtocolPurposeRequest::GetClassData() const { return &_class_data_; }

void SetProtocolPurposeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetProtocolPurposeRequest *>(to)->MergeFrom(
      static_cast<const SetProtocolPurposeRequest &>(from));
}


void SetProtocolPurposeRequest::MergeFrom(const SetProtocolPurposeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.SetProtocolPurposeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_purpose().empty()) {
    _internal_set_purpose(from._internal_purpose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProtocolPurposeRequest::CopyFrom(const SetProtocolPurposeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.SetProtocolPurposeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProtocolPurposeRequest::IsInitialized() const {
  return true;
}

void SetProtocolPurposeRequest::InternalSwap(SetProtocolPurposeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &purpose_, lhs_arena,
      &other->purpose_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProtocolPurposeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[39]);
}

// ===================================================================

class SetProtocolPurposeResponse::_Internal {
 public:
};

SetProtocolPurposeResponse::SetProtocolPurposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetProtocolPurposeResponse)
}
SetProtocolPurposeResponse::SetProtocolPurposeResponse(const SetProtocolPurposeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetProtocolPurposeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProtocolPurposeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProtocolPurposeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetProtocolPurposeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[40]);
}

// ===================================================================

class AddEpi2meWorkflowRequest::_Internal {
 public:
  static const ::minknow_api::protocol::Epi2meWorkflowReference& epi2me_workflow(const AddEpi2meWorkflowRequest* msg);
};

const ::minknow_api::protocol::Epi2meWorkflowReference&
AddEpi2meWorkflowRequest::_Internal::epi2me_workflow(const AddEpi2meWorkflowRequest* msg) {
  return *msg->epi2me_workflow_;
}
AddEpi2meWorkflowRequest::AddEpi2meWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.AddEpi2meWorkflowRequest)
}
AddEpi2meWorkflowRequest::AddEpi2meWorkflowRequest(const AddEpi2meWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_epi2me_workflow()) {
    epi2me_workflow_ = new ::minknow_api::protocol::Epi2meWorkflowReference(*from.epi2me_workflow_);
  } else {
    epi2me_workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.AddEpi2meWorkflowRequest)
}

void AddEpi2meWorkflowRequest::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
epi2me_workflow_ = nullptr;
}

AddEpi2meWorkflowRequest::~AddEpi2meWorkflowRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.AddEpi2meWorkflowRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddEpi2meWorkflowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epi2me_workflow_;
}

void AddEpi2meWorkflowRequest::ArenaDtor(void* object) {
  AddEpi2meWorkflowRequest* _this = reinterpret_cast< AddEpi2meWorkflowRequest* >(object);
  (void)_this;
}
void AddEpi2meWorkflowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddEpi2meWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddEpi2meWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.AddEpi2meWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && epi2me_workflow_ != nullptr) {
    delete epi2me_workflow_;
  }
  epi2me_workflow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddEpi2meWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.AddEpi2meWorkflowRequest.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflow = 2 [(.minknow_api.rpc_required) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epi2me_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddEpi2meWorkflowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.AddEpi2meWorkflowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.AddEpi2meWorkflowRequest.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  // .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflow = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_has_epi2me_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::epi2me_workflow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.AddEpi2meWorkflowRequest)
  return target;
}

size_t AddEpi2meWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.AddEpi2meWorkflowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1 [(.minknow_api.rpc_required) = true];
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // .minknow_api.protocol.Epi2meWorkflowReference epi2me_workflow = 2 [(.minknow_api.rpc_required) = true];
  if (this->_internal_has_epi2me_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epi2me_workflow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddEpi2meWorkflowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddEpi2meWorkflowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddEpi2meWorkflowRequest::GetClassData() const { return &_class_data_; }

void AddEpi2meWorkflowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddEpi2meWorkflowRequest *>(to)->MergeFrom(
      static_cast<const AddEpi2meWorkflowRequest &>(from));
}


void AddEpi2meWorkflowRequest::MergeFrom(const AddEpi2meWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.AddEpi2meWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_has_epi2me_workflow()) {
    _internal_mutable_epi2me_workflow()->::minknow_api::protocol::Epi2meWorkflowReference::MergeFrom(from._internal_epi2me_workflow());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddEpi2meWorkflowRequest::CopyFrom(const AddEpi2meWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.AddEpi2meWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEpi2meWorkflowRequest::IsInitialized() const {
  return true;
}

void AddEpi2meWorkflowRequest::InternalSwap(AddEpi2meWorkflowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
  swap(epi2me_workflow_, other->epi2me_workflow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddEpi2meWorkflowRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[41]);
}

// ===================================================================

class AddEpi2meWorkflowResponse::_Internal {
 public:
};

AddEpi2meWorkflowResponse::AddEpi2meWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.AddEpi2meWorkflowResponse)
}
AddEpi2meWorkflowResponse::AddEpi2meWorkflowResponse(const AddEpi2meWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.AddEpi2meWorkflowResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddEpi2meWorkflowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddEpi2meWorkflowResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddEpi2meWorkflowResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[42]);
}

// ===================================================================

class ListProtocolGroupIdsRequest::_Internal {
 public:
};

ListProtocolGroupIdsRequest::ListProtocolGroupIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolGroupIdsRequest)
}
ListProtocolGroupIdsRequest::ListProtocolGroupIdsRequest(const ListProtocolGroupIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolGroupIdsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolGroupIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolGroupIdsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolGroupIdsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[43]);
}

// ===================================================================

class ListProtocolGroupIdsResponse::_Internal {
 public:
};

ListProtocolGroupIdsResponse::ListProtocolGroupIdsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  protocol_group_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListProtocolGroupIdsResponse)
}
ListProtocolGroupIdsResponse::ListProtocolGroupIdsResponse(const ListProtocolGroupIdsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protocol_group_ids_(from.protocol_group_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListProtocolGroupIdsResponse)
}

void ListProtocolGroupIdsResponse::SharedCtor() {
}

ListProtocolGroupIdsResponse::~ListProtocolGroupIdsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListProtocolGroupIdsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProtocolGroupIdsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListProtocolGroupIdsResponse::ArenaDtor(void* object) {
  ListProtocolGroupIdsResponse* _this = reinterpret_cast< ListProtocolGroupIdsResponse* >(object);
  (void)_this;
}
void ListProtocolGroupIdsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProtocolGroupIdsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProtocolGroupIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListProtocolGroupIdsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_group_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProtocolGroupIdsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string protocol_group_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_protocol_group_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProtocolGroupIdsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListProtocolGroupIdsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string protocol_group_ids = 1;
  for (int i = 0, n = this->_internal_protocol_group_ids_size(); i < n; i++) {
    const auto& s = this->_internal_protocol_group_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ListProtocolGroupIdsResponse.protocol_group_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListProtocolGroupIdsResponse)
  return target;
}

size_t ListProtocolGroupIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListProtocolGroupIdsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string protocol_group_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(protocol_group_ids_.size());
  for (int i = 0, n = protocol_group_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      protocol_group_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProtocolGroupIdsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProtocolGroupIdsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProtocolGroupIdsResponse::GetClassData() const { return &_class_data_; }

void ListProtocolGroupIdsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListProtocolGroupIdsResponse *>(to)->MergeFrom(
      static_cast<const ListProtocolGroupIdsResponse &>(from));
}


void ListProtocolGroupIdsResponse::MergeFrom(const ListProtocolGroupIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListProtocolGroupIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocol_group_ids_.MergeFrom(from.protocol_group_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProtocolGroupIdsResponse::CopyFrom(const ListProtocolGroupIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListProtocolGroupIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProtocolGroupIdsResponse::IsInitialized() const {
  return true;
}

void ListProtocolGroupIdsResponse::InternalSwap(ListProtocolGroupIdsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  protocol_group_ids_.InternalSwap(&other->protocol_group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProtocolGroupIdsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[44]);
}

// ===================================================================

class BeginHardwareCheckRequest::_Internal {
 public:
};

BeginHardwareCheckRequest::BeginHardwareCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.BeginHardwareCheckRequest)
}
BeginHardwareCheckRequest::BeginHardwareCheckRequest(const BeginHardwareCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.BeginHardwareCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginHardwareCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginHardwareCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BeginHardwareCheckRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[45]);
}

// ===================================================================

class BeginHardwareCheckResponse::_Internal {
 public:
};

BeginHardwareCheckResponse::BeginHardwareCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.BeginHardwareCheckResponse)
}
BeginHardwareCheckResponse::BeginHardwareCheckResponse(const BeginHardwareCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.BeginHardwareCheckResponse)
}

void BeginHardwareCheckResponse::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BeginHardwareCheckResponse::~BeginHardwareCheckResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.BeginHardwareCheckResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeginHardwareCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeginHardwareCheckResponse::ArenaDtor(void* object) {
  BeginHardwareCheckResponse* _this = reinterpret_cast< BeginHardwareCheckResponse* >(object);
  (void)_this;
}
void BeginHardwareCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginHardwareCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginHardwareCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.BeginHardwareCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginHardwareCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.BeginHardwareCheckResponse.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeginHardwareCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.BeginHardwareCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.BeginHardwareCheckResponse.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.BeginHardwareCheckResponse)
  return target;
}

size_t BeginHardwareCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.BeginHardwareCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginHardwareCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginHardwareCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginHardwareCheckResponse::GetClassData() const { return &_class_data_; }

void BeginHardwareCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginHardwareCheckResponse *>(to)->MergeFrom(
      static_cast<const BeginHardwareCheckResponse &>(from));
}


void BeginHardwareCheckResponse::MergeFrom(const BeginHardwareCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.BeginHardwareCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginHardwareCheckResponse::CopyFrom(const BeginHardwareCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.BeginHardwareCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginHardwareCheckResponse::IsInitialized() const {
  return true;
}

void BeginHardwareCheckResponse::InternalSwap(BeginHardwareCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginHardwareCheckResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[46]);
}

// ===================================================================

class BeginPlatformQcRequest::_Internal {
 public:
};

BeginPlatformQcRequest::BeginPlatformQcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.BeginPlatformQcRequest)
}
BeginPlatformQcRequest::BeginPlatformQcRequest(const BeginPlatformQcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.BeginPlatformQcRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginPlatformQcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginPlatformQcRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BeginPlatformQcRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[47]);
}

// ===================================================================

class BeginPlatformQcResponse::_Internal {
 public:
};

BeginPlatformQcResponse::BeginPlatformQcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.BeginPlatformQcResponse)
}
BeginPlatformQcResponse::BeginPlatformQcResponse(const BeginPlatformQcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.BeginPlatformQcResponse)
}

void BeginPlatformQcResponse::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BeginPlatformQcResponse::~BeginPlatformQcResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.BeginPlatformQcResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeginPlatformQcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeginPlatformQcResponse::ArenaDtor(void* object) {
  BeginPlatformQcResponse* _this = reinterpret_cast< BeginPlatformQcResponse* >(object);
  (void)_this;
}
void BeginPlatformQcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginPlatformQcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginPlatformQcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.BeginPlatformQcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginPlatformQcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.BeginPlatformQcResponse.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeginPlatformQcResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.BeginPlatformQcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.BeginPlatformQcResponse.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.BeginPlatformQcResponse)
  return target;
}

size_t BeginPlatformQcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.BeginPlatformQcResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginPlatformQcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginPlatformQcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginPlatformQcResponse::GetClassData() const { return &_class_data_; }

void BeginPlatformQcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginPlatformQcResponse *>(to)->MergeFrom(
      static_cast<const BeginPlatformQcResponse &>(from));
}


void BeginPlatformQcResponse::MergeFrom(const BeginPlatformQcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.BeginPlatformQcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginPlatformQcResponse::CopyFrom(const BeginPlatformQcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.BeginPlatformQcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginPlatformQcResponse::IsInitialized() const {
  return true;
}

void BeginPlatformQcResponse::InternalSwap(BeginPlatformQcResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginPlatformQcResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[48]);
}

// ===================================================================

class SetPlatformQcResultRequest::_Internal {
 public:
  static const ::minknow_api::protocol::PlatformQcResult& pqc_result(const SetPlatformQcResultRequest* msg);
};

const ::minknow_api::protocol::PlatformQcResult&
SetPlatformQcResultRequest::_Internal::pqc_result(const SetPlatformQcResultRequest* msg) {
  return *msg->pqc_result_;
}
SetPlatformQcResultRequest::SetPlatformQcResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetPlatformQcResultRequest)
}
SetPlatformQcResultRequest::SetPlatformQcResultRequest(const SetPlatformQcResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_run_id().empty()) {
    protocol_run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_run_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pqc_result()) {
    pqc_result_ = new ::minknow_api::protocol::PlatformQcResult(*from.pqc_result_);
  } else {
    pqc_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetPlatformQcResultRequest)
}

void SetPlatformQcResultRequest::SharedCtor() {
protocol_run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pqc_result_ = nullptr;
}

SetPlatformQcResultRequest::~SetPlatformQcResultRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.SetPlatformQcResultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPlatformQcResultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocol_run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pqc_result_;
}

void SetPlatformQcResultRequest::ArenaDtor(void* object) {
  SetPlatformQcResultRequest* _this = reinterpret_cast< SetPlatformQcResultRequest* >(object);
  (void)_this;
}
void SetPlatformQcResultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPlatformQcResultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPlatformQcResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.SetPlatformQcResultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_run_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pqc_result_ != nullptr) {
    delete pqc_result_;
  }
  pqc_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPlatformQcResultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string protocol_run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.PlatformQcResult pqc_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pqc_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlatformQcResultRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.SetPlatformQcResultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_run_id = 1;
  if (!this->_internal_protocol_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_run_id().data(), static_cast<int>(this->_internal_protocol_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.SetPlatformQcResultRequest.protocol_run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_run_id(), target);
  }

  // .minknow_api.protocol.PlatformQcResult pqc_result = 2;
  if (this->_internal_has_pqc_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pqc_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.SetPlatformQcResultRequest)
  return target;
}

size_t SetPlatformQcResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.SetPlatformQcResultRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_run_id = 1;
  if (!this->_internal_protocol_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_run_id());
  }

  // .minknow_api.protocol.PlatformQcResult pqc_result = 2;
  if (this->_internal_has_pqc_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pqc_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPlatformQcResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPlatformQcResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPlatformQcResultRequest::GetClassData() const { return &_class_data_; }

void SetPlatformQcResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetPlatformQcResultRequest *>(to)->MergeFrom(
      static_cast<const SetPlatformQcResultRequest &>(from));
}


void SetPlatformQcResultRequest::MergeFrom(const SetPlatformQcResultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.SetPlatformQcResultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol_run_id().empty()) {
    _internal_set_protocol_run_id(from._internal_protocol_run_id());
  }
  if (from._internal_has_pqc_result()) {
    _internal_mutable_pqc_result()->::minknow_api::protocol::PlatformQcResult::MergeFrom(from._internal_pqc_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPlatformQcResultRequest::CopyFrom(const SetPlatformQcResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.SetPlatformQcResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlatformQcResultRequest::IsInitialized() const {
  return true;
}

void SetPlatformQcResultRequest::InternalSwap(SetPlatformQcResultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_run_id_, lhs_arena,
      &other->protocol_run_id_, rhs_arena
  );
  swap(pqc_result_, other->pqc_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlatformQcResultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[49]);
}

// ===================================================================

class SetPlatformQcResultResponse::_Internal {
 public:
};

SetPlatformQcResultResponse::SetPlatformQcResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.SetPlatformQcResultResponse)
}
SetPlatformQcResultResponse::SetPlatformQcResultResponse(const SetPlatformQcResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.SetPlatformQcResultResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPlatformQcResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPlatformQcResultResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetPlatformQcResultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[50]);
}

// ===================================================================

class ProtocolIdentifierComponents::_Internal {
 public:
};

ProtocolIdentifierComponents::ProtocolIdentifierComponents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolIdentifierComponents)
}
ProtocolIdentifierComponents::ProtocolIdentifierComponents(const ProtocolIdentifierComponents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  experiment_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_experiment_type().empty()) {
    experiment_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_experiment_type(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_cell_product_code().empty()) {
    flow_cell_product_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_cell_product_code(), 
      GetArenaForAllocation());
  }
  kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kit().empty()) {
    kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kit(), 
      GetArenaForAllocation());
  }
  location_ = from.location_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolIdentifierComponents)
}

void ProtocolIdentifierComponents::SharedCtor() {
experiment_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flow_cell_product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
location_ = 0;
}

ProtocolIdentifierComponents::~ProtocolIdentifierComponents() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolIdentifierComponents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolIdentifierComponents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  experiment_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_cell_product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtocolIdentifierComponents::ArenaDtor(void* object) {
  ProtocolIdentifierComponents* _this = reinterpret_cast< ProtocolIdentifierComponents* >(object);
  (void)_this;
}
void ProtocolIdentifierComponents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolIdentifierComponents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolIdentifierComponents::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolIdentifierComponents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiment_type_.ClearToEmpty();
  name_.ClearToEmpty();
  flow_cell_product_code_.ClearToEmpty();
  kit_.ClearToEmpty();
  location_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolIdentifierComponents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.ProtocolIdentifierComponents.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_location(static_cast<::minknow_api::protocol::ProtocolIdentifierComponents_Location>(val));
        } else
          goto handle_unusual;
        continue;
      // string experiment_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_experiment_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolIdentifierComponents.experiment_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolIdentifierComponents.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string flow_cell_product_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_flow_cell_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string kit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_kit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ProtocolIdentifierComponents.kit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolIdentifierComponents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolIdentifierComponents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolIdentifierComponents.Location location = 1;
  if (this->_internal_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_location(), target);
  }

  // string experiment_type = 2;
  if (!this->_internal_experiment_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_experiment_type().data(), static_cast<int>(this->_internal_experiment_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolIdentifierComponents.experiment_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_experiment_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolIdentifierComponents.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string flow_cell_product_code = 4;
  if (!this->_internal_flow_cell_product_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_cell_product_code().data(), static_cast<int>(this->_internal_flow_cell_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolIdentifierComponents.flow_cell_product_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_flow_cell_product_code(), target);
  }

  // string kit = 5;
  if (!this->_internal_kit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kit().data(), static_cast<int>(this->_internal_kit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ProtocolIdentifierComponents.kit");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_kit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolIdentifierComponents)
  return target;
}

size_t ProtocolIdentifierComponents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolIdentifierComponents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string experiment_type = 2;
  if (!this->_internal_experiment_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_experiment_type());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string flow_cell_product_code = 4;
  if (!this->_internal_flow_cell_product_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_cell_product_code());
  }

  // string kit = 5;
  if (!this->_internal_kit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kit());
  }

  // .minknow_api.protocol.ProtocolIdentifierComponents.Location location = 1;
  if (this->_internal_location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolIdentifierComponents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolIdentifierComponents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolIdentifierComponents::GetClassData() const { return &_class_data_; }

void ProtocolIdentifierComponents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolIdentifierComponents *>(to)->MergeFrom(
      static_cast<const ProtocolIdentifierComponents &>(from));
}


void ProtocolIdentifierComponents::MergeFrom(const ProtocolIdentifierComponents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolIdentifierComponents)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_experiment_type().empty()) {
    _internal_set_experiment_type(from._internal_experiment_type());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_flow_cell_product_code().empty()) {
    _internal_set_flow_cell_product_code(from._internal_flow_cell_product_code());
  }
  if (!from._internal_kit().empty()) {
    _internal_set_kit(from._internal_kit());
  }
  if (from._internal_location() != 0) {
    _internal_set_location(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolIdentifierComponents::CopyFrom(const ProtocolIdentifierComponents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolIdentifierComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolIdentifierComponents::IsInitialized() const {
  return true;
}

void ProtocolIdentifierComponents::InternalSwap(ProtocolIdentifierComponents* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &experiment_type_, lhs_arena,
      &other->experiment_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flow_cell_product_code_, lhs_arena,
      &other->flow_cell_product_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kit_, lhs_arena,
      &other->kit_, rhs_arena
  );
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolIdentifierComponents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[51]);
}

// ===================================================================

class ListSettingsForProtocolRequest::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolIdentifierComponents& components(const ListSettingsForProtocolRequest* msg);
};

const ::minknow_api::protocol::ProtocolIdentifierComponents&
ListSettingsForProtocolRequest::_Internal::components(const ListSettingsForProtocolRequest* msg) {
  return *msg->protocol_identifier_.components_;
}
void ListSettingsForProtocolRequest::set_allocated_components(::minknow_api::protocol::ProtocolIdentifierComponents* components) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_protocol_identifier();
  if (components) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::protocol::ProtocolIdentifierComponents>::GetOwningArena(components);
    if (message_arena != submessage_arena) {
      components = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, components, submessage_arena);
    }
    set_has_components();
    protocol_identifier_.components_ = components;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.protocol.ListSettingsForProtocolRequest.components)
}
ListSettingsForProtocolRequest::ListSettingsForProtocolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListSettingsForProtocolRequest)
}
ListSettingsForProtocolRequest::ListSettingsForProtocolRequest(const ListSettingsForProtocolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_protocol_identifier();
  switch (from.protocol_identifier_case()) {
    case kIdentifier: {
      _internal_set_identifier(from._internal_identifier());
      break;
    }
    case kComponents: {
      _internal_mutable_components()->::minknow_api::protocol::ProtocolIdentifierComponents::MergeFrom(from._internal_components());
      break;
    }
    case PROTOCOL_IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListSettingsForProtocolRequest)
}

void ListSettingsForProtocolRequest::SharedCtor() {
clear_has_protocol_identifier();
}

ListSettingsForProtocolRequest::~ListSettingsForProtocolRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListSettingsForProtocolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSettingsForProtocolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_protocol_identifier()) {
    clear_protocol_identifier();
  }
}

void ListSettingsForProtocolRequest::ArenaDtor(void* object) {
  ListSettingsForProtocolRequest* _this = reinterpret_cast< ListSettingsForProtocolRequest* >(object);
  (void)_this;
}
void ListSettingsForProtocolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSettingsForProtocolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSettingsForProtocolRequest::clear_protocol_identifier() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  switch (protocol_identifier_case()) {
    case kIdentifier: {
      protocol_identifier_.identifier_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kComponents: {
      if (GetArenaForAllocation() == nullptr) {
        delete protocol_identifier_.components_;
      }
      break;
    }
    case PROTOCOL_IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_IDENTIFIER_NOT_SET;
}


void ListSettingsForProtocolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_protocol_identifier();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSettingsForProtocolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ListSettingsForProtocolRequest.identifier"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolIdentifierComponents components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_components(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSettingsForProtocolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (_internal_has_identifier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ListSettingsForProtocolRequest.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // .minknow_api.protocol.ProtocolIdentifierComponents components = 2;
  if (_internal_has_components()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::components(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListSettingsForProtocolRequest)
  return target;
}

size_t ListSettingsForProtocolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (protocol_identifier_case()) {
    // string identifier = 1;
    case kIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
      break;
    }
    // .minknow_api.protocol.ProtocolIdentifierComponents components = 2;
    case kComponents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_identifier_.components_);
      break;
    }
    case PROTOCOL_IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSettingsForProtocolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSettingsForProtocolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSettingsForProtocolRequest::GetClassData() const { return &_class_data_; }

void ListSettingsForProtocolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSettingsForProtocolRequest *>(to)->MergeFrom(
      static_cast<const ListSettingsForProtocolRequest &>(from));
}


void ListSettingsForProtocolRequest::MergeFrom(const ListSettingsForProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.protocol_identifier_case()) {
    case kIdentifier: {
      _internal_set_identifier(from._internal_identifier());
      break;
    }
    case kComponents: {
      _internal_mutable_components()->::minknow_api::protocol::ProtocolIdentifierComponents::MergeFrom(from._internal_components());
      break;
    }
    case PROTOCOL_IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSettingsForProtocolRequest::CopyFrom(const ListSettingsForProtocolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListSettingsForProtocolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSettingsForProtocolRequest::IsInitialized() const {
  return true;
}

void ListSettingsForProtocolRequest::InternalSwap(ListSettingsForProtocolRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(protocol_identifier_, other->protocol_identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSettingsForProtocolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[52]);
}

// ===================================================================

class ListSettingsForProtocolResponse_RunOptions::_Internal {
 public:
  static const ::minknow_api::protocol_settings::ProtocolSetting& run_length(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bias_voltage(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_enabled(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_ref_file(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_channels(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_bed_file_enabled(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_bed_file(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_until_enrichment(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& active_channel_selection(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& mux_scan_period(const ListSettingsForProtocolResponse_RunOptions* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& group_change_period(const ListSettingsForProtocolResponse_RunOptions* msg);
};

const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::run_length(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->run_length_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::bias_voltage(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->bias_voltage_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_enabled(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_ref_file(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_ref_file_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_channels(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_channels_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_bed_file_enabled(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_bed_file_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_bed_file(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_bed_file_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::read_until_enrichment(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->read_until_enrichment_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::active_channel_selection(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->active_channel_selection_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::mux_scan_period(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->mux_scan_period_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_RunOptions::_Internal::group_change_period(const ListSettingsForProtocolResponse_RunOptions* msg) {
  return *msg->group_change_period_;
}
void ListSettingsForProtocolResponse_RunOptions::clear_run_length() {
  if (GetArenaForAllocation() == nullptr && run_length_ != nullptr) {
    delete run_length_;
  }
  run_length_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_bias_voltage() {
  if (GetArenaForAllocation() == nullptr && bias_voltage_ != nullptr) {
    delete bias_voltage_;
  }
  bias_voltage_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_enabled() {
  if (GetArenaForAllocation() == nullptr && read_until_enabled_ != nullptr) {
    delete read_until_enabled_;
  }
  read_until_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_ref_file() {
  if (GetArenaForAllocation() == nullptr && read_until_ref_file_ != nullptr) {
    delete read_until_ref_file_;
  }
  read_until_ref_file_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_channels() {
  if (GetArenaForAllocation() == nullptr && read_until_channels_ != nullptr) {
    delete read_until_channels_;
  }
  read_until_channels_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_bed_file_enabled() {
  if (GetArenaForAllocation() == nullptr && read_until_bed_file_enabled_ != nullptr) {
    delete read_until_bed_file_enabled_;
  }
  read_until_bed_file_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_bed_file() {
  if (GetArenaForAllocation() == nullptr && read_until_bed_file_ != nullptr) {
    delete read_until_bed_file_;
  }
  read_until_bed_file_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_read_until_enrichment() {
  if (GetArenaForAllocation() == nullptr && read_until_enrichment_ != nullptr) {
    delete read_until_enrichment_;
  }
  read_until_enrichment_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_active_channel_selection() {
  if (GetArenaForAllocation() == nullptr && active_channel_selection_ != nullptr) {
    delete active_channel_selection_;
  }
  active_channel_selection_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_mux_scan_period() {
  if (GetArenaForAllocation() == nullptr && mux_scan_period_ != nullptr) {
    delete mux_scan_period_;
  }
  mux_scan_period_ = nullptr;
}
void ListSettingsForProtocolResponse_RunOptions::clear_group_change_period() {
  if (GetArenaForAllocation() == nullptr && group_change_period_ != nullptr) {
    delete group_change_period_;
  }
  group_change_period_ = nullptr;
}
ListSettingsForProtocolResponse_RunOptions::ListSettingsForProtocolResponse_RunOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
}
ListSettingsForProtocolResponse_RunOptions::ListSettingsForProtocolResponse_RunOptions(const ListSettingsForProtocolResponse_RunOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_run_length()) {
    run_length_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.run_length_);
  } else {
    run_length_ = nullptr;
  }
  if (from._internal_has_bias_voltage()) {
    bias_voltage_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bias_voltage_);
  } else {
    bias_voltage_ = nullptr;
  }
  if (from._internal_has_read_until_enabled()) {
    read_until_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_enabled_);
  } else {
    read_until_enabled_ = nullptr;
  }
  if (from._internal_has_read_until_ref_file()) {
    read_until_ref_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_ref_file_);
  } else {
    read_until_ref_file_ = nullptr;
  }
  if (from._internal_has_read_until_channels()) {
    read_until_channels_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_channels_);
  } else {
    read_until_channels_ = nullptr;
  }
  if (from._internal_has_read_until_bed_file_enabled()) {
    read_until_bed_file_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_bed_file_enabled_);
  } else {
    read_until_bed_file_enabled_ = nullptr;
  }
  if (from._internal_has_read_until_bed_file()) {
    read_until_bed_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_bed_file_);
  } else {
    read_until_bed_file_ = nullptr;
  }
  if (from._internal_has_read_until_enrichment()) {
    read_until_enrichment_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_until_enrichment_);
  } else {
    read_until_enrichment_ = nullptr;
  }
  if (from._internal_has_active_channel_selection()) {
    active_channel_selection_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.active_channel_selection_);
  } else {
    active_channel_selection_ = nullptr;
  }
  if (from._internal_has_mux_scan_period()) {
    mux_scan_period_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.mux_scan_period_);
  } else {
    mux_scan_period_ = nullptr;
  }
  if (from._internal_has_group_change_period()) {
    group_change_period_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.group_change_period_);
  } else {
    group_change_period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
}

void ListSettingsForProtocolResponse_RunOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_change_period_) -
    reinterpret_cast<char*>(&run_length_)) + sizeof(group_change_period_));
}

ListSettingsForProtocolResponse_RunOptions::~ListSettingsForProtocolResponse_RunOptions() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSettingsForProtocolResponse_RunOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_length_;
  if (this != internal_default_instance()) delete bias_voltage_;
  if (this != internal_default_instance()) delete read_until_enabled_;
  if (this != internal_default_instance()) delete read_until_ref_file_;
  if (this != internal_default_instance()) delete read_until_channels_;
  if (this != internal_default_instance()) delete read_until_bed_file_enabled_;
  if (this != internal_default_instance()) delete read_until_bed_file_;
  if (this != internal_default_instance()) delete read_until_enrichment_;
  if (this != internal_default_instance()) delete active_channel_selection_;
  if (this != internal_default_instance()) delete mux_scan_period_;
  if (this != internal_default_instance()) delete group_change_period_;
}

void ListSettingsForProtocolResponse_RunOptions::ArenaDtor(void* object) {
  ListSettingsForProtocolResponse_RunOptions* _this = reinterpret_cast< ListSettingsForProtocolResponse_RunOptions* >(object);
  (void)_this;
}
void ListSettingsForProtocolResponse_RunOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSettingsForProtocolResponse_RunOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSettingsForProtocolResponse_RunOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && run_length_ != nullptr) {
    delete run_length_;
  }
  run_length_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bias_voltage_ != nullptr) {
    delete bias_voltage_;
  }
  bias_voltage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_enabled_ != nullptr) {
    delete read_until_enabled_;
  }
  read_until_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_ref_file_ != nullptr) {
    delete read_until_ref_file_;
  }
  read_until_ref_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_channels_ != nullptr) {
    delete read_until_channels_;
  }
  read_until_channels_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_bed_file_enabled_ != nullptr) {
    delete read_until_bed_file_enabled_;
  }
  read_until_bed_file_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_bed_file_ != nullptr) {
    delete read_until_bed_file_;
  }
  read_until_bed_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_until_enrichment_ != nullptr) {
    delete read_until_enrichment_;
  }
  read_until_enrichment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && active_channel_selection_ != nullptr) {
    delete active_channel_selection_;
  }
  active_channel_selection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mux_scan_period_ != nullptr) {
    delete mux_scan_period_;
  }
  mux_scan_period_ = nullptr;
  if (GetArenaForAllocation() == nullptr && group_change_period_ != nullptr) {
    delete group_change_period_;
  }
  group_change_period_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSettingsForProtocolResponse_RunOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol_settings.ProtocolSetting run_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bias_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_voltage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_ref_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_ref_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_channels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_bed_file_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_bed_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_until_enrichment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_until_enrichment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting active_channel_selection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_channel_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting mux_scan_period = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mux_scan_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting group_change_period = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_change_period(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSettingsForProtocolResponse_RunOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting run_length = 1;
  if (this->_internal_has_run_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::run_length(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bias_voltage = 2;
  if (this->_internal_has_bias_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bias_voltage(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enabled = 3;
  if (this->_internal_has_read_until_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::read_until_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_ref_file = 4;
  if (this->_internal_has_read_until_ref_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::read_until_ref_file(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_channels = 5;
  if (this->_internal_has_read_until_channels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::read_until_channels(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
  if (this->_internal_has_read_until_bed_file_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::read_until_bed_file_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file = 7;
  if (this->_internal_has_read_until_bed_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::read_until_bed_file(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enrichment = 8;
  if (this->_internal_has_read_until_enrichment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::read_until_enrichment(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting active_channel_selection = 9;
  if (this->_internal_has_active_channel_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::active_channel_selection(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting mux_scan_period = 10;
  if (this->_internal_has_mux_scan_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mux_scan_period(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting group_change_period = 11;
  if (this->_internal_has_group_change_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::group_change_period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  return target;
}

size_t ListSettingsForProtocolResponse_RunOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting run_length = 1;
  if (this->_internal_has_run_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_length_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bias_voltage = 2;
  if (this->_internal_has_bias_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_voltage_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enabled = 3;
  if (this->_internal_has_read_until_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_ref_file = 4;
  if (this->_internal_has_read_until_ref_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_ref_file_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_channels = 5;
  if (this->_internal_has_read_until_channels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_channels_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file_enabled = 6;
  if (this->_internal_has_read_until_bed_file_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_bed_file_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_bed_file = 7;
  if (this->_internal_has_read_until_bed_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_bed_file_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_until_enrichment = 8;
  if (this->_internal_has_read_until_enrichment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_until_enrichment_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting active_channel_selection = 9;
  if (this->_internal_has_active_channel_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_channel_selection_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting mux_scan_period = 10;
  if (this->_internal_has_mux_scan_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mux_scan_period_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting group_change_period = 11;
  if (this->_internal_has_group_change_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_change_period_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSettingsForProtocolResponse_RunOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSettingsForProtocolResponse_RunOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSettingsForProtocolResponse_RunOptions::GetClassData() const { return &_class_data_; }

void ListSettingsForProtocolResponse_RunOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSettingsForProtocolResponse_RunOptions *>(to)->MergeFrom(
      static_cast<const ListSettingsForProtocolResponse_RunOptions &>(from));
}


void ListSettingsForProtocolResponse_RunOptions::MergeFrom(const ListSettingsForProtocolResponse_RunOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_run_length()) {
    _internal_mutable_run_length()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_run_length());
  }
  if (from._internal_has_bias_voltage()) {
    _internal_mutable_bias_voltage()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bias_voltage());
  }
  if (from._internal_has_read_until_enabled()) {
    _internal_mutable_read_until_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_enabled());
  }
  if (from._internal_has_read_until_ref_file()) {
    _internal_mutable_read_until_ref_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_ref_file());
  }
  if (from._internal_has_read_until_channels()) {
    _internal_mutable_read_until_channels()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_channels());
  }
  if (from._internal_has_read_until_bed_file_enabled()) {
    _internal_mutable_read_until_bed_file_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_bed_file_enabled());
  }
  if (from._internal_has_read_until_bed_file()) {
    _internal_mutable_read_until_bed_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_bed_file());
  }
  if (from._internal_has_read_until_enrichment()) {
    _internal_mutable_read_until_enrichment()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_until_enrichment());
  }
  if (from._internal_has_active_channel_selection()) {
    _internal_mutable_active_channel_selection()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_active_channel_selection());
  }
  if (from._internal_has_mux_scan_period()) {
    _internal_mutable_mux_scan_period()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_mux_scan_period());
  }
  if (from._internal_has_group_change_period()) {
    _internal_mutable_group_change_period()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_group_change_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSettingsForProtocolResponse_RunOptions::CopyFrom(const ListSettingsForProtocolResponse_RunOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSettingsForProtocolResponse_RunOptions::IsInitialized() const {
  return true;
}

void ListSettingsForProtocolResponse_RunOptions::InternalSwap(ListSettingsForProtocolResponse_RunOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_RunOptions, group_change_period_)
      + sizeof(ListSettingsForProtocolResponse_RunOptions::group_change_period_)
      - PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_RunOptions, run_length_)>(
          reinterpret_cast<char*>(&run_length_),
          reinterpret_cast<char*>(&other->run_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSettingsForProtocolResponse_RunOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[53]);
}

// ===================================================================

class ListSettingsForProtocolResponse_Basecalling::_Internal {
 public:
  static const ::minknow_api::protocol_settings::ProtocolSetting& basecalling_enabled(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& barcoding_enabled(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& basecall_model(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& trim_barcodes_enabled(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& require_barcodes_both_ends(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& detect_mid_strand_barcodes(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& override_mid_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& override_rear_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score_rear(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& min_barcoding_score_mid(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& alignment_enabled(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& alignment_ref_file(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& alignment_bed_file_enabled(const ListSettingsForProtocolResponse_Basecalling* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& alignment_bed_file(const ListSettingsForProtocolResponse_Basecalling* msg);
};

const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::basecalling_enabled(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->basecalling_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::barcoding_enabled(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->barcoding_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::basecall_model(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->basecall_model_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::trim_barcodes_enabled(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->trim_barcodes_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::require_barcodes_both_ends(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->require_barcodes_both_ends_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::detect_mid_strand_barcodes(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->detect_mid_strand_barcodes_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::override_mid_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->override_mid_barcoding_score_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::override_rear_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->override_rear_barcoding_score_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::min_barcoding_score(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->min_barcoding_score_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::min_barcoding_score_rear(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->min_barcoding_score_rear_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::min_barcoding_score_mid(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->min_barcoding_score_mid_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::alignment_enabled(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->alignment_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::alignment_ref_file(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->alignment_ref_file_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::alignment_bed_file_enabled(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->alignment_bed_file_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Basecalling::_Internal::alignment_bed_file(const ListSettingsForProtocolResponse_Basecalling* msg) {
  return *msg->alignment_bed_file_;
}
void ListSettingsForProtocolResponse_Basecalling::clear_basecalling_enabled() {
  if (GetArenaForAllocation() == nullptr && basecalling_enabled_ != nullptr) {
    delete basecalling_enabled_;
  }
  basecalling_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_barcoding_enabled() {
  if (GetArenaForAllocation() == nullptr && barcoding_enabled_ != nullptr) {
    delete barcoding_enabled_;
  }
  barcoding_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_basecall_model() {
  if (GetArenaForAllocation() == nullptr && basecall_model_ != nullptr) {
    delete basecall_model_;
  }
  basecall_model_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_trim_barcodes_enabled() {
  if (GetArenaForAllocation() == nullptr && trim_barcodes_enabled_ != nullptr) {
    delete trim_barcodes_enabled_;
  }
  trim_barcodes_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_require_barcodes_both_ends() {
  if (GetArenaForAllocation() == nullptr && require_barcodes_both_ends_ != nullptr) {
    delete require_barcodes_both_ends_;
  }
  require_barcodes_both_ends_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_detect_mid_strand_barcodes() {
  if (GetArenaForAllocation() == nullptr && detect_mid_strand_barcodes_ != nullptr) {
    delete detect_mid_strand_barcodes_;
  }
  detect_mid_strand_barcodes_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_override_mid_barcoding_score() {
  if (GetArenaForAllocation() == nullptr && override_mid_barcoding_score_ != nullptr) {
    delete override_mid_barcoding_score_;
  }
  override_mid_barcoding_score_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_override_rear_barcoding_score() {
  if (GetArenaForAllocation() == nullptr && override_rear_barcoding_score_ != nullptr) {
    delete override_rear_barcoding_score_;
  }
  override_rear_barcoding_score_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_min_barcoding_score() {
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_ != nullptr) {
    delete min_barcoding_score_;
  }
  min_barcoding_score_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_min_barcoding_score_rear() {
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_rear_ != nullptr) {
    delete min_barcoding_score_rear_;
  }
  min_barcoding_score_rear_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_min_barcoding_score_mid() {
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_mid_ != nullptr) {
    delete min_barcoding_score_mid_;
  }
  min_barcoding_score_mid_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_alignment_enabled() {
  if (GetArenaForAllocation() == nullptr && alignment_enabled_ != nullptr) {
    delete alignment_enabled_;
  }
  alignment_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_alignment_ref_file() {
  if (GetArenaForAllocation() == nullptr && alignment_ref_file_ != nullptr) {
    delete alignment_ref_file_;
  }
  alignment_ref_file_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_alignment_bed_file_enabled() {
  if (GetArenaForAllocation() == nullptr && alignment_bed_file_enabled_ != nullptr) {
    delete alignment_bed_file_enabled_;
  }
  alignment_bed_file_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Basecalling::clear_alignment_bed_file() {
  if (GetArenaForAllocation() == nullptr && alignment_bed_file_ != nullptr) {
    delete alignment_bed_file_;
  }
  alignment_bed_file_ = nullptr;
}
ListSettingsForProtocolResponse_Basecalling::ListSettingsForProtocolResponse_Basecalling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
}
ListSettingsForProtocolResponse_Basecalling::ListSettingsForProtocolResponse_Basecalling(const ListSettingsForProtocolResponse_Basecalling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basecalling_enabled()) {
    basecalling_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.basecalling_enabled_);
  } else {
    basecalling_enabled_ = nullptr;
  }
  if (from._internal_has_barcoding_enabled()) {
    barcoding_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.barcoding_enabled_);
  } else {
    barcoding_enabled_ = nullptr;
  }
  if (from._internal_has_basecall_model()) {
    basecall_model_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.basecall_model_);
  } else {
    basecall_model_ = nullptr;
  }
  if (from._internal_has_trim_barcodes_enabled()) {
    trim_barcodes_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.trim_barcodes_enabled_);
  } else {
    trim_barcodes_enabled_ = nullptr;
  }
  if (from._internal_has_require_barcodes_both_ends()) {
    require_barcodes_both_ends_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.require_barcodes_both_ends_);
  } else {
    require_barcodes_both_ends_ = nullptr;
  }
  if (from._internal_has_detect_mid_strand_barcodes()) {
    detect_mid_strand_barcodes_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.detect_mid_strand_barcodes_);
  } else {
    detect_mid_strand_barcodes_ = nullptr;
  }
  if (from._internal_has_override_mid_barcoding_score()) {
    override_mid_barcoding_score_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.override_mid_barcoding_score_);
  } else {
    override_mid_barcoding_score_ = nullptr;
  }
  if (from._internal_has_override_rear_barcoding_score()) {
    override_rear_barcoding_score_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.override_rear_barcoding_score_);
  } else {
    override_rear_barcoding_score_ = nullptr;
  }
  if (from._internal_has_min_barcoding_score()) {
    min_barcoding_score_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.min_barcoding_score_);
  } else {
    min_barcoding_score_ = nullptr;
  }
  if (from._internal_has_min_barcoding_score_rear()) {
    min_barcoding_score_rear_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.min_barcoding_score_rear_);
  } else {
    min_barcoding_score_rear_ = nullptr;
  }
  if (from._internal_has_min_barcoding_score_mid()) {
    min_barcoding_score_mid_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.min_barcoding_score_mid_);
  } else {
    min_barcoding_score_mid_ = nullptr;
  }
  if (from._internal_has_alignment_enabled()) {
    alignment_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.alignment_enabled_);
  } else {
    alignment_enabled_ = nullptr;
  }
  if (from._internal_has_alignment_ref_file()) {
    alignment_ref_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.alignment_ref_file_);
  } else {
    alignment_ref_file_ = nullptr;
  }
  if (from._internal_has_alignment_bed_file_enabled()) {
    alignment_bed_file_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.alignment_bed_file_enabled_);
  } else {
    alignment_bed_file_enabled_ = nullptr;
  }
  if (from._internal_has_alignment_bed_file()) {
    alignment_bed_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.alignment_bed_file_);
  } else {
    alignment_bed_file_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
}

void ListSettingsForProtocolResponse_Basecalling::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&basecalling_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alignment_bed_file_) -
    reinterpret_cast<char*>(&basecalling_enabled_)) + sizeof(alignment_bed_file_));
}

ListSettingsForProtocolResponse_Basecalling::~ListSettingsForProtocolResponse_Basecalling() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSettingsForProtocolResponse_Basecalling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete basecalling_enabled_;
  if (this != internal_default_instance()) delete barcoding_enabled_;
  if (this != internal_default_instance()) delete basecall_model_;
  if (this != internal_default_instance()) delete trim_barcodes_enabled_;
  if (this != internal_default_instance()) delete require_barcodes_both_ends_;
  if (this != internal_default_instance()) delete detect_mid_strand_barcodes_;
  if (this != internal_default_instance()) delete override_mid_barcoding_score_;
  if (this != internal_default_instance()) delete override_rear_barcoding_score_;
  if (this != internal_default_instance()) delete min_barcoding_score_;
  if (this != internal_default_instance()) delete min_barcoding_score_rear_;
  if (this != internal_default_instance()) delete min_barcoding_score_mid_;
  if (this != internal_default_instance()) delete alignment_enabled_;
  if (this != internal_default_instance()) delete alignment_ref_file_;
  if (this != internal_default_instance()) delete alignment_bed_file_enabled_;
  if (this != internal_default_instance()) delete alignment_bed_file_;
}

void ListSettingsForProtocolResponse_Basecalling::ArenaDtor(void* object) {
  ListSettingsForProtocolResponse_Basecalling* _this = reinterpret_cast< ListSettingsForProtocolResponse_Basecalling* >(object);
  (void)_this;
}
void ListSettingsForProtocolResponse_Basecalling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSettingsForProtocolResponse_Basecalling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSettingsForProtocolResponse_Basecalling::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && basecalling_enabled_ != nullptr) {
    delete basecalling_enabled_;
  }
  basecalling_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && barcoding_enabled_ != nullptr) {
    delete barcoding_enabled_;
  }
  barcoding_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && basecall_model_ != nullptr) {
    delete basecall_model_;
  }
  basecall_model_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trim_barcodes_enabled_ != nullptr) {
    delete trim_barcodes_enabled_;
  }
  trim_barcodes_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && require_barcodes_both_ends_ != nullptr) {
    delete require_barcodes_both_ends_;
  }
  require_barcodes_both_ends_ = nullptr;
  if (GetArenaForAllocation() == nullptr && detect_mid_strand_barcodes_ != nullptr) {
    delete detect_mid_strand_barcodes_;
  }
  detect_mid_strand_barcodes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && override_mid_barcoding_score_ != nullptr) {
    delete override_mid_barcoding_score_;
  }
  override_mid_barcoding_score_ = nullptr;
  if (GetArenaForAllocation() == nullptr && override_rear_barcoding_score_ != nullptr) {
    delete override_rear_barcoding_score_;
  }
  override_rear_barcoding_score_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_ != nullptr) {
    delete min_barcoding_score_;
  }
  min_barcoding_score_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_rear_ != nullptr) {
    delete min_barcoding_score_rear_;
  }
  min_barcoding_score_rear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_barcoding_score_mid_ != nullptr) {
    delete min_barcoding_score_mid_;
  }
  min_barcoding_score_mid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alignment_enabled_ != nullptr) {
    delete alignment_enabled_;
  }
  alignment_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alignment_ref_file_ != nullptr) {
    delete alignment_ref_file_;
  }
  alignment_ref_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alignment_bed_file_enabled_ != nullptr) {
    delete alignment_bed_file_enabled_;
  }
  alignment_bed_file_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alignment_bed_file_ != nullptr) {
    delete alignment_bed_file_;
  }
  alignment_bed_file_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSettingsForProtocolResponse_Basecalling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol_settings.ProtocolSetting basecalling_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecalling_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting barcoding_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_barcoding_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting basecall_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecall_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trim_barcodes_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_require_barcodes_both_ends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_detect_mid_strand_barcodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_override_mid_barcoding_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_override_rear_barcoding_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_barcoding_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_barcoding_score_rear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_barcoding_score_mid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting alignment_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting alignment_ref_file = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment_ref_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment_bed_file_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment_bed_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSettingsForProtocolResponse_Basecalling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting basecalling_enabled = 1;
  if (this->_internal_has_basecalling_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basecalling_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting barcoding_enabled = 2;
  if (this->_internal_has_barcoding_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::barcoding_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting basecall_model = 3;
  if (this->_internal_has_basecall_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::basecall_model(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
  if (this->_internal_has_trim_barcodes_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::trim_barcodes_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
  if (this->_internal_has_require_barcodes_both_ends()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::require_barcodes_both_ends(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
  if (this->_internal_has_detect_mid_strand_barcodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::detect_mid_strand_barcodes(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
  if (this->_internal_has_override_mid_barcoding_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::override_mid_barcoding_score(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
  if (this->_internal_has_override_rear_barcoding_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::override_rear_barcoding_score(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score = 9;
  if (this->_internal_has_min_barcoding_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::min_barcoding_score(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
  if (this->_internal_has_min_barcoding_score_rear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::min_barcoding_score_rear(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
  if (this->_internal_has_min_barcoding_score_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::min_barcoding_score_mid(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_enabled = 12;
  if (this->_internal_has_alignment_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::alignment_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_ref_file = 13;
  if (this->_internal_has_alignment_ref_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::alignment_ref_file(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
  if (this->_internal_has_alignment_bed_file_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::alignment_bed_file_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file = 15;
  if (this->_internal_has_alignment_bed_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::alignment_bed_file(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  return target;
}

size_t ListSettingsForProtocolResponse_Basecalling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting basecalling_enabled = 1;
  if (this->_internal_has_basecalling_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basecalling_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting barcoding_enabled = 2;
  if (this->_internal_has_barcoding_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *barcoding_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting basecall_model = 3;
  if (this->_internal_has_basecall_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basecall_model_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting trim_barcodes_enabled = 4;
  if (this->_internal_has_trim_barcodes_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trim_barcodes_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting require_barcodes_both_ends = 5;
  if (this->_internal_has_require_barcodes_both_ends()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *require_barcodes_both_ends_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting detect_mid_strand_barcodes = 6;
  if (this->_internal_has_detect_mid_strand_barcodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_mid_strand_barcodes_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting override_mid_barcoding_score = 7;
  if (this->_internal_has_override_mid_barcoding_score()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *override_mid_barcoding_score_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting override_rear_barcoding_score = 8;
  if (this->_internal_has_override_rear_barcoding_score()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *override_rear_barcoding_score_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score = 9;
  if (this->_internal_has_min_barcoding_score()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_barcoding_score_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_rear = 10;
  if (this->_internal_has_min_barcoding_score_rear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_barcoding_score_rear_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting min_barcoding_score_mid = 11;
  if (this->_internal_has_min_barcoding_score_mid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_barcoding_score_mid_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_enabled = 12;
  if (this->_internal_has_alignment_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_ref_file = 13;
  if (this->_internal_has_alignment_ref_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_ref_file_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file_enabled = 14;
  if (this->_internal_has_alignment_bed_file_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_bed_file_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting alignment_bed_file = 15;
  if (this->_internal_has_alignment_bed_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_bed_file_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSettingsForProtocolResponse_Basecalling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSettingsForProtocolResponse_Basecalling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSettingsForProtocolResponse_Basecalling::GetClassData() const { return &_class_data_; }

void ListSettingsForProtocolResponse_Basecalling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSettingsForProtocolResponse_Basecalling *>(to)->MergeFrom(
      static_cast<const ListSettingsForProtocolResponse_Basecalling &>(from));
}


void ListSettingsForProtocolResponse_Basecalling::MergeFrom(const ListSettingsForProtocolResponse_Basecalling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_basecalling_enabled()) {
    _internal_mutable_basecalling_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_basecalling_enabled());
  }
  if (from._internal_has_barcoding_enabled()) {
    _internal_mutable_barcoding_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_barcoding_enabled());
  }
  if (from._internal_has_basecall_model()) {
    _internal_mutable_basecall_model()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_basecall_model());
  }
  if (from._internal_has_trim_barcodes_enabled()) {
    _internal_mutable_trim_barcodes_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_trim_barcodes_enabled());
  }
  if (from._internal_has_require_barcodes_both_ends()) {
    _internal_mutable_require_barcodes_both_ends()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_require_barcodes_both_ends());
  }
  if (from._internal_has_detect_mid_strand_barcodes()) {
    _internal_mutable_detect_mid_strand_barcodes()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_detect_mid_strand_barcodes());
  }
  if (from._internal_has_override_mid_barcoding_score()) {
    _internal_mutable_override_mid_barcoding_score()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_override_mid_barcoding_score());
  }
  if (from._internal_has_override_rear_barcoding_score()) {
    _internal_mutable_override_rear_barcoding_score()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_override_rear_barcoding_score());
  }
  if (from._internal_has_min_barcoding_score()) {
    _internal_mutable_min_barcoding_score()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_min_barcoding_score());
  }
  if (from._internal_has_min_barcoding_score_rear()) {
    _internal_mutable_min_barcoding_score_rear()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_min_barcoding_score_rear());
  }
  if (from._internal_has_min_barcoding_score_mid()) {
    _internal_mutable_min_barcoding_score_mid()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_min_barcoding_score_mid());
  }
  if (from._internal_has_alignment_enabled()) {
    _internal_mutable_alignment_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_alignment_enabled());
  }
  if (from._internal_has_alignment_ref_file()) {
    _internal_mutable_alignment_ref_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_alignment_ref_file());
  }
  if (from._internal_has_alignment_bed_file_enabled()) {
    _internal_mutable_alignment_bed_file_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_alignment_bed_file_enabled());
  }
  if (from._internal_has_alignment_bed_file()) {
    _internal_mutable_alignment_bed_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_alignment_bed_file());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSettingsForProtocolResponse_Basecalling::CopyFrom(const ListSettingsForProtocolResponse_Basecalling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSettingsForProtocolResponse_Basecalling::IsInitialized() const {
  return true;
}

void ListSettingsForProtocolResponse_Basecalling::InternalSwap(ListSettingsForProtocolResponse_Basecalling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_Basecalling, alignment_bed_file_)
      + sizeof(ListSettingsForProtocolResponse_Basecalling::alignment_bed_file_)
      - PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_Basecalling, basecalling_enabled_)>(
          reinterpret_cast<char*>(&basecalling_enabled_),
          reinterpret_cast<char*>(&other->basecalling_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSettingsForProtocolResponse_Basecalling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[54]);
}

// ===================================================================

class ListSettingsForProtocolResponse_Output::_Internal {
 public:
  static const ::minknow_api::protocol_settings::ProtocolSetting& output_location(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_reads_per_file(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_q_data_compression(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_reads_per_file(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_trace_table(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_move_table(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_fast_q(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_raw(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& fast_5_data_compression(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bam_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_min_qscore(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_min_read_length(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& read_filtering_max_read_length(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_raw(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_events(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_read_table(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_raw_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_events_enabled(const ListSettingsForProtocolResponse_Output* msg);
  static const ::minknow_api::protocol_settings::ProtocolSetting& bulk_file_read_table_enabled(const ListSettingsForProtocolResponse_Output* msg);
};

const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::output_location(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->output_location_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_q_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_q_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_q_reads_per_file(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_q_reads_per_file_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_q_data_compression(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_q_data_compression_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_reads_per_file(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_reads_per_file_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_data_trace_table(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_data_trace_table_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_data_move_table(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_data_move_table_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_data_fast_q(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_data_fast_q_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_data_raw(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_data_raw_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::fast_5_data_compression(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->fast_5_data_compression_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bam_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bam_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::read_filtering_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->read_filtering_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::read_filtering_min_qscore(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->read_filtering_min_qscore_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::read_filtering_min_read_length(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->read_filtering_min_read_length_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::read_filtering_max_read_length(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->read_filtering_max_read_length_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_raw(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_raw_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_events(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_events_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_read_table(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_read_table_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_raw_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_raw_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_events_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_events_enabled_;
}
const ::minknow_api::protocol_settings::ProtocolSetting&
ListSettingsForProtocolResponse_Output::_Internal::bulk_file_read_table_enabled(const ListSettingsForProtocolResponse_Output* msg) {
  return *msg->bulk_file_read_table_enabled_;
}
void ListSettingsForProtocolResponse_Output::clear_output_location() {
  if (GetArenaForAllocation() == nullptr && output_location_ != nullptr) {
    delete output_location_;
  }
  output_location_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_q_enabled() {
  if (GetArenaForAllocation() == nullptr && fast_q_enabled_ != nullptr) {
    delete fast_q_enabled_;
  }
  fast_q_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_q_reads_per_file() {
  if (GetArenaForAllocation() == nullptr && fast_q_reads_per_file_ != nullptr) {
    delete fast_q_reads_per_file_;
  }
  fast_q_reads_per_file_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_q_data_compression() {
  if (GetArenaForAllocation() == nullptr && fast_q_data_compression_ != nullptr) {
    delete fast_q_data_compression_;
  }
  fast_q_data_compression_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_enabled() {
  if (GetArenaForAllocation() == nullptr && fast_5_enabled_ != nullptr) {
    delete fast_5_enabled_;
  }
  fast_5_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_reads_per_file() {
  if (GetArenaForAllocation() == nullptr && fast_5_reads_per_file_ != nullptr) {
    delete fast_5_reads_per_file_;
  }
  fast_5_reads_per_file_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_data_trace_table() {
  if (GetArenaForAllocation() == nullptr && fast_5_data_trace_table_ != nullptr) {
    delete fast_5_data_trace_table_;
  }
  fast_5_data_trace_table_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_data_move_table() {
  if (GetArenaForAllocation() == nullptr && fast_5_data_move_table_ != nullptr) {
    delete fast_5_data_move_table_;
  }
  fast_5_data_move_table_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_data_fast_q() {
  if (GetArenaForAllocation() == nullptr && fast_5_data_fast_q_ != nullptr) {
    delete fast_5_data_fast_q_;
  }
  fast_5_data_fast_q_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_data_raw() {
  if (GetArenaForAllocation() == nullptr && fast_5_data_raw_ != nullptr) {
    delete fast_5_data_raw_;
  }
  fast_5_data_raw_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_fast_5_data_compression() {
  if (GetArenaForAllocation() == nullptr && fast_5_data_compression_ != nullptr) {
    delete fast_5_data_compression_;
  }
  fast_5_data_compression_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bam_enabled() {
  if (GetArenaForAllocation() == nullptr && bam_enabled_ != nullptr) {
    delete bam_enabled_;
  }
  bam_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_read_filtering_enabled() {
  if (GetArenaForAllocation() == nullptr && read_filtering_enabled_ != nullptr) {
    delete read_filtering_enabled_;
  }
  read_filtering_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_read_filtering_min_qscore() {
  if (GetArenaForAllocation() == nullptr && read_filtering_min_qscore_ != nullptr) {
    delete read_filtering_min_qscore_;
  }
  read_filtering_min_qscore_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_read_filtering_min_read_length() {
  if (GetArenaForAllocation() == nullptr && read_filtering_min_read_length_ != nullptr) {
    delete read_filtering_min_read_length_;
  }
  read_filtering_min_read_length_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_read_filtering_max_read_length() {
  if (GetArenaForAllocation() == nullptr && read_filtering_max_read_length_ != nullptr) {
    delete read_filtering_max_read_length_;
  }
  read_filtering_max_read_length_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_enabled() {
  if (GetArenaForAllocation() == nullptr && bulk_file_enabled_ != nullptr) {
    delete bulk_file_enabled_;
  }
  bulk_file_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_raw() {
  if (GetArenaForAllocation() == nullptr && bulk_file_raw_ != nullptr) {
    delete bulk_file_raw_;
  }
  bulk_file_raw_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_events() {
  if (GetArenaForAllocation() == nullptr && bulk_file_events_ != nullptr) {
    delete bulk_file_events_;
  }
  bulk_file_events_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_read_table() {
  if (GetArenaForAllocation() == nullptr && bulk_file_read_table_ != nullptr) {
    delete bulk_file_read_table_;
  }
  bulk_file_read_table_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_raw_enabled() {
  if (GetArenaForAllocation() == nullptr && bulk_file_raw_enabled_ != nullptr) {
    delete bulk_file_raw_enabled_;
  }
  bulk_file_raw_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_events_enabled() {
  if (GetArenaForAllocation() == nullptr && bulk_file_events_enabled_ != nullptr) {
    delete bulk_file_events_enabled_;
  }
  bulk_file_events_enabled_ = nullptr;
}
void ListSettingsForProtocolResponse_Output::clear_bulk_file_read_table_enabled() {
  if (GetArenaForAllocation() == nullptr && bulk_file_read_table_enabled_ != nullptr) {
    delete bulk_file_read_table_enabled_;
  }
  bulk_file_read_table_enabled_ = nullptr;
}
ListSettingsForProtocolResponse_Output::ListSettingsForProtocolResponse_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
}
ListSettingsForProtocolResponse_Output::ListSettingsForProtocolResponse_Output(const ListSettingsForProtocolResponse_Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_location()) {
    output_location_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.output_location_);
  } else {
    output_location_ = nullptr;
  }
  if (from._internal_has_fast_q_enabled()) {
    fast_q_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_q_enabled_);
  } else {
    fast_q_enabled_ = nullptr;
  }
  if (from._internal_has_fast_q_reads_per_file()) {
    fast_q_reads_per_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_q_reads_per_file_);
  } else {
    fast_q_reads_per_file_ = nullptr;
  }
  if (from._internal_has_fast_q_data_compression()) {
    fast_q_data_compression_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_q_data_compression_);
  } else {
    fast_q_data_compression_ = nullptr;
  }
  if (from._internal_has_fast_5_enabled()) {
    fast_5_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_enabled_);
  } else {
    fast_5_enabled_ = nullptr;
  }
  if (from._internal_has_fast_5_reads_per_file()) {
    fast_5_reads_per_file_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_reads_per_file_);
  } else {
    fast_5_reads_per_file_ = nullptr;
  }
  if (from._internal_has_fast_5_data_trace_table()) {
    fast_5_data_trace_table_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_data_trace_table_);
  } else {
    fast_5_data_trace_table_ = nullptr;
  }
  if (from._internal_has_fast_5_data_move_table()) {
    fast_5_data_move_table_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_data_move_table_);
  } else {
    fast_5_data_move_table_ = nullptr;
  }
  if (from._internal_has_fast_5_data_fast_q()) {
    fast_5_data_fast_q_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_data_fast_q_);
  } else {
    fast_5_data_fast_q_ = nullptr;
  }
  if (from._internal_has_fast_5_data_raw()) {
    fast_5_data_raw_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_data_raw_);
  } else {
    fast_5_data_raw_ = nullptr;
  }
  if (from._internal_has_fast_5_data_compression()) {
    fast_5_data_compression_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.fast_5_data_compression_);
  } else {
    fast_5_data_compression_ = nullptr;
  }
  if (from._internal_has_bam_enabled()) {
    bam_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bam_enabled_);
  } else {
    bam_enabled_ = nullptr;
  }
  if (from._internal_has_read_filtering_enabled()) {
    read_filtering_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_filtering_enabled_);
  } else {
    read_filtering_enabled_ = nullptr;
  }
  if (from._internal_has_read_filtering_min_qscore()) {
    read_filtering_min_qscore_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_filtering_min_qscore_);
  } else {
    read_filtering_min_qscore_ = nullptr;
  }
  if (from._internal_has_read_filtering_min_read_length()) {
    read_filtering_min_read_length_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_filtering_min_read_length_);
  } else {
    read_filtering_min_read_length_ = nullptr;
  }
  if (from._internal_has_read_filtering_max_read_length()) {
    read_filtering_max_read_length_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.read_filtering_max_read_length_);
  } else {
    read_filtering_max_read_length_ = nullptr;
  }
  if (from._internal_has_bulk_file_enabled()) {
    bulk_file_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_enabled_);
  } else {
    bulk_file_enabled_ = nullptr;
  }
  if (from._internal_has_bulk_file_raw()) {
    bulk_file_raw_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_raw_);
  } else {
    bulk_file_raw_ = nullptr;
  }
  if (from._internal_has_bulk_file_events()) {
    bulk_file_events_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_events_);
  } else {
    bulk_file_events_ = nullptr;
  }
  if (from._internal_has_bulk_file_read_table()) {
    bulk_file_read_table_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_read_table_);
  } else {
    bulk_file_read_table_ = nullptr;
  }
  if (from._internal_has_bulk_file_raw_enabled()) {
    bulk_file_raw_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_raw_enabled_);
  } else {
    bulk_file_raw_enabled_ = nullptr;
  }
  if (from._internal_has_bulk_file_events_enabled()) {
    bulk_file_events_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_events_enabled_);
  } else {
    bulk_file_events_enabled_ = nullptr;
  }
  if (from._internal_has_bulk_file_read_table_enabled()) {
    bulk_file_read_table_enabled_ = new ::minknow_api::protocol_settings::ProtocolSetting(*from.bulk_file_read_table_enabled_);
  } else {
    bulk_file_read_table_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
}

void ListSettingsForProtocolResponse_Output::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bulk_file_read_table_enabled_) -
    reinterpret_cast<char*>(&output_location_)) + sizeof(bulk_file_read_table_enabled_));
}

ListSettingsForProtocolResponse_Output::~ListSettingsForProtocolResponse_Output() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSettingsForProtocolResponse_Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete output_location_;
  if (this != internal_default_instance()) delete fast_q_enabled_;
  if (this != internal_default_instance()) delete fast_q_reads_per_file_;
  if (this != internal_default_instance()) delete fast_q_data_compression_;
  if (this != internal_default_instance()) delete fast_5_enabled_;
  if (this != internal_default_instance()) delete fast_5_reads_per_file_;
  if (this != internal_default_instance()) delete fast_5_data_trace_table_;
  if (this != internal_default_instance()) delete fast_5_data_move_table_;
  if (this != internal_default_instance()) delete fast_5_data_fast_q_;
  if (this != internal_default_instance()) delete fast_5_data_raw_;
  if (this != internal_default_instance()) delete fast_5_data_compression_;
  if (this != internal_default_instance()) delete bam_enabled_;
  if (this != internal_default_instance()) delete read_filtering_enabled_;
  if (this != internal_default_instance()) delete read_filtering_min_qscore_;
  if (this != internal_default_instance()) delete read_filtering_min_read_length_;
  if (this != internal_default_instance()) delete read_filtering_max_read_length_;
  if (this != internal_default_instance()) delete bulk_file_enabled_;
  if (this != internal_default_instance()) delete bulk_file_raw_;
  if (this != internal_default_instance()) delete bulk_file_events_;
  if (this != internal_default_instance()) delete bulk_file_read_table_;
  if (this != internal_default_instance()) delete bulk_file_raw_enabled_;
  if (this != internal_default_instance()) delete bulk_file_events_enabled_;
  if (this != internal_default_instance()) delete bulk_file_read_table_enabled_;
}

void ListSettingsForProtocolResponse_Output::ArenaDtor(void* object) {
  ListSettingsForProtocolResponse_Output* _this = reinterpret_cast< ListSettingsForProtocolResponse_Output* >(object);
  (void)_this;
}
void ListSettingsForProtocolResponse_Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSettingsForProtocolResponse_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSettingsForProtocolResponse_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && output_location_ != nullptr) {
    delete output_location_;
  }
  output_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_q_enabled_ != nullptr) {
    delete fast_q_enabled_;
  }
  fast_q_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_q_reads_per_file_ != nullptr) {
    delete fast_q_reads_per_file_;
  }
  fast_q_reads_per_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_q_data_compression_ != nullptr) {
    delete fast_q_data_compression_;
  }
  fast_q_data_compression_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_enabled_ != nullptr) {
    delete fast_5_enabled_;
  }
  fast_5_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_reads_per_file_ != nullptr) {
    delete fast_5_reads_per_file_;
  }
  fast_5_reads_per_file_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_data_trace_table_ != nullptr) {
    delete fast_5_data_trace_table_;
  }
  fast_5_data_trace_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_data_move_table_ != nullptr) {
    delete fast_5_data_move_table_;
  }
  fast_5_data_move_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_data_fast_q_ != nullptr) {
    delete fast_5_data_fast_q_;
  }
  fast_5_data_fast_q_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_data_raw_ != nullptr) {
    delete fast_5_data_raw_;
  }
  fast_5_data_raw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fast_5_data_compression_ != nullptr) {
    delete fast_5_data_compression_;
  }
  fast_5_data_compression_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bam_enabled_ != nullptr) {
    delete bam_enabled_;
  }
  bam_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_filtering_enabled_ != nullptr) {
    delete read_filtering_enabled_;
  }
  read_filtering_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_filtering_min_qscore_ != nullptr) {
    delete read_filtering_min_qscore_;
  }
  read_filtering_min_qscore_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_filtering_min_read_length_ != nullptr) {
    delete read_filtering_min_read_length_;
  }
  read_filtering_min_read_length_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_filtering_max_read_length_ != nullptr) {
    delete read_filtering_max_read_length_;
  }
  read_filtering_max_read_length_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_enabled_ != nullptr) {
    delete bulk_file_enabled_;
  }
  bulk_file_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_raw_ != nullptr) {
    delete bulk_file_raw_;
  }
  bulk_file_raw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_events_ != nullptr) {
    delete bulk_file_events_;
  }
  bulk_file_events_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_read_table_ != nullptr) {
    delete bulk_file_read_table_;
  }
  bulk_file_read_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_raw_enabled_ != nullptr) {
    delete bulk_file_raw_enabled_;
  }
  bulk_file_raw_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_events_enabled_ != nullptr) {
    delete bulk_file_events_enabled_;
  }
  bulk_file_events_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_file_read_table_enabled_ != nullptr) {
    delete bulk_file_read_table_enabled_;
  }
  bulk_file_read_table_enabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSettingsForProtocolResponse_Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol_settings.ProtocolSetting output_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_q_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_q_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_q_reads_per_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_q_data_compression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_q_data_compression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_reads_per_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_data_trace_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_data_move_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_data_fast_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_raw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_data_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_compression = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_5_data_compression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bam_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_bam_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_filtering_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_filtering_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_filtering_min_qscore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_filtering_min_read_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_filtering_max_read_length(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_enabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_events(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_read_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_raw_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_events_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_file_read_table_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSettingsForProtocolResponse_Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting output_location = 1;
  if (this->_internal_has_output_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::output_location(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_enabled = 2;
  if (this->_internal_has_fast_q_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fast_q_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
  if (this->_internal_has_fast_q_reads_per_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fast_q_reads_per_file(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_data_compression = 4;
  if (this->_internal_has_fast_q_data_compression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fast_q_data_compression(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_enabled = 5;
  if (this->_internal_has_fast_5_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fast_5_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
  if (this->_internal_has_fast_5_reads_per_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fast_5_reads_per_file(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
  if (this->_internal_has_fast_5_data_trace_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fast_5_data_trace_table(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
  if (this->_internal_has_fast_5_data_move_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fast_5_data_move_table(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
  if (this->_internal_has_fast_5_data_fast_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::fast_5_data_fast_q(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_raw = 10;
  if (this->_internal_has_fast_5_data_raw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fast_5_data_raw(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_compression = 11;
  if (this->_internal_has_fast_5_data_compression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fast_5_data_compression(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bam_enabled = 12;
  if (this->_internal_has_bam_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::bam_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_enabled = 13;
  if (this->_internal_has_read_filtering_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::read_filtering_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
  if (this->_internal_has_read_filtering_min_qscore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::read_filtering_min_qscore(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
  if (this->_internal_has_read_filtering_min_read_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::read_filtering_min_read_length(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
  if (this->_internal_has_read_filtering_max_read_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::read_filtering_max_read_length(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_enabled = 17;
  if (this->_internal_has_bulk_file_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::bulk_file_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw = 18;
  if (this->_internal_has_bulk_file_raw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::bulk_file_raw(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events = 19;
  if (this->_internal_has_bulk_file_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::bulk_file_events(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table = 20;
  if (this->_internal_has_bulk_file_read_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::bulk_file_read_table(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
  if (this->_internal_has_bulk_file_raw_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::bulk_file_raw_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
  if (this->_internal_has_bulk_file_events_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bulk_file_events_enabled(this), target, stream);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
  if (this->_internal_has_bulk_file_read_table_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::bulk_file_read_table_enabled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  return target;
}

size_t ListSettingsForProtocolResponse_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol_settings.ProtocolSetting output_location = 1;
  if (this->_internal_has_output_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_location_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_enabled = 2;
  if (this->_internal_has_fast_q_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_q_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_reads_per_file = 3;
  if (this->_internal_has_fast_q_reads_per_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_q_reads_per_file_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_q_data_compression = 4;
  if (this->_internal_has_fast_q_data_compression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_q_data_compression_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_enabled = 5;
  if (this->_internal_has_fast_5_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_reads_per_file = 6;
  if (this->_internal_has_fast_5_reads_per_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_reads_per_file_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_trace_table = 7;
  if (this->_internal_has_fast_5_data_trace_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_data_trace_table_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_move_table = 8;
  if (this->_internal_has_fast_5_data_move_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_data_move_table_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_fast_q = 9;
  if (this->_internal_has_fast_5_data_fast_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_data_fast_q_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_raw = 10;
  if (this->_internal_has_fast_5_data_raw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_data_raw_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting fast_5_data_compression = 11;
  if (this->_internal_has_fast_5_data_compression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fast_5_data_compression_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bam_enabled = 12;
  if (this->_internal_has_bam_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bam_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_enabled = 13;
  if (this->_internal_has_read_filtering_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_filtering_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_qscore = 14;
  if (this->_internal_has_read_filtering_min_qscore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_filtering_min_qscore_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_min_read_length = 15;
  if (this->_internal_has_read_filtering_min_read_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_filtering_min_read_length_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting read_filtering_max_read_length = 16;
  if (this->_internal_has_read_filtering_max_read_length()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_filtering_max_read_length_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_enabled = 17;
  if (this->_internal_has_bulk_file_enabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw = 18;
  if (this->_internal_has_bulk_file_raw()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_raw_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events = 19;
  if (this->_internal_has_bulk_file_events()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_events_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table = 20;
  if (this->_internal_has_bulk_file_read_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_read_table_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_raw_enabled = 21;
  if (this->_internal_has_bulk_file_raw_enabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_raw_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_events_enabled = 22;
  if (this->_internal_has_bulk_file_events_enabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_events_enabled_);
  }

  // .minknow_api.protocol_settings.ProtocolSetting bulk_file_read_table_enabled = 23;
  if (this->_internal_has_bulk_file_read_table_enabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_file_read_table_enabled_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSettingsForProtocolResponse_Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSettingsForProtocolResponse_Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSettingsForProtocolResponse_Output::GetClassData() const { return &_class_data_; }

void ListSettingsForProtocolResponse_Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSettingsForProtocolResponse_Output *>(to)->MergeFrom(
      static_cast<const ListSettingsForProtocolResponse_Output &>(from));
}


void ListSettingsForProtocolResponse_Output::MergeFrom(const ListSettingsForProtocolResponse_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_output_location()) {
    _internal_mutable_output_location()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_output_location());
  }
  if (from._internal_has_fast_q_enabled()) {
    _internal_mutable_fast_q_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_q_enabled());
  }
  if (from._internal_has_fast_q_reads_per_file()) {
    _internal_mutable_fast_q_reads_per_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_q_reads_per_file());
  }
  if (from._internal_has_fast_q_data_compression()) {
    _internal_mutable_fast_q_data_compression()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_q_data_compression());
  }
  if (from._internal_has_fast_5_enabled()) {
    _internal_mutable_fast_5_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_enabled());
  }
  if (from._internal_has_fast_5_reads_per_file()) {
    _internal_mutable_fast_5_reads_per_file()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_reads_per_file());
  }
  if (from._internal_has_fast_5_data_trace_table()) {
    _internal_mutable_fast_5_data_trace_table()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_data_trace_table());
  }
  if (from._internal_has_fast_5_data_move_table()) {
    _internal_mutable_fast_5_data_move_table()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_data_move_table());
  }
  if (from._internal_has_fast_5_data_fast_q()) {
    _internal_mutable_fast_5_data_fast_q()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_data_fast_q());
  }
  if (from._internal_has_fast_5_data_raw()) {
    _internal_mutable_fast_5_data_raw()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_data_raw());
  }
  if (from._internal_has_fast_5_data_compression()) {
    _internal_mutable_fast_5_data_compression()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_fast_5_data_compression());
  }
  if (from._internal_has_bam_enabled()) {
    _internal_mutable_bam_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bam_enabled());
  }
  if (from._internal_has_read_filtering_enabled()) {
    _internal_mutable_read_filtering_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_filtering_enabled());
  }
  if (from._internal_has_read_filtering_min_qscore()) {
    _internal_mutable_read_filtering_min_qscore()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_filtering_min_qscore());
  }
  if (from._internal_has_read_filtering_min_read_length()) {
    _internal_mutable_read_filtering_min_read_length()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_filtering_min_read_length());
  }
  if (from._internal_has_read_filtering_max_read_length()) {
    _internal_mutable_read_filtering_max_read_length()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_read_filtering_max_read_length());
  }
  if (from._internal_has_bulk_file_enabled()) {
    _internal_mutable_bulk_file_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_enabled());
  }
  if (from._internal_has_bulk_file_raw()) {
    _internal_mutable_bulk_file_raw()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_raw());
  }
  if (from._internal_has_bulk_file_events()) {
    _internal_mutable_bulk_file_events()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_events());
  }
  if (from._internal_has_bulk_file_read_table()) {
    _internal_mutable_bulk_file_read_table()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_read_table());
  }
  if (from._internal_has_bulk_file_raw_enabled()) {
    _internal_mutable_bulk_file_raw_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_raw_enabled());
  }
  if (from._internal_has_bulk_file_events_enabled()) {
    _internal_mutable_bulk_file_events_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_events_enabled());
  }
  if (from._internal_has_bulk_file_read_table_enabled()) {
    _internal_mutable_bulk_file_read_table_enabled()->::minknow_api::protocol_settings::ProtocolSetting::MergeFrom(from._internal_bulk_file_read_table_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSettingsForProtocolResponse_Output::CopyFrom(const ListSettingsForProtocolResponse_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListSettingsForProtocolResponse.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSettingsForProtocolResponse_Output::IsInitialized() const {
  return true;
}

void ListSettingsForProtocolResponse_Output::InternalSwap(ListSettingsForProtocolResponse_Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_Output, bulk_file_read_table_enabled_)
      + sizeof(ListSettingsForProtocolResponse_Output::bulk_file_read_table_enabled_)
      - PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse_Output, output_location_)>(
          reinterpret_cast<char*>(&output_location_),
          reinterpret_cast<char*>(&other->output_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSettingsForProtocolResponse_Output::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[55]);
}

// ===================================================================

class ListSettingsForProtocolResponse::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolIdentifierComponents& protocol(const ListSettingsForProtocolResponse* msg);
  static const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions& run_options(const ListSettingsForProtocolResponse* msg);
  static const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling& basecalling(const ListSettingsForProtocolResponse* msg);
  static const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output& output(const ListSettingsForProtocolResponse* msg);
};

const ::minknow_api::protocol::ProtocolIdentifierComponents&
ListSettingsForProtocolResponse::_Internal::protocol(const ListSettingsForProtocolResponse* msg) {
  return *msg->protocol_;
}
const ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions&
ListSettingsForProtocolResponse::_Internal::run_options(const ListSettingsForProtocolResponse* msg) {
  return *msg->run_options_;
}
const ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling&
ListSettingsForProtocolResponse::_Internal::basecalling(const ListSettingsForProtocolResponse* msg) {
  return *msg->basecalling_;
}
const ::minknow_api::protocol::ListSettingsForProtocolResponse_Output&
ListSettingsForProtocolResponse::_Internal::output(const ListSettingsForProtocolResponse* msg) {
  return *msg->output_;
}
void ListSettingsForProtocolResponse::clear_protocol_settings() {
  protocol_settings_.Clear();
}
ListSettingsForProtocolResponse::ListSettingsForProtocolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  protocol_settings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ListSettingsForProtocolResponse)
}
ListSettingsForProtocolResponse::ListSettingsForProtocolResponse(const ListSettingsForProtocolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protocol_settings_(from.protocol_settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_protocol()) {
    protocol_ = new ::minknow_api::protocol::ProtocolIdentifierComponents(*from.protocol_);
  } else {
    protocol_ = nullptr;
  }
  if (from._internal_has_run_options()) {
    run_options_ = new ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions(*from.run_options_);
  } else {
    run_options_ = nullptr;
  }
  if (from._internal_has_basecalling()) {
    basecalling_ = new ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling(*from.basecalling_);
  } else {
    basecalling_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::minknow_api::protocol::ListSettingsForProtocolResponse_Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ListSettingsForProtocolResponse)
}

void ListSettingsForProtocolResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(output_));
}

ListSettingsForProtocolResponse::~ListSettingsForProtocolResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ListSettingsForProtocolResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSettingsForProtocolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete protocol_;
  if (this != internal_default_instance()) delete run_options_;
  if (this != internal_default_instance()) delete basecalling_;
  if (this != internal_default_instance()) delete output_;
}

void ListSettingsForProtocolResponse::ArenaDtor(void* object) {
  ListSettingsForProtocolResponse* _this = reinterpret_cast< ListSettingsForProtocolResponse* >(object);
  (void)_this;
}
void ListSettingsForProtocolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSettingsForProtocolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSettingsForProtocolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ListSettingsForProtocolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_settings_.Clear();
  if (GetArenaForAllocation() == nullptr && protocol_ != nullptr) {
    delete protocol_;
  }
  protocol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && run_options_ != nullptr) {
    delete run_options_;
  }
  run_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && basecalling_ != nullptr) {
    delete basecalling_;
  }
  basecalling_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSettingsForProtocolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.ProtocolIdentifierComponents protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions run_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling basecalling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecalling(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ListSettingsForProtocolResponse.Output output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protocol_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSettingsForProtocolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ListSettingsForProtocolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolIdentifierComponents protocol = 1;
  if (this->_internal_has_protocol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::protocol(this), target, stream);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions run_options = 2;
  if (this->_internal_has_run_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::run_options(this), target, stream);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling basecalling = 3;
  if (this->_internal_has_basecalling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::basecalling(this), target, stream);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Output output = 4;
  if (this->_internal_has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output(this), target, stream);
  }

  // repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protocol_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_protocol_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ListSettingsForProtocolResponse)
  return target;
}

size_t ListSettingsForProtocolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ListSettingsForProtocolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.protocol_settings.ProtocolSetting protocol_settings = 5;
  total_size += 1UL * this->_internal_protocol_settings_size();
  for (const auto& msg : this->protocol_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minknow_api.protocol.ProtocolIdentifierComponents protocol = 1;
  if (this->_internal_has_protocol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocol_);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.RunOptions run_options = 2;
  if (this->_internal_has_run_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_options_);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Basecalling basecalling = 3;
  if (this->_internal_has_basecalling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basecalling_);
  }

  // .minknow_api.protocol.ListSettingsForProtocolResponse.Output output = 4;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSettingsForProtocolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSettingsForProtocolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSettingsForProtocolResponse::GetClassData() const { return &_class_data_; }

void ListSettingsForProtocolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSettingsForProtocolResponse *>(to)->MergeFrom(
      static_cast<const ListSettingsForProtocolResponse &>(from));
}


void ListSettingsForProtocolResponse::MergeFrom(const ListSettingsForProtocolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ListSettingsForProtocolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocol_settings_.MergeFrom(from.protocol_settings_);
  if (from._internal_has_protocol()) {
    _internal_mutable_protocol()->::minknow_api::protocol::ProtocolIdentifierComponents::MergeFrom(from._internal_protocol());
  }
  if (from._internal_has_run_options()) {
    _internal_mutable_run_options()->::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions::MergeFrom(from._internal_run_options());
  }
  if (from._internal_has_basecalling()) {
    _internal_mutable_basecalling()->::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling::MergeFrom(from._internal_basecalling());
  }
  if (from._internal_has_output()) {
    _internal_mutable_output()->::minknow_api::protocol::ListSettingsForProtocolResponse_Output::MergeFrom(from._internal_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSettingsForProtocolResponse::CopyFrom(const ListSettingsForProtocolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ListSettingsForProtocolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSettingsForProtocolResponse::IsInitialized() const {
  return true;
}

void ListSettingsForProtocolResponse::InternalSwap(ListSettingsForProtocolResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  protocol_settings_.InternalSwap(&other->protocol_settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse, output_)
      + sizeof(ListSettingsForProtocolResponse::output_)
      - PROTOBUF_FIELD_OFFSET(ListSettingsForProtocolResponse, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSettingsForProtocolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[56]);
}

// ===================================================================

class AssociatePostProcessingAnalysisRequest::_Internal {
 public:
  static const ::minknow_api::basecaller::StartRequest& start_request(const AssociatePostProcessingAnalysisRequest* msg);
};

const ::minknow_api::basecaller::StartRequest&
AssociatePostProcessingAnalysisRequest::_Internal::start_request(const AssociatePostProcessingAnalysisRequest* msg) {
  return *msg->start_request_;
}
void AssociatePostProcessingAnalysisRequest::clear_start_request() {
  if (GetArenaForAllocation() == nullptr && start_request_ != nullptr) {
    delete start_request_;
  }
  start_request_ = nullptr;
}
AssociatePostProcessingAnalysisRequest::AssociatePostProcessingAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
}
AssociatePostProcessingAnalysisRequest::AssociatePostProcessingAnalysisRequest(const AssociatePostProcessingAnalysisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run_id().empty()) {
    run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_request()) {
    start_request_ = new ::minknow_api::basecaller::StartRequest(*from.start_request_);
  } else {
    start_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
}

void AssociatePostProcessingAnalysisRequest::SharedCtor() {
run_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_request_ = nullptr;
}

AssociatePostProcessingAnalysisRequest::~AssociatePostProcessingAnalysisRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociatePostProcessingAnalysisRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_request_;
}

void AssociatePostProcessingAnalysisRequest::ArenaDtor(void* object) {
  AssociatePostProcessingAnalysisRequest* _this = reinterpret_cast< AssociatePostProcessingAnalysisRequest* >(object);
  (void)_this;
}
void AssociatePostProcessingAnalysisRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociatePostProcessingAnalysisRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociatePostProcessingAnalysisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_request_ != nullptr) {
    delete start_request_;
  }
  start_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociatePostProcessingAnalysisRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_run_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.basecaller.StartRequest start_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociatePostProcessingAnalysisRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.AssociatePostProcessingAnalysisRequest.run_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_run_id(), target);
  }

  // .minknow_api.basecaller.StartRequest start_request = 2;
  if (this->_internal_has_start_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  return target;
}

size_t AssociatePostProcessingAnalysisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_id = 1;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // .minknow_api.basecaller.StartRequest start_request = 2;
  if (this->_internal_has_start_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociatePostProcessingAnalysisRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociatePostProcessingAnalysisRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociatePostProcessingAnalysisRequest::GetClassData() const { return &_class_data_; }

void AssociatePostProcessingAnalysisRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociatePostProcessingAnalysisRequest *>(to)->MergeFrom(
      static_cast<const AssociatePostProcessingAnalysisRequest &>(from));
}


void AssociatePostProcessingAnalysisRequest::MergeFrom(const AssociatePostProcessingAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_run_id().empty()) {
    _internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_has_start_request()) {
    _internal_mutable_start_request()->::minknow_api::basecaller::StartRequest::MergeFrom(from._internal_start_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociatePostProcessingAnalysisRequest::CopyFrom(const AssociatePostProcessingAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.AssociatePostProcessingAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociatePostProcessingAnalysisRequest::IsInitialized() const {
  return true;
}

void AssociatePostProcessingAnalysisRequest::InternalSwap(AssociatePostProcessingAnalysisRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_id_, lhs_arena,
      &other->run_id_, rhs_arena
  );
  swap(start_request_, other->start_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociatePostProcessingAnalysisRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[57]);
}

// ===================================================================

class AssociatePostProcessingAnalysisResponse::_Internal {
 public:
};

AssociatePostProcessingAnalysisResponse::AssociatePostProcessingAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
}
AssociatePostProcessingAnalysisResponse::AssociatePostProcessingAnalysisResponse(const AssociatePostProcessingAnalysisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
}

void AssociatePostProcessingAnalysisResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssociatePostProcessingAnalysisResponse::~AssociatePostProcessingAnalysisResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssociatePostProcessingAnalysisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssociatePostProcessingAnalysisResponse::ArenaDtor(void* object) {
  AssociatePostProcessingAnalysisResponse* _this = reinterpret_cast< AssociatePostProcessingAnalysisResponse* >(object);
  (void)_this;
}
void AssociatePostProcessingAnalysisResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociatePostProcessingAnalysisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssociatePostProcessingAnalysisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociatePostProcessingAnalysisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociatePostProcessingAnalysisResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.AssociatePostProcessingAnalysisResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  return target;
}

size_t AssociatePostProcessingAnalysisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssociatePostProcessingAnalysisResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssociatePostProcessingAnalysisResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssociatePostProcessingAnalysisResponse::GetClassData() const { return &_class_data_; }

void AssociatePostProcessingAnalysisResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssociatePostProcessingAnalysisResponse *>(to)->MergeFrom(
      static_cast<const AssociatePostProcessingAnalysisResponse &>(from));
}


void AssociatePostProcessingAnalysisResponse::MergeFrom(const AssociatePostProcessingAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssociatePostProcessingAnalysisResponse::CopyFrom(const AssociatePostProcessingAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.AssociatePostProcessingAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociatePostProcessingAnalysisResponse::IsInitialized() const {
  return true;
}

void AssociatePostProcessingAnalysisResponse::InternalSwap(AssociatePostProcessingAnalysisResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociatePostProcessingAnalysisResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[58]);
}

// ===================================================================

class ClearProtocolHistoryDataRequest::_Internal {
 public:
};

ClearProtocolHistoryDataRequest::ClearProtocolHistoryDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  protocol_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ClearProtocolHistoryDataRequest)
}
ClearProtocolHistoryDataRequest::ClearProtocolHistoryDataRequest(const ClearProtocolHistoryDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protocol_ids_(from.protocol_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ClearProtocolHistoryDataRequest)
}

void ClearProtocolHistoryDataRequest::SharedCtor() {
}

ClearProtocolHistoryDataRequest::~ClearProtocolHistoryDataRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearProtocolHistoryDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearProtocolHistoryDataRequest::ArenaDtor(void* object) {
  ClearProtocolHistoryDataRequest* _this = reinterpret_cast< ClearProtocolHistoryDataRequest* >(object);
  (void)_this;
}
void ClearProtocolHistoryDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearProtocolHistoryDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearProtocolHistoryDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearProtocolHistoryDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string protocol_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_protocol_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearProtocolHistoryDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string protocol_ids = 1;
  for (int i = 0, n = this->_internal_protocol_ids_size(); i < n; i++) {
    const auto& s = this->_internal_protocol_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.protocol.ClearProtocolHistoryDataRequest.protocol_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  return target;
}

size_t ClearProtocolHistoryDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string protocol_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(protocol_ids_.size());
  for (int i = 0, n = protocol_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      protocol_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearProtocolHistoryDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearProtocolHistoryDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearProtocolHistoryDataRequest::GetClassData() const { return &_class_data_; }

void ClearProtocolHistoryDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearProtocolHistoryDataRequest *>(to)->MergeFrom(
      static_cast<const ClearProtocolHistoryDataRequest &>(from));
}


void ClearProtocolHistoryDataRequest::MergeFrom(const ClearProtocolHistoryDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocol_ids_.MergeFrom(from.protocol_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearProtocolHistoryDataRequest::CopyFrom(const ClearProtocolHistoryDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ClearProtocolHistoryDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearProtocolHistoryDataRequest::IsInitialized() const {
  return true;
}

void ClearProtocolHistoryDataRequest::InternalSwap(ClearProtocolHistoryDataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  protocol_ids_.InternalSwap(&other->protocol_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearProtocolHistoryDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[59]);
}

// ===================================================================

class ClearProtocolHistoryDataResponse::_Internal {
 public:
};

ClearProtocolHistoryDataResponse::ClearProtocolHistoryDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ClearProtocolHistoryDataResponse)
}
ClearProtocolHistoryDataResponse::ClearProtocolHistoryDataResponse(const ClearProtocolHistoryDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ClearProtocolHistoryDataResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearProtocolHistoryDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearProtocolHistoryDataResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClearProtocolHistoryDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[60]);
}

// ===================================================================

class ProtocolPhaseManagementRequest_Capabilities::_Internal {
 public:
};

ProtocolPhaseManagementRequest_Capabilities::ProtocolPhaseManagementRequest_Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
}
ProtocolPhaseManagementRequest_Capabilities::ProtocolPhaseManagementRequest_Capabilities(const ProtocolPhaseManagementRequest_Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_pause_, &from.can_pause_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_trigger_mux_scan_) -
    reinterpret_cast<char*>(&can_pause_)) + sizeof(can_trigger_mux_scan_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
}

void ProtocolPhaseManagementRequest_Capabilities::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&can_pause_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_trigger_mux_scan_) -
    reinterpret_cast<char*>(&can_pause_)) + sizeof(can_trigger_mux_scan_));
}

ProtocolPhaseManagementRequest_Capabilities::~ProtocolPhaseManagementRequest_Capabilities() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolPhaseManagementRequest_Capabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolPhaseManagementRequest_Capabilities::ArenaDtor(void* object) {
  ProtocolPhaseManagementRequest_Capabilities* _this = reinterpret_cast< ProtocolPhaseManagementRequest_Capabilities* >(object);
  (void)_this;
}
void ProtocolPhaseManagementRequest_Capabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolPhaseManagementRequest_Capabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolPhaseManagementRequest_Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&can_pause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_trigger_mux_scan_) -
      reinterpret_cast<char*>(&can_pause_)) + sizeof(can_trigger_mux_scan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolPhaseManagementRequest_Capabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_pause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          can_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_trigger_mux_scan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          can_trigger_mux_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolPhaseManagementRequest_Capabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_pause = 1;
  if (this->_internal_can_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_pause(), target);
  }

  // bool can_trigger_mux_scan = 2;
  if (this->_internal_can_trigger_mux_scan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_trigger_mux_scan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  return target;
}

size_t ProtocolPhaseManagementRequest_Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_pause = 1;
  if (this->_internal_can_pause() != 0) {
    total_size += 1 + 1;
  }

  // bool can_trigger_mux_scan = 2;
  if (this->_internal_can_trigger_mux_scan() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolPhaseManagementRequest_Capabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolPhaseManagementRequest_Capabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolPhaseManagementRequest_Capabilities::GetClassData() const { return &_class_data_; }

void ProtocolPhaseManagementRequest_Capabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolPhaseManagementRequest_Capabilities *>(to)->MergeFrom(
      static_cast<const ProtocolPhaseManagementRequest_Capabilities &>(from));
}


void ProtocolPhaseManagementRequest_Capabilities::MergeFrom(const ProtocolPhaseManagementRequest_Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_can_pause() != 0) {
    _internal_set_can_pause(from._internal_can_pause());
  }
  if (from._internal_can_trigger_mux_scan() != 0) {
    _internal_set_can_trigger_mux_scan(from._internal_can_trigger_mux_scan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolPhaseManagementRequest_Capabilities::CopyFrom(const ProtocolPhaseManagementRequest_Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolPhaseManagementRequest_Capabilities::IsInitialized() const {
  return true;
}

void ProtocolPhaseManagementRequest_Capabilities::InternalSwap(ProtocolPhaseManagementRequest_Capabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolPhaseManagementRequest_Capabilities, can_trigger_mux_scan_)
      + sizeof(ProtocolPhaseManagementRequest_Capabilities::can_trigger_mux_scan_)
      - PROTOBUF_FIELD_OFFSET(ProtocolPhaseManagementRequest_Capabilities, can_pause_)>(
          reinterpret_cast<char*>(&can_pause_),
          reinterpret_cast<char*>(&other->can_pause_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolPhaseManagementRequest_Capabilities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[61]);
}

// ===================================================================

class ProtocolPhaseManagementRequest::_Internal {
 public:
  static const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities& set_capabilities(const ProtocolPhaseManagementRequest* msg);
};

const ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities&
ProtocolPhaseManagementRequest::_Internal::set_capabilities(const ProtocolPhaseManagementRequest* msg) {
  return *msg->set_capabilities_;
}
ProtocolPhaseManagementRequest::ProtocolPhaseManagementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolPhaseManagementRequest)
}
ProtocolPhaseManagementRequest::ProtocolPhaseManagementRequest(const ProtocolPhaseManagementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_set_capabilities()) {
    set_capabilities_ = new ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities(*from.set_capabilities_);
  } else {
    set_capabilities_ = nullptr;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolPhaseManagementRequest)
}

void ProtocolPhaseManagementRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&set_capabilities_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&set_capabilities_)) + sizeof(phase_));
}

ProtocolPhaseManagementRequest::~ProtocolPhaseManagementRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolPhaseManagementRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolPhaseManagementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete set_capabilities_;
}

void ProtocolPhaseManagementRequest::ArenaDtor(void* object) {
  ProtocolPhaseManagementRequest* _this = reinterpret_cast< ProtocolPhaseManagementRequest* >(object);
  (void)_this;
}
void ProtocolPhaseManagementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolPhaseManagementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolPhaseManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolPhaseManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && set_capabilities_ != nullptr) {
    delete set_capabilities_;
  }
  set_capabilities_ = nullptr;
  phase_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolPhaseManagementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities set_capabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolPhase phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::minknow_api::protocol::ProtocolPhase>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolPhaseManagementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolPhaseManagementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities set_capabilities = 1;
  if (this->_internal_has_set_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::set_capabilities(this), target, stream);
  }

  // .minknow_api.protocol.ProtocolPhase phase = 2;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolPhaseManagementRequest)
  return target;
}

size_t ProtocolPhaseManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolPhaseManagementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol.ProtocolPhaseManagementRequest.Capabilities set_capabilities = 1;
  if (this->_internal_has_set_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_capabilities_);
  }

  // .minknow_api.protocol.ProtocolPhase phase = 2;
  if (this->_internal_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolPhaseManagementRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolPhaseManagementRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolPhaseManagementRequest::GetClassData() const { return &_class_data_; }

void ProtocolPhaseManagementRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolPhaseManagementRequest *>(to)->MergeFrom(
      static_cast<const ProtocolPhaseManagementRequest &>(from));
}


void ProtocolPhaseManagementRequest::MergeFrom(const ProtocolPhaseManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolPhaseManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_set_capabilities()) {
    _internal_mutable_set_capabilities()->::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities::MergeFrom(from._internal_set_capabilities());
  }
  if (from._internal_phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolPhaseManagementRequest::CopyFrom(const ProtocolPhaseManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolPhaseManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolPhaseManagementRequest::IsInitialized() const {
  return true;
}

void ProtocolPhaseManagementRequest::InternalSwap(ProtocolPhaseManagementRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolPhaseManagementRequest, phase_)
      + sizeof(ProtocolPhaseManagementRequest::phase_)
      - PROTOBUF_FIELD_OFFSET(ProtocolPhaseManagementRequest, set_capabilities_)>(
          reinterpret_cast<char*>(&set_capabilities_),
          reinterpret_cast<char*>(&other->set_capabilities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolPhaseManagementRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[62]);
}

// ===================================================================

class ProtocolPhaseManagementResponse::_Internal {
 public:
};

ProtocolPhaseManagementResponse::ProtocolPhaseManagementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.protocol.ProtocolPhaseManagementResponse)
}
ProtocolPhaseManagementResponse::ProtocolPhaseManagementResponse(const ProtocolPhaseManagementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.protocol.ProtocolPhaseManagementResponse)
}

void ProtocolPhaseManagementResponse::SharedCtor() {
action_ = 0;
}

ProtocolPhaseManagementResponse::~ProtocolPhaseManagementResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.protocol.ProtocolPhaseManagementResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolPhaseManagementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolPhaseManagementResponse::ArenaDtor(void* object) {
  ProtocolPhaseManagementResponse* _this = reinterpret_cast< ProtocolPhaseManagementResponse* >(object);
  (void)_this;
}
void ProtocolPhaseManagementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolPhaseManagementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolPhaseManagementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.protocol.ProtocolPhaseManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolPhaseManagementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.protocol.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::minknow_api::protocol::Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolPhaseManagementResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.protocol.ProtocolPhaseManagementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.protocol.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.protocol.ProtocolPhaseManagementResponse)
  return target;
}

size_t ProtocolPhaseManagementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.protocol.ProtocolPhaseManagementResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.protocol.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolPhaseManagementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolPhaseManagementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolPhaseManagementResponse::GetClassData() const { return &_class_data_; }

void ProtocolPhaseManagementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolPhaseManagementResponse *>(to)->MergeFrom(
      static_cast<const ProtocolPhaseManagementResponse &>(from));
}


void ProtocolPhaseManagementResponse::MergeFrom(const ProtocolPhaseManagementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.protocol.ProtocolPhaseManagementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolPhaseManagementResponse::CopyFrom(const ProtocolPhaseManagementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.protocol.ProtocolPhaseManagementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolPhaseManagementResponse::IsInitialized() const {
  return true;
}

void ProtocolPhaseManagementResponse::InternalSwap(ProtocolPhaseManagementResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolPhaseManagementResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fprotocol_2eproto_getter, &descriptor_table_minknow_5fapi_2fprotocol_2eproto_once,
      file_level_metadata_minknow_5fapi_2fprotocol_2eproto[63]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::BarcodeUserData* Arena::CreateMaybeMessage< ::minknow_api::protocol::BarcodeUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::BarcodeUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolRunUserInfo* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolRunUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolRunUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::StartProtocolRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::StartProtocolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::StartProtocolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::StartProtocolResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::StartProtocolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::StartProtocolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::StopProtocolRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::StopProtocolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::StopProtocolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::StopProtocolResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::StopProtocolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::StopProtocolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::PauseProtocolRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::PauseProtocolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::PauseProtocolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::PauseProtocolResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::PauseProtocolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::PauseProtocolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ResumeProtocolRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ResumeProtocolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ResumeProtocolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ResumeProtocolResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ResumeProtocolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ResumeProtocolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::TriggerMuxScanRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::TriggerMuxScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::TriggerMuxScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::TriggerMuxScanResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::TriggerMuxScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::TriggerMuxScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolsRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolInfo_TagValue* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolInfo_TagValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolInfo_TagValue >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolInfo_TagExtractionResult* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolInfo_TagExtractionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolInfo_TagExtractionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolInfo_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolInfo* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolsResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::WaitForFinishedRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::WaitForFinishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::WaitForFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetRunInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetRunInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetRunInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::Epi2meWorkflowReference* Arena::CreateMaybeMessage< ::minknow_api::protocol::Epi2meWorkflowReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::Epi2meWorkflowReference >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::AssociatedPostProcessingAnalysis* Arena::CreateMaybeMessage< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::AssociatedPostProcessingAnalysis >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::PlatformQcResult* Arena::CreateMaybeMessage< ::minknow_api::protocol::PlatformQcResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::PlatformQcResult >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolRunInfo* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolRunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolRunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::FilteringInfo_PlatformQcFilter* Arena::CreateMaybeMessage< ::minknow_api::protocol::FilteringInfo_PlatformQcFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::FilteringInfo_PlatformQcFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::FilteringInfo* Arena::CreateMaybeMessage< ::minknow_api::protocol::FilteringInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::FilteringInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolRunsRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolRunsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolRunsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolRunsResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolRunsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolRunsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetCurrentProtocolRunRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetCurrentProtocolRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetCurrentProtocolRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetCurrentProtocolRunResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetCurrentProtocolRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetCurrentProtocolRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::WatchCurrentProtocolRunRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::WatchCurrentProtocolRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::WatchCurrentProtocolRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetContextInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetContextInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetContextInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetContextInfoResponse_ContextInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetContextInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetContextInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetContextInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetContextInfoRequest_ContextInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetContextInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetContextInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetContextInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetContextInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetContextInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetContextInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetProtocolPurposeRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetProtocolPurposeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetProtocolPurposeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::GetProtocolPurposeResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::GetProtocolPurposeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::GetProtocolPurposeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetProtocolPurposeRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetProtocolPurposeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetProtocolPurposeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetProtocolPurposeResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetProtocolPurposeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetProtocolPurposeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::AddEpi2meWorkflowRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::AddEpi2meWorkflowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::AddEpi2meWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::AddEpi2meWorkflowResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::AddEpi2meWorkflowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::AddEpi2meWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolGroupIdsRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolGroupIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolGroupIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListProtocolGroupIdsResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListProtocolGroupIdsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListProtocolGroupIdsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::BeginHardwareCheckRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::BeginHardwareCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::BeginHardwareCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::BeginHardwareCheckResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::BeginHardwareCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::BeginHardwareCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::BeginPlatformQcRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::BeginPlatformQcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::BeginPlatformQcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::BeginPlatformQcResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::BeginPlatformQcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::BeginPlatformQcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetPlatformQcResultRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetPlatformQcResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetPlatformQcResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::SetPlatformQcResultResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::SetPlatformQcResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::SetPlatformQcResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolIdentifierComponents* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolIdentifierComponents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolIdentifierComponents >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListSettingsForProtocolRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListSettingsForProtocolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListSettingsForProtocolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListSettingsForProtocolResponse_RunOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListSettingsForProtocolResponse_Basecalling >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListSettingsForProtocolResponse_Output* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListSettingsForProtocolResponse_Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListSettingsForProtocolResponse_Output >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ListSettingsForProtocolResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ListSettingsForProtocolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ListSettingsForProtocolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::AssociatePostProcessingAnalysisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::AssociatePostProcessingAnalysisResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ClearProtocolHistoryDataRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ClearProtocolHistoryDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ClearProtocolHistoryDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ClearProtocolHistoryDataResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ClearProtocolHistoryDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ClearProtocolHistoryDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolPhaseManagementRequest_Capabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolPhaseManagementRequest* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolPhaseManagementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolPhaseManagementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::protocol::ProtocolPhaseManagementResponse* Arena::CreateMaybeMessage< ::minknow_api::protocol::ProtocolPhaseManagementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::protocol::ProtocolPhaseManagementResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
