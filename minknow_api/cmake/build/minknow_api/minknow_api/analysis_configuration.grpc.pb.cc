// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minknow_api/analysis_configuration.proto

#include "minknow_api/analysis_configuration.pb.h"
#include "minknow_api/analysis_configuration.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minknow_api {
namespace analysis_configuration {

static const char* AnalysisConfigurationService_method_names[] = {
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_analysis_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/reset_analysis_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_analysis_enabled_state",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_channel_states_desc",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_summary",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_basecaller_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/preload_basecaller_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_basecaller_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_pore_type_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_pore_type_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/set_writer_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_writer_configuration",
  "/minknow_api.analysis_configuration.AnalysisConfigurationService/get_read_classifications",
};

std::unique_ptr< AnalysisConfigurationService::Stub> AnalysisConfigurationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AnalysisConfigurationService::Stub> stub(new AnalysisConfigurationService::Stub(channel, options));
  return stub;
}

AnalysisConfigurationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_analysis_configuration_(AnalysisConfigurationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_analysis_configuration_(AnalysisConfigurationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reset_analysis_configuration_(AnalysisConfigurationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_analysis_enabled_state_(AnalysisConfigurationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_channel_states_desc_(AnalysisConfigurationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_summary_(AnalysisConfigurationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_basecaller_configuration_(AnalysisConfigurationService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_preload_basecaller_configuration_(AnalysisConfigurationService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_basecaller_configuration_(AnalysisConfigurationService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_pore_type_configuration_(AnalysisConfigurationService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_pore_type_configuration_(AnalysisConfigurationService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_writer_configuration_(AnalysisConfigurationService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_writer_configuration_(AnalysisConfigurationService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_read_classifications_(AnalysisConfigurationService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AnalysisConfigurationService::Stub::get_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest& request, ::minknow_api::analysis_configuration::AnalysisConfiguration* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::AnalysisConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_analysis_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::AnalysisConfiguration* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::AnalysisConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_analysis_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::AnalysisConfiguration* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_analysis_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::AnalysisConfiguration>* AnalysisConfigurationService::Stub::PrepareAsyncget_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::AnalysisConfiguration, ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_analysis_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::AnalysisConfiguration>* AnalysisConfigurationService::Stub::Asyncget_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_analysis_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::set_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration& request, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::AnalysisConfiguration, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_analysis_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::set_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration* request, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::AnalysisConfiguration, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_analysis_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::set_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration* request, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_analysis_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncset_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse, ::minknow_api::analysis_configuration::AnalysisConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_analysis_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncset_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_analysis_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::reset_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest& request, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reset_analysis_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::reset_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_analysis_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::reset_analysis_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reset_analysis_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncreset_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reset_analysis_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncreset_analysis_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreset_analysis_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::set_analysis_enabled_state(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest& request, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_analysis_enabled_state_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::set_analysis_enabled_state(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* request, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_analysis_enabled_state_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::set_analysis_enabled_state(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* request, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_analysis_enabled_state_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse>* AnalysisConfigurationService::Stub::PrepareAsyncset_analysis_enabled_stateRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_analysis_enabled_state_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse>* AnalysisConfigurationService::Stub::Asyncset_analysis_enabled_stateRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_analysis_enabled_stateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_channel_states_desc(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest& request, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetChannelStatesDescRequest, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_channel_states_desc_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_channel_states_desc(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* request, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetChannelStatesDescRequest, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channel_states_desc_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_channel_states_desc(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* request, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_channel_states_desc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse>* AnalysisConfigurationService::Stub::PrepareAsyncget_channel_states_descRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse, ::minknow_api::analysis_configuration::GetChannelStatesDescRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_channel_states_desc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse>* AnalysisConfigurationService::Stub::Asyncget_channel_states_descRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_channel_states_descRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_summary(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest& request, ::minknow_api::analysis_configuration::GetSummaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetSummaryRequest, ::minknow_api::analysis_configuration::GetSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_summary_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_summary(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest* request, ::minknow_api::analysis_configuration::GetSummaryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetSummaryRequest, ::minknow_api::analysis_configuration::GetSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_summary_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_summary(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest* request, ::minknow_api::analysis_configuration::GetSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_summary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetSummaryResponse>* AnalysisConfigurationService::Stub::PrepareAsyncget_summaryRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::GetSummaryResponse, ::minknow_api::analysis_configuration::GetSummaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_summary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetSummaryResponse>* AnalysisConfigurationService::Stub::Asyncget_summaryRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_summaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::set_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_basecaller_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::set_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_basecaller_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::set_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_basecaller_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncset_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_basecaller_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncset_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_basecaller_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::preload_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_preload_basecaller_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::preload_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_preload_basecaller_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::preload_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_preload_basecaller_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncpreload_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_preload_basecaller_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncpreload_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpreload_basecaller_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest& request, ::minknow_api::analysis_configuration::BasecallerConfiguration* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::BasecallerConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_basecaller_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::BasecallerConfiguration* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::BasecallerConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_basecaller_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_basecaller_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::BasecallerConfiguration* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_basecaller_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::BasecallerConfiguration>* AnalysisConfigurationService::Stub::PrepareAsyncget_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::BasecallerConfiguration, ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_basecaller_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::BasecallerConfiguration>* AnalysisConfigurationService::Stub::Asyncget_basecaller_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_basecaller_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest& request, ::minknow_api::analysis_configuration::PoreTypeConfiguration* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest, ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_pore_type_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* request, ::minknow_api::analysis_configuration::PoreTypeConfiguration* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest, ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_pore_type_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* request, ::minknow_api::analysis_configuration::PoreTypeConfiguration* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_pore_type_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::PoreTypeConfiguration>* AnalysisConfigurationService::Stub::PrepareAsyncget_pore_type_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_pore_type_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::PoreTypeConfiguration>* AnalysisConfigurationService::Stub::Asyncget_pore_type_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_pore_type_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::set_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration& request, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_pore_type_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::set_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration* request, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_pore_type_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::set_pore_type_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration* request, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_pore_type_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncset_pore_type_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse, ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_pore_type_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncset_pore_type_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_pore_type_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::set_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration& request, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::WriterConfiguration, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_writer_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::set_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration* request, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::WriterConfiguration, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_writer_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::set_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration* request, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_writer_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetWriterConfigurationResponse>* AnalysisConfigurationService::Stub::PrepareAsyncset_writer_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::SetWriterConfigurationResponse, ::minknow_api::analysis_configuration::WriterConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_writer_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::SetWriterConfigurationResponse>* AnalysisConfigurationService::Stub::Asyncset_writer_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_writer_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest& request, ::minknow_api::analysis_configuration::WriterConfiguration* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetWriterConfigurationRequest, ::minknow_api::analysis_configuration::WriterConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_writer_configuration_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* request, ::minknow_api::analysis_configuration::WriterConfiguration* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetWriterConfigurationRequest, ::minknow_api::analysis_configuration::WriterConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_writer_configuration_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_writer_configuration(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* request, ::minknow_api::analysis_configuration::WriterConfiguration* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_writer_configuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::WriterConfiguration>* AnalysisConfigurationService::Stub::PrepareAsyncget_writer_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::WriterConfiguration, ::minknow_api::analysis_configuration::GetWriterConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_writer_configuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::WriterConfiguration>* AnalysisConfigurationService::Stub::Asyncget_writer_configurationRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_writer_configurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AnalysisConfigurationService::Stub::get_read_classifications(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest& request, ::minknow_api::analysis_configuration::GetReadClassificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minknow_api::analysis_configuration::GetReadClassificationsRequest, ::minknow_api::analysis_configuration::GetReadClassificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_read_classifications_, context, request, response);
}

void AnalysisConfigurationService::Stub::async::get_read_classifications(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest* request, ::minknow_api::analysis_configuration::GetReadClassificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minknow_api::analysis_configuration::GetReadClassificationsRequest, ::minknow_api::analysis_configuration::GetReadClassificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_read_classifications_, context, request, response, std::move(f));
}

void AnalysisConfigurationService::Stub::async::get_read_classifications(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest* request, ::minknow_api::analysis_configuration::GetReadClassificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_read_classifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetReadClassificationsResponse>* AnalysisConfigurationService::Stub::PrepareAsyncget_read_classificationsRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minknow_api::analysis_configuration::GetReadClassificationsResponse, ::minknow_api::analysis_configuration::GetReadClassificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_read_classifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minknow_api::analysis_configuration::GetReadClassificationsResponse>* AnalysisConfigurationService::Stub::Asyncget_read_classificationsRaw(::grpc::ClientContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_read_classificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

AnalysisConfigurationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::AnalysisConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* req,
             ::minknow_api::analysis_configuration::AnalysisConfiguration* resp) {
               return service->get_analysis_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::AnalysisConfiguration, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::AnalysisConfiguration* req,
             ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* resp) {
               return service->set_analysis_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* req,
             ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* resp) {
               return service->reset_analysis_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* req,
             ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* resp) {
               return service->set_analysis_enabled_state(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetChannelStatesDescRequest, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* req,
             ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* resp) {
               return service->get_channel_states_desc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetSummaryRequest, ::minknow_api::analysis_configuration::GetSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetSummaryRequest* req,
             ::minknow_api::analysis_configuration::GetSummaryResponse* resp) {
               return service->get_summary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* req,
             ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* resp) {
               return service->set_basecaller_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* req,
             ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* resp) {
               return service->preload_basecaller_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest, ::minknow_api::analysis_configuration::BasecallerConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* req,
             ::minknow_api::analysis_configuration::BasecallerConfiguration* resp) {
               return service->get_basecaller_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest, ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* req,
             ::minknow_api::analysis_configuration::PoreTypeConfiguration* resp) {
               return service->get_pore_type_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::PoreTypeConfiguration, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::PoreTypeConfiguration* req,
             ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* resp) {
               return service->set_pore_type_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::WriterConfiguration, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::WriterConfiguration* req,
             ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* resp) {
               return service->set_writer_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetWriterConfigurationRequest, ::minknow_api::analysis_configuration::WriterConfiguration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* req,
             ::minknow_api::analysis_configuration::WriterConfiguration* resp) {
               return service->get_writer_configuration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AnalysisConfigurationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AnalysisConfigurationService::Service, ::minknow_api::analysis_configuration::GetReadClassificationsRequest, ::minknow_api::analysis_configuration::GetReadClassificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AnalysisConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minknow_api::analysis_configuration::GetReadClassificationsRequest* req,
             ::minknow_api::analysis_configuration::GetReadClassificationsResponse* resp) {
               return service->get_read_classifications(ctx, req, resp);
             }, this)));
}

AnalysisConfigurationService::Service::~Service() {
}

::grpc::Status AnalysisConfigurationService::Service::get_analysis_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::AnalysisConfiguration* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::set_analysis_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::AnalysisConfiguration* request, ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::reset_analysis_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* request, ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::set_analysis_enabled_state(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* request, ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_channel_states_desc(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* request, ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_summary(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetSummaryRequest* request, ::minknow_api::analysis_configuration::GetSummaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::set_basecaller_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::preload_basecaller_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_basecaller_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* request, ::minknow_api::analysis_configuration::BasecallerConfiguration* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_pore_type_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* request, ::minknow_api::analysis_configuration::PoreTypeConfiguration* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::set_pore_type_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::PoreTypeConfiguration* request, ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::set_writer_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::WriterConfiguration* request, ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_writer_configuration(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* request, ::minknow_api::analysis_configuration::WriterConfiguration* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AnalysisConfigurationService::Service::get_read_classifications(::grpc::ServerContext* context, const ::minknow_api::analysis_configuration::GetReadClassificationsRequest* request, ::minknow_api::analysis_configuration::GetReadClassificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minknow_api
}  // namespace analysis_configuration

