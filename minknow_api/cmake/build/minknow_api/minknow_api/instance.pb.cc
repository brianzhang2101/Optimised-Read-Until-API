// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/instance.proto

#include "minknow_api/instance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace instance {
constexpr GetVersionInfoRequest::GetVersionInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetVersionInfoRequestDefaultTypeInternal {
  constexpr GetVersionInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionInfoRequestDefaultTypeInternal() {}
  union {
    GetVersionInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionInfoRequestDefaultTypeInternal _GetVersionInfoRequest_default_instance_;
constexpr GetVersionInfoResponse_MinknowVersion::GetVersionInfoResponse_MinknowVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : full_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , major_(0)
  , minor_(0)
  , patch_(0){}
struct GetVersionInfoResponse_MinknowVersionDefaultTypeInternal {
  constexpr GetVersionInfoResponse_MinknowVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionInfoResponse_MinknowVersionDefaultTypeInternal() {}
  union {
    GetVersionInfoResponse_MinknowVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionInfoResponse_MinknowVersionDefaultTypeInternal _GetVersionInfoResponse_MinknowVersion_default_instance_;
constexpr GetVersionInfoResponse::GetVersionInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocols_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distribution_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minknow_(nullptr)
  , distribution_status_(0)

  , installation_type_(0)
{}
struct GetVersionInfoResponseDefaultTypeInternal {
  constexpr GetVersionInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVersionInfoResponseDefaultTypeInternal() {}
  union {
    GetVersionInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVersionInfoResponseDefaultTypeInternal _GetVersionInfoResponse_default_instance_;
constexpr GetOutputDirectoriesRequest::GetOutputDirectoriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetOutputDirectoriesRequestDefaultTypeInternal {
  constexpr GetOutputDirectoriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOutputDirectoriesRequestDefaultTypeInternal() {}
  union {
    GetOutputDirectoriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOutputDirectoriesRequestDefaultTypeInternal _GetOutputDirectoriesRequest_default_instance_;
constexpr OutputDirectories::OutputDirectories(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reads_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OutputDirectoriesDefaultTypeInternal {
  constexpr OutputDirectoriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputDirectoriesDefaultTypeInternal() {}
  union {
    OutputDirectories _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputDirectoriesDefaultTypeInternal _OutputDirectories_default_instance_;
constexpr GetDefaultOutputDirectoriesRequest::GetDefaultOutputDirectoriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDefaultOutputDirectoriesRequestDefaultTypeInternal {
  constexpr GetDefaultOutputDirectoriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDefaultOutputDirectoriesRequestDefaultTypeInternal() {}
  union {
    GetDefaultOutputDirectoriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDefaultOutputDirectoriesRequestDefaultTypeInternal _GetDefaultOutputDirectoriesRequest_default_instance_;
constexpr SetOutputDirectoryRequest::SetOutputDirectoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetOutputDirectoryRequestDefaultTypeInternal {
  constexpr SetOutputDirectoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOutputDirectoryRequestDefaultTypeInternal() {}
  union {
    SetOutputDirectoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOutputDirectoryRequestDefaultTypeInternal _SetOutputDirectoryRequest_default_instance_;
constexpr SetOutputDirectoryResponse::SetOutputDirectoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetOutputDirectoryResponseDefaultTypeInternal {
  constexpr SetOutputDirectoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOutputDirectoryResponseDefaultTypeInternal() {}
  union {
    SetOutputDirectoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOutputDirectoryResponseDefaultTypeInternal _SetOutputDirectoryResponse_default_instance_;
constexpr SetReadsDirectoryRequest::SetReadsDirectoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetReadsDirectoryRequestDefaultTypeInternal {
  constexpr SetReadsDirectoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetReadsDirectoryRequestDefaultTypeInternal() {}
  union {
    SetReadsDirectoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetReadsDirectoryRequestDefaultTypeInternal _SetReadsDirectoryRequest_default_instance_;
constexpr SetReadsDirectoryResponse::SetReadsDirectoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetReadsDirectoryResponseDefaultTypeInternal {
  constexpr SetReadsDirectoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetReadsDirectoryResponseDefaultTypeInternal() {}
  union {
    SetReadsDirectoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetReadsDirectoryResponseDefaultTypeInternal _SetReadsDirectoryResponse_default_instance_;
constexpr FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : what_()
  , filesystem_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_available_(uint64_t{0u})
  , bytes_capacity_(uint64_t{0u})
  , bytes_to_stop_cleanly_(uint64_t{0u})
  , bytes_when_alert_issued_(uint64_t{0u})
  , bytes_per_second_(int64_t{0})
  , recommend_alert_(false)
  , recommend_stop_(false){}
struct FilesystemDiskSpaceInfoDefaultTypeInternal {
  constexpr FilesystemDiskSpaceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilesystemDiskSpaceInfoDefaultTypeInternal() {}
  union {
    FilesystemDiskSpaceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilesystemDiskSpaceInfoDefaultTypeInternal _FilesystemDiskSpaceInfo_default_instance_;
constexpr GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetDiskSpaceInfoRequestDefaultTypeInternal {
  constexpr GetDiskSpaceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDiskSpaceInfoRequestDefaultTypeInternal() {}
  union {
    GetDiskSpaceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDiskSpaceInfoRequestDefaultTypeInternal _GetDiskSpaceInfoRequest_default_instance_;
constexpr StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : period_(0u){}
struct StreamDiskSpaceInfoRequestDefaultTypeInternal {
  constexpr StreamDiskSpaceInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamDiskSpaceInfoRequestDefaultTypeInternal() {}
  union {
    StreamDiskSpaceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamDiskSpaceInfoRequestDefaultTypeInternal _StreamDiskSpaceInfoRequest_default_instance_;
constexpr GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filesystem_disk_space_info_(){}
struct GetDiskSpaceInfoResponseDefaultTypeInternal {
  constexpr GetDiskSpaceInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDiskSpaceInfoResponseDefaultTypeInternal() {}
  union {
    GetDiskSpaceInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDiskSpaceInfoResponseDefaultTypeInternal _GetDiskSpaceInfoResponse_default_instance_;
constexpr GetMachineIdRequest::GetMachineIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetMachineIdRequestDefaultTypeInternal {
  constexpr GetMachineIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMachineIdRequestDefaultTypeInternal() {}
  union {
    GetMachineIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMachineIdRequestDefaultTypeInternal _GetMachineIdRequest_default_instance_;
constexpr GetMachineIdResponse::GetMachineIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetMachineIdResponseDefaultTypeInternal {
  constexpr GetMachineIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMachineIdResponseDefaultTypeInternal() {}
  union {
    GetMachineIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMachineIdResponseDefaultTypeInternal _GetMachineIdResponse_default_instance_;
constexpr StreamInstanceActivityRequest::StreamInstanceActivityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamInstanceActivityRequestDefaultTypeInternal {
  constexpr StreamInstanceActivityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInstanceActivityRequestDefaultTypeInternal() {}
  union {
    StreamInstanceActivityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInstanceActivityRequestDefaultTypeInternal _StreamInstanceActivityRequest_default_instance_;
constexpr DeviceInfo::DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_info_(nullptr)
  , device_state_(0)
{}
struct DeviceInfoDefaultTypeInternal {
  constexpr DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
constexpr BasecallSpeed::BasecallSpeed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mean_basecall_speed_(0){}
struct BasecallSpeedDefaultTypeInternal {
  constexpr BasecallSpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallSpeedDefaultTypeInternal() {}
  union {
    BasecallSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallSpeedDefaultTypeInternal _BasecallSpeed_default_instance_;
constexpr N50::N50(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : n50_(0){}
struct N50DefaultTypeInternal {
  constexpr N50DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~N50DefaultTypeInternal() {}
  union {
    N50 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT N50DefaultTypeInternal _N50_default_instance_;
constexpr StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUseDefaultTypeInternal _StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse_default_instance_;
constexpr StreamInstanceActivityResponse_FlowCellHealth::StreamInstanceActivityResponse_FlowCellHealth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_state_percentages_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct StreamInstanceActivityResponse_FlowCellHealthDefaultTypeInternal {
  constexpr StreamInstanceActivityResponse_FlowCellHealthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInstanceActivityResponse_FlowCellHealthDefaultTypeInternal() {}
  union {
    StreamInstanceActivityResponse_FlowCellHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInstanceActivityResponse_FlowCellHealthDefaultTypeInternal _StreamInstanceActivityResponse_FlowCellHealth_default_instance_;
constexpr StreamInstanceActivityResponse::StreamInstanceActivityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamInstanceActivityResponseDefaultTypeInternal {
  constexpr StreamInstanceActivityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInstanceActivityResponseDefaultTypeInternal() {}
  union {
    StreamInstanceActivityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInstanceActivityResponseDefaultTypeInternal _StreamInstanceActivityResponse_default_instance_;
}  // namespace instance
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2finstance_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2finstance_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2finstance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2finstance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion, major_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion, patch_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion, full_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, minknow_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, protocols_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, distribution_version_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, distribution_status_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, configuration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetVersionInfoResponse, installation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetOutputDirectoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::OutputDirectories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::OutputDirectories, output_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::OutputDirectories, log_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::OutputDirectories, reads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetDefaultOutputDirectoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetOutputDirectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetOutputDirectoryRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetOutputDirectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetReadsDirectoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetReadsDirectoryRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::SetReadsDirectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, filesystem_id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, bytes_available_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, bytes_capacity_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, what_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, bytes_to_stop_cleanly_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, bytes_when_alert_issued_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, recommend_alert_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, recommend_stop_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::FilesystemDiskSpaceInfo, bytes_per_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetDiskSpaceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamDiskSpaceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamDiskSpaceInfoRequest, period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetDiskSpaceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetDiskSpaceInfoResponse, filesystem_disk_space_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetMachineIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetMachineIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::GetMachineIdResponse, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::DeviceInfo, device_state_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::DeviceInfo, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::BasecallSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::BasecallSpeed, mean_basecall_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::N50, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::N50, n50_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth, channel_state_percentages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::instance::StreamInstanceActivityResponse, stream_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::instance::GetVersionInfoRequest)},
  { 6, -1, -1, sizeof(::minknow_api::instance::GetVersionInfoResponse_MinknowVersion)},
  { 16, -1, -1, sizeof(::minknow_api::instance::GetVersionInfoResponse)},
  { 28, -1, -1, sizeof(::minknow_api::instance::GetOutputDirectoriesRequest)},
  { 34, -1, -1, sizeof(::minknow_api::instance::OutputDirectories)},
  { 43, -1, -1, sizeof(::minknow_api::instance::GetDefaultOutputDirectoriesRequest)},
  { 49, -1, -1, sizeof(::minknow_api::instance::SetOutputDirectoryRequest)},
  { 56, -1, -1, sizeof(::minknow_api::instance::SetOutputDirectoryResponse)},
  { 62, -1, -1, sizeof(::minknow_api::instance::SetReadsDirectoryRequest)},
  { 69, -1, -1, sizeof(::minknow_api::instance::SetReadsDirectoryResponse)},
  { 75, -1, -1, sizeof(::minknow_api::instance::FilesystemDiskSpaceInfo)},
  { 90, -1, -1, sizeof(::minknow_api::instance::GetDiskSpaceInfoRequest)},
  { 96, -1, -1, sizeof(::minknow_api::instance::StreamDiskSpaceInfoRequest)},
  { 103, -1, -1, sizeof(::minknow_api::instance::GetDiskSpaceInfoResponse)},
  { 110, -1, -1, sizeof(::minknow_api::instance::GetMachineIdRequest)},
  { 116, -1, -1, sizeof(::minknow_api::instance::GetMachineIdResponse)},
  { 123, -1, -1, sizeof(::minknow_api::instance::StreamInstanceActivityRequest)},
  { 129, -1, -1, sizeof(::minknow_api::instance::DeviceInfo)},
  { 137, -1, -1, sizeof(::minknow_api::instance::BasecallSpeed)},
  { 144, -1, -1, sizeof(::minknow_api::instance::N50)},
  { 151, 159, -1, sizeof(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse)},
  { 161, -1, -1, sizeof(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth)},
  { 168, -1, -1, sizeof(::minknow_api::instance::StreamInstanceActivityResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetVersionInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetVersionInfoResponse_MinknowVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetVersionInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetOutputDirectoriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_OutputDirectories_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetDefaultOutputDirectoriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_SetOutputDirectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_SetOutputDirectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_SetReadsDirectoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_SetReadsDirectoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_FilesystemDiskSpaceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetDiskSpaceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_StreamDiskSpaceInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetDiskSpaceInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetMachineIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_GetMachineIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_StreamInstanceActivityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_BasecallSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_N50_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_StreamInstanceActivityResponse_FlowCellHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::instance::_StreamInstanceActivityResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2finstance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032minknow_api/instance.proto\022\024minknow_ap"
  "i.instance\032\035minknow_api/acquisition.prot"
  "o\032\030minknow_api/device.proto\032\032minknow_api"
  "/protocol.proto\"\027\n\025GetVersionInfoRequest"
  "\"\315\004\n\026GetVersionInfoResponse\022L\n\007minknow\030\001"
  " \001(\0132;.minknow_api.instance.GetVersionIn"
  "foResponse.MinknowVersion\022\021\n\tprotocols\030\002"
  " \001(\t\022\034\n\024distribution_version\030\003 \001(\t\022\\\n\023di"
  "stribution_status\030\004 \001(\0162\?.minknow_api.in"
  "stance.GetVersionInfoResponse.Distributi"
  "onStatus\022\025\n\rconfiguration\030\005 \001(\t\022X\n\021insta"
  "llation_type\030\006 \001(\0162=.minknow_api.instanc"
  "e.GetVersionInfoResponse.InstallationTyp"
  "e\032K\n\016MinknowVersion\022\r\n\005major\030\001 \001(\005\022\r\n\005mi"
  "nor\030\002 \001(\005\022\r\n\005patch\030\003 \001(\005\022\014\n\004full\030\004 \001(\t\"I"
  "\n\022DistributionStatus\022\013\n\007UNKNOWN\020\000\022\n\n\006STA"
  "BLE\020\001\022\014\n\010UNSTABLE\020\002\022\014\n\010MODIFIED\020\003\"M\n\020Ins"
  "tallationType\022\007\n\003ONT\020\000\022\006\n\002NC\020\001\022\010\n\004PROD\020\002"
  "\022\r\n\tQ_RELEASE\020\003\022\017\n\013OND_RELEASE\020\004\"\035\n\033GetO"
  "utputDirectoriesRequest\"\?\n\021OutputDirecto"
  "ries\022\016\n\006output\030\001 \001(\t\022\013\n\003log\030\002 \001(\t\022\r\n\005rea"
  "ds\030\003 \001(\t\"$\n\"GetDefaultOutputDirectoriesR"
  "equest\")\n\031SetOutputDirectoryRequest\022\014\n\004p"
  "ath\030\001 \001(\t\"\034\n\032SetOutputDirectoryResponse\""
  "(\n\030SetReadsDirectoryRequest\022\014\n\004path\030\001 \001("
  "\t\"\033\n\031SetReadsDirectoryResponse\"\372\001\n\027Files"
  "ystemDiskSpaceInfo\022\025\n\rfilesystem_id\030\001 \001("
  "\t\022\027\n\017bytes_available\030\002 \001(\004\022\026\n\016bytes_capa"
  "city\030\003 \001(\004\022\014\n\004what\030\004 \003(\t\022\035\n\025bytes_to_sto"
  "p_cleanly\030\005 \001(\004\022\037\n\027bytes_when_alert_issu"
  "ed\030\006 \001(\004\022\027\n\017recommend_alert\030\007 \001(\010\022\026\n\016rec"
  "ommend_stop\030\010 \001(\010\022\030\n\020bytes_per_second\030\t "
  "\001(\003\"\031\n\027GetDiskSpaceInfoRequest\",\n\032Stream"
  "DiskSpaceInfoRequest\022\016\n\006period\030\001 \001(\r\"m\n\030"
  "GetDiskSpaceInfoResponse\022Q\n\032filesystem_d"
  "isk_space_info\030\001 \003(\0132-.minknow_api.insta"
  "nce.FilesystemDiskSpaceInfo\"\025\n\023GetMachin"
  "eIdRequest\"*\n\024GetMachineIdResponse\022\022\n\nma"
  "chine_id\030\001 \001(\t\"\037\n\035StreamInstanceActivity"
  "Request\"\232\001\n\nDeviceInfo\022L\n\014device_state\030\001"
  " \001(\01626.minknow_api.device.GetDeviceState"
  "Response.DeviceState\022>\n\013device_info\030\002 \001("
  "\0132).minknow_api.device.GetDeviceInfoResp"
  "onse\",\n\rBasecallSpeed\022\033\n\023mean_basecall_s"
  "peed\030\001 \001(\002\"\022\n\003N50\022\013\n\003n50\030\001 \001(\002\"\257\006\n\036Strea"
  "mInstanceActivityResponse\0227\n\013device_info"
  "\030\001 \001(\0132 .minknow_api.instance.DeviceInfo"
  "H\000\022E\n\016flow_cell_info\030\002 \001(\0132+.minknow_api"
  ".device.GetFlowCellInfoResponseH\000\022B\n\021pro"
  "tocol_run_info\030\003 \001(\0132%.minknow_api.proto"
  "col.ProtocolRunInfoH\000\022K\n\024acquisition_run"
  "_info\030\004 \001(\0132+.minknow_api.acquisition.Ac"
  "quisitionRunInfoH\000\022_\n\020flow_cell_health\030\005"
  " \001(\0132C.minknow_api.instance.StreamInstan"
  "ceActivityResponse.FlowCellHealthH\000\022I\n\ry"
  "ield_summary\030\006 \001(\01320.minknow_api.acquisi"
  "tion.AcquisitionYieldSummaryH\000\022=\n\016baseca"
  "ll_speed\030\007 \001(\0132#.minknow_api.instance.Ba"
  "secallSpeedH\000\022(\n\003n50\030\010 \001(\0132\031.minknow_api"
  ".instance.N50H\000\032\326\001\n\016FlowCellHealth\022\203\001\n\031c"
  "hannel_state_percentages\030\001 \003(\0132`.minknow"
  "_api.instance.StreamInstanceActivityResp"
  "onse.FlowCellHealth.ChannelStatePercenta"
  "gesEntry\032>\n\034ChannelStatePercentagesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001B\016\n\014stre"
  "am_value2\204\t\n\017InstanceService\022r\n\020get_vers"
  "ion_info\022+.minknow_api.instance.GetVersi"
  "onInfoRequest\032,.minknow_api.instance.Get"
  "VersionInfoResponse\"\003\220\002\001\022y\n\026get_output_d"
  "irectories\0221.minknow_api.instance.GetOut"
  "putDirectoriesRequest\032\'.minknow_api.inst"
  "ance.OutputDirectories\"\003\220\002\001\022\210\001\n\036get_defa"
  "ult_output_directories\0228.minknow_api.ins"
  "tance.GetDefaultOutputDirectoriesRequest"
  "\032\'.minknow_api.instance.OutputDirectorie"
  "s\"\003\220\002\001\022~\n\024set_output_directory\022/.minknow"
  "_api.instance.SetOutputDirectoryRequest\032"
  "0.minknow_api.instance.SetOutputDirector"
  "yResponse\"\003\220\002\002\022{\n\023set_reads_directory\022.."
  "minknow_api.instance.SetReadsDirectoryRe"
  "quest\032/.minknow_api.instance.SetReadsDir"
  "ectoryResponse\"\003\220\002\002\022y\n\023get_disk_space_in"
  "fo\022-.minknow_api.instance.GetDiskSpaceIn"
  "foRequest\032..minknow_api.instance.GetDisk"
  "SpaceInfoResponse\"\003\220\002\001\022\201\001\n\026stream_disk_s"
  "pace_info\0220.minknow_api.instance.StreamD"
  "iskSpaceInfoRequest\032..minknow_api.instan"
  "ce.GetDiskSpaceInfoResponse\"\003\220\002\0010\001\022l\n\016ge"
  "t_machine_id\022).minknow_api.instance.GetM"
  "achineIdRequest\032*.minknow_api.instance.G"
  "etMachineIdResponse\"\003\220\002\001\022\214\001\n\030stream_inst"
  "ance_activity\0223.minknow_api.instance.Str"
  "eamInstanceActivityRequest\0324.minknow_api"
  ".instance.StreamInstanceActivityResponse"
  "\"\003\220\002\0010\001B&\n\034com.nanoporetech.minknow_api\242"
  "\002\005MKAPIb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2finstance_2eproto_deps[3] = {
  &::descriptor_table_minknow_5fapi_2facquisition_2eproto,
  &::descriptor_table_minknow_5fapi_2fdevice_2eproto,
  &::descriptor_table_minknow_5fapi_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2finstance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2finstance_2eproto = {
  false, false, 3815, descriptor_table_protodef_minknow_5fapi_2finstance_2eproto, "minknow_api/instance.proto", 
  &descriptor_table_minknow_5fapi_2finstance_2eproto_once, descriptor_table_minknow_5fapi_2finstance_2eproto_deps, 3, 23,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2finstance_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2finstance_2eproto, file_level_enum_descriptors_minknow_5fapi_2finstance_2eproto, file_level_service_descriptors_minknow_5fapi_2finstance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2finstance_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2finstance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2finstance_2eproto(&descriptor_table_minknow_5fapi_2finstance_2eproto);
namespace minknow_api {
namespace instance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetVersionInfoResponse_DistributionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2finstance_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2finstance_2eproto[0];
}
bool GetVersionInfoResponse_DistributionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::UNKNOWN;
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::STABLE;
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::UNSTABLE;
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::MODIFIED;
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::DistributionStatus_MIN;
constexpr GetVersionInfoResponse_DistributionStatus GetVersionInfoResponse::DistributionStatus_MAX;
constexpr int GetVersionInfoResponse::DistributionStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetVersionInfoResponse_InstallationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2finstance_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2finstance_2eproto[1];
}
bool GetVersionInfoResponse_InstallationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::ONT;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::NC;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::PROD;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::Q_RELEASE;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::OND_RELEASE;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::InstallationType_MIN;
constexpr GetVersionInfoResponse_InstallationType GetVersionInfoResponse::InstallationType_MAX;
constexpr int GetVersionInfoResponse::InstallationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GetVersionInfoRequest::_Internal {
 public:
};

GetVersionInfoRequest::GetVersionInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetVersionInfoRequest)
}
GetVersionInfoRequest::GetVersionInfoRequest(const GetVersionInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetVersionInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetVersionInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[0]);
}

// ===================================================================

class GetVersionInfoResponse_MinknowVersion::_Internal {
 public:
};

GetVersionInfoResponse_MinknowVersion::GetVersionInfoResponse_MinknowVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
}
GetVersionInfoResponse_MinknowVersion::GetVersionInfoResponse_MinknowVersion(const GetVersionInfoResponse_MinknowVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full().empty()) {
    full_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full(), 
      GetArenaForAllocation());
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
}

void GetVersionInfoResponse_MinknowVersion::SharedCtor() {
full_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

GetVersionInfoResponse_MinknowVersion::~GetVersionInfoResponse_MinknowVersion() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVersionInfoResponse_MinknowVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  full_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVersionInfoResponse_MinknowVersion::ArenaDtor(void* object) {
  GetVersionInfoResponse_MinknowVersion* _this = reinterpret_cast< GetVersionInfoResponse_MinknowVersion* >(object);
  (void)_this;
}
void GetVersionInfoResponse_MinknowVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionInfoResponse_MinknowVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVersionInfoResponse_MinknowVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_.ClearToEmpty();
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionInfoResponse_MinknowVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string full = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_full();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.GetVersionInfoResponse.MinknowVersion.full"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVersionInfoResponse_MinknowVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  // string full = 4;
  if (!this->_internal_full().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full().data(), static_cast<int>(this->_internal_full().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.GetVersionInfoResponse.MinknowVersion.full");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_full(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  return target;
}

size_t GetVersionInfoResponse_MinknowVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string full = 4;
  if (!this->_internal_full().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full());
  }

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionInfoResponse_MinknowVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVersionInfoResponse_MinknowVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionInfoResponse_MinknowVersion::GetClassData() const { return &_class_data_; }

void GetVersionInfoResponse_MinknowVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVersionInfoResponse_MinknowVersion *>(to)->MergeFrom(
      static_cast<const GetVersionInfoResponse_MinknowVersion &>(from));
}


void GetVersionInfoResponse_MinknowVersion::MergeFrom(const GetVersionInfoResponse_MinknowVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_full().empty()) {
    _internal_set_full(from._internal_full());
  }
  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVersionInfoResponse_MinknowVersion::CopyFrom(const GetVersionInfoResponse_MinknowVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.GetVersionInfoResponse.MinknowVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionInfoResponse_MinknowVersion::IsInitialized() const {
  return true;
}

void GetVersionInfoResponse_MinknowVersion::InternalSwap(GetVersionInfoResponse_MinknowVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_, lhs_arena,
      &other->full_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse_MinknowVersion, patch_)
      + sizeof(GetVersionInfoResponse_MinknowVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse_MinknowVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionInfoResponse_MinknowVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[1]);
}

// ===================================================================

class GetVersionInfoResponse::_Internal {
 public:
  static const ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion& minknow(const GetVersionInfoResponse* msg);
};

const ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion&
GetVersionInfoResponse::_Internal::minknow(const GetVersionInfoResponse* msg) {
  return *msg->minknow_;
}
GetVersionInfoResponse::GetVersionInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetVersionInfoResponse)
}
GetVersionInfoResponse::GetVersionInfoResponse(const GetVersionInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocols().empty()) {
    protocols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocols(), 
      GetArenaForAllocation());
  }
  distribution_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_distribution_version().empty()) {
    distribution_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_distribution_version(), 
      GetArenaForAllocation());
  }
  configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configuration().empty()) {
    configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configuration(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_minknow()) {
    minknow_ = new ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion(*from.minknow_);
  } else {
    minknow_ = nullptr;
  }
  ::memcpy(&distribution_status_, &from.distribution_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&installation_type_) -
    reinterpret_cast<char*>(&distribution_status_)) + sizeof(installation_type_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetVersionInfoResponse)
}

void GetVersionInfoResponse::SharedCtor() {
protocols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
distribution_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minknow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&installation_type_) -
    reinterpret_cast<char*>(&minknow_)) + sizeof(installation_type_));
}

GetVersionInfoResponse::~GetVersionInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.GetVersionInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetVersionInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  protocols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distribution_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete minknow_;
}

void GetVersionInfoResponse::ArenaDtor(void* object) {
  GetVersionInfoResponse* _this = reinterpret_cast< GetVersionInfoResponse* >(object);
  (void)_this;
}
void GetVersionInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVersionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVersionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.GetVersionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocols_.ClearToEmpty();
  distribution_version_.ClearToEmpty();
  configuration_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && minknow_ != nullptr) {
    delete minknow_;
  }
  minknow_ = nullptr;
  ::memset(&distribution_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&installation_type_) -
      reinterpret_cast<char*>(&distribution_status_)) + sizeof(installation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVersionInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_minknow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.GetVersionInfoResponse.protocols"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string distribution_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_distribution_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.GetVersionInfoResponse.distribution_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_distribution_status(static_cast<::minknow_api::instance::GetVersionInfoResponse_DistributionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string configuration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.GetVersionInfoResponse.configuration"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.GetVersionInfoResponse.InstallationType installation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_installation_type(static_cast<::minknow_api::instance::GetVersionInfoResponse_InstallationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVersionInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.GetVersionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
  if (this->_internal_has_minknow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::minknow(this), target, stream);
  }

  // string protocols = 2;
  if (!this->_internal_protocols().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocols().data(), static_cast<int>(this->_internal_protocols().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.GetVersionInfoResponse.protocols");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocols(), target);
  }

  // string distribution_version = 3;
  if (!this->_internal_distribution_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distribution_version().data(), static_cast<int>(this->_internal_distribution_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.GetVersionInfoResponse.distribution_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_distribution_version(), target);
  }

  // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
  if (this->_internal_distribution_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_distribution_status(), target);
  }

  // string configuration = 5;
  if (!this->_internal_configuration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configuration().data(), static_cast<int>(this->_internal_configuration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.GetVersionInfoResponse.configuration");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_configuration(), target);
  }

  // .minknow_api.instance.GetVersionInfoResponse.InstallationType installation_type = 6;
  if (this->_internal_installation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_installation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.GetVersionInfoResponse)
  return target;
}

size_t GetVersionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.GetVersionInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocols = 2;
  if (!this->_internal_protocols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocols());
  }

  // string distribution_version = 3;
  if (!this->_internal_distribution_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distribution_version());
  }

  // string configuration = 5;
  if (!this->_internal_configuration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configuration());
  }

  // .minknow_api.instance.GetVersionInfoResponse.MinknowVersion minknow = 1;
  if (this->_internal_has_minknow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minknow_);
  }

  // .minknow_api.instance.GetVersionInfoResponse.DistributionStatus distribution_status = 4;
  if (this->_internal_distribution_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distribution_status());
  }

  // .minknow_api.instance.GetVersionInfoResponse.InstallationType installation_type = 6;
  if (this->_internal_installation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_installation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVersionInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetVersionInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVersionInfoResponse::GetClassData() const { return &_class_data_; }

void GetVersionInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetVersionInfoResponse *>(to)->MergeFrom(
      static_cast<const GetVersionInfoResponse &>(from));
}


void GetVersionInfoResponse::MergeFrom(const GetVersionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.GetVersionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocols().empty()) {
    _internal_set_protocols(from._internal_protocols());
  }
  if (!from._internal_distribution_version().empty()) {
    _internal_set_distribution_version(from._internal_distribution_version());
  }
  if (!from._internal_configuration().empty()) {
    _internal_set_configuration(from._internal_configuration());
  }
  if (from._internal_has_minknow()) {
    _internal_mutable_minknow()->::minknow_api::instance::GetVersionInfoResponse_MinknowVersion::MergeFrom(from._internal_minknow());
  }
  if (from._internal_distribution_status() != 0) {
    _internal_set_distribution_status(from._internal_distribution_status());
  }
  if (from._internal_installation_type() != 0) {
    _internal_set_installation_type(from._internal_installation_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVersionInfoResponse::CopyFrom(const GetVersionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.GetVersionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVersionInfoResponse::IsInitialized() const {
  return true;
}

void GetVersionInfoResponse::InternalSwap(GetVersionInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocols_, lhs_arena,
      &other->protocols_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &distribution_version_, lhs_arena,
      &other->distribution_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &configuration_, lhs_arena,
      &other->configuration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse, installation_type_)
      + sizeof(GetVersionInfoResponse::installation_type_)
      - PROTOBUF_FIELD_OFFSET(GetVersionInfoResponse, minknow_)>(
          reinterpret_cast<char*>(&minknow_),
          reinterpret_cast<char*>(&other->minknow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVersionInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[2]);
}

// ===================================================================

class GetOutputDirectoriesRequest::_Internal {
 public:
};

GetOutputDirectoriesRequest::GetOutputDirectoriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetOutputDirectoriesRequest)
}
GetOutputDirectoriesRequest::GetOutputDirectoriesRequest(const GetOutputDirectoriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetOutputDirectoriesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOutputDirectoriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOutputDirectoriesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetOutputDirectoriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[3]);
}

// ===================================================================

class OutputDirectories::_Internal {
 public:
};

OutputDirectories::OutputDirectories(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.OutputDirectories)
}
OutputDirectories::OutputDirectories(const OutputDirectories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output(), 
      GetArenaForAllocation());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  reads_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reads().empty()) {
    reads_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reads(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.OutputDirectories)
}

void OutputDirectories::SharedCtor() {
output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reads_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OutputDirectories::~OutputDirectories() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.OutputDirectories)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputDirectories::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reads_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputDirectories::ArenaDtor(void* object) {
  OutputDirectories* _this = reinterpret_cast< OutputDirectories* >(object);
  (void)_this;
}
void OutputDirectories::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputDirectories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputDirectories::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.OutputDirectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_.ClearToEmpty();
  log_.ClearToEmpty();
  reads_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputDirectories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.OutputDirectories.output"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.OutputDirectories.log"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reads();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.OutputDirectories.reads"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputDirectories::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.OutputDirectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output = 1;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.OutputDirectories.output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  // string log = 2;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.OutputDirectories.log");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log(), target);
  }

  // string reads = 3;
  if (!this->_internal_reads().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reads().data(), static_cast<int>(this->_internal_reads().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.OutputDirectories.reads");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.OutputDirectories)
  return target;
}

size_t OutputDirectories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.OutputDirectories)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // string log = 2;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string reads = 3;
  if (!this->_internal_reads().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reads());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputDirectories::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutputDirectories::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputDirectories::GetClassData() const { return &_class_data_; }

void OutputDirectories::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutputDirectories *>(to)->MergeFrom(
      static_cast<const OutputDirectories &>(from));
}


void OutputDirectories::MergeFrom(const OutputDirectories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.OutputDirectories)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _internal_set_output(from._internal_output());
  }
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_reads().empty()) {
    _internal_set_reads(from._internal_reads());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputDirectories::CopyFrom(const OutputDirectories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.OutputDirectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputDirectories::IsInitialized() const {
  return true;
}

void OutputDirectories::InternalSwap(OutputDirectories* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_, lhs_arena,
      &other->output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reads_, lhs_arena,
      &other->reads_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputDirectories::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[4]);
}

// ===================================================================

class GetDefaultOutputDirectoriesRequest::_Internal {
 public:
};

GetDefaultOutputDirectoriesRequest::GetDefaultOutputDirectoriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetDefaultOutputDirectoriesRequest)
}
GetDefaultOutputDirectoriesRequest::GetDefaultOutputDirectoriesRequest(const GetDefaultOutputDirectoriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetDefaultOutputDirectoriesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDefaultOutputDirectoriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDefaultOutputDirectoriesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDefaultOutputDirectoriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[5]);
}

// ===================================================================

class SetOutputDirectoryRequest::_Internal {
 public:
};

SetOutputDirectoryRequest::SetOutputDirectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.SetOutputDirectoryRequest)
}
SetOutputDirectoryRequest::SetOutputDirectoryRequest(const SetOutputDirectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.SetOutputDirectoryRequest)
}

void SetOutputDirectoryRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetOutputDirectoryRequest::~SetOutputDirectoryRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.SetOutputDirectoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetOutputDirectoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetOutputDirectoryRequest::ArenaDtor(void* object) {
  SetOutputDirectoryRequest* _this = reinterpret_cast< SetOutputDirectoryRequest* >(object);
  (void)_this;
}
void SetOutputDirectoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetOutputDirectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetOutputDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.SetOutputDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOutputDirectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.SetOutputDirectoryRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOutputDirectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.SetOutputDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.SetOutputDirectoryRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.SetOutputDirectoryRequest)
  return target;
}

size_t SetOutputDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.SetOutputDirectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOutputDirectoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetOutputDirectoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOutputDirectoryRequest::GetClassData() const { return &_class_data_; }

void SetOutputDirectoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetOutputDirectoryRequest *>(to)->MergeFrom(
      static_cast<const SetOutputDirectoryRequest &>(from));
}


void SetOutputDirectoryRequest::MergeFrom(const SetOutputDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.SetOutputDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOutputDirectoryRequest::CopyFrom(const SetOutputDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.SetOutputDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOutputDirectoryRequest::IsInitialized() const {
  return true;
}

void SetOutputDirectoryRequest::InternalSwap(SetOutputDirectoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOutputDirectoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[6]);
}

// ===================================================================

class SetOutputDirectoryResponse::_Internal {
 public:
};

SetOutputDirectoryResponse::SetOutputDirectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.SetOutputDirectoryResponse)
}
SetOutputDirectoryResponse::SetOutputDirectoryResponse(const SetOutputDirectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.SetOutputDirectoryResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOutputDirectoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOutputDirectoryResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetOutputDirectoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[7]);
}

// ===================================================================

class SetReadsDirectoryRequest::_Internal {
 public:
};

SetReadsDirectoryRequest::SetReadsDirectoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.SetReadsDirectoryRequest)
}
SetReadsDirectoryRequest::SetReadsDirectoryRequest(const SetReadsDirectoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.SetReadsDirectoryRequest)
}

void SetReadsDirectoryRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetReadsDirectoryRequest::~SetReadsDirectoryRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.SetReadsDirectoryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetReadsDirectoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetReadsDirectoryRequest::ArenaDtor(void* object) {
  SetReadsDirectoryRequest* _this = reinterpret_cast< SetReadsDirectoryRequest* >(object);
  (void)_this;
}
void SetReadsDirectoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetReadsDirectoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetReadsDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.SetReadsDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetReadsDirectoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.SetReadsDirectoryRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetReadsDirectoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.SetReadsDirectoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.SetReadsDirectoryRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.SetReadsDirectoryRequest)
  return target;
}

size_t SetReadsDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.SetReadsDirectoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetReadsDirectoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetReadsDirectoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetReadsDirectoryRequest::GetClassData() const { return &_class_data_; }

void SetReadsDirectoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetReadsDirectoryRequest *>(to)->MergeFrom(
      static_cast<const SetReadsDirectoryRequest &>(from));
}


void SetReadsDirectoryRequest::MergeFrom(const SetReadsDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.SetReadsDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetReadsDirectoryRequest::CopyFrom(const SetReadsDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.SetReadsDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReadsDirectoryRequest::IsInitialized() const {
  return true;
}

void SetReadsDirectoryRequest::InternalSwap(SetReadsDirectoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReadsDirectoryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[8]);
}

// ===================================================================

class SetReadsDirectoryResponse::_Internal {
 public:
};

SetReadsDirectoryResponse::SetReadsDirectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.SetReadsDirectoryResponse)
}
SetReadsDirectoryResponse::SetReadsDirectoryResponse(const SetReadsDirectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.SetReadsDirectoryResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetReadsDirectoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetReadsDirectoryResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetReadsDirectoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[9]);
}

// ===================================================================

class FilesystemDiskSpaceInfo::_Internal {
 public:
};

FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  what_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.FilesystemDiskSpaceInfo)
}
FilesystemDiskSpaceInfo::FilesystemDiskSpaceInfo(const FilesystemDiskSpaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      what_(from.what_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filesystem_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filesystem_id().empty()) {
    filesystem_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filesystem_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bytes_available_, &from.bytes_available_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_stop_) -
    reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.FilesystemDiskSpaceInfo)
}

void FilesystemDiskSpaceInfo::SharedCtor() {
filesystem_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bytes_available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recommend_stop_) -
    reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
}

FilesystemDiskSpaceInfo::~FilesystemDiskSpaceInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.FilesystemDiskSpaceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilesystemDiskSpaceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filesystem_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilesystemDiskSpaceInfo::ArenaDtor(void* object) {
  FilesystemDiskSpaceInfo* _this = reinterpret_cast< FilesystemDiskSpaceInfo* >(object);
  (void)_this;
}
void FilesystemDiskSpaceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilesystemDiskSpaceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilesystemDiskSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.FilesystemDiskSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  what_.Clear();
  filesystem_id_.ClearToEmpty();
  ::memset(&bytes_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_stop_) -
      reinterpret_cast<char*>(&bytes_available_)) + sizeof(recommend_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilesystemDiskSpaceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filesystem_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filesystem_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.FilesystemDiskSpaceInfo.filesystem_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bytes_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bytes_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string what = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_what();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.FilesystemDiskSpaceInfo.what"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_to_stop_cleanly = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_to_stop_cleanly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bytes_when_alert_issued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bytes_when_alert_issued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recommend_alert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          recommend_alert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recommend_stop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          recommend_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_per_second = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bytes_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilesystemDiskSpaceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.FilesystemDiskSpaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filesystem_id = 1;
  if (!this->_internal_filesystem_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filesystem_id().data(), static_cast<int>(this->_internal_filesystem_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.FilesystemDiskSpaceInfo.filesystem_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filesystem_id(), target);
  }

  // uint64 bytes_available = 2;
  if (this->_internal_bytes_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bytes_available(), target);
  }

  // uint64 bytes_capacity = 3;
  if (this->_internal_bytes_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bytes_capacity(), target);
  }

  // repeated string what = 4;
  for (int i = 0, n = this->_internal_what_size(); i < n; i++) {
    const auto& s = this->_internal_what(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.FilesystemDiskSpaceInfo.what");
    target = stream->WriteString(4, s, target);
  }

  // uint64 bytes_to_stop_cleanly = 5;
  if (this->_internal_bytes_to_stop_cleanly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_to_stop_cleanly(), target);
  }

  // uint64 bytes_when_alert_issued = 6;
  if (this->_internal_bytes_when_alert_issued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_when_alert_issued(), target);
  }

  // bool recommend_alert = 7;
  if (this->_internal_recommend_alert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_recommend_alert(), target);
  }

  // bool recommend_stop = 8;
  if (this->_internal_recommend_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_recommend_stop(), target);
  }

  // int64 bytes_per_second = 9;
  if (this->_internal_bytes_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_bytes_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.FilesystemDiskSpaceInfo)
  return target;
}

size_t FilesystemDiskSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.FilesystemDiskSpaceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string what = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(what_.size());
  for (int i = 0, n = what_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      what_.Get(i));
  }

  // string filesystem_id = 1;
  if (!this->_internal_filesystem_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filesystem_id());
  }

  // uint64 bytes_available = 2;
  if (this->_internal_bytes_available() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_available());
  }

  // uint64 bytes_capacity = 3;
  if (this->_internal_bytes_capacity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_capacity());
  }

  // uint64 bytes_to_stop_cleanly = 5;
  if (this->_internal_bytes_to_stop_cleanly() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_to_stop_cleanly());
  }

  // uint64 bytes_when_alert_issued = 6;
  if (this->_internal_bytes_when_alert_issued() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_when_alert_issued());
  }

  // int64 bytes_per_second = 9;
  if (this->_internal_bytes_per_second() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_per_second());
  }

  // bool recommend_alert = 7;
  if (this->_internal_recommend_alert() != 0) {
    total_size += 1 + 1;
  }

  // bool recommend_stop = 8;
  if (this->_internal_recommend_stop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilesystemDiskSpaceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilesystemDiskSpaceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilesystemDiskSpaceInfo::GetClassData() const { return &_class_data_; }

void FilesystemDiskSpaceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilesystemDiskSpaceInfo *>(to)->MergeFrom(
      static_cast<const FilesystemDiskSpaceInfo &>(from));
}


void FilesystemDiskSpaceInfo::MergeFrom(const FilesystemDiskSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.FilesystemDiskSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  what_.MergeFrom(from.what_);
  if (!from._internal_filesystem_id().empty()) {
    _internal_set_filesystem_id(from._internal_filesystem_id());
  }
  if (from._internal_bytes_available() != 0) {
    _internal_set_bytes_available(from._internal_bytes_available());
  }
  if (from._internal_bytes_capacity() != 0) {
    _internal_set_bytes_capacity(from._internal_bytes_capacity());
  }
  if (from._internal_bytes_to_stop_cleanly() != 0) {
    _internal_set_bytes_to_stop_cleanly(from._internal_bytes_to_stop_cleanly());
  }
  if (from._internal_bytes_when_alert_issued() != 0) {
    _internal_set_bytes_when_alert_issued(from._internal_bytes_when_alert_issued());
  }
  if (from._internal_bytes_per_second() != 0) {
    _internal_set_bytes_per_second(from._internal_bytes_per_second());
  }
  if (from._internal_recommend_alert() != 0) {
    _internal_set_recommend_alert(from._internal_recommend_alert());
  }
  if (from._internal_recommend_stop() != 0) {
    _internal_set_recommend_stop(from._internal_recommend_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilesystemDiskSpaceInfo::CopyFrom(const FilesystemDiskSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.FilesystemDiskSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilesystemDiskSpaceInfo::IsInitialized() const {
  return true;
}

void FilesystemDiskSpaceInfo::InternalSwap(FilesystemDiskSpaceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  what_.InternalSwap(&other->what_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filesystem_id_, lhs_arena,
      &other->filesystem_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilesystemDiskSpaceInfo, recommend_stop_)
      + sizeof(FilesystemDiskSpaceInfo::recommend_stop_)
      - PROTOBUF_FIELD_OFFSET(FilesystemDiskSpaceInfo, bytes_available_)>(
          reinterpret_cast<char*>(&bytes_available_),
          reinterpret_cast<char*>(&other->bytes_available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilesystemDiskSpaceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[10]);
}

// ===================================================================

class GetDiskSpaceInfoRequest::_Internal {
 public:
};

GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetDiskSpaceInfoRequest)
}
GetDiskSpaceInfoRequest::GetDiskSpaceInfoRequest(const GetDiskSpaceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetDiskSpaceInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDiskSpaceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDiskSpaceInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetDiskSpaceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[11]);
}

// ===================================================================

class StreamDiskSpaceInfoRequest::_Internal {
 public:
};

StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.StreamDiskSpaceInfoRequest)
}
StreamDiskSpaceInfoRequest::StreamDiskSpaceInfoRequest(const StreamDiskSpaceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  period_ = from.period_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.StreamDiskSpaceInfoRequest)
}

void StreamDiskSpaceInfoRequest::SharedCtor() {
period_ = 0u;
}

StreamDiskSpaceInfoRequest::~StreamDiskSpaceInfoRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.StreamDiskSpaceInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamDiskSpaceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamDiskSpaceInfoRequest::ArenaDtor(void* object) {
  StreamDiskSpaceInfoRequest* _this = reinterpret_cast< StreamDiskSpaceInfoRequest* >(object);
  (void)_this;
}
void StreamDiskSpaceInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamDiskSpaceInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamDiskSpaceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.StreamDiskSpaceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  period_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamDiskSpaceInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamDiskSpaceInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.StreamDiskSpaceInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 period = 1;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.StreamDiskSpaceInfoRequest)
  return target;
}

size_t StreamDiskSpaceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.StreamDiskSpaceInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 period = 1;
  if (this->_internal_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamDiskSpaceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamDiskSpaceInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamDiskSpaceInfoRequest::GetClassData() const { return &_class_data_; }

void StreamDiskSpaceInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamDiskSpaceInfoRequest *>(to)->MergeFrom(
      static_cast<const StreamDiskSpaceInfoRequest &>(from));
}


void StreamDiskSpaceInfoRequest::MergeFrom(const StreamDiskSpaceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.StreamDiskSpaceInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_period() != 0) {
    _internal_set_period(from._internal_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamDiskSpaceInfoRequest::CopyFrom(const StreamDiskSpaceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.StreamDiskSpaceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDiskSpaceInfoRequest::IsInitialized() const {
  return true;
}

void StreamDiskSpaceInfoRequest::InternalSwap(StreamDiskSpaceInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamDiskSpaceInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[12]);
}

// ===================================================================

class GetDiskSpaceInfoResponse::_Internal {
 public:
};

GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filesystem_disk_space_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetDiskSpaceInfoResponse)
}
GetDiskSpaceInfoResponse::GetDiskSpaceInfoResponse(const GetDiskSpaceInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filesystem_disk_space_info_(from.filesystem_disk_space_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetDiskSpaceInfoResponse)
}

void GetDiskSpaceInfoResponse::SharedCtor() {
}

GetDiskSpaceInfoResponse::~GetDiskSpaceInfoResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.GetDiskSpaceInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDiskSpaceInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDiskSpaceInfoResponse::ArenaDtor(void* object) {
  GetDiskSpaceInfoResponse* _this = reinterpret_cast< GetDiskSpaceInfoResponse* >(object);
  (void)_this;
}
void GetDiskSpaceInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDiskSpaceInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDiskSpaceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.GetDiskSpaceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filesystem_disk_space_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDiskSpaceInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.instance.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filesystem_disk_space_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDiskSpaceInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.GetDiskSpaceInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.instance.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filesystem_disk_space_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filesystem_disk_space_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.GetDiskSpaceInfoResponse)
  return target;
}

size_t GetDiskSpaceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.GetDiskSpaceInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.instance.FilesystemDiskSpaceInfo filesystem_disk_space_info = 1;
  total_size += 1UL * this->_internal_filesystem_disk_space_info_size();
  for (const auto& msg : this->filesystem_disk_space_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDiskSpaceInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDiskSpaceInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDiskSpaceInfoResponse::GetClassData() const { return &_class_data_; }

void GetDiskSpaceInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDiskSpaceInfoResponse *>(to)->MergeFrom(
      static_cast<const GetDiskSpaceInfoResponse &>(from));
}


void GetDiskSpaceInfoResponse::MergeFrom(const GetDiskSpaceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.GetDiskSpaceInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filesystem_disk_space_info_.MergeFrom(from.filesystem_disk_space_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDiskSpaceInfoResponse::CopyFrom(const GetDiskSpaceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.GetDiskSpaceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiskSpaceInfoResponse::IsInitialized() const {
  return true;
}

void GetDiskSpaceInfoResponse::InternalSwap(GetDiskSpaceInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filesystem_disk_space_info_.InternalSwap(&other->filesystem_disk_space_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDiskSpaceInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[13]);
}

// ===================================================================

class GetMachineIdRequest::_Internal {
 public:
};

GetMachineIdRequest::GetMachineIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetMachineIdRequest)
}
GetMachineIdRequest::GetMachineIdRequest(const GetMachineIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetMachineIdRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMachineIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMachineIdRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetMachineIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[14]);
}

// ===================================================================

class GetMachineIdResponse::_Internal {
 public:
};

GetMachineIdResponse::GetMachineIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.GetMachineIdResponse)
}
GetMachineIdResponse::GetMachineIdResponse(const GetMachineIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machine_id().empty()) {
    machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.GetMachineIdResponse)
}

void GetMachineIdResponse::SharedCtor() {
machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetMachineIdResponse::~GetMachineIdResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.GetMachineIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMachineIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMachineIdResponse::ArenaDtor(void* object) {
  GetMachineIdResponse* _this = reinterpret_cast< GetMachineIdResponse* >(object);
  (void)_this;
}
void GetMachineIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMachineIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMachineIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.GetMachineIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMachineIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.instance.GetMachineIdResponse.machine_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMachineIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.GetMachineIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string machine_id = 1;
  if (!this->_internal_machine_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine_id().data(), static_cast<int>(this->_internal_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.instance.GetMachineIdResponse.machine_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.GetMachineIdResponse)
  return target;
}

size_t GetMachineIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.GetMachineIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string machine_id = 1;
  if (!this->_internal_machine_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMachineIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMachineIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMachineIdResponse::GetClassData() const { return &_class_data_; }

void GetMachineIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMachineIdResponse *>(to)->MergeFrom(
      static_cast<const GetMachineIdResponse &>(from));
}


void GetMachineIdResponse::MergeFrom(const GetMachineIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.GetMachineIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_machine_id().empty()) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMachineIdResponse::CopyFrom(const GetMachineIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.GetMachineIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMachineIdResponse::IsInitialized() const {
  return true;
}

void GetMachineIdResponse::InternalSwap(GetMachineIdResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_id_, lhs_arena,
      &other->machine_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMachineIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[15]);
}

// ===================================================================

class StreamInstanceActivityRequest::_Internal {
 public:
};

StreamInstanceActivityRequest::StreamInstanceActivityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.StreamInstanceActivityRequest)
}
StreamInstanceActivityRequest::StreamInstanceActivityRequest(const StreamInstanceActivityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.StreamInstanceActivityRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInstanceActivityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInstanceActivityRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamInstanceActivityRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[16]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
  static const ::minknow_api::device::GetDeviceInfoResponse& device_info(const DeviceInfo* msg);
};

const ::minknow_api::device::GetDeviceInfoResponse&
DeviceInfo::_Internal::device_info(const DeviceInfo* msg) {
  return *msg->device_info_;
}
void DeviceInfo::clear_device_info() {
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_info()) {
    device_info_ = new ::minknow_api::device::GetDeviceInfoResponse(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  device_state_ = from.device_state_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_state_) -
    reinterpret_cast<char*>(&device_info_)) + sizeof(device_state_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.DeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_info_;
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  device_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_state(static_cast<::minknow_api::device::GetDeviceStateResponse_DeviceState>(val));
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetDeviceInfoResponse device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
  if (this->_internal_device_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_state(), target);
  }

  // .minknow_api.device.GetDeviceInfoResponse device_info = 2;
  if (this->_internal_has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.device.GetDeviceInfoResponse device_info = 2;
  if (this->_internal_has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  // .minknow_api.device.GetDeviceStateResponse.DeviceState device_state = 1;
  if (this->_internal_device_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }

void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceInfo *>(to)->MergeFrom(
      static_cast<const DeviceInfo &>(from));
}


void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_info()) {
    _internal_mutable_device_info()->::minknow_api::device::GetDeviceInfoResponse::MergeFrom(from._internal_device_info());
  }
  if (from._internal_device_state() != 0) {
    _internal_set_device_state(from._internal_device_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, device_state_)
      + sizeof(DeviceInfo::device_state_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, device_info_)>(
          reinterpret_cast<char*>(&device_info_),
          reinterpret_cast<char*>(&other->device_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[17]);
}

// ===================================================================

class BasecallSpeed::_Internal {
 public:
};

BasecallSpeed::BasecallSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.BasecallSpeed)
}
BasecallSpeed::BasecallSpeed(const BasecallSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mean_basecall_speed_ = from.mean_basecall_speed_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.BasecallSpeed)
}

void BasecallSpeed::SharedCtor() {
mean_basecall_speed_ = 0;
}

BasecallSpeed::~BasecallSpeed() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.BasecallSpeed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasecallSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasecallSpeed::ArenaDtor(void* object) {
  BasecallSpeed* _this = reinterpret_cast< BasecallSpeed* >(object);
  (void)_this;
}
void BasecallSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasecallSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasecallSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.BasecallSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_basecall_speed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasecallSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float mean_basecall_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mean_basecall_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasecallSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.BasecallSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mean_basecall_speed = 1;
  if (!(this->_internal_mean_basecall_speed() <= 0 && this->_internal_mean_basecall_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mean_basecall_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.BasecallSpeed)
  return target;
}

size_t BasecallSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.BasecallSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float mean_basecall_speed = 1;
  if (!(this->_internal_mean_basecall_speed() <= 0 && this->_internal_mean_basecall_speed() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallSpeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasecallSpeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallSpeed::GetClassData() const { return &_class_data_; }

void BasecallSpeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasecallSpeed *>(to)->MergeFrom(
      static_cast<const BasecallSpeed &>(from));
}


void BasecallSpeed::MergeFrom(const BasecallSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.BasecallSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_mean_basecall_speed() <= 0 && from._internal_mean_basecall_speed() >= 0)) {
    _internal_set_mean_basecall_speed(from._internal_mean_basecall_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasecallSpeed::CopyFrom(const BasecallSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.BasecallSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasecallSpeed::IsInitialized() const {
  return true;
}

void BasecallSpeed::InternalSwap(BasecallSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mean_basecall_speed_, other->mean_basecall_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasecallSpeed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[18]);
}

// ===================================================================

class N50::_Internal {
 public:
};

N50::N50(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.N50)
}
N50::N50(const N50& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n50_ = from.n50_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.N50)
}

void N50::SharedCtor() {
n50_ = 0;
}

N50::~N50() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.N50)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void N50::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void N50::ArenaDtor(void* object) {
  N50* _this = reinterpret_cast< N50* >(object);
  (void)_this;
}
void N50::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void N50::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void N50::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.N50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n50_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* N50::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float n50 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          n50_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* N50::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.N50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float n50 = 1;
  if (!(this->_internal_n50() <= 0 && this->_internal_n50() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_n50(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.N50)
  return target;
}

size_t N50::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.N50)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float n50 = 1;
  if (!(this->_internal_n50() <= 0 && this->_internal_n50() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData N50::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    N50::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*N50::GetClassData() const { return &_class_data_; }

void N50::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<N50 *>(to)->MergeFrom(
      static_cast<const N50 &>(from));
}


void N50::MergeFrom(const N50& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.N50)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_n50() <= 0 && from._internal_n50() >= 0)) {
    _internal_set_n50(from._internal_n50());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void N50::CopyFrom(const N50& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.N50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool N50::IsInitialized() const {
  return true;
}

void N50::InternalSwap(N50* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(n50_, other->n50_);
}

::PROTOBUF_NAMESPACE_ID::Metadata N50::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[19]);
}

// ===================================================================

StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse() {}
StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::MergeFrom(const StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[20]);
}

// ===================================================================

class StreamInstanceActivityResponse_FlowCellHealth::_Internal {
 public:
};

StreamInstanceActivityResponse_FlowCellHealth::StreamInstanceActivityResponse_FlowCellHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_state_percentages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
}
StreamInstanceActivityResponse_FlowCellHealth::StreamInstanceActivityResponse_FlowCellHealth(const StreamInstanceActivityResponse_FlowCellHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_state_percentages_.MergeFrom(from.channel_state_percentages_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
}

void StreamInstanceActivityResponse_FlowCellHealth::SharedCtor() {
}

StreamInstanceActivityResponse_FlowCellHealth::~StreamInstanceActivityResponse_FlowCellHealth() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamInstanceActivityResponse_FlowCellHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamInstanceActivityResponse_FlowCellHealth::ArenaDtor(void* object) {
  StreamInstanceActivityResponse_FlowCellHealth* _this = reinterpret_cast< StreamInstanceActivityResponse_FlowCellHealth* >(object);
  (void)_this;
  _this->channel_state_percentages_. ~MapField();
}
inline void StreamInstanceActivityResponse_FlowCellHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StreamInstanceActivityResponse_FlowCellHealth::ArenaDtor);
  }
}
void StreamInstanceActivityResponse_FlowCellHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamInstanceActivityResponse_FlowCellHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_state_percentages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInstanceActivityResponse_FlowCellHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, float> channel_state_percentages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&channel_state_percentages_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInstanceActivityResponse_FlowCellHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> channel_state_percentages = 1;
  if (!this->_internal_channel_state_percentages().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth.ChannelStatePercentagesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_channel_state_percentages().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_channel_state_percentages().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_channel_state_percentages().begin();
          it != this->_internal_channel_state_percentages().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_channel_state_percentages().begin();
          it != this->_internal_channel_state_percentages().end(); ++it) {
        target = StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  return target;
}

size_t StreamInstanceActivityResponse_FlowCellHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> channel_state_percentages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_state_percentages_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_channel_state_percentages().begin();
      it != this->_internal_channel_state_percentages().end(); ++it) {
    total_size += StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInstanceActivityResponse_FlowCellHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamInstanceActivityResponse_FlowCellHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInstanceActivityResponse_FlowCellHealth::GetClassData() const { return &_class_data_; }

void StreamInstanceActivityResponse_FlowCellHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamInstanceActivityResponse_FlowCellHealth *>(to)->MergeFrom(
      static_cast<const StreamInstanceActivityResponse_FlowCellHealth &>(from));
}


void StreamInstanceActivityResponse_FlowCellHealth::MergeFrom(const StreamInstanceActivityResponse_FlowCellHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_state_percentages_.MergeFrom(from.channel_state_percentages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInstanceActivityResponse_FlowCellHealth::CopyFrom(const StreamInstanceActivityResponse_FlowCellHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInstanceActivityResponse_FlowCellHealth::IsInitialized() const {
  return true;
}

void StreamInstanceActivityResponse_FlowCellHealth::InternalSwap(StreamInstanceActivityResponse_FlowCellHealth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_state_percentages_.InternalSwap(&other->channel_state_percentages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInstanceActivityResponse_FlowCellHealth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[21]);
}

// ===================================================================

class StreamInstanceActivityResponse::_Internal {
 public:
  static const ::minknow_api::instance::DeviceInfo& device_info(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::device::GetFlowCellInfoResponse& flow_cell_info(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::protocol::ProtocolRunInfo& protocol_run_info(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::acquisition::AcquisitionRunInfo& acquisition_run_info(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth& flow_cell_health(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::acquisition::AcquisitionYieldSummary& yield_summary(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::instance::BasecallSpeed& basecall_speed(const StreamInstanceActivityResponse* msg);
  static const ::minknow_api::instance::N50& n50(const StreamInstanceActivityResponse* msg);
};

const ::minknow_api::instance::DeviceInfo&
StreamInstanceActivityResponse::_Internal::device_info(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.device_info_;
}
const ::minknow_api::device::GetFlowCellInfoResponse&
StreamInstanceActivityResponse::_Internal::flow_cell_info(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.flow_cell_info_;
}
const ::minknow_api::protocol::ProtocolRunInfo&
StreamInstanceActivityResponse::_Internal::protocol_run_info(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.protocol_run_info_;
}
const ::minknow_api::acquisition::AcquisitionRunInfo&
StreamInstanceActivityResponse::_Internal::acquisition_run_info(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.acquisition_run_info_;
}
const ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth&
StreamInstanceActivityResponse::_Internal::flow_cell_health(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.flow_cell_health_;
}
const ::minknow_api::acquisition::AcquisitionYieldSummary&
StreamInstanceActivityResponse::_Internal::yield_summary(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.yield_summary_;
}
const ::minknow_api::instance::BasecallSpeed&
StreamInstanceActivityResponse::_Internal::basecall_speed(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.basecall_speed_;
}
const ::minknow_api::instance::N50&
StreamInstanceActivityResponse::_Internal::n50(const StreamInstanceActivityResponse* msg) {
  return *msg->stream_value_.n50_;
}
void StreamInstanceActivityResponse::set_allocated_device_info(::minknow_api::instance::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::instance::DeviceInfo>::GetOwningArena(device_info);
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    set_has_device_info();
    stream_value_.device_info_ = device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.device_info)
}
void StreamInstanceActivityResponse::set_allocated_flow_cell_info(::minknow_api::device::GetFlowCellInfoResponse* flow_cell_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (flow_cell_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_cell_info));
    if (message_arena != submessage_arena) {
      flow_cell_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_cell_info, submessage_arena);
    }
    set_has_flow_cell_info();
    stream_value_.flow_cell_info_ = flow_cell_info;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.flow_cell_info)
}
void StreamInstanceActivityResponse::clear_flow_cell_info() {
  if (_internal_has_flow_cell_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_value_.flow_cell_info_;
    }
    clear_has_stream_value();
  }
}
void StreamInstanceActivityResponse::set_allocated_protocol_run_info(::minknow_api::protocol::ProtocolRunInfo* protocol_run_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (protocol_run_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_run_info));
    if (message_arena != submessage_arena) {
      protocol_run_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_run_info, submessage_arena);
    }
    set_has_protocol_run_info();
    stream_value_.protocol_run_info_ = protocol_run_info;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.protocol_run_info)
}
void StreamInstanceActivityResponse::clear_protocol_run_info() {
  if (_internal_has_protocol_run_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_value_.protocol_run_info_;
    }
    clear_has_stream_value();
  }
}
void StreamInstanceActivityResponse::set_allocated_acquisition_run_info(::minknow_api::acquisition::AcquisitionRunInfo* acquisition_run_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (acquisition_run_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_run_info));
    if (message_arena != submessage_arena) {
      acquisition_run_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquisition_run_info, submessage_arena);
    }
    set_has_acquisition_run_info();
    stream_value_.acquisition_run_info_ = acquisition_run_info;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.acquisition_run_info)
}
void StreamInstanceActivityResponse::clear_acquisition_run_info() {
  if (_internal_has_acquisition_run_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_value_.acquisition_run_info_;
    }
    clear_has_stream_value();
  }
}
void StreamInstanceActivityResponse::set_allocated_flow_cell_health(::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth* flow_cell_health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (flow_cell_health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth>::GetOwningArena(flow_cell_health);
    if (message_arena != submessage_arena) {
      flow_cell_health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow_cell_health, submessage_arena);
    }
    set_has_flow_cell_health();
    stream_value_.flow_cell_health_ = flow_cell_health;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.flow_cell_health)
}
void StreamInstanceActivityResponse::set_allocated_yield_summary(::minknow_api::acquisition::AcquisitionYieldSummary* yield_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (yield_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yield_summary));
    if (message_arena != submessage_arena) {
      yield_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_summary, submessage_arena);
    }
    set_has_yield_summary();
    stream_value_.yield_summary_ = yield_summary;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.yield_summary)
}
void StreamInstanceActivityResponse::clear_yield_summary() {
  if (_internal_has_yield_summary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete stream_value_.yield_summary_;
    }
    clear_has_stream_value();
  }
}
void StreamInstanceActivityResponse::set_allocated_basecall_speed(::minknow_api::instance::BasecallSpeed* basecall_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (basecall_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::instance::BasecallSpeed>::GetOwningArena(basecall_speed);
    if (message_arena != submessage_arena) {
      basecall_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basecall_speed, submessage_arena);
    }
    set_has_basecall_speed();
    stream_value_.basecall_speed_ = basecall_speed;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.basecall_speed)
}
void StreamInstanceActivityResponse::set_allocated_n50(::minknow_api::instance::N50* n50) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stream_value();
  if (n50) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::instance::N50>::GetOwningArena(n50);
    if (message_arena != submessage_arena) {
      n50 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, n50, submessage_arena);
    }
    set_has_n50();
    stream_value_.n50_ = n50;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.instance.StreamInstanceActivityResponse.n50)
}
StreamInstanceActivityResponse::StreamInstanceActivityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.instance.StreamInstanceActivityResponse)
}
StreamInstanceActivityResponse::StreamInstanceActivityResponse(const StreamInstanceActivityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_value();
  switch (from.stream_value_case()) {
    case kDeviceInfo: {
      _internal_mutable_device_info()->::minknow_api::instance::DeviceInfo::MergeFrom(from._internal_device_info());
      break;
    }
    case kFlowCellInfo: {
      _internal_mutable_flow_cell_info()->::minknow_api::device::GetFlowCellInfoResponse::MergeFrom(from._internal_flow_cell_info());
      break;
    }
    case kProtocolRunInfo: {
      _internal_mutable_protocol_run_info()->::minknow_api::protocol::ProtocolRunInfo::MergeFrom(from._internal_protocol_run_info());
      break;
    }
    case kAcquisitionRunInfo: {
      _internal_mutable_acquisition_run_info()->::minknow_api::acquisition::AcquisitionRunInfo::MergeFrom(from._internal_acquisition_run_info());
      break;
    }
    case kFlowCellHealth: {
      _internal_mutable_flow_cell_health()->::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth::MergeFrom(from._internal_flow_cell_health());
      break;
    }
    case kYieldSummary: {
      _internal_mutable_yield_summary()->::minknow_api::acquisition::AcquisitionYieldSummary::MergeFrom(from._internal_yield_summary());
      break;
    }
    case kBasecallSpeed: {
      _internal_mutable_basecall_speed()->::minknow_api::instance::BasecallSpeed::MergeFrom(from._internal_basecall_speed());
      break;
    }
    case kN50: {
      _internal_mutable_n50()->::minknow_api::instance::N50::MergeFrom(from._internal_n50());
      break;
    }
    case STREAM_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.instance.StreamInstanceActivityResponse)
}

void StreamInstanceActivityResponse::SharedCtor() {
clear_has_stream_value();
}

StreamInstanceActivityResponse::~StreamInstanceActivityResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.instance.StreamInstanceActivityResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamInstanceActivityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_stream_value()) {
    clear_stream_value();
  }
}

void StreamInstanceActivityResponse::ArenaDtor(void* object) {
  StreamInstanceActivityResponse* _this = reinterpret_cast< StreamInstanceActivityResponse* >(object);
  (void)_this;
}
void StreamInstanceActivityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInstanceActivityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamInstanceActivityResponse::clear_stream_value() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.instance.StreamInstanceActivityResponse)
  switch (stream_value_case()) {
    case kDeviceInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.device_info_;
      }
      break;
    }
    case kFlowCellInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.flow_cell_info_;
      }
      break;
    }
    case kProtocolRunInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.protocol_run_info_;
      }
      break;
    }
    case kAcquisitionRunInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.acquisition_run_info_;
      }
      break;
    }
    case kFlowCellHealth: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.flow_cell_health_;
      }
      break;
    }
    case kYieldSummary: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.yield_summary_;
      }
      break;
    }
    case kBasecallSpeed: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.basecall_speed_;
      }
      break;
    }
    case kN50: {
      if (GetArenaForAllocation() == nullptr) {
        delete stream_value_.n50_;
      }
      break;
    }
    case STREAM_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_VALUE_NOT_SET;
}


void StreamInstanceActivityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.instance.StreamInstanceActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInstanceActivityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.instance.DeviceInfo device_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.device.GetFlowCellInfoResponse flow_cell_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_cell_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.protocol.ProtocolRunInfo protocol_run_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_run_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionRunInfo acquisition_run_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_run_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth flow_cell_health = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow_cell_health(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.BasecallSpeed basecall_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_basecall_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.instance.N50 n50 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_n50(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInstanceActivityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.instance.StreamInstanceActivityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.instance.DeviceInfo device_info = 1;
  if (_internal_has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device_info(this), target, stream);
  }

  // .minknow_api.device.GetFlowCellInfoResponse flow_cell_info = 2;
  if (_internal_has_flow_cell_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flow_cell_info(this), target, stream);
  }

  // .minknow_api.protocol.ProtocolRunInfo protocol_run_info = 3;
  if (_internal_has_protocol_run_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::protocol_run_info(this), target, stream);
  }

  // .minknow_api.acquisition.AcquisitionRunInfo acquisition_run_info = 4;
  if (_internal_has_acquisition_run_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acquisition_run_info(this), target, stream);
  }

  // .minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth flow_cell_health = 5;
  if (_internal_has_flow_cell_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::flow_cell_health(this), target, stream);
  }

  // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 6;
  if (_internal_has_yield_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::yield_summary(this), target, stream);
  }

  // .minknow_api.instance.BasecallSpeed basecall_speed = 7;
  if (_internal_has_basecall_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::basecall_speed(this), target, stream);
  }

  // .minknow_api.instance.N50 n50 = 8;
  if (_internal_has_n50()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::n50(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.instance.StreamInstanceActivityResponse)
  return target;
}

size_t StreamInstanceActivityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.instance.StreamInstanceActivityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_value_case()) {
    // .minknow_api.instance.DeviceInfo device_info = 1;
    case kDeviceInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.device_info_);
      break;
    }
    // .minknow_api.device.GetFlowCellInfoResponse flow_cell_info = 2;
    case kFlowCellInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.flow_cell_info_);
      break;
    }
    // .minknow_api.protocol.ProtocolRunInfo protocol_run_info = 3;
    case kProtocolRunInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.protocol_run_info_);
      break;
    }
    // .minknow_api.acquisition.AcquisitionRunInfo acquisition_run_info = 4;
    case kAcquisitionRunInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.acquisition_run_info_);
      break;
    }
    // .minknow_api.instance.StreamInstanceActivityResponse.FlowCellHealth flow_cell_health = 5;
    case kFlowCellHealth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.flow_cell_health_);
      break;
    }
    // .minknow_api.acquisition.AcquisitionYieldSummary yield_summary = 6;
    case kYieldSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.yield_summary_);
      break;
    }
    // .minknow_api.instance.BasecallSpeed basecall_speed = 7;
    case kBasecallSpeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.basecall_speed_);
      break;
    }
    // .minknow_api.instance.N50 n50 = 8;
    case kN50: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_value_.n50_);
      break;
    }
    case STREAM_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInstanceActivityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamInstanceActivityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInstanceActivityResponse::GetClassData() const { return &_class_data_; }

void StreamInstanceActivityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamInstanceActivityResponse *>(to)->MergeFrom(
      static_cast<const StreamInstanceActivityResponse &>(from));
}


void StreamInstanceActivityResponse::MergeFrom(const StreamInstanceActivityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.instance.StreamInstanceActivityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_value_case()) {
    case kDeviceInfo: {
      _internal_mutable_device_info()->::minknow_api::instance::DeviceInfo::MergeFrom(from._internal_device_info());
      break;
    }
    case kFlowCellInfo: {
      _internal_mutable_flow_cell_info()->::minknow_api::device::GetFlowCellInfoResponse::MergeFrom(from._internal_flow_cell_info());
      break;
    }
    case kProtocolRunInfo: {
      _internal_mutable_protocol_run_info()->::minknow_api::protocol::ProtocolRunInfo::MergeFrom(from._internal_protocol_run_info());
      break;
    }
    case kAcquisitionRunInfo: {
      _internal_mutable_acquisition_run_info()->::minknow_api::acquisition::AcquisitionRunInfo::MergeFrom(from._internal_acquisition_run_info());
      break;
    }
    case kFlowCellHealth: {
      _internal_mutable_flow_cell_health()->::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth::MergeFrom(from._internal_flow_cell_health());
      break;
    }
    case kYieldSummary: {
      _internal_mutable_yield_summary()->::minknow_api::acquisition::AcquisitionYieldSummary::MergeFrom(from._internal_yield_summary());
      break;
    }
    case kBasecallSpeed: {
      _internal_mutable_basecall_speed()->::minknow_api::instance::BasecallSpeed::MergeFrom(from._internal_basecall_speed());
      break;
    }
    case kN50: {
      _internal_mutable_n50()->::minknow_api::instance::N50::MergeFrom(from._internal_n50());
      break;
    }
    case STREAM_VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInstanceActivityResponse::CopyFrom(const StreamInstanceActivityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.instance.StreamInstanceActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInstanceActivityResponse::IsInitialized() const {
  return true;
}

void StreamInstanceActivityResponse::InternalSwap(StreamInstanceActivityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stream_value_, other->stream_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInstanceActivityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2finstance_2eproto_getter, &descriptor_table_minknow_5fapi_2finstance_2eproto_once,
      file_level_metadata_minknow_5fapi_2finstance_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace instance
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetVersionInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::GetVersionInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetVersionInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion* Arena::CreateMaybeMessage< ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetVersionInfoResponse_MinknowVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetVersionInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::GetVersionInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetVersionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetOutputDirectoriesRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::GetOutputDirectoriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetOutputDirectoriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::OutputDirectories* Arena::CreateMaybeMessage< ::minknow_api::instance::OutputDirectories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::OutputDirectories >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetDefaultOutputDirectoriesRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetDefaultOutputDirectoriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::SetOutputDirectoryRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::SetOutputDirectoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::SetOutputDirectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::SetOutputDirectoryResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::SetOutputDirectoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::SetOutputDirectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::SetReadsDirectoryRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::SetReadsDirectoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::SetReadsDirectoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::SetReadsDirectoryResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::SetReadsDirectoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::SetReadsDirectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::FilesystemDiskSpaceInfo* Arena::CreateMaybeMessage< ::minknow_api::instance::FilesystemDiskSpaceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::FilesystemDiskSpaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetDiskSpaceInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::GetDiskSpaceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetDiskSpaceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::StreamDiskSpaceInfoRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::StreamDiskSpaceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::StreamDiskSpaceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetDiskSpaceInfoResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::GetDiskSpaceInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetDiskSpaceInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetMachineIdRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::GetMachineIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetMachineIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::GetMachineIdResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::GetMachineIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::GetMachineIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::StreamInstanceActivityRequest* Arena::CreateMaybeMessage< ::minknow_api::instance::StreamInstanceActivityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::StreamInstanceActivityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::DeviceInfo* Arena::CreateMaybeMessage< ::minknow_api::instance::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::BasecallSpeed* Arena::CreateMaybeMessage< ::minknow_api::instance::BasecallSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::BasecallSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::N50* Arena::CreateMaybeMessage< ::minknow_api::instance::N50 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::N50 >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth_ChannelStatePercentagesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth* Arena::CreateMaybeMessage< ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::StreamInstanceActivityResponse_FlowCellHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::instance::StreamInstanceActivityResponse* Arena::CreateMaybeMessage< ::minknow_api::instance::StreamInstanceActivityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::instance::StreamInstanceActivityResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
