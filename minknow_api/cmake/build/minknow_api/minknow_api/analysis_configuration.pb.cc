// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minknow_api/analysis_configuration.proto

#include "minknow_api/analysis_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minknow_api {
namespace analysis_configuration {
constexpr EventDetection::EventDetection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_to_base_ratio_(nullptr)
  , threshold_(0)
  , max_mux_change_back_shift_(0u)
  , peak_height_(0)
  , window_size_(0u)
  , break_on_mux_changes_(false){}
struct EventDetectionDefaultTypeInternal {
  constexpr EventDetectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDetectionDefaultTypeInternal() {}
  union {
    EventDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDetectionDefaultTypeInternal _EventDetection_default_instance_;
constexpr ReadDetectionParams::ReadDetectionParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : break_reads_after_events_(nullptr)
  , break_reads_after_seconds_(nullptr)
  , open_pore_min_(nullptr)
  , open_pore_max_(nullptr)
  , open_pore_default_(nullptr)
  , open_pore_seconds_required_(nullptr)
  , minimum_delta_mean_(0)
  , mode_(0)

  , look_back_(0u)
  , break_reads_on_mux_changes_(false){}
struct ReadDetectionParamsDefaultTypeInternal {
  constexpr ReadDetectionParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadDetectionParamsDefaultTypeInternal() {}
  union {
    ReadDetectionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadDetectionParamsDefaultTypeInternal _ReadDetectionParams_default_instance_;
constexpr ReadClassificationParams_Parameters::ReadClassificationParams_Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rules_in_execution_order_(){}
struct ReadClassificationParams_ParametersDefaultTypeInternal {
  constexpr ReadClassificationParams_ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadClassificationParams_ParametersDefaultTypeInternal() {}
  union {
    ReadClassificationParams_Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadClassificationParams_ParametersDefaultTypeInternal _ReadClassificationParams_Parameters_default_instance_;
constexpr ReadClassificationParams::ReadClassificationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_classifications_()
  , open_pore_classifications_()
  , classification_strategy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_sample_size_(nullptr)
  , parameters_(nullptr)
  , open_pore_ewma_weight_(nullptr)
  , scheme_module_(0)
{}
struct ReadClassificationParamsDefaultTypeInternal {
  constexpr ReadClassificationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadClassificationParamsDefaultTypeInternal() {}
  union {
    ReadClassificationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadClassificationParamsDefaultTypeInternal _ReadClassificationParams_default_instance_;
constexpr ChannelStates_Logic_Behaviour::ChannelStates_Logic_Behaviour(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reset_on_mux_change_(0)
  , reset_on_well_change_(0)
  , latch_(0)
  , reset_on_effective_mux_change_(0)
  , reset_on_effective_well_change_(0){}
struct ChannelStates_Logic_BehaviourDefaultTypeInternal {
  constexpr ChannelStates_Logic_BehaviourDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_Logic_BehaviourDefaultTypeInternal() {}
  union {
    ChannelStates_Logic_Behaviour _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_Logic_BehaviourDefaultTypeInternal _ChannelStates_Logic_Behaviour_default_instance_;
constexpr ChannelStates_Logic_Ranges_Range::ChannelStates_Logic_Ranges_Range(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lower_pa_(0)
  , upper_pa_(0){}
struct ChannelStates_Logic_Ranges_RangeDefaultTypeInternal {
  constexpr ChannelStates_Logic_Ranges_RangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_Logic_Ranges_RangeDefaultTypeInternal() {}
  union {
    ChannelStates_Logic_Ranges_Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_Logic_Ranges_RangeDefaultTypeInternal _ChannelStates_Logic_Ranges_Range_default_instance_;
constexpr ChannelStates_Logic_Ranges::ChannelStates_Logic_Ranges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(nullptr){}
struct ChannelStates_Logic_RangesDefaultTypeInternal {
  constexpr ChannelStates_Logic_RangesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_Logic_RangesDefaultTypeInternal() {}
  union {
    ChannelStates_Logic_Ranges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_Logic_RangesDefaultTypeInternal _ChannelStates_Logic_Ranges_default_instance_;
constexpr ChannelStates_Logic::ChannelStates_Logic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : criteria_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , classification_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ranges_(nullptr)
  , behaviour_(nullptr)
  , rank_(0){}
struct ChannelStates_LogicDefaultTypeInternal {
  constexpr ChannelStates_LogicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_LogicDefaultTypeInternal() {}
  union {
    ChannelStates_Logic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_LogicDefaultTypeInternal _ChannelStates_Logic_default_instance_;
constexpr ChannelStates_Style::ChannelStates_Style(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , colour_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_(nullptr){}
struct ChannelStates_StyleDefaultTypeInternal {
  constexpr ChannelStates_StyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_StyleDefaultTypeInternal() {}
  union {
    ChannelStates_Style _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_StyleDefaultTypeInternal _ChannelStates_Style_default_instance_;
constexpr ChannelStates_Group::ChannelStates_Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr){}
struct ChannelStates_GroupDefaultTypeInternal {
  constexpr ChannelStates_GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStates_GroupDefaultTypeInternal() {}
  union {
    ChannelStates_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStates_GroupDefaultTypeInternal _ChannelStates_Group_default_instance_;
constexpr ChannelStates::ChannelStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_(nullptr)
  , logic_(nullptr)
  , style_(nullptr){}
struct ChannelStatesDefaultTypeInternal {
  constexpr ChannelStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStatesDefaultTypeInternal() {}
  union {
    ChannelStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStatesDefaultTypeInternal _ChannelStates_default_instance_;
constexpr GetAnalysisConfigurationRequest::GetAnalysisConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetAnalysisConfigurationRequestDefaultTypeInternal {
  constexpr GetAnalysisConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAnalysisConfigurationRequestDefaultTypeInternal() {}
  union {
    GetAnalysisConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAnalysisConfigurationRequestDefaultTypeInternal _GetAnalysisConfigurationRequest_default_instance_;
constexpr AnalysisConfiguration_ChannelStatesEntry_DoNotUse::AnalysisConfiguration_ChannelStatesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal {
  constexpr AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AnalysisConfiguration_ChannelStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalysisConfiguration_ChannelStatesEntry_DoNotUseDefaultTypeInternal _AnalysisConfiguration_ChannelStatesEntry_DoNotUse_default_instance_;
constexpr AnalysisConfiguration::AnalysisConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_states_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , event_detection_(nullptr)
  , read_detection_(nullptr)
  , read_classification_(nullptr){}
struct AnalysisConfigurationDefaultTypeInternal {
  constexpr AnalysisConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalysisConfigurationDefaultTypeInternal() {}
  union {
    AnalysisConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalysisConfigurationDefaultTypeInternal _AnalysisConfiguration_default_instance_;
constexpr SetAnalysisConfigurationResponse::SetAnalysisConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetAnalysisConfigurationResponseDefaultTypeInternal {
  constexpr SetAnalysisConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAnalysisConfigurationResponseDefaultTypeInternal() {}
  union {
    SetAnalysisConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAnalysisConfigurationResponseDefaultTypeInternal _SetAnalysisConfigurationResponse_default_instance_;
constexpr ResetAnalysisConfigurationRequest::ResetAnalysisConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetAnalysisConfigurationRequestDefaultTypeInternal {
  constexpr ResetAnalysisConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetAnalysisConfigurationRequestDefaultTypeInternal() {}
  union {
    ResetAnalysisConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetAnalysisConfigurationRequestDefaultTypeInternal _ResetAnalysisConfigurationRequest_default_instance_;
constexpr ResetAnalysisConfigurationResponse::ResetAnalysisConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResetAnalysisConfigurationResponseDefaultTypeInternal {
  constexpr ResetAnalysisConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResetAnalysisConfigurationResponseDefaultTypeInternal() {}
  union {
    ResetAnalysisConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResetAnalysisConfigurationResponseDefaultTypeInternal _ResetAnalysisConfigurationResponse_default_instance_;
constexpr SetAnalysisEnabledStateRequest::SetAnalysisEnabledStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_(false){}
struct SetAnalysisEnabledStateRequestDefaultTypeInternal {
  constexpr SetAnalysisEnabledStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAnalysisEnabledStateRequestDefaultTypeInternal() {}
  union {
    SetAnalysisEnabledStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAnalysisEnabledStateRequestDefaultTypeInternal _SetAnalysisEnabledStateRequest_default_instance_;
constexpr SetAnalysisEnabledStateResponse::SetAnalysisEnabledStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetAnalysisEnabledStateResponseDefaultTypeInternal {
  constexpr SetAnalysisEnabledStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAnalysisEnabledStateResponseDefaultTypeInternal() {}
  union {
    SetAnalysisEnabledStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAnalysisEnabledStateResponseDefaultTypeInternal _SetAnalysisEnabledStateResponse_default_instance_;
constexpr GetChannelStatesDescRequest::GetChannelStatesDescRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetChannelStatesDescRequestDefaultTypeInternal {
  constexpr GetChannelStatesDescRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesDescRequestDefaultTypeInternal() {}
  union {
    GetChannelStatesDescRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesDescRequestDefaultTypeInternal _GetChannelStatesDescRequest_default_instance_;
constexpr GetChannelStatesDescResponse_Style::GetChannelStatesDescResponse_Style(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , colour_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetChannelStatesDescResponse_StyleDefaultTypeInternal {
  constexpr GetChannelStatesDescResponse_StyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesDescResponse_StyleDefaultTypeInternal() {}
  union {
    GetChannelStatesDescResponse_Style _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesDescResponse_StyleDefaultTypeInternal _GetChannelStatesDescResponse_Style_default_instance_;
constexpr GetChannelStatesDescResponse_ChannelState::GetChannelStatesDescResponse_ChannelState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr)
  , id_(0u)
  , global_order_(0u){}
struct GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal {
  constexpr GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal() {}
  union {
    GetChannelStatesDescResponse_ChannelState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesDescResponse_ChannelStateDefaultTypeInternal _GetChannelStatesDescResponse_ChannelState_default_instance_;
constexpr GetChannelStatesDescResponse_Group::GetChannelStatesDescResponse_Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(nullptr){}
struct GetChannelStatesDescResponse_GroupDefaultTypeInternal {
  constexpr GetChannelStatesDescResponse_GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesDescResponse_GroupDefaultTypeInternal() {}
  union {
    GetChannelStatesDescResponse_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesDescResponse_GroupDefaultTypeInternal _GetChannelStatesDescResponse_Group_default_instance_;
constexpr GetChannelStatesDescResponse::GetChannelStatesDescResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_(){}
struct GetChannelStatesDescResponseDefaultTypeInternal {
  constexpr GetChannelStatesDescResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelStatesDescResponseDefaultTypeInternal() {}
  union {
    GetChannelStatesDescResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelStatesDescResponseDefaultTypeInternal _GetChannelStatesDescResponse_default_instance_;
constexpr GetSummaryRequest::GetSummaryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetSummaryRequestDefaultTypeInternal {
  constexpr GetSummaryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSummaryRequestDefaultTypeInternal() {}
  union {
    GetSummaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSummaryRequestDefaultTypeInternal _GetSummaryRequest_default_instance_;
constexpr GetSummaryResponse::GetSummaryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : analysis_enabled_(false)
  , basecalling_enabled_(false){}
struct GetSummaryResponseDefaultTypeInternal {
  constexpr GetSummaryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSummaryResponseDefaultTypeInternal() {}
  union {
    GetSummaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSummaryResponseDefaultTypeInternal _GetSummaryResponse_default_instance_;
constexpr BarcodingConfiguration::BarcodingConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : barcoding_kits_()
  , min_score_(nullptr)
  , min_score_rear_(nullptr)
  , min_score_mid_(nullptr)
  , min_score_mask_(nullptr)
  , trim_barcodes_(false)
  , require_barcodes_both_ends_(false)
  , detect_mid_strand_barcodes_(false){}
struct BarcodingConfigurationDefaultTypeInternal {
  constexpr BarcodingConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BarcodingConfigurationDefaultTypeInternal() {}
  union {
    BarcodingConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BarcodingConfigurationDefaultTypeInternal _BarcodingConfiguration_default_instance_;
constexpr AlignmentConfiguration::AlignmentConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reference_files_()
  , bed_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_coverage_(nullptr)
  , aggregate_statistics_for_multiple_bed_hits_(false){}
struct AlignmentConfigurationDefaultTypeInternal {
  constexpr AlignmentConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlignmentConfigurationDefaultTypeInternal() {}
  union {
    AlignmentConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlignmentConfigurationDefaultTypeInternal _AlignmentConfiguration_default_instance_;
constexpr LampConfiguration::LampConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lamp_kit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_score_barcodes_(nullptr)
  , min_score_masks_(nullptr)
  , min_score_targets_(nullptr){}
struct LampConfigurationDefaultTypeInternal {
  constexpr LampConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LampConfigurationDefaultTypeInternal() {}
  union {
    LampConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LampConfigurationDefaultTypeInternal _LampConfiguration_default_instance_;
constexpr BasecallerConfiguration_ReadFiltering::BasecallerConfiguration_ReadFiltering(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_qscore_(nullptr)
  , min_samples_(nullptr)
  , max_samples_(nullptr)
  , min_bases_(nullptr)
  , max_bases_(nullptr)
  , max_failed_chunks_(nullptr){}
struct BasecallerConfiguration_ReadFilteringDefaultTypeInternal {
  constexpr BasecallerConfiguration_ReadFilteringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallerConfiguration_ReadFilteringDefaultTypeInternal() {}
  union {
    BasecallerConfiguration_ReadFiltering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallerConfiguration_ReadFilteringDefaultTypeInternal _BasecallerConfiguration_ReadFiltering_default_instance_;
constexpr BasecallerConfiguration_TargetFiltering::BasecallerConfiguration_TargetFiltering(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_qscore_(nullptr)
  , min_bases_(nullptr)
  , max_bases_(nullptr){}
struct BasecallerConfiguration_TargetFilteringDefaultTypeInternal {
  constexpr BasecallerConfiguration_TargetFilteringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallerConfiguration_TargetFilteringDefaultTypeInternal() {}
  union {
    BasecallerConfiguration_TargetFiltering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallerConfiguration_TargetFilteringDefaultTypeInternal _BasecallerConfiguration_TargetFiltering_default_instance_;
constexpr BasecallerConfiguration::BasecallerConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , read_filtering_(nullptr)
  , barcoding_configuration_(nullptr)
  , target_filtering_(nullptr)
  , alignment_configuration_(nullptr)
  , lamp_configuration_(nullptr)
  , enable_(false){}
struct BasecallerConfigurationDefaultTypeInternal {
  constexpr BasecallerConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasecallerConfigurationDefaultTypeInternal() {}
  union {
    BasecallerConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasecallerConfigurationDefaultTypeInternal _BasecallerConfiguration_default_instance_;
constexpr SetBasecallerConfigurationRequest::SetBasecallerConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configs_(nullptr){}
struct SetBasecallerConfigurationRequestDefaultTypeInternal {
  constexpr SetBasecallerConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBasecallerConfigurationRequestDefaultTypeInternal() {}
  union {
    SetBasecallerConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBasecallerConfigurationRequestDefaultTypeInternal _SetBasecallerConfigurationRequest_default_instance_;
constexpr SetBasecallerConfigurationResponse::SetBasecallerConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetBasecallerConfigurationResponseDefaultTypeInternal {
  constexpr SetBasecallerConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBasecallerConfigurationResponseDefaultTypeInternal() {}
  union {
    SetBasecallerConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBasecallerConfigurationResponseDefaultTypeInternal _SetBasecallerConfigurationResponse_default_instance_;
constexpr GetBasecallerConfigurationRequest::GetBasecallerConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBasecallerConfigurationRequestDefaultTypeInternal {
  constexpr GetBasecallerConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBasecallerConfigurationRequestDefaultTypeInternal() {}
  union {
    GetBasecallerConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBasecallerConfigurationRequestDefaultTypeInternal _GetBasecallerConfigurationRequest_default_instance_;
constexpr GetPoreTypeConfigurationRequest::GetPoreTypeConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPoreTypeConfigurationRequestDefaultTypeInternal {
  constexpr GetPoreTypeConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPoreTypeConfigurationRequestDefaultTypeInternal() {}
  union {
    GetPoreTypeConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPoreTypeConfigurationRequestDefaultTypeInternal _GetPoreTypeConfigurationRequest_default_instance_;
constexpr PoreTypeConfiguration_ChannelWell::PoreTypeConfiguration_ChannelWell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(0u)
  , well_(0u){}
struct PoreTypeConfiguration_ChannelWellDefaultTypeInternal {
  constexpr PoreTypeConfiguration_ChannelWellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoreTypeConfiguration_ChannelWellDefaultTypeInternal() {}
  union {
    PoreTypeConfiguration_ChannelWell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoreTypeConfiguration_ChannelWellDefaultTypeInternal _PoreTypeConfiguration_ChannelWell_default_instance_;
constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_well_(){}
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal {
  constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal() {}
  union {
    PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellListDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList_default_instance_;
constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal {
  constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUseDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse_default_instance_;
constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pore_types_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal {
  constexpr PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal() {}
  union {
    PoreTypeConfiguration_ChannelWellPoreTypeConfigurations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoreTypeConfiguration_ChannelWellPoreTypeConfigurationsDefaultTypeInternal _PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_default_instance_;
constexpr PoreTypeConfiguration::PoreTypeConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PoreTypeConfigurationDefaultTypeInternal {
  constexpr PoreTypeConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoreTypeConfigurationDefaultTypeInternal() {}
  union {
    PoreTypeConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoreTypeConfigurationDefaultTypeInternal _PoreTypeConfiguration_default_instance_;
constexpr SetPoreTypeConfigurationResponse::SetPoreTypeConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetPoreTypeConfigurationResponseDefaultTypeInternal {
  constexpr SetPoreTypeConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPoreTypeConfigurationResponseDefaultTypeInternal() {}
  union {
    SetPoreTypeConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPoreTypeConfigurationResponseDefaultTypeInternal _SetPoreTypeConfigurationResponse_default_instance_;
constexpr WriterConfiguration_ChannelConfiguration_ChannelList::WriterConfiguration_ChannelConfiguration_ChannelList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , _channels_cached_byte_size_(0){}
struct WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal {
  constexpr WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal() {}
  union {
    WriterConfiguration_ChannelConfiguration_ChannelList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ChannelConfiguration_ChannelListDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelList_default_instance_;
constexpr WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0){}
struct WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal {
  constexpr WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal() {}
  union {
    WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRangeDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange_default_instance_;
constexpr WriterConfiguration_ChannelConfiguration_ChannelRanges::WriterConfiguration_ChannelConfiguration_ChannelRanges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranges_(){}
struct WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal {
  constexpr WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal() {}
  union {
    WriterConfiguration_ChannelConfiguration_ChannelRanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ChannelConfiguration_ChannelRangesDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_ChannelRanges_default_instance_;
constexpr WriterConfiguration_ChannelConfiguration::WriterConfiguration_ChannelConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct WriterConfiguration_ChannelConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ChannelConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ChannelConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ChannelConfigurationDefaultTypeInternal _WriterConfiguration_ChannelConfiguration_default_instance_;
constexpr WriterConfiguration_ReadFast5Configuration::WriterConfiguration_ReadFast5Configuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fastq_header_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_(nullptr)
  , fastq_(nullptr)
  , trace_table_(nullptr)
  , move_table_(nullptr)
  , modifications_table_(nullptr)
  , compression_level_(0)
  , disable_writing_passed_reads_(false)
  , disable_writing_failed_reads_(false)
  , disable_writing_force_skipped_reads_(false)
  , batch_count_(0u)
  , compression_type_(0)
{}
struct WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ReadFast5Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ReadFast5ConfigurationDefaultTypeInternal _WriterConfiguration_ReadFast5Configuration_default_instance_;
constexpr WriterConfiguration_ReadFastqConfiguration::WriterConfiguration_ReadFastqConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(nullptr)
  , batch_count_(0u)
  , compression_(false){}
struct WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ReadFastqConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ReadFastqConfigurationDefaultTypeInternal _WriterConfiguration_ReadFastqConfiguration_default_instance_;
constexpr WriterConfiguration_ReadBamConfiguration::WriterConfiguration_ReadBamConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(nullptr)
  , batch_count_(0u){}
struct WriterConfiguration_ReadBamConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ReadBamConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ReadBamConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ReadBamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ReadBamConfigurationDefaultTypeInternal _WriterConfiguration_ReadBamConfiguration_default_instance_;
constexpr WriterConfiguration_ReadProtobufConfiguration::WriterConfiguration_ReadProtobufConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(nullptr)
  , batch_count_(0u){}
struct WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ReadProtobufConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ReadProtobufConfigurationDefaultTypeInternal _WriterConfiguration_ReadProtobufConfiguration_default_instance_;
constexpr WriterConfiguration_SequencingSummaryConfiguration::WriterConfiguration_SequencingSummaryConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_(nullptr){}
struct WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_SequencingSummaryConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_SequencingSummaryConfigurationDefaultTypeInternal _WriterConfiguration_SequencingSummaryConfiguration_default_instance_;
constexpr WriterConfiguration_BulkConfiguration::WriterConfiguration_BulkConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_(nullptr)
  , events_(nullptr)
  , reads_(nullptr)
  , multiplex_(nullptr)
  , channel_states_(nullptr)
  , compression_level_(0)
  , device_metadata_(false)
  , device_commands_(false)
  , compression_type_(0)
{}
struct WriterConfiguration_BulkConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_BulkConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_BulkConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_BulkConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_BulkConfigurationDefaultTypeInternal _WriterConfiguration_BulkConfiguration_default_instance_;
constexpr WriterConfiguration_ReportConfiguration::WriterConfiguration_ReportConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pdf_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , markdown_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duty_time_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , throughput_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , final_summary_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , barcode_alignment_report_file_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_report_suffix_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WriterConfiguration_ReportConfigurationDefaultTypeInternal {
  constexpr WriterConfiguration_ReportConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfiguration_ReportConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration_ReportConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfiguration_ReportConfigurationDefaultTypeInternal _WriterConfiguration_ReportConfiguration_default_instance_;
constexpr WriterConfiguration::WriterConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_fast5_(nullptr)
  , read_fastq_(nullptr)
  , read_protobuf_(nullptr)
  , sequencing_summary_(nullptr)
  , bulk_(nullptr)
  , report_(nullptr)
  , read_bam_(nullptr){}
struct WriterConfigurationDefaultTypeInternal {
  constexpr WriterConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriterConfigurationDefaultTypeInternal() {}
  union {
    WriterConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriterConfigurationDefaultTypeInternal _WriterConfiguration_default_instance_;
constexpr SetWriterConfigurationResponse::SetWriterConfigurationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetWriterConfigurationResponseDefaultTypeInternal {
  constexpr SetWriterConfigurationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetWriterConfigurationResponseDefaultTypeInternal() {}
  union {
    SetWriterConfigurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetWriterConfigurationResponseDefaultTypeInternal _SetWriterConfigurationResponse_default_instance_;
constexpr GetWriterConfigurationRequest::GetWriterConfigurationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetWriterConfigurationRequestDefaultTypeInternal {
  constexpr GetWriterConfigurationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWriterConfigurationRequestDefaultTypeInternal() {}
  union {
    GetWriterConfigurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWriterConfigurationRequestDefaultTypeInternal _GetWriterConfigurationRequest_default_instance_;
constexpr GetReadClassificationsRequest::GetReadClassificationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetReadClassificationsRequestDefaultTypeInternal {
  constexpr GetReadClassificationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadClassificationsRequestDefaultTypeInternal() {}
  union {
    GetReadClassificationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadClassificationsRequestDefaultTypeInternal _GetReadClassificationsRequest_default_instance_;
constexpr GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal {
  constexpr GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUseDefaultTypeInternal _GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse_default_instance_;
constexpr GetReadClassificationsResponse::GetReadClassificationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_classifications_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct GetReadClassificationsResponseDefaultTypeInternal {
  constexpr GetReadClassificationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReadClassificationsResponseDefaultTypeInternal() {}
  union {
    GetReadClassificationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReadClassificationsResponseDefaultTypeInternal _GetReadClassificationsResponse_default_instance_;
}  // namespace analysis_configuration
}  // namespace minknow_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[59];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, window_size_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, threshold_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, peak_height_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, events_to_base_ratio_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, break_on_mux_changes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::EventDetection, max_mux_change_back_shift_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, mode_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, minimum_delta_mean_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, look_back_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, break_reads_after_events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, break_reads_after_seconds_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, break_reads_on_mux_changes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, open_pore_min_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, open_pore_max_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, open_pore_default_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadDetectionParams, open_pore_seconds_required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams_Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams_Parameters, rules_in_execution_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, scheme_module_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, max_sample_size_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, selected_classifications_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, open_pore_classifications_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, open_pore_ewma_weight_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, classification_strategy_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ReadClassificationParams, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, reset_on_mux_change_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, reset_on_well_change_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, latch_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, reset_on_effective_mux_change_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour, reset_on_effective_well_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range, lower_pa_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range, upper_pa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, criteria_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, rank_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, classification_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, ranges_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Logic, behaviour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Style, order_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Style, label_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Style, colour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Group, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates_Group, style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates, group_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates, description_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates, logic_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ChannelStates, style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration, event_detection_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration, read_detection_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration, read_classification_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AnalysisConfiguration, channel_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style, label_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style, description_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style, colour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState, id_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState, style_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState, global_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group, name_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group, style_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetChannelStatesDescResponse, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetSummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetSummaryResponse, analysis_enabled_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetSummaryResponse, basecalling_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, barcoding_kits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, trim_barcodes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, require_barcodes_both_ends_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, detect_mid_strand_barcodes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, min_score_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, min_score_rear_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, min_score_mid_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BarcodingConfiguration, min_score_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AlignmentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AlignmentConfiguration, reference_files_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AlignmentConfiguration, bed_file_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AlignmentConfiguration, minimum_coverage_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::AlignmentConfiguration, aggregate_statistics_for_multiple_bed_hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::LampConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::LampConfiguration, lamp_kit_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::LampConfiguration, min_score_barcodes_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::LampConfiguration, min_score_masks_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::LampConfiguration, min_score_targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, min_qscore_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, min_samples_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, max_samples_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, min_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, max_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering, max_failed_chunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering, min_qscore_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering, min_bases_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering, max_bases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, enable_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, config_filename_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, read_filtering_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, barcoding_configuration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, target_filtering_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, alignment_configuration_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::BasecallerConfiguration, lamp_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest, configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell, channel_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell, well_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList, channel_well_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations, pore_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::PoreTypeConfiguration, pore_type_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange, start_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges, ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, compression_level_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, compression_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, fastq_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, trace_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, move_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, modifications_table_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, disable_writing_passed_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, disable_writing_failed_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, disable_writing_force_skipped_reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, fastq_header_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration, batch_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, enable_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, header_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, batch_count_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration, compression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration, enable_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration, file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration, batch_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration, enable_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration, file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration, batch_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration, enable_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration, file_pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, compression_level_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, compression_type_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, raw_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, events_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, reads_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, multiplex_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, channel_states_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, device_metadata_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration, device_commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, pdf_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, markdown_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, duty_time_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, throughput_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, final_summary_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, barcode_alignment_report_file_pattern_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration, custom_report_suffix_pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, read_fast5_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, read_fastq_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, read_bam_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, read_protobuf_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, sequencing_summary_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, bulk_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::WriterConfiguration, report_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::SetWriterConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetWriterConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minknow_api::analysis_configuration::GetReadClassificationsResponse, read_classifications_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minknow_api::analysis_configuration::EventDetection)},
  { 12, -1, -1, sizeof(::minknow_api::analysis_configuration::ReadDetectionParams)},
  { 28, -1, -1, sizeof(::minknow_api::analysis_configuration::ReadClassificationParams_Parameters)},
  { 35, -1, -1, sizeof(::minknow_api::analysis_configuration::ReadClassificationParams)},
  { 48, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour)},
  { 59, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range)},
  { 67, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges)},
  { 74, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Logic)},
  { 86, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Style)},
  { 95, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates_Group)},
  { 103, -1, -1, sizeof(::minknow_api::analysis_configuration::ChannelStates)},
  { 113, -1, -1, sizeof(::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest)},
  { 119, 127, -1, sizeof(::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse)},
  { 129, -1, -1, sizeof(::minknow_api::analysis_configuration::AnalysisConfiguration)},
  { 139, -1, -1, sizeof(::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse)},
  { 145, -1, -1, sizeof(::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest)},
  { 151, -1, -1, sizeof(::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse)},
  { 157, -1, -1, sizeof(::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest)},
  { 164, -1, -1, sizeof(::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse)},
  { 170, -1, -1, sizeof(::minknow_api::analysis_configuration::GetChannelStatesDescRequest)},
  { 176, -1, -1, sizeof(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style)},
  { 185, -1, -1, sizeof(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState)},
  { 195, -1, -1, sizeof(::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group)},
  { 204, -1, -1, sizeof(::minknow_api::analysis_configuration::GetChannelStatesDescResponse)},
  { 211, -1, -1, sizeof(::minknow_api::analysis_configuration::GetSummaryRequest)},
  { 217, -1, -1, sizeof(::minknow_api::analysis_configuration::GetSummaryResponse)},
  { 225, -1, -1, sizeof(::minknow_api::analysis_configuration::BarcodingConfiguration)},
  { 239, -1, -1, sizeof(::minknow_api::analysis_configuration::AlignmentConfiguration)},
  { 249, -1, -1, sizeof(::minknow_api::analysis_configuration::LampConfiguration)},
  { 259, -1, -1, sizeof(::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering)},
  { 271, -1, -1, sizeof(::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering)},
  { 280, -1, -1, sizeof(::minknow_api::analysis_configuration::BasecallerConfiguration)},
  { 293, -1, -1, sizeof(::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest)},
  { 300, -1, -1, sizeof(::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse)},
  { 306, -1, -1, sizeof(::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest)},
  { 312, -1, -1, sizeof(::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest)},
  { 318, -1, -1, sizeof(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell)},
  { 326, -1, -1, sizeof(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList)},
  { 333, 341, -1, sizeof(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse)},
  { 343, -1, -1, sizeof(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations)},
  { 350, -1, -1, sizeof(::minknow_api::analysis_configuration::PoreTypeConfiguration)},
  { 359, -1, -1, sizeof(::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse)},
  { 365, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList)},
  { 372, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange)},
  { 380, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges)},
  { 387, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration)},
  { 397, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration)},
  { 416, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration)},
  { 427, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration)},
  { 436, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration)},
  { 445, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration)},
  { 453, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration)},
  { 469, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration)},
  { 482, -1, -1, sizeof(::minknow_api::analysis_configuration::WriterConfiguration)},
  { 495, -1, -1, sizeof(::minknow_api::analysis_configuration::SetWriterConfigurationResponse)},
  { 501, -1, -1, sizeof(::minknow_api::analysis_configuration::GetWriterConfigurationRequest)},
  { 507, -1, -1, sizeof(::minknow_api::analysis_configuration::GetReadClassificationsRequest)},
  { 513, 521, -1, sizeof(::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse)},
  { 523, -1, -1, sizeof(::minknow_api::analysis_configuration::GetReadClassificationsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_EventDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ReadDetectionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ReadClassificationParams_Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ReadClassificationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Logic_Behaviour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Logic_Ranges_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Logic_Ranges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Logic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Style_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ChannelStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetAnalysisConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_AnalysisConfiguration_ChannelStatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_AnalysisConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetAnalysisConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ResetAnalysisConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_ResetAnalysisConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetAnalysisEnabledStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetAnalysisEnabledStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetChannelStatesDescRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_Style_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_ChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetChannelStatesDescResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetSummaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetSummaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_BarcodingConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_AlignmentConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_LampConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_BasecallerConfiguration_ReadFiltering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_BasecallerConfiguration_TargetFiltering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_BasecallerConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetBasecallerConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetBasecallerConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetBasecallerConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetPoreTypeConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_PoreTypeConfiguration_ChannelWell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_PoreTypeConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetPoreTypeConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_ChannelList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_ChannelRanges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ChannelConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ReadFast5Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ReadFastqConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ReadBamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ReadProtobufConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_SequencingSummaryConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_BulkConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_ReportConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_WriterConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_SetWriterConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetWriterConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetReadClassificationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minknow_api::analysis_configuration::_GetReadClassificationsResponse_default_instance_),
};

const char descriptor_table_protodef_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(minknow_api/analysis_configuration.pro"
  "to\022\"minknow_api.analysis_configuration\032\036"
  "google/protobuf/wrappers.proto\032\035minknow_"
  "api/rpc_options.proto\"\312\001\n\016EventDetection"
  "\022\023\n\013window_size\030\003 \001(\r\022\021\n\tthreshold\030\005 \001(\001"
  "\022\023\n\013peak_height\030\t \001(\001\022:\n\024events_to_base_"
  "ratio\030\020 \001(\0132\034.google.protobuf.DoubleValu"
  "e\022\034\n\024break_on_mux_changes\030\021 \001(\010\022!\n\031max_m"
  "ux_change_back_shift\030\022 \001(\r\"\360\004\n\023ReadDetec"
  "tionParams\022W\n\004mode\030\001 \001(\0162I.minknow_api.a"
  "nalysis_configuration.ReadDetectionParam"
  "s.ReadDetectionMode\022\032\n\022minimum_delta_mea"
  "n\030\002 \001(\001\022\021\n\tlook_back\030\003 \001(\r\022>\n\030break_read"
  "s_after_events\030\004 \001(\0132\034.google.protobuf.U"
  "Int32Value\022\?\n\031break_reads_after_seconds\030"
  "\005 \001(\0132\034.google.protobuf.DoubleValue\022\"\n\032b"
  "reak_reads_on_mux_changes\030\006 \001(\010\0223\n\ropen_"
  "pore_min\030\007 \001(\0132\034.google.protobuf.DoubleV"
  "alue\0223\n\ropen_pore_max\030\010 \001(\0132\034.google.pro"
  "tobuf.DoubleValue\0227\n\021open_pore_default\030\t"
  " \001(\0132\034.google.protobuf.DoubleValue\022@\n\032op"
  "en_pore_seconds_required\030\n \001(\0132\034.google."
  "protobuf.DoubleValue\"G\n\021ReadDetectionMod"
  "e\022\010\n\004none\020\000\022\016\n\ntransition\020\001\022\014\n\010lookback\020"
  "\002\022\n\n\006minmax\020\003\"\375\003\n\030ReadClassificationPara"
  "ms\022Z\n\rscheme_module\030\001 \001(\0162C.minknow_api."
  "analysis_configuration.ReadClassificatio"
  "nParams.Scheme\0225\n\017max_sample_size\030\002 \001(\0132"
  "\034.google.protobuf.UInt64Value\022 \n\030selecte"
  "d_classifications\030\003 \003(\t\022!\n\031open_pore_cla"
  "ssifications\030\006 \003(\t\022;\n\025open_pore_ewma_wei"
  "ght\030\007 \001(\0132\034.google.protobuf.DoubleValue\022"
  "\037\n\027classification_strategy\030\004 \001(\t\022[\n\npara"
  "meters\030\005 \001(\0132G.minknow_api.analysis_conf"
  "iguration.ReadClassificationParams.Param"
  "eters\032.\n\nParameters\022 \n\030rules_in_executio"
  "n_order\030\002 \003(\t\"\036\n\006Scheme\022\010\n\004none\020\000\022\n\n\006par"
  "sed\020\001\"\335\007\n\rChannelStates\022F\n\005group\030\002 \001(\01327"
  ".minknow_api.analysis_configuration.Chan"
  "nelStates.Group\022\023\n\013description\030\005 \001(\t\022F\n\005"
  "logic\030\003 \001(\01327.minknow_api.analysis_confi"
  "guration.ChannelStates.Logic\022F\n\005style\030\004 "
  "\001(\01327.minknow_api.analysis_configuration"
  ".ChannelStates.Style\032\252\004\n\005Logic\022\020\n\010criter"
  "ia\030\001 \001(\t\022\014\n\004rank\030\003 \001(\005\022\017\n\007pattern\030\004 \001(\t\022"
  "\026\n\016classification\030\005 \001(\t\022N\n\006ranges\030\006 \001(\0132"
  ">.minknow_api.analysis_configuration.Cha"
  "nnelStates.Logic.Ranges\022T\n\tbehaviour\030\007 \001"
  "(\0132A.minknow_api.analysis_configuration."
  "ChannelStates.Logic.Behaviour\032\244\001\n\tBehavi"
  "our\022\033\n\023reset_on_mux_change\030\001 \001(\005\022\034\n\024rese"
  "t_on_well_change\030\002 \001(\005\022\r\n\005latch\030\003 \001(\005\022%\n"
  "\035reset_on_effective_mux_change\030\004 \001(\005\022&\n\036"
  "reset_on_effective_well_change\030\005 \001(\005\032\212\001\n"
  "\006Ranges\022S\n\005range\030\001 \001(\0132D.minknow_api.ana"
  "lysis_configuration.ChannelStates.Logic."
  "Ranges.Range\032+\n\005Range\022\020\n\010lower_pa\030\001 \001(\005\022"
  "\020\n\010upper_pa\030\002 \001(\005\032S\n\005Style\022+\n\005order\030\001 \001("
  "\0132\034.google.protobuf.UInt32Value\022\r\n\005label"
  "\030\002 \001(\t\022\016\n\006colour\030\003 \001(\t\032]\n\005Group\022\014\n\004name\030"
  "\001 \001(\t\022F\n\005style\030\002 \001(\01327.minknow_api.analy"
  "sis_configuration.ChannelStates.Style\"!\n"
  "\037GetAnalysisConfigurationRequest\"\337\003\n\025Ana"
  "lysisConfiguration\022K\n\017event_detection\030\001 "
  "\001(\01322.minknow_api.analysis_configuration"
  ".EventDetection\022O\n\016read_detection\030\002 \001(\0132"
  "7.minknow_api.analysis_configuration.Rea"
  "dDetectionParams\022Y\n\023read_classification\030"
  "\004 \001(\0132<.minknow_api.analysis_configurati"
  "on.ReadClassificationParams\022d\n\016channel_s"
  "tates\030\007 \003(\0132L.minknow_api.analysis_confi"
  "guration.AnalysisConfiguration.ChannelSt"
  "atesEntry\032g\n\022ChannelStatesEntry\022\013\n\003key\030\001"
  " \001(\t\022@\n\005value\030\002 \001(\01321.minknow_api.analys"
  "is_configuration.ChannelStates:\0028\001\"\"\n Se"
  "tAnalysisConfigurationResponse\"#\n!ResetA"
  "nalysisConfigurationRequest\"$\n\"ResetAnal"
  "ysisConfigurationResponse\"6\n\036SetAnalysis"
  "EnabledStateRequest\022\024\n\006enable\030\001 \001(\010B\004\210\265\030"
  "\001\"!\n\037SetAnalysisEnabledStateResponse\"\035\n\033"
  "GetChannelStatesDescRequest\"\231\004\n\034GetChann"
  "elStatesDescResponse\022V\n\006groups\030\001 \003(\0132F.m"
  "inknow_api.analysis_configuration.GetCha"
  "nnelStatesDescResponse.Group\032;\n\005Style\022\r\n"
  "\005label\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\016\n\006col"
  "our\030\003 \001(\t\032\225\001\n\014ChannelState\022\n\n\002id\030\001 \001(\r\022\014"
  "\n\004name\030\002 \001(\t\022U\n\005style\030\003 \001(\0132F.minknow_ap"
  "i.analysis_configuration.GetChannelState"
  "sDescResponse.Style\022\024\n\014global_order\030\004 \001("
  "\r\032\313\001\n\005Group\022\014\n\004name\030\001 \001(\t\022U\n\005style\030\002 \001(\013"
  "2F.minknow_api.analysis_configuration.Ge"
  "tChannelStatesDescResponse.Style\022]\n\006stat"
  "es\030\003 \003(\0132M.minknow_api.analysis_configur"
  "ation.GetChannelStatesDescResponse.Chann"
  "elState\"\023\n\021GetSummaryRequest\"K\n\022GetSumma"
  "ryResponse\022\030\n\020analysis_enabled\030\001 \001(\010\022\033\n\023"
  "basecalling_enabled\030\002 \001(\010\"\335\002\n\026BarcodingC"
  "onfiguration\022\026\n\016barcoding_kits\030\001 \003(\t\022\025\n\r"
  "trim_barcodes\030\002 \001(\010\022\"\n\032require_barcodes_"
  "both_ends\030\003 \001(\010\022\"\n\032detect_mid_strand_bar"
  "codes\030\004 \001(\010\022.\n\tmin_score\030\005 \001(\0132\033.google."
  "protobuf.FloatValue\0223\n\016min_score_rear\030\006 "
  "\001(\0132\033.google.protobuf.FloatValue\0222\n\rmin_"
  "score_mid\030\007 \001(\0132\033.google.protobuf.FloatV"
  "alue\0223\n\016min_score_mask\030\010 \001(\0132\033.google.pr"
  "otobuf.FloatValue\"\256\001\n\026AlignmentConfigura"
  "tion\022\027\n\017reference_files\030\001 \003(\t\022\020\n\010bed_fil"
  "e\030\002 \001(\t\0225\n\020minimum_coverage\030\003 \001(\0132\033.goog"
  "le.protobuf.FloatValue\0222\n*aggregate_stat"
  "istics_for_multiple_bed_hits\030\004 \001(\010\"\314\001\n\021L"
  "ampConfiguration\022\020\n\010lamp_kit\030\001 \001(\t\0227\n\022mi"
  "n_score_barcodes\030\002 \001(\0132\033.google.protobuf"
  ".FloatValue\0224\n\017min_score_masks\030\003 \001(\0132\033.g"
  "oogle.protobuf.FloatValue\0226\n\021min_score_t"
  "argets\030\004 \001(\0132\033.google.protobuf.FloatValu"
  "e\"\206\010\n\027BasecallerConfiguration\022\016\n\006enable\030"
  "\002 \001(\010\022\027\n\017config_filename\030\001 \001(\t\022a\n\016read_f"
  "iltering\030\003 \001(\0132I.minknow_api.analysis_co"
  "nfiguration.BasecallerConfiguration.Read"
  "Filtering\022[\n\027barcoding_configuration\030\004 \001"
  "(\0132:.minknow_api.analysis_configuration."
  "BarcodingConfiguration\022e\n\020target_filteri"
  "ng\030\005 \001(\0132K.minknow_api.analysis_configur"
  "ation.BasecallerConfiguration.TargetFilt"
  "ering\022[\n\027alignment_configuration\030\006 \001(\0132:"
  ".minknow_api.analysis_configuration.Alig"
  "nmentConfiguration\022Q\n\022lamp_configuration"
  "\030\007 \001(\01325.minknow_api.analysis_configurat"
  "ion.LampConfiguration\032\302\002\n\rReadFiltering\022"
  "0\n\nmin_qscore\030\001 \001(\0132\034.google.protobuf.Do"
  "ubleValue\0221\n\013min_samples\030\002 \001(\0132\034.google."
  "protobuf.UInt64Value\0221\n\013max_samples\030\003 \001("
  "\0132\034.google.protobuf.UInt64Value\022/\n\tmin_b"
  "ases\030\004 \001(\0132\034.google.protobuf.UInt64Value"
  "\022/\n\tmax_bases\030\005 \001(\0132\034.google.protobuf.UI"
  "nt64Value\0227\n\021max_failed_chunks\030\006 \001(\0132\034.g"
  "oogle.protobuf.UInt64Value\032\245\001\n\017TargetFil"
  "tering\0220\n\nmin_qscore\030\001 \001(\0132\034.google.prot"
  "obuf.DoubleValue\022/\n\tmin_bases\030\002 \001(\0132\034.go"
  "ogle.protobuf.UInt64Value\022/\n\tmax_bases\030\003"
  " \001(\0132\034.google.protobuf.UInt64Value\"w\n!Se"
  "tBasecallerConfigurationRequest\022R\n\007confi"
  "gs\030\001 \001(\0132;.minknow_api.analysis_configur"
  "ation.BasecallerConfigurationB\004\220\265\030\001\"$\n\"S"
  "etBasecallerConfigurationResponse\"#\n!Get"
  "BasecallerConfigurationRequest\"!\n\037GetPor"
  "eTypeConfigurationRequest\"\253\005\n\025PoreTypeCo"
  "nfiguration\022\032\n\020global_pore_type\030\001 \001(\tH\000\022"
  "~\n\027channel_well_pore_types\030\002 \001(\0132[.minkn"
  "ow_api.analysis_configuration.PoreTypeCo"
  "nfiguration.ChannelWellPoreTypeConfigura"
  "tionsH\000\032,\n\013ChannelWell\022\017\n\007channel\030\001 \001(\r\022"
  "\014\n\004well\030\002 \001(\r\032\263\003\n!ChannelWellPoreTypeCon"
  "figurations\022~\n\npore_types\030\001 \003(\0132j.minkno"
  "w_api.analysis_configuration.PoreTypeCon"
  "figuration.ChannelWellPoreTypeConfigurat"
  "ions.PoreTypesEntry\032n\n\017ChannelWellList\022["
  "\n\014channel_well\030\001 \003(\0132E.minknow_api.analy"
  "sis_configuration.PoreTypeConfiguration."
  "ChannelWell\032\235\001\n\016PoreTypesEntry\022\013\n\003key\030\001 "
  "\001(\t\022z\n\005value\030\002 \001(\0132k.minknow_api.analysi"
  "s_configuration.PoreTypeConfiguration.Ch"
  "annelWellPoreTypeConfigurations.ChannelW"
  "ellList:\0028\001B\022\n\020pore_type_config\"\"\n SetPo"
  "reTypeConfigurationResponse\"\202\036\n\023WriterCo"
  "nfiguration\022b\n\nread_fast5\030\002 \001(\0132N.minkno"
  "w_api.analysis_configuration.WriterConfi"
  "guration.ReadFast5Configuration\022b\n\nread_"
  "fastq\030\003 \001(\0132N.minknow_api.analysis_confi"
  "guration.WriterConfiguration.ReadFastqCo"
  "nfiguration\022^\n\010read_bam\030\010 \001(\0132L.minknow_"
  "api.analysis_configuration.WriterConfigu"
  "ration.ReadBamConfiguration\022h\n\rread_prot"
  "obuf\030\004 \001(\0132Q.minknow_api.analysis_config"
  "uration.WriterConfiguration.ReadProtobuf"
  "Configuration\022r\n\022sequencing_summary\030\005 \001("
  "\0132V.minknow_api.analysis_configuration.W"
  "riterConfiguration.SequencingSummaryConf"
  "iguration\022W\n\004bulk\030\006 \001(\0132I.minknow_api.an"
  "alysis_configuration.WriterConfiguration"
  ".BulkConfiguration\022[\n\006report\030\007 \001(\0132K.min"
  "know_api.analysis_configuration.WriterCo"
  "nfiguration.ReportConfiguration\032\377\003\n\024Chan"
  "nelConfiguration\022\026\n\014all_channels\030\001 \001(\010H\000"
  "\022u\n\021specific_channels\030\002 \001(\0132X.minknow_ap"
  "i.analysis_configuration.WriterConfigura"
  "tion.ChannelConfiguration.ChannelListH\000\022"
  "t\n\016channel_ranges\030\003 \001(\0132Z.minknow_api.an"
  "alysis_configuration.WriterConfiguration"
  ".ChannelConfiguration.ChannelRangesH\000\032\037\n"
  "\013ChannelList\022\020\n\010channels\030\001 \003(\005\032\264\001\n\rChann"
  "elRanges\022w\n\006ranges\030\001 \003(\0132g.minknow_api.a"
  "nalysis_configuration.WriterConfiguratio"
  "n.ChannelConfiguration.ChannelRanges.Cha"
  "nnelRange\032*\n\014ChannelRange\022\r\n\005start\030\001 \001(\005"
  "\022\013\n\003end\030\002 \001(\005B\n\n\010channels\032\300\006\n\026ReadFast5C"
  "onfiguration\022\031\n\021compression_level\030\001 \001(\005\022"
  "a\n\020compression_type\030\016 \001(\0162G.minknow_api."
  "analysis_configuration.WriterConfigurati"
  "on.CompressionType\022Y\n\003raw\030\002 \001(\0132L.minkno"
  "w_api.analysis_configuration.WriterConfi"
  "guration.ChannelConfiguration\022[\n\005fastq\030\003"
  " \001(\0132L.minknow_api.analysis_configuratio"
  "n.WriterConfiguration.ChannelConfigurati"
  "on\022a\n\013trace_table\030\013 \001(\0132L.minknow_api.an"
  "alysis_configuration.WriterConfiguration"
  ".ChannelConfiguration\022`\n\nmove_table\030\014 \001("
  "\0132L.minknow_api.analysis_configuration.W"
  "riterConfiguration.ChannelConfiguration\022"
  "i\n\023modifications_table\030\r \001(\0132L.minknow_a"
  "pi.analysis_configuration.WriterConfigur"
  "ation.ChannelConfiguration\022$\n\034disable_wr"
  "iting_passed_reads\030\005 \001(\010\022$\n\034disable_writ"
  "ing_failed_reads\030\006 \001(\010\022+\n#disable_writin"
  "g_force_skipped_reads\030\007 \001(\010\022\024\n\014file_patt"
  "ern\030\010 \001(\t\022\034\n\024fastq_header_pattern\030\t \001(\t\022"
  "\023\n\013batch_count\030\n \001(\r\032\316\001\n\026ReadFastqConfig"
  "uration\022\\\n\006enable\030\001 \001(\0132L.minknow_api.an"
  "alysis_configuration.WriterConfiguration"
  ".ChannelConfiguration\022\024\n\014file_pattern\030\002 "
  "\001(\t\022\026\n\016header_pattern\030\003 \001(\t\022\023\n\013batch_cou"
  "nt\030\004 \001(\r\022\023\n\013compression\030\005 \001(\010\032\237\001\n\024ReadBa"
  "mConfiguration\022\\\n\006enable\030\001 \001(\0132L.minknow"
  "_api.analysis_configuration.WriterConfig"
  "uration.ChannelConfiguration\022\024\n\014file_pat"
  "tern\030\002 \001(\t\022\023\n\013batch_count\030\003 \001(\r\032\244\001\n\031Read"
  "ProtobufConfiguration\022\\\n\006enable\030\001 \001(\0132L."
  "minknow_api.analysis_configuration.Write"
  "rConfiguration.ChannelConfiguration\022\024\n\014f"
  "ile_pattern\030\002 \001(\t\022\023\n\013batch_count\030\003 \001(\r\032\224"
  "\001\n\036SequencingSummaryConfiguration\022\\\n\006ena"
  "ble\030\001 \001(\0132L.minknow_api.analysis_configu"
  "ration.WriterConfiguration.ChannelConfig"
  "uration\022\024\n\014file_pattern\030\002 \001(\t\032\266\005\n\021BulkCo"
  "nfiguration\022\031\n\021compression_level\030\002 \001(\005\022a"
  "\n\020compression_type\030\r \001(\0162G.minknow_api.a"
  "nalysis_configuration.WriterConfiguratio"
  "n.CompressionType\022\024\n\014file_pattern\030\016 \001(\t\022"
  "Y\n\003raw\030\003 \001(\0132L.minknow_api.analysis_conf"
  "iguration.WriterConfiguration.ChannelCon"
  "figuration\022\\\n\006events\030\004 \001(\0132L.minknow_api"
  ".analysis_configuration.WriterConfigurat"
  "ion.ChannelConfiguration\022[\n\005reads\030\005 \001(\0132"
  "L.minknow_api.analysis_configuration.Wri"
  "terConfiguration.ChannelConfiguration\022_\n"
  "\tmultiplex\030\006 \001(\0132L.minknow_api.analysis_"
  "configuration.WriterConfiguration.Channe"
  "lConfiguration\022d\n\016channel_states\030\007 \001(\0132L"
  ".minknow_api.analysis_configuration.Writ"
  "erConfiguration.ChannelConfiguration\022\027\n\017"
  "device_metadata\030\013 \001(\010\022\027\n\017device_commands"
  "\030\014 \001(\010\032\253\002\n\023ReportConfiguration\022\037\n\027pdf_re"
  "port_file_pattern\030\001 \001(\t\022$\n\034markdown_repo"
  "rt_file_pattern\030\002 \001(\t\022%\n\035duty_time_repor"
  "t_file_pattern\030\003 \001(\t\022&\n\036throughput_repor"
  "t_file_pattern\030\004 \001(\t\022)\n!final_summary_re"
  "port_file_pattern\030\005 \001(\t\022-\n%barcode_align"
  "ment_report_file_pattern\030\006 \001(\t\022$\n\034custom"
  "_report_suffix_pattern\030\007 \001(\t\"R\n\017Compress"
  "ionType\022\026\n\022DefaultCompression\020\000\022\023\n\017ZlibC"
  "ompression\020\001\022\022\n\016VbzCompression\020\002\" \n\036SetW"
  "riterConfigurationResponse\"\037\n\035GetWriterC"
  "onfigurationRequest\"\037\n\035GetReadClassifica"
  "tionsRequest\"\327\001\n\036GetReadClassificationsR"
  "esponse\022y\n\024read_classifications\030\001 \003(\0132[."
  "minknow_api.analysis_configuration.GetRe"
  "adClassificationsResponse.ReadClassifica"
  "tionsEntry\032:\n\030ReadClassificationsEntry\022\013"
  "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\0012\272\022\n\034Analy"
  "sisConfigurationService\022\241\001\n\032get_analysis"
  "_configuration\022C.minknow_api.analysis_co"
  "nfiguration.GetAnalysisConfigurationRequ"
  "est\0329.minknow_api.analysis_configuration"
  ".AnalysisConfiguration\"\003\220\002\001\022\242\001\n\032set_anal"
  "ysis_configuration\0229.minknow_api.analysi"
  "s_configuration.AnalysisConfiguration\032D."
  "minknow_api.analysis_configuration.SetAn"
  "alysisConfigurationResponse\"\003\220\002\002\022\262\001\n\034res"
  "et_analysis_configuration\022E.minknow_api."
  "analysis_configuration.ResetAnalysisConf"
  "igurationRequest\032F.minknow_api.analysis_"
  "configuration.ResetAnalysisConfiguration"
  "Response\"\003\220\002\002\022\252\001\n\032set_analysis_enabled_s"
  "tate\022B.minknow_api.analysis_configuratio"
  "n.SetAnalysisEnabledStateRequest\032C.minkn"
  "ow_api.analysis_configuration.SetAnalysi"
  "sEnabledStateResponse\"\003\220\002\002\022\241\001\n\027get_chann"
  "el_states_desc\022\?.minknow_api.analysis_co"
  "nfiguration.GetChannelStatesDescRequest\032"
  "@.minknow_api.analysis_configuration.Get"
  "ChannelStatesDescResponse\"\003\220\002\001\022\201\001\n\013get_s"
  "ummary\0225.minknow_api.analysis_configurat"
  "ion.GetSummaryRequest\0326.minknow_api.anal"
  "ysis_configuration.GetSummaryResponse\"\003\220"
  "\002\001\022\262\001\n\034set_basecaller_configuration\022E.mi"
  "nknow_api.analysis_configuration.SetBase"
  "callerConfigurationRequest\032F.minknow_api"
  ".analysis_configuration.SetBasecallerCon"
  "figurationResponse\"\003\220\002\002\022\266\001\n preload_base"
  "caller_configuration\022E.minknow_api.analy"
  "sis_configuration.SetBasecallerConfigura"
  "tionRequest\032F.minknow_api.analysis_confi"
  "guration.SetBasecallerConfigurationRespo"
  "nse\"\003\220\002\002\022\247\001\n\034get_basecaller_configuratio"
  "n\022E.minknow_api.analysis_configuration.G"
  "etBasecallerConfigurationRequest\032;.minkn"
  "ow_api.analysis_configuration.Basecaller"
  "Configuration\"\003\220\002\001\022\242\001\n\033get_pore_type_con"
  "figuration\022C.minknow_api.analysis_config"
  "uration.GetPoreTypeConfigurationRequest\032"
  "9.minknow_api.analysis_configuration.Por"
  "eTypeConfiguration\"\003\220\002\001\022\243\001\n\033set_pore_typ"
  "e_configuration\0229.minknow_api.analysis_c"
  "onfiguration.PoreTypeConfiguration\032D.min"
  "know_api.analysis_configuration.SetPoreT"
  "ypeConfigurationResponse\"\003\220\002\002\022\234\001\n\030set_wr"
  "iter_configuration\0227.minknow_api.analysi"
  "s_configuration.WriterConfiguration\032B.mi"
  "nknow_api.analysis_configuration.SetWrit"
  "erConfigurationResponse\"\003\220\002\002\022\233\001\n\030get_wri"
  "ter_configuration\022A.minknow_api.analysis"
  "_configuration.GetWriterConfigurationReq"
  "uest\0327.minknow_api.analysis_configuratio"
  "n.WriterConfiguration\"\003\220\002\001\022\246\001\n\030get_read_"
  "classifications\022A.minknow_api.analysis_c"
  "onfiguration.GetReadClassificationsReque"
  "st\032B.minknow_api.analysis_configuration."
  "GetReadClassificationsResponse\"\003\220\002\001B&\n\034c"
  "om.nanoporetech.minknow_api\242\002\005MKAPIb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_minknow_5fapi_2frpc_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto = {
  false, false, 13163, descriptor_table_protodef_minknow_5fapi_2fanalysis_5fconfiguration_2eproto, "minknow_api/analysis_configuration.proto", 
  &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once, descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_deps, 2, 59,
  schemas, file_default_instances, TableStruct_minknow_5fapi_2fanalysis_5fconfiguration_2eproto::offsets,
  file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto, file_level_enum_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto, file_level_service_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter() {
  return &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minknow_5fapi_2fanalysis_5fconfiguration_2eproto(&descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto);
namespace minknow_api {
namespace analysis_configuration {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadDetectionParams_ReadDetectionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[0];
}
bool ReadDetectionParams_ReadDetectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::none;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::transition;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::lookback;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::minmax;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::ReadDetectionMode_MIN;
constexpr ReadDetectionParams_ReadDetectionMode ReadDetectionParams::ReadDetectionMode_MAX;
constexpr int ReadDetectionParams::ReadDetectionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadClassificationParams_Scheme_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[1];
}
bool ReadClassificationParams_Scheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadClassificationParams_Scheme ReadClassificationParams::none;
constexpr ReadClassificationParams_Scheme ReadClassificationParams::parsed;
constexpr ReadClassificationParams_Scheme ReadClassificationParams::Scheme_MIN;
constexpr ReadClassificationParams_Scheme ReadClassificationParams::Scheme_MAX;
constexpr int ReadClassificationParams::Scheme_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriterConfiguration_CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto);
  return file_level_enum_descriptors_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[2];
}
bool WriterConfiguration_CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriterConfiguration_CompressionType WriterConfiguration::DefaultCompression;
constexpr WriterConfiguration_CompressionType WriterConfiguration::ZlibCompression;
constexpr WriterConfiguration_CompressionType WriterConfiguration::VbzCompression;
constexpr WriterConfiguration_CompressionType WriterConfiguration::CompressionType_MIN;
constexpr WriterConfiguration_CompressionType WriterConfiguration::CompressionType_MAX;
constexpr int WriterConfiguration::CompressionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class EventDetection::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& events_to_base_ratio(const EventDetection* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
EventDetection::_Internal::events_to_base_ratio(const EventDetection* msg) {
  return *msg->events_to_base_ratio_;
}
void EventDetection::clear_events_to_base_ratio() {
  if (GetArenaForAllocation() == nullptr && events_to_base_ratio_ != nullptr) {
    delete events_to_base_ratio_;
  }
  events_to_base_ratio_ = nullptr;
}
EventDetection::EventDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.EventDetection)
}
EventDetection::EventDetection(const EventDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_events_to_base_ratio()) {
    events_to_base_ratio_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.events_to_base_ratio_);
  } else {
    events_to_base_ratio_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&break_on_mux_changes_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(break_on_mux_changes_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.EventDetection)
}

void EventDetection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&events_to_base_ratio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&break_on_mux_changes_) -
    reinterpret_cast<char*>(&events_to_base_ratio_)) + sizeof(break_on_mux_changes_));
}

EventDetection::~EventDetection() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.EventDetection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete events_to_base_ratio_;
}

void EventDetection::ArenaDtor(void* object) {
  EventDetection* _this = reinterpret_cast< EventDetection* >(object);
  (void)_this;
}
void EventDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.EventDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && events_to_base_ratio_ != nullptr) {
    delete events_to_base_ratio_;
  }
  events_to_base_ratio_ = nullptr;
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break_on_mux_changes_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(break_on_mux_changes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 window_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double peak_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          peak_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue events_to_base_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_events_to_base_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool break_on_mux_changes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          break_on_mux_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_mux_change_back_shift = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          max_mux_change_back_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.EventDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 window_size = 3;
  if (this->_internal_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_window_size(), target);
  }

  // double threshold = 5;
  if (!(this->_internal_threshold() <= 0 && this->_internal_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_threshold(), target);
  }

  // double peak_height = 9;
  if (!(this->_internal_peak_height() <= 0 && this->_internal_peak_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_peak_height(), target);
  }

  // .google.protobuf.DoubleValue events_to_base_ratio = 16;
  if (this->_internal_has_events_to_base_ratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::events_to_base_ratio(this), target, stream);
  }

  // bool break_on_mux_changes = 17;
  if (this->_internal_break_on_mux_changes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_break_on_mux_changes(), target);
  }

  // uint32 max_mux_change_back_shift = 18;
  if (this->_internal_max_mux_change_back_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_max_mux_change_back_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.EventDetection)
  return target;
}

size_t EventDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.EventDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue events_to_base_ratio = 16;
  if (this->_internal_has_events_to_base_ratio()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *events_to_base_ratio_);
  }

  // double threshold = 5;
  if (!(this->_internal_threshold() <= 0 && this->_internal_threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_mux_change_back_shift = 18;
  if (this->_internal_max_mux_change_back_shift() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_mux_change_back_shift());
  }

  // double peak_height = 9;
  if (!(this->_internal_peak_height() <= 0 && this->_internal_peak_height() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 window_size = 3;
  if (this->_internal_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_window_size());
  }

  // bool break_on_mux_changes = 17;
  if (this->_internal_break_on_mux_changes() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventDetection::GetClassData() const { return &_class_data_; }

void EventDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventDetection *>(to)->MergeFrom(
      static_cast<const EventDetection &>(from));
}


void EventDetection::MergeFrom(const EventDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.EventDetection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_events_to_base_ratio()) {
    _internal_mutable_events_to_base_ratio()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_events_to_base_ratio());
  }
  if (!(from._internal_threshold() <= 0 && from._internal_threshold() >= 0)) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_max_mux_change_back_shift() != 0) {
    _internal_set_max_mux_change_back_shift(from._internal_max_mux_change_back_shift());
  }
  if (!(from._internal_peak_height() <= 0 && from._internal_peak_height() >= 0)) {
    _internal_set_peak_height(from._internal_peak_height());
  }
  if (from._internal_window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
  if (from._internal_break_on_mux_changes() != 0) {
    _internal_set_break_on_mux_changes(from._internal_break_on_mux_changes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventDetection::CopyFrom(const EventDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.EventDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDetection::IsInitialized() const {
  return true;
}

void EventDetection::InternalSwap(EventDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDetection, break_on_mux_changes_)
      + sizeof(EventDetection::break_on_mux_changes_)
      - PROTOBUF_FIELD_OFFSET(EventDetection, events_to_base_ratio_)>(
          reinterpret_cast<char*>(&events_to_base_ratio_),
          reinterpret_cast<char*>(&other->events_to_base_ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDetection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[0]);
}

// ===================================================================

class ReadDetectionParams::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& break_reads_after_events(const ReadDetectionParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& break_reads_after_seconds(const ReadDetectionParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_min(const ReadDetectionParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_max(const ReadDetectionParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_default(const ReadDetectionParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_seconds_required(const ReadDetectionParams* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
ReadDetectionParams::_Internal::break_reads_after_events(const ReadDetectionParams* msg) {
  return *msg->break_reads_after_events_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadDetectionParams::_Internal::break_reads_after_seconds(const ReadDetectionParams* msg) {
  return *msg->break_reads_after_seconds_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadDetectionParams::_Internal::open_pore_min(const ReadDetectionParams* msg) {
  return *msg->open_pore_min_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadDetectionParams::_Internal::open_pore_max(const ReadDetectionParams* msg) {
  return *msg->open_pore_max_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadDetectionParams::_Internal::open_pore_default(const ReadDetectionParams* msg) {
  return *msg->open_pore_default_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadDetectionParams::_Internal::open_pore_seconds_required(const ReadDetectionParams* msg) {
  return *msg->open_pore_seconds_required_;
}
void ReadDetectionParams::clear_break_reads_after_events() {
  if (GetArenaForAllocation() == nullptr && break_reads_after_events_ != nullptr) {
    delete break_reads_after_events_;
  }
  break_reads_after_events_ = nullptr;
}
void ReadDetectionParams::clear_break_reads_after_seconds() {
  if (GetArenaForAllocation() == nullptr && break_reads_after_seconds_ != nullptr) {
    delete break_reads_after_seconds_;
  }
  break_reads_after_seconds_ = nullptr;
}
void ReadDetectionParams::clear_open_pore_min() {
  if (GetArenaForAllocation() == nullptr && open_pore_min_ != nullptr) {
    delete open_pore_min_;
  }
  open_pore_min_ = nullptr;
}
void ReadDetectionParams::clear_open_pore_max() {
  if (GetArenaForAllocation() == nullptr && open_pore_max_ != nullptr) {
    delete open_pore_max_;
  }
  open_pore_max_ = nullptr;
}
void ReadDetectionParams::clear_open_pore_default() {
  if (GetArenaForAllocation() == nullptr && open_pore_default_ != nullptr) {
    delete open_pore_default_;
  }
  open_pore_default_ = nullptr;
}
void ReadDetectionParams::clear_open_pore_seconds_required() {
  if (GetArenaForAllocation() == nullptr && open_pore_seconds_required_ != nullptr) {
    delete open_pore_seconds_required_;
  }
  open_pore_seconds_required_ = nullptr;
}
ReadDetectionParams::ReadDetectionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ReadDetectionParams)
}
ReadDetectionParams::ReadDetectionParams(const ReadDetectionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_break_reads_after_events()) {
    break_reads_after_events_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.break_reads_after_events_);
  } else {
    break_reads_after_events_ = nullptr;
  }
  if (from._internal_has_break_reads_after_seconds()) {
    break_reads_after_seconds_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.break_reads_after_seconds_);
  } else {
    break_reads_after_seconds_ = nullptr;
  }
  if (from._internal_has_open_pore_min()) {
    open_pore_min_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.open_pore_min_);
  } else {
    open_pore_min_ = nullptr;
  }
  if (from._internal_has_open_pore_max()) {
    open_pore_max_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.open_pore_max_);
  } else {
    open_pore_max_ = nullptr;
  }
  if (from._internal_has_open_pore_default()) {
    open_pore_default_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.open_pore_default_);
  } else {
    open_pore_default_ = nullptr;
  }
  if (from._internal_has_open_pore_seconds_required()) {
    open_pore_seconds_required_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.open_pore_seconds_required_);
  } else {
    open_pore_seconds_required_ = nullptr;
  }
  ::memcpy(&minimum_delta_mean_, &from.minimum_delta_mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&break_reads_on_mux_changes_) -
    reinterpret_cast<char*>(&minimum_delta_mean_)) + sizeof(break_reads_on_mux_changes_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ReadDetectionParams)
}

void ReadDetectionParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&break_reads_after_events_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&break_reads_on_mux_changes_) -
    reinterpret_cast<char*>(&break_reads_after_events_)) + sizeof(break_reads_on_mux_changes_));
}

ReadDetectionParams::~ReadDetectionParams() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ReadDetectionParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadDetectionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete break_reads_after_events_;
  if (this != internal_default_instance()) delete break_reads_after_seconds_;
  if (this != internal_default_instance()) delete open_pore_min_;
  if (this != internal_default_instance()) delete open_pore_max_;
  if (this != internal_default_instance()) delete open_pore_default_;
  if (this != internal_default_instance()) delete open_pore_seconds_required_;
}

void ReadDetectionParams::ArenaDtor(void* object) {
  ReadDetectionParams* _this = reinterpret_cast< ReadDetectionParams* >(object);
  (void)_this;
}
void ReadDetectionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDetectionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadDetectionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ReadDetectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && break_reads_after_events_ != nullptr) {
    delete break_reads_after_events_;
  }
  break_reads_after_events_ = nullptr;
  if (GetArenaForAllocation() == nullptr && break_reads_after_seconds_ != nullptr) {
    delete break_reads_after_seconds_;
  }
  break_reads_after_seconds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_pore_min_ != nullptr) {
    delete open_pore_min_;
  }
  open_pore_min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_pore_max_ != nullptr) {
    delete open_pore_max_;
  }
  open_pore_max_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_pore_default_ != nullptr) {
    delete open_pore_default_;
  }
  open_pore_default_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_pore_seconds_required_ != nullptr) {
    delete open_pore_seconds_required_;
  }
  open_pore_seconds_required_ = nullptr;
  ::memset(&minimum_delta_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break_reads_on_mux_changes_) -
      reinterpret_cast<char*>(&minimum_delta_mean_)) + sizeof(break_reads_on_mux_changes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDetectionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::minknow_api::analysis_configuration::ReadDetectionParams_ReadDetectionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // double minimum_delta_mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          minimum_delta_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 look_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          look_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value break_reads_after_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_break_reads_after_events(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue break_reads_after_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_break_reads_after_seconds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool break_reads_on_mux_changes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          break_reads_on_mux_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue open_pore_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_pore_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue open_pore_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_pore_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue open_pore_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_pore_default(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue open_pore_seconds_required = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_pore_seconds_required(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDetectionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ReadDetectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // double minimum_delta_mean = 2;
  if (!(this->_internal_minimum_delta_mean() <= 0 && this->_internal_minimum_delta_mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_minimum_delta_mean(), target);
  }

  // uint32 look_back = 3;
  if (this->_internal_look_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_look_back(), target);
  }

  // .google.protobuf.UInt32Value break_reads_after_events = 4;
  if (this->_internal_has_break_reads_after_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::break_reads_after_events(this), target, stream);
  }

  // .google.protobuf.DoubleValue break_reads_after_seconds = 5;
  if (this->_internal_has_break_reads_after_seconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::break_reads_after_seconds(this), target, stream);
  }

  // bool break_reads_on_mux_changes = 6;
  if (this->_internal_break_reads_on_mux_changes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_break_reads_on_mux_changes(), target);
  }

  // .google.protobuf.DoubleValue open_pore_min = 7;
  if (this->_internal_has_open_pore_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::open_pore_min(this), target, stream);
  }

  // .google.protobuf.DoubleValue open_pore_max = 8;
  if (this->_internal_has_open_pore_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::open_pore_max(this), target, stream);
  }

  // .google.protobuf.DoubleValue open_pore_default = 9;
  if (this->_internal_has_open_pore_default()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::open_pore_default(this), target, stream);
  }

  // .google.protobuf.DoubleValue open_pore_seconds_required = 10;
  if (this->_internal_has_open_pore_seconds_required()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::open_pore_seconds_required(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ReadDetectionParams)
  return target;
}

size_t ReadDetectionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ReadDetectionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value break_reads_after_events = 4;
  if (this->_internal_has_break_reads_after_events()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *break_reads_after_events_);
  }

  // .google.protobuf.DoubleValue break_reads_after_seconds = 5;
  if (this->_internal_has_break_reads_after_seconds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *break_reads_after_seconds_);
  }

  // .google.protobuf.DoubleValue open_pore_min = 7;
  if (this->_internal_has_open_pore_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_pore_min_);
  }

  // .google.protobuf.DoubleValue open_pore_max = 8;
  if (this->_internal_has_open_pore_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_pore_max_);
  }

  // .google.protobuf.DoubleValue open_pore_default = 9;
  if (this->_internal_has_open_pore_default()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_pore_default_);
  }

  // .google.protobuf.DoubleValue open_pore_seconds_required = 10;
  if (this->_internal_has_open_pore_seconds_required()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_pore_seconds_required_);
  }

  // double minimum_delta_mean = 2;
  if (!(this->_internal_minimum_delta_mean() <= 0 && this->_internal_minimum_delta_mean() >= 0)) {
    total_size += 1 + 8;
  }

  // .minknow_api.analysis_configuration.ReadDetectionParams.ReadDetectionMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint32 look_back = 3;
  if (this->_internal_look_back() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_look_back());
  }

  // bool break_reads_on_mux_changes = 6;
  if (this->_internal_break_reads_on_mux_changes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadDetectionParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadDetectionParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadDetectionParams::GetClassData() const { return &_class_data_; }

void ReadDetectionParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadDetectionParams *>(to)->MergeFrom(
      static_cast<const ReadDetectionParams &>(from));
}


void ReadDetectionParams::MergeFrom(const ReadDetectionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ReadDetectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_break_reads_after_events()) {
    _internal_mutable_break_reads_after_events()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_break_reads_after_events());
  }
  if (from._internal_has_break_reads_after_seconds()) {
    _internal_mutable_break_reads_after_seconds()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_break_reads_after_seconds());
  }
  if (from._internal_has_open_pore_min()) {
    _internal_mutable_open_pore_min()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_open_pore_min());
  }
  if (from._internal_has_open_pore_max()) {
    _internal_mutable_open_pore_max()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_open_pore_max());
  }
  if (from._internal_has_open_pore_default()) {
    _internal_mutable_open_pore_default()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_open_pore_default());
  }
  if (from._internal_has_open_pore_seconds_required()) {
    _internal_mutable_open_pore_seconds_required()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_open_pore_seconds_required());
  }
  if (!(from._internal_minimum_delta_mean() <= 0 && from._internal_minimum_delta_mean() >= 0)) {
    _internal_set_minimum_delta_mean(from._internal_minimum_delta_mean());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_look_back() != 0) {
    _internal_set_look_back(from._internal_look_back());
  }
  if (from._internal_break_reads_on_mux_changes() != 0) {
    _internal_set_break_reads_on_mux_changes(from._internal_break_reads_on_mux_changes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadDetectionParams::CopyFrom(const ReadDetectionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ReadDetectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDetectionParams::IsInitialized() const {
  return true;
}

void ReadDetectionParams::InternalSwap(ReadDetectionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadDetectionParams, break_reads_on_mux_changes_)
      + sizeof(ReadDetectionParams::break_reads_on_mux_changes_)
      - PROTOBUF_FIELD_OFFSET(ReadDetectionParams, break_reads_after_events_)>(
          reinterpret_cast<char*>(&break_reads_after_events_),
          reinterpret_cast<char*>(&other->break_reads_after_events_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDetectionParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[1]);
}

// ===================================================================

class ReadClassificationParams_Parameters::_Internal {
 public:
};

ReadClassificationParams_Parameters::ReadClassificationParams_Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rules_in_execution_order_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
}
ReadClassificationParams_Parameters::ReadClassificationParams_Parameters(const ReadClassificationParams_Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rules_in_execution_order_(from.rules_in_execution_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
}

void ReadClassificationParams_Parameters::SharedCtor() {
}

ReadClassificationParams_Parameters::~ReadClassificationParams_Parameters() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadClassificationParams_Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadClassificationParams_Parameters::ArenaDtor(void* object) {
  ReadClassificationParams_Parameters* _this = reinterpret_cast< ReadClassificationParams_Parameters* >(object);
  (void)_this;
}
void ReadClassificationParams_Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadClassificationParams_Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadClassificationParams_Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_in_execution_order_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadClassificationParams_Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string rules_in_execution_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rules_in_execution_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadClassificationParams_Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string rules_in_execution_order = 2;
  for (int i = 0, n = this->_internal_rules_in_execution_order_size(); i < n; i++) {
    const auto& s = this->_internal_rules_in_execution_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ReadClassificationParams.Parameters.rules_in_execution_order");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  return target;
}

size_t ReadClassificationParams_Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string rules_in_execution_order = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rules_in_execution_order_.size());
  for (int i = 0, n = rules_in_execution_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rules_in_execution_order_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadClassificationParams_Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadClassificationParams_Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadClassificationParams_Parameters::GetClassData() const { return &_class_data_; }

void ReadClassificationParams_Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadClassificationParams_Parameters *>(to)->MergeFrom(
      static_cast<const ReadClassificationParams_Parameters &>(from));
}


void ReadClassificationParams_Parameters::MergeFrom(const ReadClassificationParams_Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_in_execution_order_.MergeFrom(from.rules_in_execution_order_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadClassificationParams_Parameters::CopyFrom(const ReadClassificationParams_Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ReadClassificationParams.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadClassificationParams_Parameters::IsInitialized() const {
  return true;
}

void ReadClassificationParams_Parameters::InternalSwap(ReadClassificationParams_Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rules_in_execution_order_.InternalSwap(&other->rules_in_execution_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadClassificationParams_Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[2]);
}

// ===================================================================

class ReadClassificationParams::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_sample_size(const ReadClassificationParams* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& open_pore_ewma_weight(const ReadClassificationParams* msg);
  static const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters& parameters(const ReadClassificationParams* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
ReadClassificationParams::_Internal::max_sample_size(const ReadClassificationParams* msg) {
  return *msg->max_sample_size_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ReadClassificationParams::_Internal::open_pore_ewma_weight(const ReadClassificationParams* msg) {
  return *msg->open_pore_ewma_weight_;
}
const ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters&
ReadClassificationParams::_Internal::parameters(const ReadClassificationParams* msg) {
  return *msg->parameters_;
}
void ReadClassificationParams::clear_max_sample_size() {
  if (GetArenaForAllocation() == nullptr && max_sample_size_ != nullptr) {
    delete max_sample_size_;
  }
  max_sample_size_ = nullptr;
}
void ReadClassificationParams::clear_open_pore_ewma_weight() {
  if (GetArenaForAllocation() == nullptr && open_pore_ewma_weight_ != nullptr) {
    delete open_pore_ewma_weight_;
  }
  open_pore_ewma_weight_ = nullptr;
}
ReadClassificationParams::ReadClassificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selected_classifications_(arena),
  open_pore_classifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ReadClassificationParams)
}
ReadClassificationParams::ReadClassificationParams(const ReadClassificationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selected_classifications_(from.selected_classifications_),
      open_pore_classifications_(from.open_pore_classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  classification_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_classification_strategy().empty()) {
    classification_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_classification_strategy(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_max_sample_size()) {
    max_sample_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_sample_size_);
  } else {
    max_sample_size_ = nullptr;
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  if (from._internal_has_open_pore_ewma_weight()) {
    open_pore_ewma_weight_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.open_pore_ewma_weight_);
  } else {
    open_pore_ewma_weight_ = nullptr;
  }
  scheme_module_ = from.scheme_module_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ReadClassificationParams)
}

void ReadClassificationParams::SharedCtor() {
classification_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_sample_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scheme_module_) -
    reinterpret_cast<char*>(&max_sample_size_)) + sizeof(scheme_module_));
}

ReadClassificationParams::~ReadClassificationParams() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ReadClassificationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadClassificationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  classification_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete max_sample_size_;
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete open_pore_ewma_weight_;
}

void ReadClassificationParams::ArenaDtor(void* object) {
  ReadClassificationParams* _this = reinterpret_cast< ReadClassificationParams* >(object);
  (void)_this;
}
void ReadClassificationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadClassificationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadClassificationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ReadClassificationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_classifications_.Clear();
  open_pore_classifications_.Clear();
  classification_strategy_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && max_sample_size_ != nullptr) {
    delete max_sample_size_;
  }
  max_sample_size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && open_pore_ewma_weight_ != nullptr) {
    delete open_pore_ewma_weight_;
  }
  open_pore_ewma_weight_ = nullptr;
  scheme_module_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadClassificationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.ReadClassificationParams.Scheme scheme_module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheme_module(static_cast<::minknow_api::analysis_configuration::ReadClassificationParams_Scheme>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_sample_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_sample_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string selected_classifications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_selected_classifications();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string classification_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_classification_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ReadClassificationParams.Parameters parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string open_pore_classifications = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_open_pore_classifications();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue open_pore_ewma_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_pore_ewma_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadClassificationParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ReadClassificationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.ReadClassificationParams.Scheme scheme_module = 1;
  if (this->_internal_scheme_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheme_module(), target);
  }

  // .google.protobuf.UInt64Value max_sample_size = 2;
  if (this->_internal_has_max_sample_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_sample_size(this), target, stream);
  }

  // repeated string selected_classifications = 3;
  for (int i = 0, n = this->_internal_selected_classifications_size(); i < n; i++) {
    const auto& s = this->_internal_selected_classifications(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ReadClassificationParams.selected_classifications");
    target = stream->WriteString(3, s, target);
  }

  // string classification_strategy = 4;
  if (!this->_internal_classification_strategy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classification_strategy().data(), static_cast<int>(this->_internal_classification_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ReadClassificationParams.classification_strategy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_classification_strategy(), target);
  }

  // .minknow_api.analysis_configuration.ReadClassificationParams.Parameters parameters = 5;
  if (this->_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::parameters(this), target, stream);
  }

  // repeated string open_pore_classifications = 6;
  for (int i = 0, n = this->_internal_open_pore_classifications_size(); i < n; i++) {
    const auto& s = this->_internal_open_pore_classifications(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ReadClassificationParams.open_pore_classifications");
    target = stream->WriteString(6, s, target);
  }

  // .google.protobuf.DoubleValue open_pore_ewma_weight = 7;
  if (this->_internal_has_open_pore_ewma_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::open_pore_ewma_weight(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ReadClassificationParams)
  return target;
}

size_t ReadClassificationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ReadClassificationParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string selected_classifications = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(selected_classifications_.size());
  for (int i = 0, n = selected_classifications_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      selected_classifications_.Get(i));
  }

  // repeated string open_pore_classifications = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(open_pore_classifications_.size());
  for (int i = 0, n = open_pore_classifications_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      open_pore_classifications_.Get(i));
  }

  // string classification_strategy = 4;
  if (!this->_internal_classification_strategy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classification_strategy());
  }

  // .google.protobuf.UInt64Value max_sample_size = 2;
  if (this->_internal_has_max_sample_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_sample_size_);
  }

  // .minknow_api.analysis_configuration.ReadClassificationParams.Parameters parameters = 5;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .google.protobuf.DoubleValue open_pore_ewma_weight = 7;
  if (this->_internal_has_open_pore_ewma_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_pore_ewma_weight_);
  }

  // .minknow_api.analysis_configuration.ReadClassificationParams.Scheme scheme_module = 1;
  if (this->_internal_scheme_module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheme_module());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadClassificationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadClassificationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadClassificationParams::GetClassData() const { return &_class_data_; }

void ReadClassificationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadClassificationParams *>(to)->MergeFrom(
      static_cast<const ReadClassificationParams &>(from));
}


void ReadClassificationParams::MergeFrom(const ReadClassificationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ReadClassificationParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_classifications_.MergeFrom(from.selected_classifications_);
  open_pore_classifications_.MergeFrom(from.open_pore_classifications_);
  if (!from._internal_classification_strategy().empty()) {
    _internal_set_classification_strategy(from._internal_classification_strategy());
  }
  if (from._internal_has_max_sample_size()) {
    _internal_mutable_max_sample_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_sample_size());
  }
  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::minknow_api::analysis_configuration::ReadClassificationParams_Parameters::MergeFrom(from._internal_parameters());
  }
  if (from._internal_has_open_pore_ewma_weight()) {
    _internal_mutable_open_pore_ewma_weight()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_open_pore_ewma_weight());
  }
  if (from._internal_scheme_module() != 0) {
    _internal_set_scheme_module(from._internal_scheme_module());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadClassificationParams::CopyFrom(const ReadClassificationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ReadClassificationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadClassificationParams::IsInitialized() const {
  return true;
}

void ReadClassificationParams::InternalSwap(ReadClassificationParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  selected_classifications_.InternalSwap(&other->selected_classifications_);
  open_pore_classifications_.InternalSwap(&other->open_pore_classifications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &classification_strategy_, lhs_arena,
      &other->classification_strategy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadClassificationParams, scheme_module_)
      + sizeof(ReadClassificationParams::scheme_module_)
      - PROTOBUF_FIELD_OFFSET(ReadClassificationParams, max_sample_size_)>(
          reinterpret_cast<char*>(&max_sample_size_),
          reinterpret_cast<char*>(&other->max_sample_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadClassificationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[3]);
}

// ===================================================================

class ChannelStates_Logic_Behaviour::_Internal {
 public:
};

ChannelStates_Logic_Behaviour::ChannelStates_Logic_Behaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
}
ChannelStates_Logic_Behaviour::ChannelStates_Logic_Behaviour(const ChannelStates_Logic_Behaviour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reset_on_mux_change_, &from.reset_on_mux_change_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_on_effective_well_change_) -
    reinterpret_cast<char*>(&reset_on_mux_change_)) + sizeof(reset_on_effective_well_change_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
}

void ChannelStates_Logic_Behaviour::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reset_on_mux_change_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reset_on_effective_well_change_) -
    reinterpret_cast<char*>(&reset_on_mux_change_)) + sizeof(reset_on_effective_well_change_));
}

ChannelStates_Logic_Behaviour::~ChannelStates_Logic_Behaviour() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Logic_Behaviour::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelStates_Logic_Behaviour::ArenaDtor(void* object) {
  ChannelStates_Logic_Behaviour* _this = reinterpret_cast< ChannelStates_Logic_Behaviour* >(object);
  (void)_this;
}
void ChannelStates_Logic_Behaviour::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Logic_Behaviour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Logic_Behaviour::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reset_on_mux_change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_on_effective_well_change_) -
      reinterpret_cast<char*>(&reset_on_mux_change_)) + sizeof(reset_on_effective_well_change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Logic_Behaviour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 reset_on_mux_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reset_on_mux_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reset_on_well_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reset_on_well_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 latch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reset_on_effective_mux_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reset_on_effective_mux_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reset_on_effective_well_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_on_effective_well_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Logic_Behaviour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reset_on_mux_change = 1;
  if (this->_internal_reset_on_mux_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reset_on_mux_change(), target);
  }

  // int32 reset_on_well_change = 2;
  if (this->_internal_reset_on_well_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reset_on_well_change(), target);
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_latch(), target);
  }

  // int32 reset_on_effective_mux_change = 4;
  if (this->_internal_reset_on_effective_mux_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reset_on_effective_mux_change(), target);
  }

  // int32 reset_on_effective_well_change = 5;
  if (this->_internal_reset_on_effective_well_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_reset_on_effective_well_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  return target;
}

size_t ChannelStates_Logic_Behaviour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reset_on_mux_change = 1;
  if (this->_internal_reset_on_mux_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reset_on_mux_change());
  }

  // int32 reset_on_well_change = 2;
  if (this->_internal_reset_on_well_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reset_on_well_change());
  }

  // int32 latch = 3;
  if (this->_internal_latch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_latch());
  }

  // int32 reset_on_effective_mux_change = 4;
  if (this->_internal_reset_on_effective_mux_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reset_on_effective_mux_change());
  }

  // int32 reset_on_effective_well_change = 5;
  if (this->_internal_reset_on_effective_well_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reset_on_effective_well_change());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Logic_Behaviour::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Logic_Behaviour::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Logic_Behaviour::GetClassData() const { return &_class_data_; }

void ChannelStates_Logic_Behaviour::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Logic_Behaviour *>(to)->MergeFrom(
      static_cast<const ChannelStates_Logic_Behaviour &>(from));
}


void ChannelStates_Logic_Behaviour::MergeFrom(const ChannelStates_Logic_Behaviour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reset_on_mux_change() != 0) {
    _internal_set_reset_on_mux_change(from._internal_reset_on_mux_change());
  }
  if (from._internal_reset_on_well_change() != 0) {
    _internal_set_reset_on_well_change(from._internal_reset_on_well_change());
  }
  if (from._internal_latch() != 0) {
    _internal_set_latch(from._internal_latch());
  }
  if (from._internal_reset_on_effective_mux_change() != 0) {
    _internal_set_reset_on_effective_mux_change(from._internal_reset_on_effective_mux_change());
  }
  if (from._internal_reset_on_effective_well_change() != 0) {
    _internal_set_reset_on_effective_well_change(from._internal_reset_on_effective_well_change());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Logic_Behaviour::CopyFrom(const ChannelStates_Logic_Behaviour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Logic_Behaviour::IsInitialized() const {
  return true;
}

void ChannelStates_Logic_Behaviour::InternalSwap(ChannelStates_Logic_Behaviour* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStates_Logic_Behaviour, reset_on_effective_well_change_)
      + sizeof(ChannelStates_Logic_Behaviour::reset_on_effective_well_change_)
      - PROTOBUF_FIELD_OFFSET(ChannelStates_Logic_Behaviour, reset_on_mux_change_)>(
          reinterpret_cast<char*>(&reset_on_mux_change_),
          reinterpret_cast<char*>(&other->reset_on_mux_change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Logic_Behaviour::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[4]);
}

// ===================================================================

class ChannelStates_Logic_Ranges_Range::_Internal {
 public:
};

ChannelStates_Logic_Ranges_Range::ChannelStates_Logic_Ranges_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
}
ChannelStates_Logic_Ranges_Range::ChannelStates_Logic_Ranges_Range(const ChannelStates_Logic_Ranges_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lower_pa_, &from.lower_pa_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_pa_) -
    reinterpret_cast<char*>(&lower_pa_)) + sizeof(upper_pa_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
}

void ChannelStates_Logic_Ranges_Range::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lower_pa_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_pa_) -
    reinterpret_cast<char*>(&lower_pa_)) + sizeof(upper_pa_));
}

ChannelStates_Logic_Ranges_Range::~ChannelStates_Logic_Ranges_Range() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Logic_Ranges_Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelStates_Logic_Ranges_Range::ArenaDtor(void* object) {
  ChannelStates_Logic_Ranges_Range* _this = reinterpret_cast< ChannelStates_Logic_Ranges_Range* >(object);
  (void)_this;
}
void ChannelStates_Logic_Ranges_Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Logic_Ranges_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Logic_Ranges_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lower_pa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_pa_) -
      reinterpret_cast<char*>(&lower_pa_)) + sizeof(upper_pa_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Logic_Ranges_Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lower_pa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lower_pa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 upper_pa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          upper_pa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Logic_Ranges_Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lower_pa = 1;
  if (this->_internal_lower_pa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lower_pa(), target);
  }

  // int32 upper_pa = 2;
  if (this->_internal_upper_pa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_upper_pa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  return target;
}

size_t ChannelStates_Logic_Ranges_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lower_pa = 1;
  if (this->_internal_lower_pa() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lower_pa());
  }

  // int32 upper_pa = 2;
  if (this->_internal_upper_pa() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_upper_pa());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Logic_Ranges_Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Logic_Ranges_Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Logic_Ranges_Range::GetClassData() const { return &_class_data_; }

void ChannelStates_Logic_Ranges_Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Logic_Ranges_Range *>(to)->MergeFrom(
      static_cast<const ChannelStates_Logic_Ranges_Range &>(from));
}


void ChannelStates_Logic_Ranges_Range::MergeFrom(const ChannelStates_Logic_Ranges_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lower_pa() != 0) {
    _internal_set_lower_pa(from._internal_lower_pa());
  }
  if (from._internal_upper_pa() != 0) {
    _internal_set_upper_pa(from._internal_upper_pa());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Logic_Ranges_Range::CopyFrom(const ChannelStates_Logic_Ranges_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Logic_Ranges_Range::IsInitialized() const {
  return true;
}

void ChannelStates_Logic_Ranges_Range::InternalSwap(ChannelStates_Logic_Ranges_Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStates_Logic_Ranges_Range, upper_pa_)
      + sizeof(ChannelStates_Logic_Ranges_Range::upper_pa_)
      - PROTOBUF_FIELD_OFFSET(ChannelStates_Logic_Ranges_Range, lower_pa_)>(
          reinterpret_cast<char*>(&lower_pa_),
          reinterpret_cast<char*>(&other->lower_pa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Logic_Ranges_Range::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[5]);
}

// ===================================================================

class ChannelStates_Logic_Ranges::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range& range(const ChannelStates_Logic_Ranges* msg);
};

const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range&
ChannelStates_Logic_Ranges::_Internal::range(const ChannelStates_Logic_Ranges* msg) {
  return *msg->range_;
}
ChannelStates_Logic_Ranges::ChannelStates_Logic_Ranges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
}
ChannelStates_Logic_Ranges::ChannelStates_Logic_Ranges(const ChannelStates_Logic_Ranges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
}

void ChannelStates_Logic_Ranges::SharedCtor() {
range_ = nullptr;
}

ChannelStates_Logic_Ranges::~ChannelStates_Logic_Ranges() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Logic_Ranges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
}

void ChannelStates_Logic_Ranges::ArenaDtor(void* object) {
  ChannelStates_Logic_Ranges* _this = reinterpret_cast< ChannelStates_Logic_Ranges* >(object);
  (void)_this;
}
void ChannelStates_Logic_Ranges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Logic_Ranges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Logic_Ranges::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Logic_Ranges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Logic_Ranges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range range = 1;
  if (this->_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  return target;
}

size_t ChannelStates_Logic_Ranges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges.Range range = 1;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Logic_Ranges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Logic_Ranges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Logic_Ranges::GetClassData() const { return &_class_data_; }

void ChannelStates_Logic_Ranges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Logic_Ranges *>(to)->MergeFrom(
      static_cast<const ChannelStates_Logic_Ranges &>(from));
}


void ChannelStates_Logic_Ranges::MergeFrom(const ChannelStates_Logic_Ranges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_range()) {
    _internal_mutable_range()->::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range::MergeFrom(from._internal_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Logic_Ranges::CopyFrom(const ChannelStates_Logic_Ranges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Logic.Ranges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Logic_Ranges::IsInitialized() const {
  return true;
}

void ChannelStates_Logic_Ranges::InternalSwap(ChannelStates_Logic_Ranges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Logic_Ranges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[6]);
}

// ===================================================================

class ChannelStates_Logic::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges& ranges(const ChannelStates_Logic* msg);
  static const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour& behaviour(const ChannelStates_Logic* msg);
};

const ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges&
ChannelStates_Logic::_Internal::ranges(const ChannelStates_Logic* msg) {
  return *msg->ranges_;
}
const ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour&
ChannelStates_Logic::_Internal::behaviour(const ChannelStates_Logic* msg) {
  return *msg->behaviour_;
}
ChannelStates_Logic::ChannelStates_Logic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Logic)
}
ChannelStates_Logic::ChannelStates_Logic(const ChannelStates_Logic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  criteria_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_criteria().empty()) {
    criteria_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_criteria(), 
      GetArenaForAllocation());
  }
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pattern().empty()) {
    pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pattern(), 
      GetArenaForAllocation());
  }
  classification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_classification().empty()) {
    classification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_classification(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ranges()) {
    ranges_ = new ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges(*from.ranges_);
  } else {
    ranges_ = nullptr;
  }
  if (from._internal_has_behaviour()) {
    behaviour_ = new ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour(*from.behaviour_);
  } else {
    behaviour_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Logic)
}

void ChannelStates_Logic::SharedCtor() {
criteria_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
classification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ranges_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&ranges_)) + sizeof(rank_));
}

ChannelStates_Logic::~ChannelStates_Logic() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Logic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Logic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  criteria_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ranges_;
  if (this != internal_default_instance()) delete behaviour_;
}

void ChannelStates_Logic::ArenaDtor(void* object) {
  ChannelStates_Logic* _this = reinterpret_cast< ChannelStates_Logic* >(object);
  (void)_this;
}
void ChannelStates_Logic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Logic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Logic::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Logic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criteria_.ClearToEmpty();
  pattern_.ClearToEmpty();
  classification_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ranges_ != nullptr) {
    delete ranges_;
  }
  ranges_ = nullptr;
  if (GetArenaForAllocation() == nullptr && behaviour_ != nullptr) {
    delete behaviour_;
  }
  behaviour_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Logic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string criteria = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_criteria();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Logic.criteria"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Logic.pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string classification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_classification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Logic.classification"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges ranges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour behaviour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_behaviour(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Logic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Logic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string criteria = 1;
  if (!this->_internal_criteria().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_criteria().data(), static_cast<int>(this->_internal_criteria().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Logic.criteria");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_criteria(), target);
  }

  // int32 rank = 3;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  // string pattern = 4;
  if (!this->_internal_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Logic.pattern");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pattern(), target);
  }

  // string classification = 5;
  if (!this->_internal_classification().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classification().data(), static_cast<int>(this->_internal_classification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Logic.classification");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_classification(), target);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges ranges = 6;
  if (this->_internal_has_ranges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ranges(this), target, stream);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour behaviour = 7;
  if (this->_internal_has_behaviour()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::behaviour(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Logic)
  return target;
}

size_t ChannelStates_Logic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Logic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string criteria = 1;
  if (!this->_internal_criteria().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_criteria());
  }

  // string pattern = 4;
  if (!this->_internal_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // string classification = 5;
  if (!this->_internal_classification().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classification());
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Ranges ranges = 6;
  if (this->_internal_has_ranges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ranges_);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic.Behaviour behaviour = 7;
  if (this->_internal_has_behaviour()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behaviour_);
  }

  // int32 rank = 3;
  if (this->_internal_rank() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Logic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Logic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Logic::GetClassData() const { return &_class_data_; }

void ChannelStates_Logic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Logic *>(to)->MergeFrom(
      static_cast<const ChannelStates_Logic &>(from));
}


void ChannelStates_Logic::MergeFrom(const ChannelStates_Logic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Logic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_criteria().empty()) {
    _internal_set_criteria(from._internal_criteria());
  }
  if (!from._internal_pattern().empty()) {
    _internal_set_pattern(from._internal_pattern());
  }
  if (!from._internal_classification().empty()) {
    _internal_set_classification(from._internal_classification());
  }
  if (from._internal_has_ranges()) {
    _internal_mutable_ranges()->::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges::MergeFrom(from._internal_ranges());
  }
  if (from._internal_has_behaviour()) {
    _internal_mutable_behaviour()->::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour::MergeFrom(from._internal_behaviour());
  }
  if (from._internal_rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Logic::CopyFrom(const ChannelStates_Logic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Logic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Logic::IsInitialized() const {
  return true;
}

void ChannelStates_Logic::InternalSwap(ChannelStates_Logic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &criteria_, lhs_arena,
      &other->criteria_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pattern_, lhs_arena,
      &other->pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &classification_, lhs_arena,
      &other->classification_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStates_Logic, rank_)
      + sizeof(ChannelStates_Logic::rank_)
      - PROTOBUF_FIELD_OFFSET(ChannelStates_Logic, ranges_)>(
          reinterpret_cast<char*>(&ranges_),
          reinterpret_cast<char*>(&other->ranges_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Logic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[7]);
}

// ===================================================================

class ChannelStates_Style::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt32Value& order(const ChannelStates_Style* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt32Value&
ChannelStates_Style::_Internal::order(const ChannelStates_Style* msg) {
  return *msg->order_;
}
void ChannelStates_Style::clear_order() {
  if (GetArenaForAllocation() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
ChannelStates_Style::ChannelStates_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Style)
}
ChannelStates_Style::ChannelStates_Style(const ChannelStates_Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_colour().empty()) {
    colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_colour(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_order()) {
    order_ = new ::PROTOBUF_NAMESPACE_ID::UInt32Value(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Style)
}

void ChannelStates_Style::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
order_ = nullptr;
}

ChannelStates_Style::~ChannelStates_Style() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Style)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Style::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  colour_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void ChannelStates_Style::ArenaDtor(void* object) {
  ChannelStates_Style* _this = reinterpret_cast< ChannelStates_Style* >(object);
  (void)_this;
}
void ChannelStates_Style::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Style::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  colour_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Style::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Style.label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string colour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_colour();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Style.colour"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Style::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value order = 1;
  if (this->_internal_has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Style.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_colour().data(), static_cast<int>(this->_internal_colour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Style.colour");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_colour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Style)
  return target;
}

size_t ChannelStates_Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Style)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_colour());
  }

  // .google.protobuf.UInt32Value order = 1;
  if (this->_internal_has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Style::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Style::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Style::GetClassData() const { return &_class_data_; }

void ChannelStates_Style::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Style *>(to)->MergeFrom(
      static_cast<const ChannelStates_Style &>(from));
}


void ChannelStates_Style::MergeFrom(const ChannelStates_Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Style)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from._internal_colour().empty()) {
    _internal_set_colour(from._internal_colour());
  }
  if (from._internal_has_order()) {
    _internal_mutable_order()->::PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Style::CopyFrom(const ChannelStates_Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Style::IsInitialized() const {
  return true;
}

void ChannelStates_Style::InternalSwap(ChannelStates_Style* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &colour_, lhs_arena,
      &other->colour_, rhs_arena
  );
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Style::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[8]);
}

// ===================================================================

class ChannelStates_Group::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::ChannelStates_Style& style(const ChannelStates_Group* msg);
};

const ::minknow_api::analysis_configuration::ChannelStates_Style&
ChannelStates_Group::_Internal::style(const ChannelStates_Group* msg) {
  return *msg->style_;
}
ChannelStates_Group::ChannelStates_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates.Group)
}
ChannelStates_Group::ChannelStates_Group(const ChannelStates_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::analysis_configuration::ChannelStates_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates.Group)
}

void ChannelStates_Group::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_ = nullptr;
}

ChannelStates_Group::~ChannelStates_Group() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates.Group)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void ChannelStates_Group::ArenaDtor(void* object) {
  ChannelStates_Group* _this = reinterpret_cast< ChannelStates_Group* >(object);
  (void)_this;
}
void ChannelStates_Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates_Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.Group.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ChannelStates.Style style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates_Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 2;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates.Group)
  return target;
}

size_t ChannelStates_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates.Group)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 2;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates_Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates_Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates_Group::GetClassData() const { return &_class_data_; }

void ChannelStates_Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates_Group *>(to)->MergeFrom(
      static_cast<const ChannelStates_Group &>(from));
}


void ChannelStates_Group::MergeFrom(const ChannelStates_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates.Group)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::analysis_configuration::ChannelStates_Style::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates_Group::CopyFrom(const ChannelStates_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates_Group::IsInitialized() const {
  return true;
}

void ChannelStates_Group::InternalSwap(ChannelStates_Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates_Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[9]);
}

// ===================================================================

class ChannelStates::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::ChannelStates_Group& group(const ChannelStates* msg);
  static const ::minknow_api::analysis_configuration::ChannelStates_Logic& logic(const ChannelStates* msg);
  static const ::minknow_api::analysis_configuration::ChannelStates_Style& style(const ChannelStates* msg);
};

const ::minknow_api::analysis_configuration::ChannelStates_Group&
ChannelStates::_Internal::group(const ChannelStates* msg) {
  return *msg->group_;
}
const ::minknow_api::analysis_configuration::ChannelStates_Logic&
ChannelStates::_Internal::logic(const ChannelStates* msg) {
  return *msg->logic_;
}
const ::minknow_api::analysis_configuration::ChannelStates_Style&
ChannelStates::_Internal::style(const ChannelStates* msg) {
  return *msg->style_;
}
ChannelStates::ChannelStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ChannelStates)
}
ChannelStates::ChannelStates(const ChannelStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_group()) {
    group_ = new ::minknow_api::analysis_configuration::ChannelStates_Group(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_logic()) {
    logic_ = new ::minknow_api::analysis_configuration::ChannelStates_Logic(*from.logic_);
  } else {
    logic_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::analysis_configuration::ChannelStates_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ChannelStates)
}

void ChannelStates::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&group_)) + sizeof(style_));
}

ChannelStates::~ChannelStates() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.ChannelStates)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete logic_;
  if (this != internal_default_instance()) delete style_;
}

void ChannelStates::ArenaDtor(void* object) {
  ChannelStates* _this = reinterpret_cast< ChannelStates* >(object);
  (void)_this;
}
void ChannelStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStates::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.ChannelStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && logic_ != nullptr) {
    delete logic_;
  }
  logic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.ChannelStates.Group group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ChannelStates.Logic logic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ChannelStates.Style style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.ChannelStates.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.ChannelStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.ChannelStates.Group group = 2;
  if (this->_internal_has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group(this), target, stream);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic logic = 3;
  if (this->_internal_has_logic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::logic(this), target, stream);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 4;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::style(this), target, stream);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.ChannelStates.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.ChannelStates)
  return target;
}

size_t ChannelStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.ChannelStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .minknow_api.analysis_configuration.ChannelStates.Group group = 2;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Logic logic = 3;
  if (this->_internal_has_logic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logic_);
  }

  // .minknow_api.analysis_configuration.ChannelStates.Style style = 4;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStates::GetClassData() const { return &_class_data_; }

void ChannelStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStates *>(to)->MergeFrom(
      static_cast<const ChannelStates &>(from));
}


void ChannelStates::MergeFrom(const ChannelStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.ChannelStates)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_group()) {
    _internal_mutable_group()->::minknow_api::analysis_configuration::ChannelStates_Group::MergeFrom(from._internal_group());
  }
  if (from._internal_has_logic()) {
    _internal_mutable_logic()->::minknow_api::analysis_configuration::ChannelStates_Logic::MergeFrom(from._internal_logic());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::analysis_configuration::ChannelStates_Style::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStates::CopyFrom(const ChannelStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.ChannelStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStates::IsInitialized() const {
  return true;
}

void ChannelStates::InternalSwap(ChannelStates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStates, style_)
      + sizeof(ChannelStates::style_)
      - PROTOBUF_FIELD_OFFSET(ChannelStates, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[10]);
}

// ===================================================================

class GetAnalysisConfigurationRequest::_Internal {
 public:
};

GetAnalysisConfigurationRequest::GetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetAnalysisConfigurationRequest)
}
GetAnalysisConfigurationRequest::GetAnalysisConfigurationRequest(const GetAnalysisConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetAnalysisConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnalysisConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnalysisConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetAnalysisConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[11]);
}

// ===================================================================

AnalysisConfiguration_ChannelStatesEntry_DoNotUse::AnalysisConfiguration_ChannelStatesEntry_DoNotUse() {}
AnalysisConfiguration_ChannelStatesEntry_DoNotUse::AnalysisConfiguration_ChannelStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnalysisConfiguration_ChannelStatesEntry_DoNotUse::MergeFrom(const AnalysisConfiguration_ChannelStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnalysisConfiguration_ChannelStatesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[12]);
}

// ===================================================================

class AnalysisConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::EventDetection& event_detection(const AnalysisConfiguration* msg);
  static const ::minknow_api::analysis_configuration::ReadDetectionParams& read_detection(const AnalysisConfiguration* msg);
  static const ::minknow_api::analysis_configuration::ReadClassificationParams& read_classification(const AnalysisConfiguration* msg);
};

const ::minknow_api::analysis_configuration::EventDetection&
AnalysisConfiguration::_Internal::event_detection(const AnalysisConfiguration* msg) {
  return *msg->event_detection_;
}
const ::minknow_api::analysis_configuration::ReadDetectionParams&
AnalysisConfiguration::_Internal::read_detection(const AnalysisConfiguration* msg) {
  return *msg->read_detection_;
}
const ::minknow_api::analysis_configuration::ReadClassificationParams&
AnalysisConfiguration::_Internal::read_classification(const AnalysisConfiguration* msg) {
  return *msg->read_classification_;
}
AnalysisConfiguration::AnalysisConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.AnalysisConfiguration)
}
AnalysisConfiguration::AnalysisConfiguration(const AnalysisConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_states_.MergeFrom(from.channel_states_);
  if (from._internal_has_event_detection()) {
    event_detection_ = new ::minknow_api::analysis_configuration::EventDetection(*from.event_detection_);
  } else {
    event_detection_ = nullptr;
  }
  if (from._internal_has_read_detection()) {
    read_detection_ = new ::minknow_api::analysis_configuration::ReadDetectionParams(*from.read_detection_);
  } else {
    read_detection_ = nullptr;
  }
  if (from._internal_has_read_classification()) {
    read_classification_ = new ::minknow_api::analysis_configuration::ReadClassificationParams(*from.read_classification_);
  } else {
    read_classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.AnalysisConfiguration)
}

void AnalysisConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_detection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_classification_) -
    reinterpret_cast<char*>(&event_detection_)) + sizeof(read_classification_));
}

AnalysisConfiguration::~AnalysisConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.AnalysisConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalysisConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_detection_;
  if (this != internal_default_instance()) delete read_detection_;
  if (this != internal_default_instance()) delete read_classification_;
}

void AnalysisConfiguration::ArenaDtor(void* object) {
  AnalysisConfiguration* _this = reinterpret_cast< AnalysisConfiguration* >(object);
  (void)_this;
  _this->channel_states_. ~MapField();
}
inline void AnalysisConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AnalysisConfiguration::ArenaDtor);
  }
}
void AnalysisConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalysisConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.AnalysisConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_states_.Clear();
  if (GetArenaForAllocation() == nullptr && event_detection_ != nullptr) {
    delete event_detection_;
  }
  event_detection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_detection_ != nullptr) {
    delete read_detection_;
  }
  read_detection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_classification_ != nullptr) {
    delete read_classification_;
  }
  read_classification_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalysisConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.EventDetection event_detection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ReadDetectionParams read_detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.ReadClassificationParams read_classification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .minknow_api.analysis_configuration.ChannelStates> channel_states = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&channel_states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalysisConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.AnalysisConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.EventDetection event_detection = 1;
  if (this->_internal_has_event_detection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event_detection(this), target, stream);
  }

  // .minknow_api.analysis_configuration.ReadDetectionParams read_detection = 2;
  if (this->_internal_has_read_detection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_detection(this), target, stream);
  }

  // .minknow_api.analysis_configuration.ReadClassificationParams read_classification = 4;
  if (this->_internal_has_read_classification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::read_classification(this), target, stream);
  }

  // map<string, .minknow_api.analysis_configuration.ChannelStates> channel_states = 7;
  if (!this->_internal_channel_states().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.analysis_configuration.AnalysisConfiguration.ChannelStatesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_channel_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_channel_states().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >::const_iterator
          it = this->_internal_channel_states().begin();
          it != this->_internal_channel_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AnalysisConfiguration_ChannelStatesEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >::const_iterator
          it = this->_internal_channel_states().begin();
          it != this->_internal_channel_states().end(); ++it) {
        target = AnalysisConfiguration_ChannelStatesEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.AnalysisConfiguration)
  return target;
}

size_t AnalysisConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.AnalysisConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .minknow_api.analysis_configuration.ChannelStates> channel_states = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::ChannelStates >::const_iterator
      it = this->_internal_channel_states().begin();
      it != this->_internal_channel_states().end(); ++it) {
    total_size += AnalysisConfiguration_ChannelStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .minknow_api.analysis_configuration.EventDetection event_detection = 1;
  if (this->_internal_has_event_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_detection_);
  }

  // .minknow_api.analysis_configuration.ReadDetectionParams read_detection = 2;
  if (this->_internal_has_read_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_detection_);
  }

  // .minknow_api.analysis_configuration.ReadClassificationParams read_classification = 4;
  if (this->_internal_has_read_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_classification_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalysisConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalysisConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalysisConfiguration::GetClassData() const { return &_class_data_; }

void AnalysisConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnalysisConfiguration *>(to)->MergeFrom(
      static_cast<const AnalysisConfiguration &>(from));
}


void AnalysisConfiguration::MergeFrom(const AnalysisConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.AnalysisConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_states_.MergeFrom(from.channel_states_);
  if (from._internal_has_event_detection()) {
    _internal_mutable_event_detection()->::minknow_api::analysis_configuration::EventDetection::MergeFrom(from._internal_event_detection());
  }
  if (from._internal_has_read_detection()) {
    _internal_mutable_read_detection()->::minknow_api::analysis_configuration::ReadDetectionParams::MergeFrom(from._internal_read_detection());
  }
  if (from._internal_has_read_classification()) {
    _internal_mutable_read_classification()->::minknow_api::analysis_configuration::ReadClassificationParams::MergeFrom(from._internal_read_classification());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalysisConfiguration::CopyFrom(const AnalysisConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.AnalysisConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisConfiguration::IsInitialized() const {
  return true;
}

void AnalysisConfiguration::InternalSwap(AnalysisConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_states_.InternalSwap(&other->channel_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalysisConfiguration, read_classification_)
      + sizeof(AnalysisConfiguration::read_classification_)
      - PROTOBUF_FIELD_OFFSET(AnalysisConfiguration, event_detection_)>(
          reinterpret_cast<char*>(&event_detection_),
          reinterpret_cast<char*>(&other->event_detection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalysisConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[13]);
}

// ===================================================================

class SetAnalysisConfigurationResponse::_Internal {
 public:
};

SetAnalysisConfigurationResponse::SetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetAnalysisConfigurationResponse)
}
SetAnalysisConfigurationResponse::SetAnalysisConfigurationResponse(const SetAnalysisConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetAnalysisConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnalysisConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnalysisConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetAnalysisConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[14]);
}

// ===================================================================

class ResetAnalysisConfigurationRequest::_Internal {
 public:
};

ResetAnalysisConfigurationRequest::ResetAnalysisConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest)
}
ResetAnalysisConfigurationRequest::ResetAnalysisConfigurationRequest(const ResetAnalysisConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ResetAnalysisConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetAnalysisConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetAnalysisConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetAnalysisConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[15]);
}

// ===================================================================

class ResetAnalysisConfigurationResponse::_Internal {
 public:
};

ResetAnalysisConfigurationResponse::ResetAnalysisConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse)
}
ResetAnalysisConfigurationResponse::ResetAnalysisConfigurationResponse(const ResetAnalysisConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.ResetAnalysisConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetAnalysisConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetAnalysisConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetAnalysisConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[16]);
}

// ===================================================================

class SetAnalysisEnabledStateRequest::_Internal {
 public:
};

SetAnalysisEnabledStateRequest::SetAnalysisEnabledStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
}
SetAnalysisEnabledStateRequest::SetAnalysisEnabledStateRequest(const SetAnalysisEnabledStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
}

void SetAnalysisEnabledStateRequest::SharedCtor() {
enable_ = false;
}

SetAnalysisEnabledStateRequest::~SetAnalysisEnabledStateRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAnalysisEnabledStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetAnalysisEnabledStateRequest::ArenaDtor(void* object) {
  SetAnalysisEnabledStateRequest* _this = reinterpret_cast< SetAnalysisEnabledStateRequest* >(object);
  (void)_this;
}
void SetAnalysisEnabledStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAnalysisEnabledStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAnalysisEnabledStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAnalysisEnabledStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1 [(.minknow_api.rpc_required) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAnalysisEnabledStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  return target;
}

size_t SetAnalysisEnabledStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1 [(.minknow_api.rpc_required) = true];
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnalysisEnabledStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAnalysisEnabledStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnalysisEnabledStateRequest::GetClassData() const { return &_class_data_; }

void SetAnalysisEnabledStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAnalysisEnabledStateRequest *>(to)->MergeFrom(
      static_cast<const SetAnalysisEnabledStateRequest &>(from));
}


void SetAnalysisEnabledStateRequest::MergeFrom(const SetAnalysisEnabledStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnalysisEnabledStateRequest::CopyFrom(const SetAnalysisEnabledStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.SetAnalysisEnabledStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnalysisEnabledStateRequest::IsInitialized() const {
  return true;
}

void SetAnalysisEnabledStateRequest::InternalSwap(SetAnalysisEnabledStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnalysisEnabledStateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[17]);
}

// ===================================================================

class SetAnalysisEnabledStateResponse::_Internal {
 public:
};

SetAnalysisEnabledStateResponse::SetAnalysisEnabledStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse)
}
SetAnalysisEnabledStateResponse::SetAnalysisEnabledStateResponse(const SetAnalysisEnabledStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetAnalysisEnabledStateResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnalysisEnabledStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnalysisEnabledStateResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetAnalysisEnabledStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[18]);
}

// ===================================================================

class GetChannelStatesDescRequest::_Internal {
 public:
};

GetChannelStatesDescRequest::GetChannelStatesDescRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetChannelStatesDescRequest)
}
GetChannelStatesDescRequest::GetChannelStatesDescRequest(const GetChannelStatesDescRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetChannelStatesDescRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesDescRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesDescRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesDescRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[19]);
}

// ===================================================================

class GetChannelStatesDescResponse_Style::_Internal {
 public:
};

GetChannelStatesDescResponse_Style::GetChannelStatesDescResponse_Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
}
GetChannelStatesDescResponse_Style::GetChannelStatesDescResponse_Style(const GetChannelStatesDescResponse_Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_colour().empty()) {
    colour_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_colour(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
}

void GetChannelStatesDescResponse_Style::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
colour_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetChannelStatesDescResponse_Style::~GetChannelStatesDescResponse_Style() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesDescResponse_Style::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  colour_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChannelStatesDescResponse_Style::ArenaDtor(void* object) {
  GetChannelStatesDescResponse_Style* _this = reinterpret_cast< GetChannelStatesDescResponse_Style* >(object);
  (void)_this;
}
void GetChannelStatesDescResponse_Style::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesDescResponse_Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesDescResponse_Style::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  description_.ClearToEmpty();
  colour_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesDescResponse_Style::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string colour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_colour();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesDescResponse_Style::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_colour().data(), static_cast<int>(this->_internal_colour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style.colour");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_colour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  return target;
}

size_t GetChannelStatesDescResponse_Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string colour = 3;
  if (!this->_internal_colour().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_colour());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesDescResponse_Style::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesDescResponse_Style::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesDescResponse_Style::GetClassData() const { return &_class_data_; }

void GetChannelStatesDescResponse_Style::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesDescResponse_Style *>(to)->MergeFrom(
      static_cast<const GetChannelStatesDescResponse_Style &>(from));
}


void GetChannelStatesDescResponse_Style::MergeFrom(const GetChannelStatesDescResponse_Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_colour().empty()) {
    _internal_set_colour(from._internal_colour());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesDescResponse_Style::CopyFrom(const GetChannelStatesDescResponse_Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesDescResponse_Style::IsInitialized() const {
  return true;
}

void GetChannelStatesDescResponse_Style::InternalSwap(GetChannelStatesDescResponse_Style* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &colour_, lhs_arena,
      &other->colour_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesDescResponse_Style::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[20]);
}

// ===================================================================

class GetChannelStatesDescResponse_ChannelState::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& style(const GetChannelStatesDescResponse_ChannelState* msg);
};

const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style&
GetChannelStatesDescResponse_ChannelState::_Internal::style(const GetChannelStatesDescResponse_ChannelState* msg) {
  return *msg->style_;
}
GetChannelStatesDescResponse_ChannelState::GetChannelStatesDescResponse_ChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
}
GetChannelStatesDescResponse_ChannelState::GetChannelStatesDescResponse_ChannelState(const GetChannelStatesDescResponse_ChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_order_) -
    reinterpret_cast<char*>(&id_)) + sizeof(global_order_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
}

void GetChannelStatesDescResponse_ChannelState::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&global_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(global_order_));
}

GetChannelStatesDescResponse_ChannelState::~GetChannelStatesDescResponse_ChannelState() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesDescResponse_ChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void GetChannelStatesDescResponse_ChannelState::ArenaDtor(void* object) {
  GetChannelStatesDescResponse_ChannelState* _this = reinterpret_cast< GetChannelStatesDescResponse_ChannelState* >(object);
  (void)_this;
}
void GetChannelStatesDescResponse_ChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesDescResponse_ChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesDescResponse_ChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_order_) -
      reinterpret_cast<char*>(&id_)) + sizeof(global_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesDescResponse_ChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          global_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesDescResponse_ChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 3;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::style(this), target, stream);
  }

  // uint32 global_order = 4;
  if (this->_internal_global_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_global_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  return target;
}

size_t GetChannelStatesDescResponse_ChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 3;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 global_order = 4;
  if (this->_internal_global_order() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_global_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesDescResponse_ChannelState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesDescResponse_ChannelState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesDescResponse_ChannelState::GetClassData() const { return &_class_data_; }

void GetChannelStatesDescResponse_ChannelState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesDescResponse_ChannelState *>(to)->MergeFrom(
      static_cast<const GetChannelStatesDescResponse_ChannelState &>(from));
}


void GetChannelStatesDescResponse_ChannelState::MergeFrom(const GetChannelStatesDescResponse_ChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style::MergeFrom(from._internal_style());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_global_order() != 0) {
    _internal_set_global_order(from._internal_global_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesDescResponse_ChannelState::CopyFrom(const GetChannelStatesDescResponse_ChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesDescResponse_ChannelState::IsInitialized() const {
  return true;
}

void GetChannelStatesDescResponse_ChannelState::InternalSwap(GetChannelStatesDescResponse_ChannelState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChannelStatesDescResponse_ChannelState, global_order_)
      + sizeof(GetChannelStatesDescResponse_ChannelState::global_order_)
      - PROTOBUF_FIELD_OFFSET(GetChannelStatesDescResponse_ChannelState, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesDescResponse_ChannelState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[21]);
}

// ===================================================================

class GetChannelStatesDescResponse_Group::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style& style(const GetChannelStatesDescResponse_Group* msg);
};

const ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style&
GetChannelStatesDescResponse_Group::_Internal::style(const GetChannelStatesDescResponse_Group* msg) {
  return *msg->style_;
}
GetChannelStatesDescResponse_Group::GetChannelStatesDescResponse_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
}
GetChannelStatesDescResponse_Group::GetChannelStatesDescResponse_Group(const GetChannelStatesDescResponse_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    style_ = new ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
}

void GetChannelStatesDescResponse_Group::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_ = nullptr;
}

GetChannelStatesDescResponse_Group::~GetChannelStatesDescResponse_Group() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesDescResponse_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void GetChannelStatesDescResponse_Group::ArenaDtor(void* object) {
  GetChannelStatesDescResponse_Group* _this = reinterpret_cast< GetChannelStatesDescResponse_Group* >(object);
  (void)_this;
}
void GetChannelStatesDescResponse_Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesDescResponse_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesDescResponse_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesDescResponse_Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesDescResponse_Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 2;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  return target;
}

size_t GetChannelStatesDescResponse_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.ChannelState states = 3;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Style style = 2;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesDescResponse_Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesDescResponse_Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesDescResponse_Group::GetClassData() const { return &_class_data_; }

void GetChannelStatesDescResponse_Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesDescResponse_Group *>(to)->MergeFrom(
      static_cast<const GetChannelStatesDescResponse_Group &>(from));
}


void GetChannelStatesDescResponse_Group::MergeFrom(const GetChannelStatesDescResponse_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesDescResponse_Group::CopyFrom(const GetChannelStatesDescResponse_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesDescResponse_Group::IsInitialized() const {
  return true;
}

void GetChannelStatesDescResponse_Group::InternalSwap(GetChannelStatesDescResponse_Group* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesDescResponse_Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[22]);
}

// ===================================================================

class GetChannelStatesDescResponse::_Internal {
 public:
};

GetChannelStatesDescResponse::GetChannelStatesDescResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
}
GetChannelStatesDescResponse::GetChannelStatesDescResponse(const GetChannelStatesDescResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
}

void GetChannelStatesDescResponse::SharedCtor() {
}

GetChannelStatesDescResponse::~GetChannelStatesDescResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelStatesDescResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetChannelStatesDescResponse::ArenaDtor(void* object) {
  GetChannelStatesDescResponse* _this = reinterpret_cast< GetChannelStatesDescResponse* >(object);
  (void)_this;
}
void GetChannelStatesDescResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelStatesDescResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelStatesDescResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelStatesDescResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatesDescResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  return target;
}

size_t GetChannelStatesDescResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.GetChannelStatesDescResponse.Group groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelStatesDescResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelStatesDescResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelStatesDescResponse::GetClassData() const { return &_class_data_; }

void GetChannelStatesDescResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelStatesDescResponse *>(to)->MergeFrom(
      static_cast<const GetChannelStatesDescResponse &>(from));
}


void GetChannelStatesDescResponse::MergeFrom(const GetChannelStatesDescResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelStatesDescResponse::CopyFrom(const GetChannelStatesDescResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetChannelStatesDescResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatesDescResponse::IsInitialized() const {
  return true;
}

void GetChannelStatesDescResponse::InternalSwap(GetChannelStatesDescResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatesDescResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[23]);
}

// ===================================================================

class GetSummaryRequest::_Internal {
 public:
};

GetSummaryRequest::GetSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetSummaryRequest)
}
GetSummaryRequest::GetSummaryRequest(const GetSummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetSummaryRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSummaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSummaryRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetSummaryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[24]);
}

// ===================================================================

class GetSummaryResponse::_Internal {
 public:
};

GetSummaryResponse::GetSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetSummaryResponse)
}
GetSummaryResponse::GetSummaryResponse(const GetSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&analysis_enabled_, &from.analysis_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&basecalling_enabled_) -
    reinterpret_cast<char*>(&analysis_enabled_)) + sizeof(basecalling_enabled_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetSummaryResponse)
}

void GetSummaryResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&analysis_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&basecalling_enabled_) -
    reinterpret_cast<char*>(&analysis_enabled_)) + sizeof(basecalling_enabled_));
}

GetSummaryResponse::~GetSummaryResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetSummaryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSummaryResponse::ArenaDtor(void* object) {
  GetSummaryResponse* _this = reinterpret_cast< GetSummaryResponse* >(object);
  (void)_this;
}
void GetSummaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetSummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&analysis_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basecalling_enabled_) -
      reinterpret_cast<char*>(&analysis_enabled_)) + sizeof(basecalling_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSummaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool analysis_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          analysis_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool basecalling_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          basecalling_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSummaryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetSummaryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool analysis_enabled = 1;
  if (this->_internal_analysis_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_analysis_enabled(), target);
  }

  // bool basecalling_enabled = 2;
  if (this->_internal_basecalling_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_basecalling_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetSummaryResponse)
  return target;
}

size_t GetSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetSummaryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool analysis_enabled = 1;
  if (this->_internal_analysis_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool basecalling_enabled = 2;
  if (this->_internal_basecalling_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSummaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSummaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSummaryResponse::GetClassData() const { return &_class_data_; }

void GetSummaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSummaryResponse *>(to)->MergeFrom(
      static_cast<const GetSummaryResponse &>(from));
}


void GetSummaryResponse::MergeFrom(const GetSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_analysis_enabled() != 0) {
    _internal_set_analysis_enabled(from._internal_analysis_enabled());
  }
  if (from._internal_basecalling_enabled() != 0) {
    _internal_set_basecalling_enabled(from._internal_basecalling_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSummaryResponse::CopyFrom(const GetSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSummaryResponse::IsInitialized() const {
  return true;
}

void GetSummaryResponse::InternalSwap(GetSummaryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSummaryResponse, basecalling_enabled_)
      + sizeof(GetSummaryResponse::basecalling_enabled_)
      - PROTOBUF_FIELD_OFFSET(GetSummaryResponse, analysis_enabled_)>(
          reinterpret_cast<char*>(&analysis_enabled_),
          reinterpret_cast<char*>(&other->analysis_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSummaryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[25]);
}

// ===================================================================

class BarcodingConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score(const BarcodingConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_rear(const BarcodingConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_mid(const BarcodingConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_mask(const BarcodingConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
BarcodingConfiguration::_Internal::min_score(const BarcodingConfiguration* msg) {
  return *msg->min_score_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
BarcodingConfiguration::_Internal::min_score_rear(const BarcodingConfiguration* msg) {
  return *msg->min_score_rear_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
BarcodingConfiguration::_Internal::min_score_mid(const BarcodingConfiguration* msg) {
  return *msg->min_score_mid_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
BarcodingConfiguration::_Internal::min_score_mask(const BarcodingConfiguration* msg) {
  return *msg->min_score_mask_;
}
void BarcodingConfiguration::clear_min_score() {
  if (GetArenaForAllocation() == nullptr && min_score_ != nullptr) {
    delete min_score_;
  }
  min_score_ = nullptr;
}
void BarcodingConfiguration::clear_min_score_rear() {
  if (GetArenaForAllocation() == nullptr && min_score_rear_ != nullptr) {
    delete min_score_rear_;
  }
  min_score_rear_ = nullptr;
}
void BarcodingConfiguration::clear_min_score_mid() {
  if (GetArenaForAllocation() == nullptr && min_score_mid_ != nullptr) {
    delete min_score_mid_;
  }
  min_score_mid_ = nullptr;
}
void BarcodingConfiguration::clear_min_score_mask() {
  if (GetArenaForAllocation() == nullptr && min_score_mask_ != nullptr) {
    delete min_score_mask_;
  }
  min_score_mask_ = nullptr;
}
BarcodingConfiguration::BarcodingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  barcoding_kits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.BarcodingConfiguration)
}
BarcodingConfiguration::BarcodingConfiguration(const BarcodingConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      barcoding_kits_(from.barcoding_kits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_score()) {
    min_score_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_);
  } else {
    min_score_ = nullptr;
  }
  if (from._internal_has_min_score_rear()) {
    min_score_rear_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_rear_);
  } else {
    min_score_rear_ = nullptr;
  }
  if (from._internal_has_min_score_mid()) {
    min_score_mid_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_mid_);
  } else {
    min_score_mid_ = nullptr;
  }
  if (from._internal_has_min_score_mask()) {
    min_score_mask_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_mask_);
  } else {
    min_score_mask_ = nullptr;
  }
  ::memcpy(&trim_barcodes_, &from.trim_barcodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&detect_mid_strand_barcodes_) -
    reinterpret_cast<char*>(&trim_barcodes_)) + sizeof(detect_mid_strand_barcodes_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.BarcodingConfiguration)
}

void BarcodingConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&detect_mid_strand_barcodes_) -
    reinterpret_cast<char*>(&min_score_)) + sizeof(detect_mid_strand_barcodes_));
}

BarcodingConfiguration::~BarcodingConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.BarcodingConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BarcodingConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete min_score_;
  if (this != internal_default_instance()) delete min_score_rear_;
  if (this != internal_default_instance()) delete min_score_mid_;
  if (this != internal_default_instance()) delete min_score_mask_;
}

void BarcodingConfiguration::ArenaDtor(void* object) {
  BarcodingConfiguration* _this = reinterpret_cast< BarcodingConfiguration* >(object);
  (void)_this;
}
void BarcodingConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BarcodingConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BarcodingConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.BarcodingConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barcoding_kits_.Clear();
  if (GetArenaForAllocation() == nullptr && min_score_ != nullptr) {
    delete min_score_;
  }
  min_score_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_score_rear_ != nullptr) {
    delete min_score_rear_;
  }
  min_score_rear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_score_mid_ != nullptr) {
    delete min_score_mid_;
  }
  min_score_mid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_score_mask_ != nullptr) {
    delete min_score_mask_;
  }
  min_score_mask_ = nullptr;
  ::memset(&trim_barcodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detect_mid_strand_barcodes_) -
      reinterpret_cast<char*>(&trim_barcodes_)) + sizeof(detect_mid_strand_barcodes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarcodingConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string barcoding_kits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_barcoding_kits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool trim_barcodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trim_barcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool require_barcodes_both_ends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          require_barcodes_both_ends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool detect_mid_strand_barcodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          detect_mid_strand_barcodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_rear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_rear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_mid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_mid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_mask = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarcodingConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.BarcodingConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string barcoding_kits = 1;
  for (int i = 0, n = this->_internal_barcoding_kits_size(); i < n; i++) {
    const auto& s = this->_internal_barcoding_kits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.BarcodingConfiguration.barcoding_kits");
    target = stream->WriteString(1, s, target);
  }

  // bool trim_barcodes = 2;
  if (this->_internal_trim_barcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trim_barcodes(), target);
  }

  // bool require_barcodes_both_ends = 3;
  if (this->_internal_require_barcodes_both_ends() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_require_barcodes_both_ends(), target);
  }

  // bool detect_mid_strand_barcodes = 4;
  if (this->_internal_detect_mid_strand_barcodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_detect_mid_strand_barcodes(), target);
  }

  // .google.protobuf.FloatValue min_score = 5;
  if (this->_internal_has_min_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::min_score(this), target, stream);
  }

  // .google.protobuf.FloatValue min_score_rear = 6;
  if (this->_internal_has_min_score_rear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::min_score_rear(this), target, stream);
  }

  // .google.protobuf.FloatValue min_score_mid = 7;
  if (this->_internal_has_min_score_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::min_score_mid(this), target, stream);
  }

  // .google.protobuf.FloatValue min_score_mask = 8;
  if (this->_internal_has_min_score_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::min_score_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.BarcodingConfiguration)
  return target;
}

size_t BarcodingConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.BarcodingConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string barcoding_kits = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(barcoding_kits_.size());
  for (int i = 0, n = barcoding_kits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      barcoding_kits_.Get(i));
  }

  // .google.protobuf.FloatValue min_score = 5;
  if (this->_internal_has_min_score()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_);
  }

  // .google.protobuf.FloatValue min_score_rear = 6;
  if (this->_internal_has_min_score_rear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_rear_);
  }

  // .google.protobuf.FloatValue min_score_mid = 7;
  if (this->_internal_has_min_score_mid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_mid_);
  }

  // .google.protobuf.FloatValue min_score_mask = 8;
  if (this->_internal_has_min_score_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_mask_);
  }

  // bool trim_barcodes = 2;
  if (this->_internal_trim_barcodes() != 0) {
    total_size += 1 + 1;
  }

  // bool require_barcodes_both_ends = 3;
  if (this->_internal_require_barcodes_both_ends() != 0) {
    total_size += 1 + 1;
  }

  // bool detect_mid_strand_barcodes = 4;
  if (this->_internal_detect_mid_strand_barcodes() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarcodingConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BarcodingConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarcodingConfiguration::GetClassData() const { return &_class_data_; }

void BarcodingConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BarcodingConfiguration *>(to)->MergeFrom(
      static_cast<const BarcodingConfiguration &>(from));
}


void BarcodingConfiguration::MergeFrom(const BarcodingConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.BarcodingConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barcoding_kits_.MergeFrom(from.barcoding_kits_);
  if (from._internal_has_min_score()) {
    _internal_mutable_min_score()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score());
  }
  if (from._internal_has_min_score_rear()) {
    _internal_mutable_min_score_rear()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_rear());
  }
  if (from._internal_has_min_score_mid()) {
    _internal_mutable_min_score_mid()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_mid());
  }
  if (from._internal_has_min_score_mask()) {
    _internal_mutable_min_score_mask()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_mask());
  }
  if (from._internal_trim_barcodes() != 0) {
    _internal_set_trim_barcodes(from._internal_trim_barcodes());
  }
  if (from._internal_require_barcodes_both_ends() != 0) {
    _internal_set_require_barcodes_both_ends(from._internal_require_barcodes_both_ends());
  }
  if (from._internal_detect_mid_strand_barcodes() != 0) {
    _internal_set_detect_mid_strand_barcodes(from._internal_detect_mid_strand_barcodes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BarcodingConfiguration::CopyFrom(const BarcodingConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.BarcodingConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarcodingConfiguration::IsInitialized() const {
  return true;
}

void BarcodingConfiguration::InternalSwap(BarcodingConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  barcoding_kits_.InternalSwap(&other->barcoding_kits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarcodingConfiguration, detect_mid_strand_barcodes_)
      + sizeof(BarcodingConfiguration::detect_mid_strand_barcodes_)
      - PROTOBUF_FIELD_OFFSET(BarcodingConfiguration, min_score_)>(
          reinterpret_cast<char*>(&min_score_),
          reinterpret_cast<char*>(&other->min_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BarcodingConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[26]);
}

// ===================================================================

class AlignmentConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& minimum_coverage(const AlignmentConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
AlignmentConfiguration::_Internal::minimum_coverage(const AlignmentConfiguration* msg) {
  return *msg->minimum_coverage_;
}
void AlignmentConfiguration::clear_minimum_coverage() {
  if (GetArenaForAllocation() == nullptr && minimum_coverage_ != nullptr) {
    delete minimum_coverage_;
  }
  minimum_coverage_ = nullptr;
}
AlignmentConfiguration::AlignmentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reference_files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.AlignmentConfiguration)
}
AlignmentConfiguration::AlignmentConfiguration(const AlignmentConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reference_files_(from.reference_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bed_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bed_file().empty()) {
    bed_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bed_file(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_minimum_coverage()) {
    minimum_coverage_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.minimum_coverage_);
  } else {
    minimum_coverage_ = nullptr;
  }
  aggregate_statistics_for_multiple_bed_hits_ = from.aggregate_statistics_for_multiple_bed_hits_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.AlignmentConfiguration)
}

void AlignmentConfiguration::SharedCtor() {
bed_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_coverage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aggregate_statistics_for_multiple_bed_hits_) -
    reinterpret_cast<char*>(&minimum_coverage_)) + sizeof(aggregate_statistics_for_multiple_bed_hits_));
}

AlignmentConfiguration::~AlignmentConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.AlignmentConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlignmentConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bed_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete minimum_coverage_;
}

void AlignmentConfiguration::ArenaDtor(void* object) {
  AlignmentConfiguration* _this = reinterpret_cast< AlignmentConfiguration* >(object);
  (void)_this;
}
void AlignmentConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlignmentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlignmentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.AlignmentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_files_.Clear();
  bed_file_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && minimum_coverage_ != nullptr) {
    delete minimum_coverage_;
  }
  minimum_coverage_ = nullptr;
  aggregate_statistics_for_multiple_bed_hits_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlignmentConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string reference_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reference_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.AlignmentConfiguration.reference_files"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string bed_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bed_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.AlignmentConfiguration.bed_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue minimum_coverage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum_coverage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aggregate_statistics_for_multiple_bed_hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          aggregate_statistics_for_multiple_bed_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignmentConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.AlignmentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reference_files = 1;
  for (int i = 0, n = this->_internal_reference_files_size(); i < n; i++) {
    const auto& s = this->_internal_reference_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.AlignmentConfiguration.reference_files");
    target = stream->WriteString(1, s, target);
  }

  // string bed_file = 2;
  if (!this->_internal_bed_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bed_file().data(), static_cast<int>(this->_internal_bed_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.AlignmentConfiguration.bed_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bed_file(), target);
  }

  // .google.protobuf.FloatValue minimum_coverage = 3;
  if (this->_internal_has_minimum_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::minimum_coverage(this), target, stream);
  }

  // bool aggregate_statistics_for_multiple_bed_hits = 4;
  if (this->_internal_aggregate_statistics_for_multiple_bed_hits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_aggregate_statistics_for_multiple_bed_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.AlignmentConfiguration)
  return target;
}

size_t AlignmentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.AlignmentConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reference_files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reference_files_.size());
  for (int i = 0, n = reference_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reference_files_.Get(i));
  }

  // string bed_file = 2;
  if (!this->_internal_bed_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bed_file());
  }

  // .google.protobuf.FloatValue minimum_coverage = 3;
  if (this->_internal_has_minimum_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_coverage_);
  }

  // bool aggregate_statistics_for_multiple_bed_hits = 4;
  if (this->_internal_aggregate_statistics_for_multiple_bed_hits() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlignmentConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlignmentConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlignmentConfiguration::GetClassData() const { return &_class_data_; }

void AlignmentConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AlignmentConfiguration *>(to)->MergeFrom(
      static_cast<const AlignmentConfiguration &>(from));
}


void AlignmentConfiguration::MergeFrom(const AlignmentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.AlignmentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_files_.MergeFrom(from.reference_files_);
  if (!from._internal_bed_file().empty()) {
    _internal_set_bed_file(from._internal_bed_file());
  }
  if (from._internal_has_minimum_coverage()) {
    _internal_mutable_minimum_coverage()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_minimum_coverage());
  }
  if (from._internal_aggregate_statistics_for_multiple_bed_hits() != 0) {
    _internal_set_aggregate_statistics_for_multiple_bed_hits(from._internal_aggregate_statistics_for_multiple_bed_hits());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlignmentConfiguration::CopyFrom(const AlignmentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.AlignmentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignmentConfiguration::IsInitialized() const {
  return true;
}

void AlignmentConfiguration::InternalSwap(AlignmentConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reference_files_.InternalSwap(&other->reference_files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bed_file_, lhs_arena,
      &other->bed_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlignmentConfiguration, aggregate_statistics_for_multiple_bed_hits_)
      + sizeof(AlignmentConfiguration::aggregate_statistics_for_multiple_bed_hits_)
      - PROTOBUF_FIELD_OFFSET(AlignmentConfiguration, minimum_coverage_)>(
          reinterpret_cast<char*>(&minimum_coverage_),
          reinterpret_cast<char*>(&other->minimum_coverage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignmentConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[27]);
}

// ===================================================================

class LampConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_barcodes(const LampConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_masks(const LampConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FloatValue& min_score_targets(const LampConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FloatValue&
LampConfiguration::_Internal::min_score_barcodes(const LampConfiguration* msg) {
  return *msg->min_score_barcodes_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
LampConfiguration::_Internal::min_score_masks(const LampConfiguration* msg) {
  return *msg->min_score_masks_;
}
const ::PROTOBUF_NAMESPACE_ID::FloatValue&
LampConfiguration::_Internal::min_score_targets(const LampConfiguration* msg) {
  return *msg->min_score_targets_;
}
void LampConfiguration::clear_min_score_barcodes() {
  if (GetArenaForAllocation() == nullptr && min_score_barcodes_ != nullptr) {
    delete min_score_barcodes_;
  }
  min_score_barcodes_ = nullptr;
}
void LampConfiguration::clear_min_score_masks() {
  if (GetArenaForAllocation() == nullptr && min_score_masks_ != nullptr) {
    delete min_score_masks_;
  }
  min_score_masks_ = nullptr;
}
void LampConfiguration::clear_min_score_targets() {
  if (GetArenaForAllocation() == nullptr && min_score_targets_ != nullptr) {
    delete min_score_targets_;
  }
  min_score_targets_ = nullptr;
}
LampConfiguration::LampConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.LampConfiguration)
}
LampConfiguration::LampConfiguration(const LampConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lamp_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lamp_kit().empty()) {
    lamp_kit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lamp_kit(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_min_score_barcodes()) {
    min_score_barcodes_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_barcodes_);
  } else {
    min_score_barcodes_ = nullptr;
  }
  if (from._internal_has_min_score_masks()) {
    min_score_masks_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_masks_);
  } else {
    min_score_masks_ = nullptr;
  }
  if (from._internal_has_min_score_targets()) {
    min_score_targets_ = new ::PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_score_targets_);
  } else {
    min_score_targets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.LampConfiguration)
}

void LampConfiguration::SharedCtor() {
lamp_kit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_score_barcodes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_score_targets_) -
    reinterpret_cast<char*>(&min_score_barcodes_)) + sizeof(min_score_targets_));
}

LampConfiguration::~LampConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.LampConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LampConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lamp_kit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete min_score_barcodes_;
  if (this != internal_default_instance()) delete min_score_masks_;
  if (this != internal_default_instance()) delete min_score_targets_;
}

void LampConfiguration::ArenaDtor(void* object) {
  LampConfiguration* _this = reinterpret_cast< LampConfiguration* >(object);
  (void)_this;
}
void LampConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LampConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LampConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.LampConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lamp_kit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && min_score_barcodes_ != nullptr) {
    delete min_score_barcodes_;
  }
  min_score_barcodes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_score_masks_ != nullptr) {
    delete min_score_masks_;
  }
  min_score_masks_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_score_targets_ != nullptr) {
    delete min_score_targets_;
  }
  min_score_targets_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LampConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lamp_kit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lamp_kit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.LampConfiguration.lamp_kit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_barcodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_barcodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_masks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_masks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue min_score_targets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_score_targets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LampConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.LampConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lamp_kit = 1;
  if (!this->_internal_lamp_kit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lamp_kit().data(), static_cast<int>(this->_internal_lamp_kit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.LampConfiguration.lamp_kit");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lamp_kit(), target);
  }

  // .google.protobuf.FloatValue min_score_barcodes = 2;
  if (this->_internal_has_min_score_barcodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_score_barcodes(this), target, stream);
  }

  // .google.protobuf.FloatValue min_score_masks = 3;
  if (this->_internal_has_min_score_masks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::min_score_masks(this), target, stream);
  }

  // .google.protobuf.FloatValue min_score_targets = 4;
  if (this->_internal_has_min_score_targets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::min_score_targets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.LampConfiguration)
  return target;
}

size_t LampConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.LampConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lamp_kit = 1;
  if (!this->_internal_lamp_kit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lamp_kit());
  }

  // .google.protobuf.FloatValue min_score_barcodes = 2;
  if (this->_internal_has_min_score_barcodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_barcodes_);
  }

  // .google.protobuf.FloatValue min_score_masks = 3;
  if (this->_internal_has_min_score_masks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_masks_);
  }

  // .google.protobuf.FloatValue min_score_targets = 4;
  if (this->_internal_has_min_score_targets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_score_targets_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LampConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LampConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LampConfiguration::GetClassData() const { return &_class_data_; }

void LampConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LampConfiguration *>(to)->MergeFrom(
      static_cast<const LampConfiguration &>(from));
}


void LampConfiguration::MergeFrom(const LampConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.LampConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lamp_kit().empty()) {
    _internal_set_lamp_kit(from._internal_lamp_kit());
  }
  if (from._internal_has_min_score_barcodes()) {
    _internal_mutable_min_score_barcodes()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_barcodes());
  }
  if (from._internal_has_min_score_masks()) {
    _internal_mutable_min_score_masks()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_masks());
  }
  if (from._internal_has_min_score_targets()) {
    _internal_mutable_min_score_targets()->::PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min_score_targets());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LampConfiguration::CopyFrom(const LampConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.LampConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LampConfiguration::IsInitialized() const {
  return true;
}

void LampConfiguration::InternalSwap(LampConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lamp_kit_, lhs_arena,
      &other->lamp_kit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LampConfiguration, min_score_targets_)
      + sizeof(LampConfiguration::min_score_targets_)
      - PROTOBUF_FIELD_OFFSET(LampConfiguration, min_score_barcodes_)>(
          reinterpret_cast<char*>(&min_score_barcodes_),
          reinterpret_cast<char*>(&other->min_score_barcodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LampConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[28]);
}

// ===================================================================

class BasecallerConfiguration_ReadFiltering::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_qscore(const BasecallerConfiguration_ReadFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_samples(const BasecallerConfiguration_ReadFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_samples(const BasecallerConfiguration_ReadFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_bases(const BasecallerConfiguration_ReadFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_bases(const BasecallerConfiguration_ReadFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_failed_chunks(const BasecallerConfiguration_ReadFiltering* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
BasecallerConfiguration_ReadFiltering::_Internal::min_qscore(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->min_qscore_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_ReadFiltering::_Internal::min_samples(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->min_samples_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_ReadFiltering::_Internal::max_samples(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->max_samples_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_ReadFiltering::_Internal::min_bases(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->min_bases_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_ReadFiltering::_Internal::max_bases(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->max_bases_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_ReadFiltering::_Internal::max_failed_chunks(const BasecallerConfiguration_ReadFiltering* msg) {
  return *msg->max_failed_chunks_;
}
void BasecallerConfiguration_ReadFiltering::clear_min_qscore() {
  if (GetArenaForAllocation() == nullptr && min_qscore_ != nullptr) {
    delete min_qscore_;
  }
  min_qscore_ = nullptr;
}
void BasecallerConfiguration_ReadFiltering::clear_min_samples() {
  if (GetArenaForAllocation() == nullptr && min_samples_ != nullptr) {
    delete min_samples_;
  }
  min_samples_ = nullptr;
}
void BasecallerConfiguration_ReadFiltering::clear_max_samples() {
  if (GetArenaForAllocation() == nullptr && max_samples_ != nullptr) {
    delete max_samples_;
  }
  max_samples_ = nullptr;
}
void BasecallerConfiguration_ReadFiltering::clear_min_bases() {
  if (GetArenaForAllocation() == nullptr && min_bases_ != nullptr) {
    delete min_bases_;
  }
  min_bases_ = nullptr;
}
void BasecallerConfiguration_ReadFiltering::clear_max_bases() {
  if (GetArenaForAllocation() == nullptr && max_bases_ != nullptr) {
    delete max_bases_;
  }
  max_bases_ = nullptr;
}
void BasecallerConfiguration_ReadFiltering::clear_max_failed_chunks() {
  if (GetArenaForAllocation() == nullptr && max_failed_chunks_ != nullptr) {
    delete max_failed_chunks_;
  }
  max_failed_chunks_ = nullptr;
}
BasecallerConfiguration_ReadFiltering::BasecallerConfiguration_ReadFiltering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
}
BasecallerConfiguration_ReadFiltering::BasecallerConfiguration_ReadFiltering(const BasecallerConfiguration_ReadFiltering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_qscore()) {
    min_qscore_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.min_qscore_);
  } else {
    min_qscore_ = nullptr;
  }
  if (from._internal_has_min_samples()) {
    min_samples_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.min_samples_);
  } else {
    min_samples_ = nullptr;
  }
  if (from._internal_has_max_samples()) {
    max_samples_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_samples_);
  } else {
    max_samples_ = nullptr;
  }
  if (from._internal_has_min_bases()) {
    min_bases_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.min_bases_);
  } else {
    min_bases_ = nullptr;
  }
  if (from._internal_has_max_bases()) {
    max_bases_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_bases_);
  } else {
    max_bases_ = nullptr;
  }
  if (from._internal_has_max_failed_chunks()) {
    max_failed_chunks_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_failed_chunks_);
  } else {
    max_failed_chunks_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
}

void BasecallerConfiguration_ReadFiltering::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_qscore_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_failed_chunks_) -
    reinterpret_cast<char*>(&min_qscore_)) + sizeof(max_failed_chunks_));
}

BasecallerConfiguration_ReadFiltering::~BasecallerConfiguration_ReadFiltering() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasecallerConfiguration_ReadFiltering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete min_qscore_;
  if (this != internal_default_instance()) delete min_samples_;
  if (this != internal_default_instance()) delete max_samples_;
  if (this != internal_default_instance()) delete min_bases_;
  if (this != internal_default_instance()) delete max_bases_;
  if (this != internal_default_instance()) delete max_failed_chunks_;
}

void BasecallerConfiguration_ReadFiltering::ArenaDtor(void* object) {
  BasecallerConfiguration_ReadFiltering* _this = reinterpret_cast< BasecallerConfiguration_ReadFiltering* >(object);
  (void)_this;
}
void BasecallerConfiguration_ReadFiltering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasecallerConfiguration_ReadFiltering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasecallerConfiguration_ReadFiltering::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && min_qscore_ != nullptr) {
    delete min_qscore_;
  }
  min_qscore_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_samples_ != nullptr) {
    delete min_samples_;
  }
  min_samples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_samples_ != nullptr) {
    delete max_samples_;
  }
  max_samples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_bases_ != nullptr) {
    delete min_bases_;
  }
  min_bases_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_bases_ != nullptr) {
    delete max_bases_;
  }
  max_bases_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_failed_chunks_ != nullptr) {
    delete max_failed_chunks_;
  }
  max_failed_chunks_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasecallerConfiguration_ReadFiltering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue min_qscore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_qscore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value min_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_samples(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_samples(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value min_bases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_bases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_bases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_failed_chunks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_failed_chunks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasecallerConfiguration_ReadFiltering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue min_qscore = 1;
  if (this->_internal_has_min_qscore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_qscore(this), target, stream);
  }

  // .google.protobuf.UInt64Value min_samples = 2;
  if (this->_internal_has_min_samples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_samples(this), target, stream);
  }

  // .google.protobuf.UInt64Value max_samples = 3;
  if (this->_internal_has_max_samples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::max_samples(this), target, stream);
  }

  // .google.protobuf.UInt64Value min_bases = 4;
  if (this->_internal_has_min_bases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::min_bases(this), target, stream);
  }

  // .google.protobuf.UInt64Value max_bases = 5;
  if (this->_internal_has_max_bases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::max_bases(this), target, stream);
  }

  // .google.protobuf.UInt64Value max_failed_chunks = 6;
  if (this->_internal_has_max_failed_chunks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::max_failed_chunks(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  return target;
}

size_t BasecallerConfiguration_ReadFiltering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue min_qscore = 1;
  if (this->_internal_has_min_qscore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_qscore_);
  }

  // .google.protobuf.UInt64Value min_samples = 2;
  if (this->_internal_has_min_samples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_samples_);
  }

  // .google.protobuf.UInt64Value max_samples = 3;
  if (this->_internal_has_max_samples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_samples_);
  }

  // .google.protobuf.UInt64Value min_bases = 4;
  if (this->_internal_has_min_bases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_bases_);
  }

  // .google.protobuf.UInt64Value max_bases = 5;
  if (this->_internal_has_max_bases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_bases_);
  }

  // .google.protobuf.UInt64Value max_failed_chunks = 6;
  if (this->_internal_has_max_failed_chunks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_failed_chunks_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallerConfiguration_ReadFiltering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasecallerConfiguration_ReadFiltering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallerConfiguration_ReadFiltering::GetClassData() const { return &_class_data_; }

void BasecallerConfiguration_ReadFiltering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasecallerConfiguration_ReadFiltering *>(to)->MergeFrom(
      static_cast<const BasecallerConfiguration_ReadFiltering &>(from));
}


void BasecallerConfiguration_ReadFiltering::MergeFrom(const BasecallerConfiguration_ReadFiltering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_qscore()) {
    _internal_mutable_min_qscore()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_min_qscore());
  }
  if (from._internal_has_min_samples()) {
    _internal_mutable_min_samples()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_min_samples());
  }
  if (from._internal_has_max_samples()) {
    _internal_mutable_max_samples()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_samples());
  }
  if (from._internal_has_min_bases()) {
    _internal_mutable_min_bases()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_min_bases());
  }
  if (from._internal_has_max_bases()) {
    _internal_mutable_max_bases()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_bases());
  }
  if (from._internal_has_max_failed_chunks()) {
    _internal_mutable_max_failed_chunks()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_failed_chunks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasecallerConfiguration_ReadFiltering::CopyFrom(const BasecallerConfiguration_ReadFiltering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasecallerConfiguration_ReadFiltering::IsInitialized() const {
  return true;
}

void BasecallerConfiguration_ReadFiltering::InternalSwap(BasecallerConfiguration_ReadFiltering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasecallerConfiguration_ReadFiltering, max_failed_chunks_)
      + sizeof(BasecallerConfiguration_ReadFiltering::max_failed_chunks_)
      - PROTOBUF_FIELD_OFFSET(BasecallerConfiguration_ReadFiltering, min_qscore_)>(
          reinterpret_cast<char*>(&min_qscore_),
          reinterpret_cast<char*>(&other->min_qscore_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasecallerConfiguration_ReadFiltering::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[29]);
}

// ===================================================================

class BasecallerConfiguration_TargetFiltering::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_qscore(const BasecallerConfiguration_TargetFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& min_bases(const BasecallerConfiguration_TargetFiltering* msg);
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& max_bases(const BasecallerConfiguration_TargetFiltering* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
BasecallerConfiguration_TargetFiltering::_Internal::min_qscore(const BasecallerConfiguration_TargetFiltering* msg) {
  return *msg->min_qscore_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_TargetFiltering::_Internal::min_bases(const BasecallerConfiguration_TargetFiltering* msg) {
  return *msg->min_bases_;
}
const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
BasecallerConfiguration_TargetFiltering::_Internal::max_bases(const BasecallerConfiguration_TargetFiltering* msg) {
  return *msg->max_bases_;
}
void BasecallerConfiguration_TargetFiltering::clear_min_qscore() {
  if (GetArenaForAllocation() == nullptr && min_qscore_ != nullptr) {
    delete min_qscore_;
  }
  min_qscore_ = nullptr;
}
void BasecallerConfiguration_TargetFiltering::clear_min_bases() {
  if (GetArenaForAllocation() == nullptr && min_bases_ != nullptr) {
    delete min_bases_;
  }
  min_bases_ = nullptr;
}
void BasecallerConfiguration_TargetFiltering::clear_max_bases() {
  if (GetArenaForAllocation() == nullptr && max_bases_ != nullptr) {
    delete max_bases_;
  }
  max_bases_ = nullptr;
}
BasecallerConfiguration_TargetFiltering::BasecallerConfiguration_TargetFiltering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
}
BasecallerConfiguration_TargetFiltering::BasecallerConfiguration_TargetFiltering(const BasecallerConfiguration_TargetFiltering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_qscore()) {
    min_qscore_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.min_qscore_);
  } else {
    min_qscore_ = nullptr;
  }
  if (from._internal_has_min_bases()) {
    min_bases_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.min_bases_);
  } else {
    min_bases_ = nullptr;
  }
  if (from._internal_has_max_bases()) {
    max_bases_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from.max_bases_);
  } else {
    max_bases_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
}

void BasecallerConfiguration_TargetFiltering::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_qscore_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_bases_) -
    reinterpret_cast<char*>(&min_qscore_)) + sizeof(max_bases_));
}

BasecallerConfiguration_TargetFiltering::~BasecallerConfiguration_TargetFiltering() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasecallerConfiguration_TargetFiltering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete min_qscore_;
  if (this != internal_default_instance()) delete min_bases_;
  if (this != internal_default_instance()) delete max_bases_;
}

void BasecallerConfiguration_TargetFiltering::ArenaDtor(void* object) {
  BasecallerConfiguration_TargetFiltering* _this = reinterpret_cast< BasecallerConfiguration_TargetFiltering* >(object);
  (void)_this;
}
void BasecallerConfiguration_TargetFiltering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasecallerConfiguration_TargetFiltering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasecallerConfiguration_TargetFiltering::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && min_qscore_ != nullptr) {
    delete min_qscore_;
  }
  min_qscore_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_bases_ != nullptr) {
    delete min_bases_;
  }
  min_bases_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_bases_ != nullptr) {
    delete max_bases_;
  }
  max_bases_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasecallerConfiguration_TargetFiltering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue min_qscore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_qscore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value min_bases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_bases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value max_bases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_bases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasecallerConfiguration_TargetFiltering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue min_qscore = 1;
  if (this->_internal_has_min_qscore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_qscore(this), target, stream);
  }

  // .google.protobuf.UInt64Value min_bases = 2;
  if (this->_internal_has_min_bases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_bases(this), target, stream);
  }

  // .google.protobuf.UInt64Value max_bases = 3;
  if (this->_internal_has_max_bases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::max_bases(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  return target;
}

size_t BasecallerConfiguration_TargetFiltering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue min_qscore = 1;
  if (this->_internal_has_min_qscore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_qscore_);
  }

  // .google.protobuf.UInt64Value min_bases = 2;
  if (this->_internal_has_min_bases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_bases_);
  }

  // .google.protobuf.UInt64Value max_bases = 3;
  if (this->_internal_has_max_bases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_bases_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallerConfiguration_TargetFiltering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasecallerConfiguration_TargetFiltering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallerConfiguration_TargetFiltering::GetClassData() const { return &_class_data_; }

void BasecallerConfiguration_TargetFiltering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasecallerConfiguration_TargetFiltering *>(to)->MergeFrom(
      static_cast<const BasecallerConfiguration_TargetFiltering &>(from));
}


void BasecallerConfiguration_TargetFiltering::MergeFrom(const BasecallerConfiguration_TargetFiltering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_qscore()) {
    _internal_mutable_min_qscore()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_min_qscore());
  }
  if (from._internal_has_min_bases()) {
    _internal_mutable_min_bases()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_min_bases());
  }
  if (from._internal_has_max_bases()) {
    _internal_mutable_max_bases()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_max_bases());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasecallerConfiguration_TargetFiltering::CopyFrom(const BasecallerConfiguration_TargetFiltering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasecallerConfiguration_TargetFiltering::IsInitialized() const {
  return true;
}

void BasecallerConfiguration_TargetFiltering::InternalSwap(BasecallerConfiguration_TargetFiltering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasecallerConfiguration_TargetFiltering, max_bases_)
      + sizeof(BasecallerConfiguration_TargetFiltering::max_bases_)
      - PROTOBUF_FIELD_OFFSET(BasecallerConfiguration_TargetFiltering, min_qscore_)>(
          reinterpret_cast<char*>(&min_qscore_),
          reinterpret_cast<char*>(&other->min_qscore_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasecallerConfiguration_TargetFiltering::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[30]);
}

// ===================================================================

class BasecallerConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering& read_filtering(const BasecallerConfiguration* msg);
  static const ::minknow_api::analysis_configuration::BarcodingConfiguration& barcoding_configuration(const BasecallerConfiguration* msg);
  static const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering& target_filtering(const BasecallerConfiguration* msg);
  static const ::minknow_api::analysis_configuration::AlignmentConfiguration& alignment_configuration(const BasecallerConfiguration* msg);
  static const ::minknow_api::analysis_configuration::LampConfiguration& lamp_configuration(const BasecallerConfiguration* msg);
};

const ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering&
BasecallerConfiguration::_Internal::read_filtering(const BasecallerConfiguration* msg) {
  return *msg->read_filtering_;
}
const ::minknow_api::analysis_configuration::BarcodingConfiguration&
BasecallerConfiguration::_Internal::barcoding_configuration(const BasecallerConfiguration* msg) {
  return *msg->barcoding_configuration_;
}
const ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering&
BasecallerConfiguration::_Internal::target_filtering(const BasecallerConfiguration* msg) {
  return *msg->target_filtering_;
}
const ::minknow_api::analysis_configuration::AlignmentConfiguration&
BasecallerConfiguration::_Internal::alignment_configuration(const BasecallerConfiguration* msg) {
  return *msg->alignment_configuration_;
}
const ::minknow_api::analysis_configuration::LampConfiguration&
BasecallerConfiguration::_Internal::lamp_configuration(const BasecallerConfiguration* msg) {
  return *msg->lamp_configuration_;
}
BasecallerConfiguration::BasecallerConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.BasecallerConfiguration)
}
BasecallerConfiguration::BasecallerConfiguration(const BasecallerConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_filename().empty()) {
    config_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_filename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_read_filtering()) {
    read_filtering_ = new ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering(*from.read_filtering_);
  } else {
    read_filtering_ = nullptr;
  }
  if (from._internal_has_barcoding_configuration()) {
    barcoding_configuration_ = new ::minknow_api::analysis_configuration::BarcodingConfiguration(*from.barcoding_configuration_);
  } else {
    barcoding_configuration_ = nullptr;
  }
  if (from._internal_has_target_filtering()) {
    target_filtering_ = new ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering(*from.target_filtering_);
  } else {
    target_filtering_ = nullptr;
  }
  if (from._internal_has_alignment_configuration()) {
    alignment_configuration_ = new ::minknow_api::analysis_configuration::AlignmentConfiguration(*from.alignment_configuration_);
  } else {
    alignment_configuration_ = nullptr;
  }
  if (from._internal_has_lamp_configuration()) {
    lamp_configuration_ = new ::minknow_api::analysis_configuration::LampConfiguration(*from.lamp_configuration_);
  } else {
    lamp_configuration_ = nullptr;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.BasecallerConfiguration)
}

void BasecallerConfiguration::SharedCtor() {
config_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_filtering_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&read_filtering_)) + sizeof(enable_));
}

BasecallerConfiguration::~BasecallerConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.BasecallerConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasecallerConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_filtering_;
  if (this != internal_default_instance()) delete barcoding_configuration_;
  if (this != internal_default_instance()) delete target_filtering_;
  if (this != internal_default_instance()) delete alignment_configuration_;
  if (this != internal_default_instance()) delete lamp_configuration_;
}

void BasecallerConfiguration::ArenaDtor(void* object) {
  BasecallerConfiguration* _this = reinterpret_cast< BasecallerConfiguration* >(object);
  (void)_this;
}
void BasecallerConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasecallerConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasecallerConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.BasecallerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_filename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && read_filtering_ != nullptr) {
    delete read_filtering_;
  }
  read_filtering_ = nullptr;
  if (GetArenaForAllocation() == nullptr && barcoding_configuration_ != nullptr) {
    delete barcoding_configuration_;
  }
  barcoding_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_filtering_ != nullptr) {
    delete target_filtering_;
  }
  target_filtering_ = nullptr;
  if (GetArenaForAllocation() == nullptr && alignment_configuration_ != nullptr) {
    delete alignment_configuration_;
  }
  alignment_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lamp_configuration_ != nullptr) {
    delete lamp_configuration_;
  }
  lamp_configuration_ = nullptr;
  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasecallerConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string config_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.BasecallerConfiguration.config_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering read_filtering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_filtering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_barcoding_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering target_filtering = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_filtering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.LampConfiguration lamp_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lamp_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasecallerConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.BasecallerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_filename = 1;
  if (!this->_internal_config_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_filename().data(), static_cast<int>(this->_internal_config_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.BasecallerConfiguration.config_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config_filename(), target);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // .minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering read_filtering = 3;
  if (this->_internal_has_read_filtering()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::read_filtering(this), target, stream);
  }

  // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 4;
  if (this->_internal_has_barcoding_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::barcoding_configuration(this), target, stream);
  }

  // .minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering target_filtering = 5;
  if (this->_internal_has_target_filtering()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::target_filtering(this), target, stream);
  }

  // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
  if (this->_internal_has_alignment_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::alignment_configuration(this), target, stream);
  }

  // .minknow_api.analysis_configuration.LampConfiguration lamp_configuration = 7;
  if (this->_internal_has_lamp_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lamp_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.BasecallerConfiguration)
  return target;
}

size_t BasecallerConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.BasecallerConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config_filename = 1;
  if (!this->_internal_config_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_filename());
  }

  // .minknow_api.analysis_configuration.BasecallerConfiguration.ReadFiltering read_filtering = 3;
  if (this->_internal_has_read_filtering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_filtering_);
  }

  // .minknow_api.analysis_configuration.BarcodingConfiguration barcoding_configuration = 4;
  if (this->_internal_has_barcoding_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *barcoding_configuration_);
  }

  // .minknow_api.analysis_configuration.BasecallerConfiguration.TargetFiltering target_filtering = 5;
  if (this->_internal_has_target_filtering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_filtering_);
  }

  // .minknow_api.analysis_configuration.AlignmentConfiguration alignment_configuration = 6;
  if (this->_internal_has_alignment_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_configuration_);
  }

  // .minknow_api.analysis_configuration.LampConfiguration lamp_configuration = 7;
  if (this->_internal_has_lamp_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lamp_configuration_);
  }

  // bool enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasecallerConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasecallerConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasecallerConfiguration::GetClassData() const { return &_class_data_; }

void BasecallerConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasecallerConfiguration *>(to)->MergeFrom(
      static_cast<const BasecallerConfiguration &>(from));
}


void BasecallerConfiguration::MergeFrom(const BasecallerConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.BasecallerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_config_filename().empty()) {
    _internal_set_config_filename(from._internal_config_filename());
  }
  if (from._internal_has_read_filtering()) {
    _internal_mutable_read_filtering()->::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering::MergeFrom(from._internal_read_filtering());
  }
  if (from._internal_has_barcoding_configuration()) {
    _internal_mutable_barcoding_configuration()->::minknow_api::analysis_configuration::BarcodingConfiguration::MergeFrom(from._internal_barcoding_configuration());
  }
  if (from._internal_has_target_filtering()) {
    _internal_mutable_target_filtering()->::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering::MergeFrom(from._internal_target_filtering());
  }
  if (from._internal_has_alignment_configuration()) {
    _internal_mutable_alignment_configuration()->::minknow_api::analysis_configuration::AlignmentConfiguration::MergeFrom(from._internal_alignment_configuration());
  }
  if (from._internal_has_lamp_configuration()) {
    _internal_mutable_lamp_configuration()->::minknow_api::analysis_configuration::LampConfiguration::MergeFrom(from._internal_lamp_configuration());
  }
  if (from._internal_enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasecallerConfiguration::CopyFrom(const BasecallerConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.BasecallerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasecallerConfiguration::IsInitialized() const {
  return true;
}

void BasecallerConfiguration::InternalSwap(BasecallerConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_filename_, lhs_arena,
      &other->config_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasecallerConfiguration, enable_)
      + sizeof(BasecallerConfiguration::enable_)
      - PROTOBUF_FIELD_OFFSET(BasecallerConfiguration, read_filtering_)>(
          reinterpret_cast<char*>(&read_filtering_),
          reinterpret_cast<char*>(&other->read_filtering_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasecallerConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[31]);
}

// ===================================================================

class SetBasecallerConfigurationRequest::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::BasecallerConfiguration& configs(const SetBasecallerConfigurationRequest* msg);
};

const ::minknow_api::analysis_configuration::BasecallerConfiguration&
SetBasecallerConfigurationRequest::_Internal::configs(const SetBasecallerConfigurationRequest* msg) {
  return *msg->configs_;
}
SetBasecallerConfigurationRequest::SetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
}
SetBasecallerConfigurationRequest::SetBasecallerConfigurationRequest(const SetBasecallerConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_configs()) {
    configs_ = new ::minknow_api::analysis_configuration::BasecallerConfiguration(*from.configs_);
  } else {
    configs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
}

void SetBasecallerConfigurationRequest::SharedCtor() {
configs_ = nullptr;
}

SetBasecallerConfigurationRequest::~SetBasecallerConfigurationRequest() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetBasecallerConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete configs_;
}

void SetBasecallerConfigurationRequest::ArenaDtor(void* object) {
  SetBasecallerConfigurationRequest* _this = reinterpret_cast< SetBasecallerConfigurationRequest* >(object);
  (void)_this;
}
void SetBasecallerConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBasecallerConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBasecallerConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && configs_ != nullptr) {
    delete configs_;
  }
  configs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBasecallerConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.BasecallerConfiguration configs = 1 [(.minknow_api.rpc_unwrap) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_configs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBasecallerConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.BasecallerConfiguration configs = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_configs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::configs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  return target;
}

size_t SetBasecallerConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.BasecallerConfiguration configs = 1 [(.minknow_api.rpc_unwrap) = true];
  if (this->_internal_has_configs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBasecallerConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetBasecallerConfigurationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBasecallerConfigurationRequest::GetClassData() const { return &_class_data_; }

void SetBasecallerConfigurationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetBasecallerConfigurationRequest *>(to)->MergeFrom(
      static_cast<const SetBasecallerConfigurationRequest &>(from));
}


void SetBasecallerConfigurationRequest::MergeFrom(const SetBasecallerConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_configs()) {
    _internal_mutable_configs()->::minknow_api::analysis_configuration::BasecallerConfiguration::MergeFrom(from._internal_configs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBasecallerConfigurationRequest::CopyFrom(const SetBasecallerConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.SetBasecallerConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBasecallerConfigurationRequest::IsInitialized() const {
  return true;
}

void SetBasecallerConfigurationRequest::InternalSwap(SetBasecallerConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(configs_, other->configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBasecallerConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[32]);
}

// ===================================================================

class SetBasecallerConfigurationResponse::_Internal {
 public:
};

SetBasecallerConfigurationResponse::SetBasecallerConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetBasecallerConfigurationResponse)
}
SetBasecallerConfigurationResponse::SetBasecallerConfigurationResponse(const SetBasecallerConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetBasecallerConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBasecallerConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBasecallerConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetBasecallerConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[33]);
}

// ===================================================================

class GetBasecallerConfigurationRequest::_Internal {
 public:
};

GetBasecallerConfigurationRequest::GetBasecallerConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetBasecallerConfigurationRequest)
}
GetBasecallerConfigurationRequest::GetBasecallerConfigurationRequest(const GetBasecallerConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetBasecallerConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBasecallerConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBasecallerConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBasecallerConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[34]);
}

// ===================================================================

class GetPoreTypeConfigurationRequest::_Internal {
 public:
};

GetPoreTypeConfigurationRequest::GetPoreTypeConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest)
}
GetPoreTypeConfigurationRequest::GetPoreTypeConfigurationRequest(const GetPoreTypeConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetPoreTypeConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPoreTypeConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPoreTypeConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetPoreTypeConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[35]);
}

// ===================================================================

class PoreTypeConfiguration_ChannelWell::_Internal {
 public:
};

PoreTypeConfiguration_ChannelWell::PoreTypeConfiguration_ChannelWell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
}
PoreTypeConfiguration_ChannelWell::PoreTypeConfiguration_ChannelWell(const PoreTypeConfiguration_ChannelWell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&well_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(well_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
}

void PoreTypeConfiguration_ChannelWell::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&well_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(well_));
}

PoreTypeConfiguration_ChannelWell::~PoreTypeConfiguration_ChannelWell() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoreTypeConfiguration_ChannelWell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoreTypeConfiguration_ChannelWell::ArenaDtor(void* object) {
  PoreTypeConfiguration_ChannelWell* _this = reinterpret_cast< PoreTypeConfiguration_ChannelWell* >(object);
  (void)_this;
}
void PoreTypeConfiguration_ChannelWell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoreTypeConfiguration_ChannelWell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoreTypeConfiguration_ChannelWell::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&well_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(well_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoreTypeConfiguration_ChannelWell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 well = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          well_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoreTypeConfiguration_ChannelWell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // uint32 well = 2;
  if (this->_internal_well() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_well(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  return target;
}

size_t PoreTypeConfiguration_ChannelWell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // uint32 well = 2;
  if (this->_internal_well() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_well());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoreTypeConfiguration_ChannelWell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoreTypeConfiguration_ChannelWell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoreTypeConfiguration_ChannelWell::GetClassData() const { return &_class_data_; }

void PoreTypeConfiguration_ChannelWell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoreTypeConfiguration_ChannelWell *>(to)->MergeFrom(
      static_cast<const PoreTypeConfiguration_ChannelWell &>(from));
}


void PoreTypeConfiguration_ChannelWell::MergeFrom(const PoreTypeConfiguration_ChannelWell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_well() != 0) {
    _internal_set_well(from._internal_well());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoreTypeConfiguration_ChannelWell::CopyFrom(const PoreTypeConfiguration_ChannelWell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoreTypeConfiguration_ChannelWell::IsInitialized() const {
  return true;
}

void PoreTypeConfiguration_ChannelWell::InternalSwap(PoreTypeConfiguration_ChannelWell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoreTypeConfiguration_ChannelWell, well_)
      + sizeof(PoreTypeConfiguration_ChannelWell::well_)
      - PROTOBUF_FIELD_OFFSET(PoreTypeConfiguration_ChannelWell, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoreTypeConfiguration_ChannelWell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[36]);
}

// ===================================================================

class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_Internal {
 public:
};

PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_well_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
}
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_well_(from.channel_well_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::SharedCtor() {
}

PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::ArenaDtor(void* object) {
  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* _this = reinterpret_cast< PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* >(object);
  (void)_this;
}
void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_well_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell channel_well = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_well(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell channel_well = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_well_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel_well(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  return target;
}

size_t PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWell channel_well = 1;
  total_size += 1UL * this->_internal_channel_well_size();
  for (const auto& msg : this->channel_well_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::GetClassData() const { return &_class_data_; }

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList *>(to)->MergeFrom(
      static_cast<const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList &>(from));
}


void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_well_.MergeFrom(from.channel_well_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::CopyFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::IsInitialized() const {
  return true;
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::InternalSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_well_.InternalSwap(&other->channel_well_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[37]);
}

// ===================================================================

PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse() {}
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[38]);
}

// ===================================================================

class PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_Internal {
 public:
};

PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pore_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
}
PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pore_types_.MergeFrom(from.pore_types_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::SharedCtor() {
}

PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::~PoreTypeConfiguration_ChannelWellPoreTypeConfigurations() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::ArenaDtor(void* object) {
  PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* _this = reinterpret_cast< PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* >(object);
  (void)_this;
  _this->pore_types_. ~MapField();
}
inline void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::ArenaDtor);
  }
}
void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pore_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList> pore_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&pore_types_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList> pore_types = 1;
  if (!this->_internal_pore_types().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.PoreTypesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_pore_types().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_pore_types().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >::const_iterator
          it = this->_internal_pore_types().begin();
          it != this->_internal_pore_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >::const_iterator
          it = this->_internal_pore_types().begin();
          it != this->_internal_pore_types().end(); ++it) {
        target = PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  return target;
}

size_t PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations.ChannelWellList> pore_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pore_types_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >::const_iterator
      it = this->_internal_pore_types().begin();
      it != this->_internal_pore_types().end(); ++it) {
    total_size += PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::GetClassData() const { return &_class_data_; }

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoreTypeConfiguration_ChannelWellPoreTypeConfigurations *>(to)->MergeFrom(
      static_cast<const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations &>(from));
}


void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::MergeFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pore_types_.MergeFrom(from.pore_types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::CopyFrom(const PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::IsInitialized() const {
  return true;
}

void PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::InternalSwap(PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pore_types_.InternalSwap(&other->pore_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[39]);
}

// ===================================================================

class PoreTypeConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations& channel_well_pore_types(const PoreTypeConfiguration* msg);
};

const ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations&
PoreTypeConfiguration::_Internal::channel_well_pore_types(const PoreTypeConfiguration* msg) {
  return *msg->pore_type_config_.channel_well_pore_types_;
}
void PoreTypeConfiguration::set_allocated_channel_well_pore_types(::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* channel_well_pore_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pore_type_config();
  if (channel_well_pore_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations>::GetOwningArena(channel_well_pore_types);
    if (message_arena != submessage_arena) {
      channel_well_pore_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_well_pore_types, submessage_arena);
    }
    set_has_channel_well_pore_types();
    pore_type_config_.channel_well_pore_types_ = channel_well_pore_types;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.PoreTypeConfiguration.channel_well_pore_types)
}
PoreTypeConfiguration::PoreTypeConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration)
}
PoreTypeConfiguration::PoreTypeConfiguration(const PoreTypeConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_pore_type_config();
  switch (from.pore_type_config_case()) {
    case kGlobalPoreType: {
      _internal_set_global_pore_type(from._internal_global_pore_type());
      break;
    }
    case kChannelWellPoreTypes: {
      _internal_mutable_channel_well_pore_types()->::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::MergeFrom(from._internal_channel_well_pore_types());
      break;
    }
    case PORE_TYPE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.PoreTypeConfiguration)
}

void PoreTypeConfiguration::SharedCtor() {
clear_has_pore_type_config();
}

PoreTypeConfiguration::~PoreTypeConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.PoreTypeConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PoreTypeConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_pore_type_config()) {
    clear_pore_type_config();
  }
}

void PoreTypeConfiguration::ArenaDtor(void* object) {
  PoreTypeConfiguration* _this = reinterpret_cast< PoreTypeConfiguration* >(object);
  (void)_this;
}
void PoreTypeConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoreTypeConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoreTypeConfiguration::clear_pore_type_config() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  switch (pore_type_config_case()) {
    case kGlobalPoreType: {
      pore_type_config_.global_pore_type_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kChannelWellPoreTypes: {
      if (GetArenaForAllocation() == nullptr) {
        delete pore_type_config_.channel_well_pore_types_;
      }
      break;
    }
    case PORE_TYPE_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PORE_TYPE_CONFIG_NOT_SET;
}


void PoreTypeConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_pore_type_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoreTypeConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string global_pore_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_global_pore_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations channel_well_pore_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_well_pore_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoreTypeConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string global_pore_type = 1;
  if (_internal_has_global_pore_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_global_pore_type().data(), static_cast<int>(this->_internal_global_pore_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.PoreTypeConfiguration.global_pore_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_global_pore_type(), target);
  }

  // .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations channel_well_pore_types = 2;
  if (_internal_has_channel_well_pore_types()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_well_pore_types(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.PoreTypeConfiguration)
  return target;
}

size_t PoreTypeConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (pore_type_config_case()) {
    // string global_pore_type = 1;
    case kGlobalPoreType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_global_pore_type());
      break;
    }
    // .minknow_api.analysis_configuration.PoreTypeConfiguration.ChannelWellPoreTypeConfigurations channel_well_pore_types = 2;
    case kChannelWellPoreTypes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pore_type_config_.channel_well_pore_types_);
      break;
    }
    case PORE_TYPE_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoreTypeConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoreTypeConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoreTypeConfiguration::GetClassData() const { return &_class_data_; }

void PoreTypeConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoreTypeConfiguration *>(to)->MergeFrom(
      static_cast<const PoreTypeConfiguration &>(from));
}


void PoreTypeConfiguration::MergeFrom(const PoreTypeConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.pore_type_config_case()) {
    case kGlobalPoreType: {
      _internal_set_global_pore_type(from._internal_global_pore_type());
      break;
    }
    case kChannelWellPoreTypes: {
      _internal_mutable_channel_well_pore_types()->::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations::MergeFrom(from._internal_channel_well_pore_types());
      break;
    }
    case PORE_TYPE_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoreTypeConfiguration::CopyFrom(const PoreTypeConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.PoreTypeConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoreTypeConfiguration::IsInitialized() const {
  return true;
}

void PoreTypeConfiguration::InternalSwap(PoreTypeConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pore_type_config_, other->pore_type_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoreTypeConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[40]);
}

// ===================================================================

class SetPoreTypeConfigurationResponse::_Internal {
 public:
};

SetPoreTypeConfigurationResponse::SetPoreTypeConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse)
}
SetPoreTypeConfigurationResponse::SetPoreTypeConfigurationResponse(const SetPoreTypeConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetPoreTypeConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPoreTypeConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPoreTypeConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetPoreTypeConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[41]);
}

// ===================================================================

class WriterConfiguration_ChannelConfiguration_ChannelList::_Internal {
 public:
};

WriterConfiguration_ChannelConfiguration_ChannelList::WriterConfiguration_ChannelConfiguration_ChannelList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
}
WriterConfiguration_ChannelConfiguration_ChannelList::WriterConfiguration_ChannelConfiguration_ChannelList(const WriterConfiguration_ChannelConfiguration_ChannelList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
}

void WriterConfiguration_ChannelConfiguration_ChannelList::SharedCtor() {
}

WriterConfiguration_ChannelConfiguration_ChannelList::~WriterConfiguration_ChannelConfiguration_ChannelList() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ChannelConfiguration_ChannelList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriterConfiguration_ChannelConfiguration_ChannelList::ArenaDtor(void* object) {
  WriterConfiguration_ChannelConfiguration_ChannelList* _this = reinterpret_cast< WriterConfiguration_ChannelConfiguration_ChannelList* >(object);
  (void)_this;
}
void WriterConfiguration_ChannelConfiguration_ChannelList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ChannelConfiguration_ChannelList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ChannelConfiguration_ChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ChannelConfiguration_ChannelList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ChannelConfiguration_ChannelList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 channels = 1;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  return target;
}

size_t WriterConfiguration_ChannelConfiguration_ChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 channels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ChannelConfiguration_ChannelList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ChannelConfiguration_ChannelList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ChannelConfiguration_ChannelList::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ChannelConfiguration_ChannelList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ChannelConfiguration_ChannelList *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ChannelConfiguration_ChannelList &>(from));
}


void WriterConfiguration_ChannelConfiguration_ChannelList::MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ChannelConfiguration_ChannelList::CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ChannelConfiguration_ChannelList::IsInitialized() const {
  return true;
}

void WriterConfiguration_ChannelConfiguration_ChannelList::InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ChannelConfiguration_ChannelList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[42]);
}

// ===================================================================

class WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_Internal {
 public:
};

WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
}
WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::~WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::ArenaDtor(void* object) {
  WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* _this = reinterpret_cast< WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* >(object);
  (void)_this;
}
void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  return target;
}

size_t WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange &>(from));
}


void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::IsInitialized() const {
  return true;
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange, end_)
      + sizeof(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::end_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[43]);
}

// ===================================================================

class WriterConfiguration_ChannelConfiguration_ChannelRanges::_Internal {
 public:
};

WriterConfiguration_ChannelConfiguration_ChannelRanges::WriterConfiguration_ChannelConfiguration_ChannelRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
}
WriterConfiguration_ChannelConfiguration_ChannelRanges::WriterConfiguration_ChannelConfiguration_ChannelRanges(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges::SharedCtor() {
}

WriterConfiguration_ChannelConfiguration_ChannelRanges::~WriterConfiguration_ChannelConfiguration_ChannelRanges() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ChannelConfiguration_ChannelRanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges::ArenaDtor(void* object) {
  WriterConfiguration_ChannelConfiguration_ChannelRanges* _this = reinterpret_cast< WriterConfiguration_ChannelConfiguration_ChannelRanges* >(object);
  (void)_this;
}
void WriterConfiguration_ChannelConfiguration_ChannelRanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ChannelConfiguration_ChannelRanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ChannelConfiguration_ChannelRanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ChannelConfiguration_ChannelRanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  return target;
}

size_t WriterConfiguration_ChannelConfiguration_ChannelRanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges.ChannelRange ranges = 1;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ChannelConfiguration_ChannelRanges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ChannelConfiguration_ChannelRanges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ChannelConfiguration_ChannelRanges::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ChannelConfiguration_ChannelRanges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ChannelConfiguration_ChannelRanges *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ChannelConfiguration_ChannelRanges &>(from));
}


void WriterConfiguration_ChannelConfiguration_ChannelRanges::MergeFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges::CopyFrom(const WriterConfiguration_ChannelConfiguration_ChannelRanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ChannelConfiguration_ChannelRanges::IsInitialized() const {
  return true;
}

void WriterConfiguration_ChannelConfiguration_ChannelRanges::InternalSwap(WriterConfiguration_ChannelConfiguration_ChannelRanges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ChannelConfiguration_ChannelRanges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[44]);
}

// ===================================================================

class WriterConfiguration_ChannelConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList& specific_channels(const WriterConfiguration_ChannelConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges& channel_ranges(const WriterConfiguration_ChannelConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList&
WriterConfiguration_ChannelConfiguration::_Internal::specific_channels(const WriterConfiguration_ChannelConfiguration* msg) {
  return *msg->channels_.specific_channels_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges&
WriterConfiguration_ChannelConfiguration::_Internal::channel_ranges(const WriterConfiguration_ChannelConfiguration* msg) {
  return *msg->channels_.channel_ranges_;
}
void WriterConfiguration_ChannelConfiguration::set_allocated_specific_channels(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* specific_channels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_channels();
  if (specific_channels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList>::GetOwningArena(specific_channels);
    if (message_arena != submessage_arena) {
      specific_channels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific_channels, submessage_arena);
    }
    set_has_specific_channels();
    channels_.specific_channels_ = specific_channels;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.specific_channels)
}
void WriterConfiguration_ChannelConfiguration::set_allocated_channel_ranges(::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* channel_ranges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_channels();
  if (channel_ranges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges>::GetOwningArena(channel_ranges);
    if (message_arena != submessage_arena) {
      channel_ranges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_ranges, submessage_arena);
    }
    set_has_channel_ranges();
    channels_.channel_ranges_ = channel_ranges;
  }
  // @@protoc_insertion_point(field_set_allocated:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.channel_ranges)
}
WriterConfiguration_ChannelConfiguration::WriterConfiguration_ChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
}
WriterConfiguration_ChannelConfiguration::WriterConfiguration_ChannelConfiguration(const WriterConfiguration_ChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_channels();
  switch (from.channels_case()) {
    case kAllChannels: {
      _internal_set_all_channels(from._internal_all_channels());
      break;
    }
    case kSpecificChannels: {
      _internal_mutable_specific_channels()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList::MergeFrom(from._internal_specific_channels());
      break;
    }
    case kChannelRanges: {
      _internal_mutable_channel_ranges()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges::MergeFrom(from._internal_channel_ranges());
      break;
    }
    case CHANNELS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
}

void WriterConfiguration_ChannelConfiguration::SharedCtor() {
clear_has_channels();
}

WriterConfiguration_ChannelConfiguration::~WriterConfiguration_ChannelConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_channels()) {
    clear_channels();
  }
}

void WriterConfiguration_ChannelConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_ChannelConfiguration* _this = reinterpret_cast< WriterConfiguration_ChannelConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_ChannelConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ChannelConfiguration::clear_channels() {
// @@protoc_insertion_point(one_of_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  switch (channels_case()) {
    case kAllChannels: {
      // No need to clear
      break;
    }
    case kSpecificChannels: {
      if (GetArenaForAllocation() == nullptr) {
        delete channels_.specific_channels_;
      }
      break;
    }
    case kChannelRanges: {
      if (GetArenaForAllocation() == nullptr) {
        delete channels_.channel_ranges_;
      }
      break;
    }
    case CHANNELS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANNELS_NOT_SET;
}


void WriterConfiguration_ChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_channels();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all_channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_all_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList specific_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_specific_channels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges channel_ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_ranges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ChannelConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_channels = 1;
  if (_internal_has_all_channels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_channels(), target);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList specific_channels = 2;
  if (_internal_has_specific_channels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::specific_channels(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges channel_ranges = 3;
  if (_internal_has_channel_ranges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_ranges(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  return target;
}

size_t WriterConfiguration_ChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (channels_case()) {
    // bool all_channels = 1;
    case kAllChannels: {
      total_size += 1 + 1;
      break;
    }
    // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelList specific_channels = 2;
    case kSpecificChannels: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channels_.specific_channels_);
      break;
    }
    // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration.ChannelRanges channel_ranges = 3;
    case kChannelRanges: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channels_.channel_ranges_);
      break;
    }
    case CHANNELS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ChannelConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ChannelConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ChannelConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ChannelConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ChannelConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ChannelConfiguration &>(from));
}


void WriterConfiguration_ChannelConfiguration::MergeFrom(const WriterConfiguration_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.channels_case()) {
    case kAllChannels: {
      _internal_set_all_channels(from._internal_all_channels());
      break;
    }
    case kSpecificChannels: {
      _internal_mutable_specific_channels()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList::MergeFrom(from._internal_specific_channels());
      break;
    }
    case kChannelRanges: {
      _internal_mutable_channel_ranges()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges::MergeFrom(from._internal_channel_ranges());
      break;
    }
    case CHANNELS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ChannelConfiguration::CopyFrom(const WriterConfiguration_ChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ChannelConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ChannelConfiguration::InternalSwap(WriterConfiguration_ChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channels_, other->channels_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ChannelConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[45]);
}

// ===================================================================

class WriterConfiguration_ReadFast5Configuration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& raw(const WriterConfiguration_ReadFast5Configuration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& fastq(const WriterConfiguration_ReadFast5Configuration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& trace_table(const WriterConfiguration_ReadFast5Configuration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& move_table(const WriterConfiguration_ReadFast5Configuration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& modifications_table(const WriterConfiguration_ReadFast5Configuration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFast5Configuration::_Internal::raw(const WriterConfiguration_ReadFast5Configuration* msg) {
  return *msg->raw_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFast5Configuration::_Internal::fastq(const WriterConfiguration_ReadFast5Configuration* msg) {
  return *msg->fastq_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFast5Configuration::_Internal::trace_table(const WriterConfiguration_ReadFast5Configuration* msg) {
  return *msg->trace_table_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFast5Configuration::_Internal::move_table(const WriterConfiguration_ReadFast5Configuration* msg) {
  return *msg->move_table_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFast5Configuration::_Internal::modifications_table(const WriterConfiguration_ReadFast5Configuration* msg) {
  return *msg->modifications_table_;
}
WriterConfiguration_ReadFast5Configuration::WriterConfiguration_ReadFast5Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
}
WriterConfiguration_ReadFast5Configuration::WriterConfiguration_ReadFast5Configuration(const WriterConfiguration_ReadFast5Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  fastq_header_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fastq_header_pattern().empty()) {
    fastq_header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fastq_header_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_raw()) {
    raw_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.raw_);
  } else {
    raw_ = nullptr;
  }
  if (from._internal_has_fastq()) {
    fastq_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.fastq_);
  } else {
    fastq_ = nullptr;
  }
  if (from._internal_has_trace_table()) {
    trace_table_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.trace_table_);
  } else {
    trace_table_ = nullptr;
  }
  if (from._internal_has_move_table()) {
    move_table_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.move_table_);
  } else {
    move_table_ = nullptr;
  }
  if (from._internal_has_modifications_table()) {
    modifications_table_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.modifications_table_);
  } else {
    modifications_table_ = nullptr;
  }
  ::memcpy(&compression_level_, &from.compression_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_type_) -
    reinterpret_cast<char*>(&compression_level_)) + sizeof(compression_type_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
}

void WriterConfiguration_ReadFast5Configuration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fastq_header_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compression_type_) -
    reinterpret_cast<char*>(&raw_)) + sizeof(compression_type_));
}

WriterConfiguration_ReadFast5Configuration::~WriterConfiguration_ReadFast5Configuration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ReadFast5Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fastq_header_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_;
  if (this != internal_default_instance()) delete fastq_;
  if (this != internal_default_instance()) delete trace_table_;
  if (this != internal_default_instance()) delete move_table_;
  if (this != internal_default_instance()) delete modifications_table_;
}

void WriterConfiguration_ReadFast5Configuration::ArenaDtor(void* object) {
  WriterConfiguration_ReadFast5Configuration* _this = reinterpret_cast< WriterConfiguration_ReadFast5Configuration* >(object);
  (void)_this;
}
void WriterConfiguration_ReadFast5Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ReadFast5Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ReadFast5Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  fastq_header_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && raw_ != nullptr) {
    delete raw_;
  }
  raw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fastq_ != nullptr) {
    delete fastq_;
  }
  fastq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trace_table_ != nullptr) {
    delete trace_table_;
  }
  trace_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && move_table_ != nullptr) {
    delete move_table_;
  }
  move_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && modifications_table_ != nullptr) {
    delete modifications_table_;
  }
  modifications_table_ = nullptr;
  ::memset(&compression_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_type_) -
      reinterpret_cast<char*>(&compression_level_)) + sizeof(compression_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ReadFast5Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 compression_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compression_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration fastq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_writing_passed_reads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          disable_writing_passed_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_writing_failed_reads = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          disable_writing_failed_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_writing_force_skipped_reads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disable_writing_force_skipped_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fastq_header_pattern = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_fastq_header_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration trace_table = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration move_table = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration modifications_table = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_modifications_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression_type(static_cast<::minknow_api::analysis_configuration::WriterConfiguration_CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ReadFast5Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 compression_level = 1;
  if (this->_internal_compression_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_compression_level(), target);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 2;
  if (this->_internal_has_raw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::raw(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration fastq = 3;
  if (this->_internal_has_fastq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fastq(this), target, stream);
  }

  // bool disable_writing_passed_reads = 5;
  if (this->_internal_disable_writing_passed_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_disable_writing_passed_reads(), target);
  }

  // bool disable_writing_failed_reads = 6;
  if (this->_internal_disable_writing_failed_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_writing_failed_reads(), target);
  }

  // bool disable_writing_force_skipped_reads = 7;
  if (this->_internal_disable_writing_force_skipped_reads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_writing_force_skipped_reads(), target);
  }

  // string file_pattern = 8;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_file_pattern(), target);
  }

  // string fastq_header_pattern = 9;
  if (!this->_internal_fastq_header_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fastq_header_pattern().data(), static_cast<int>(this->_internal_fastq_header_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration.fastq_header_pattern");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_fastq_header_pattern(), target);
  }

  // uint32 batch_count = 10;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_batch_count(), target);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration trace_table = 11;
  if (this->_internal_has_trace_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::trace_table(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration move_table = 12;
  if (this->_internal_has_move_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::move_table(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration modifications_table = 13;
  if (this->_internal_has_modifications_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::modifications_table(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 14;
  if (this->_internal_compression_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_compression_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  return target;
}

size_t WriterConfiguration_ReadFast5Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 8;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // string fastq_header_pattern = 9;
  if (!this->_internal_fastq_header_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fastq_header_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 2;
  if (this->_internal_has_raw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration fastq = 3;
  if (this->_internal_has_fastq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fastq_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration trace_table = 11;
  if (this->_internal_has_trace_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_table_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration move_table = 12;
  if (this->_internal_has_move_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *move_table_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration modifications_table = 13;
  if (this->_internal_has_modifications_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modifications_table_);
  }

  // int32 compression_level = 1;
  if (this->_internal_compression_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_compression_level());
  }

  // bool disable_writing_passed_reads = 5;
  if (this->_internal_disable_writing_passed_reads() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_writing_failed_reads = 6;
  if (this->_internal_disable_writing_failed_reads() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_writing_force_skipped_reads = 7;
  if (this->_internal_disable_writing_force_skipped_reads() != 0) {
    total_size += 1 + 1;
  }

  // uint32 batch_count = 10;
  if (this->_internal_batch_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 14;
  if (this->_internal_compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compression_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ReadFast5Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ReadFast5Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ReadFast5Configuration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ReadFast5Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ReadFast5Configuration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ReadFast5Configuration &>(from));
}


void WriterConfiguration_ReadFast5Configuration::MergeFrom(const WriterConfiguration_ReadFast5Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (!from._internal_fastq_header_pattern().empty()) {
    _internal_set_fastq_header_pattern(from._internal_fastq_header_pattern());
  }
  if (from._internal_has_raw()) {
    _internal_mutable_raw()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_raw());
  }
  if (from._internal_has_fastq()) {
    _internal_mutable_fastq()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_fastq());
  }
  if (from._internal_has_trace_table()) {
    _internal_mutable_trace_table()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_trace_table());
  }
  if (from._internal_has_move_table()) {
    _internal_mutable_move_table()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_move_table());
  }
  if (from._internal_has_modifications_table()) {
    _internal_mutable_modifications_table()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_modifications_table());
  }
  if (from._internal_compression_level() != 0) {
    _internal_set_compression_level(from._internal_compression_level());
  }
  if (from._internal_disable_writing_passed_reads() != 0) {
    _internal_set_disable_writing_passed_reads(from._internal_disable_writing_passed_reads());
  }
  if (from._internal_disable_writing_failed_reads() != 0) {
    _internal_set_disable_writing_failed_reads(from._internal_disable_writing_failed_reads());
  }
  if (from._internal_disable_writing_force_skipped_reads() != 0) {
    _internal_set_disable_writing_force_skipped_reads(from._internal_disable_writing_force_skipped_reads());
  }
  if (from._internal_batch_count() != 0) {
    _internal_set_batch_count(from._internal_batch_count());
  }
  if (from._internal_compression_type() != 0) {
    _internal_set_compression_type(from._internal_compression_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ReadFast5Configuration::CopyFrom(const WriterConfiguration_ReadFast5Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ReadFast5Configuration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ReadFast5Configuration::InternalSwap(WriterConfiguration_ReadFast5Configuration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fastq_header_pattern_, lhs_arena,
      &other->fastq_header_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadFast5Configuration, compression_type_)
      + sizeof(WriterConfiguration_ReadFast5Configuration::compression_type_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadFast5Configuration, raw_)>(
          reinterpret_cast<char*>(&raw_),
          reinterpret_cast<char*>(&other->raw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ReadFast5Configuration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[46]);
}

// ===================================================================

class WriterConfiguration_ReadFastqConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable(const WriterConfiguration_ReadFastqConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadFastqConfiguration::_Internal::enable(const WriterConfiguration_ReadFastqConfiguration* msg) {
  return *msg->enable_;
}
WriterConfiguration_ReadFastqConfiguration::WriterConfiguration_ReadFastqConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
}
WriterConfiguration_ReadFastqConfiguration::WriterConfiguration_ReadFastqConfiguration(const WriterConfiguration_ReadFastqConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  header_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_header_pattern().empty()) {
    header_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enable()) {
    enable_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  ::memcpy(&batch_count_, &from.batch_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_) -
    reinterpret_cast<char*>(&batch_count_)) + sizeof(compression_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
}

void WriterConfiguration_ReadFastqConfiguration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compression_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(compression_));
}

WriterConfiguration_ReadFastqConfiguration::~WriterConfiguration_ReadFastqConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ReadFastqConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enable_;
}

void WriterConfiguration_ReadFastqConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_ReadFastqConfiguration* _this = reinterpret_cast< WriterConfiguration_ReadFastqConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_ReadFastqConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ReadFastqConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ReadFastqConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  header_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  ::memset(&batch_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_) -
      reinterpret_cast<char*>(&batch_count_)) + sizeof(compression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ReadFastqConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string header_pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_header_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool compression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ReadFastqConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enable(this), target, stream);
  }

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_pattern(), target);
  }

  // string header_pattern = 3;
  if (!this->_internal_header_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_header_pattern().data(), static_cast<int>(this->_internal_header_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration.header_pattern");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_header_pattern(), target);
  }

  // uint32 batch_count = 4;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_count(), target);
  }

  // bool compression = 5;
  if (this->_internal_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  return target;
}

size_t WriterConfiguration_ReadFastqConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // string header_pattern = 3;
  if (!this->_internal_header_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // uint32 batch_count = 4;
  if (this->_internal_batch_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  // bool compression = 5;
  if (this->_internal_compression() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ReadFastqConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ReadFastqConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ReadFastqConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ReadFastqConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ReadFastqConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ReadFastqConfiguration &>(from));
}


void WriterConfiguration_ReadFastqConfiguration::MergeFrom(const WriterConfiguration_ReadFastqConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (!from._internal_header_pattern().empty()) {
    _internal_set_header_pattern(from._internal_header_pattern());
  }
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_enable());
  }
  if (from._internal_batch_count() != 0) {
    _internal_set_batch_count(from._internal_batch_count());
  }
  if (from._internal_compression() != 0) {
    _internal_set_compression(from._internal_compression());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ReadFastqConfiguration::CopyFrom(const WriterConfiguration_ReadFastqConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ReadFastqConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ReadFastqConfiguration::InternalSwap(WriterConfiguration_ReadFastqConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_pattern_, lhs_arena,
      &other->header_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadFastqConfiguration, compression_)
      + sizeof(WriterConfiguration_ReadFastqConfiguration::compression_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadFastqConfiguration, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ReadFastqConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[47]);
}

// ===================================================================

class WriterConfiguration_ReadBamConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable(const WriterConfiguration_ReadBamConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadBamConfiguration::_Internal::enable(const WriterConfiguration_ReadBamConfiguration* msg) {
  return *msg->enable_;
}
WriterConfiguration_ReadBamConfiguration::WriterConfiguration_ReadBamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
}
WriterConfiguration_ReadBamConfiguration::WriterConfiguration_ReadBamConfiguration(const WriterConfiguration_ReadBamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enable()) {
    enable_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  batch_count_ = from.batch_count_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
}

void WriterConfiguration_ReadBamConfiguration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_count_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(batch_count_));
}

WriterConfiguration_ReadBamConfiguration::~WriterConfiguration_ReadBamConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ReadBamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enable_;
}

void WriterConfiguration_ReadBamConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_ReadBamConfiguration* _this = reinterpret_cast< WriterConfiguration_ReadBamConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_ReadBamConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ReadBamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ReadBamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  batch_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ReadBamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ReadBamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enable(this), target, stream);
  }

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_pattern(), target);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  return target;
}

size_t WriterConfiguration_ReadBamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ReadBamConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ReadBamConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ReadBamConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ReadBamConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ReadBamConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ReadBamConfiguration &>(from));
}


void WriterConfiguration_ReadBamConfiguration::MergeFrom(const WriterConfiguration_ReadBamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_enable());
  }
  if (from._internal_batch_count() != 0) {
    _internal_set_batch_count(from._internal_batch_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ReadBamConfiguration::CopyFrom(const WriterConfiguration_ReadBamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ReadBamConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ReadBamConfiguration::InternalSwap(WriterConfiguration_ReadBamConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadBamConfiguration, batch_count_)
      + sizeof(WriterConfiguration_ReadBamConfiguration::batch_count_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadBamConfiguration, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ReadBamConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[48]);
}

// ===================================================================

class WriterConfiguration_ReadProtobufConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable(const WriterConfiguration_ReadProtobufConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_ReadProtobufConfiguration::_Internal::enable(const WriterConfiguration_ReadProtobufConfiguration* msg) {
  return *msg->enable_;
}
WriterConfiguration_ReadProtobufConfiguration::WriterConfiguration_ReadProtobufConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
}
WriterConfiguration_ReadProtobufConfiguration::WriterConfiguration_ReadProtobufConfiguration(const WriterConfiguration_ReadProtobufConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enable()) {
    enable_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  batch_count_ = from.batch_count_;
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
}

void WriterConfiguration_ReadProtobufConfiguration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_count_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(batch_count_));
}

WriterConfiguration_ReadProtobufConfiguration::~WriterConfiguration_ReadProtobufConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ReadProtobufConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enable_;
}

void WriterConfiguration_ReadProtobufConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_ReadProtobufConfiguration* _this = reinterpret_cast< WriterConfiguration_ReadProtobufConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_ReadProtobufConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ReadProtobufConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ReadProtobufConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  batch_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ReadProtobufConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ReadProtobufConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enable(this), target, stream);
  }

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_pattern(), target);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  return target;
}

size_t WriterConfiguration_ReadProtobufConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ReadProtobufConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ReadProtobufConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ReadProtobufConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ReadProtobufConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ReadProtobufConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ReadProtobufConfiguration &>(from));
}


void WriterConfiguration_ReadProtobufConfiguration::MergeFrom(const WriterConfiguration_ReadProtobufConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_enable());
  }
  if (from._internal_batch_count() != 0) {
    _internal_set_batch_count(from._internal_batch_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ReadProtobufConfiguration::CopyFrom(const WriterConfiguration_ReadProtobufConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ReadProtobufConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ReadProtobufConfiguration::InternalSwap(WriterConfiguration_ReadProtobufConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadProtobufConfiguration, batch_count_)
      + sizeof(WriterConfiguration_ReadProtobufConfiguration::batch_count_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_ReadProtobufConfiguration, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ReadProtobufConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[49]);
}

// ===================================================================

class WriterConfiguration_SequencingSummaryConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& enable(const WriterConfiguration_SequencingSummaryConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_SequencingSummaryConfiguration::_Internal::enable(const WriterConfiguration_SequencingSummaryConfiguration* msg) {
  return *msg->enable_;
}
WriterConfiguration_SequencingSummaryConfiguration::WriterConfiguration_SequencingSummaryConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
}
WriterConfiguration_SequencingSummaryConfiguration::WriterConfiguration_SequencingSummaryConfiguration(const WriterConfiguration_SequencingSummaryConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_enable()) {
    enable_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
}

void WriterConfiguration_SequencingSummaryConfiguration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
enable_ = nullptr;
}

WriterConfiguration_SequencingSummaryConfiguration::~WriterConfiguration_SequencingSummaryConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_SequencingSummaryConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enable_;
}

void WriterConfiguration_SequencingSummaryConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_SequencingSummaryConfiguration* _this = reinterpret_cast< WriterConfiguration_SequencingSummaryConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_SequencingSummaryConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_SequencingSummaryConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_SequencingSummaryConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && enable_ != nullptr) {
    delete enable_;
  }
  enable_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_SequencingSummaryConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_SequencingSummaryConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enable(this), target, stream);
  }

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  return target;
}

size_t WriterConfiguration_SequencingSummaryConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 2;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration enable = 1;
  if (this->_internal_has_enable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_SequencingSummaryConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_SequencingSummaryConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_SequencingSummaryConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_SequencingSummaryConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_SequencingSummaryConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_SequencingSummaryConfiguration &>(from));
}


void WriterConfiguration_SequencingSummaryConfiguration::MergeFrom(const WriterConfiguration_SequencingSummaryConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (from._internal_has_enable()) {
    _internal_mutable_enable()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_SequencingSummaryConfiguration::CopyFrom(const WriterConfiguration_SequencingSummaryConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_SequencingSummaryConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_SequencingSummaryConfiguration::InternalSwap(WriterConfiguration_SequencingSummaryConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_SequencingSummaryConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[50]);
}

// ===================================================================

class WriterConfiguration_BulkConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& raw(const WriterConfiguration_BulkConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& events(const WriterConfiguration_BulkConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& reads(const WriterConfiguration_BulkConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& multiplex(const WriterConfiguration_BulkConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration& channel_states(const WriterConfiguration_BulkConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_BulkConfiguration::_Internal::raw(const WriterConfiguration_BulkConfiguration* msg) {
  return *msg->raw_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_BulkConfiguration::_Internal::events(const WriterConfiguration_BulkConfiguration* msg) {
  return *msg->events_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_BulkConfiguration::_Internal::reads(const WriterConfiguration_BulkConfiguration* msg) {
  return *msg->reads_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_BulkConfiguration::_Internal::multiplex(const WriterConfiguration_BulkConfiguration* msg) {
  return *msg->multiplex_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration&
WriterConfiguration_BulkConfiguration::_Internal::channel_states(const WriterConfiguration_BulkConfiguration* msg) {
  return *msg->channel_states_;
}
WriterConfiguration_BulkConfiguration::WriterConfiguration_BulkConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
}
WriterConfiguration_BulkConfiguration::WriterConfiguration_BulkConfiguration(const WriterConfiguration_BulkConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_pattern().empty()) {
    file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_pattern(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_raw()) {
    raw_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.raw_);
  } else {
    raw_ = nullptr;
  }
  if (from._internal_has_events()) {
    events_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.events_);
  } else {
    events_ = nullptr;
  }
  if (from._internal_has_reads()) {
    reads_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.reads_);
  } else {
    reads_ = nullptr;
  }
  if (from._internal_has_multiplex()) {
    multiplex_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.multiplex_);
  } else {
    multiplex_ = nullptr;
  }
  if (from._internal_has_channel_states()) {
    channel_states_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration(*from.channel_states_);
  } else {
    channel_states_ = nullptr;
  }
  ::memcpy(&compression_level_, &from.compression_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_type_) -
    reinterpret_cast<char*>(&compression_level_)) + sizeof(compression_type_));
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
}

void WriterConfiguration_BulkConfiguration::SharedCtor() {
file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compression_type_) -
    reinterpret_cast<char*>(&raw_)) + sizeof(compression_type_));
}

WriterConfiguration_BulkConfiguration::~WriterConfiguration_BulkConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_BulkConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_;
  if (this != internal_default_instance()) delete events_;
  if (this != internal_default_instance()) delete reads_;
  if (this != internal_default_instance()) delete multiplex_;
  if (this != internal_default_instance()) delete channel_states_;
}

void WriterConfiguration_BulkConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_BulkConfiguration* _this = reinterpret_cast< WriterConfiguration_BulkConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_BulkConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_BulkConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_BulkConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_pattern_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && raw_ != nullptr) {
    delete raw_;
  }
  raw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reads_ != nullptr) {
    delete reads_;
  }
  reads_ = nullptr;
  if (GetArenaForAllocation() == nullptr && multiplex_ != nullptr) {
    delete multiplex_;
  }
  multiplex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && channel_states_ != nullptr) {
    delete channel_states_;
  }
  channel_states_ = nullptr;
  ::memset(&compression_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_type_) -
      reinterpret_cast<char*>(&compression_level_)) + sizeof(compression_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_BulkConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 compression_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compression_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_events(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration reads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reads(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration multiplex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channel_states = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_states(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool device_metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          device_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool device_commands = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          device_commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression_type(static_cast<::minknow_api::analysis_configuration::WriterConfiguration_CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string file_pattern = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_BulkConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 compression_level = 2;
  if (this->_internal_compression_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_compression_level(), target);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 3;
  if (this->_internal_has_raw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::raw(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration events = 4;
  if (this->_internal_has_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::events(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration reads = 5;
  if (this->_internal_has_reads()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reads(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration multiplex = 6;
  if (this->_internal_has_multiplex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::multiplex(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channel_states = 7;
  if (this->_internal_has_channel_states()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::channel_states(this), target, stream);
  }

  // bool device_metadata = 11;
  if (this->_internal_device_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_device_metadata(), target);
  }

  // bool device_commands = 12;
  if (this->_internal_device_commands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_device_commands(), target);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 13;
  if (this->_internal_compression_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_compression_type(), target);
  }

  // string file_pattern = 14;
  if (!this->_internal_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_pattern().data(), static_cast<int>(this->_internal_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration.file_pattern");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_file_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  return target;
}

size_t WriterConfiguration_BulkConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_pattern = 14;
  if (!this->_internal_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_pattern());
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration raw = 3;
  if (this->_internal_has_raw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration events = 4;
  if (this->_internal_has_events()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *events_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration reads = 5;
  if (this->_internal_has_reads()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reads_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration multiplex = 6;
  if (this->_internal_has_multiplex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplex_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ChannelConfiguration channel_states = 7;
  if (this->_internal_has_channel_states()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_states_);
  }

  // int32 compression_level = 2;
  if (this->_internal_compression_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_compression_level());
  }

  // bool device_metadata = 11;
  if (this->_internal_device_metadata() != 0) {
    total_size += 1 + 1;
  }

  // bool device_commands = 12;
  if (this->_internal_device_commands() != 0) {
    total_size += 1 + 1;
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.CompressionType compression_type = 13;
  if (this->_internal_compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compression_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_BulkConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_BulkConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_BulkConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_BulkConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_BulkConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_BulkConfiguration &>(from));
}


void WriterConfiguration_BulkConfiguration::MergeFrom(const WriterConfiguration_BulkConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_pattern().empty()) {
    _internal_set_file_pattern(from._internal_file_pattern());
  }
  if (from._internal_has_raw()) {
    _internal_mutable_raw()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_raw());
  }
  if (from._internal_has_events()) {
    _internal_mutable_events()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_events());
  }
  if (from._internal_has_reads()) {
    _internal_mutable_reads()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_reads());
  }
  if (from._internal_has_multiplex()) {
    _internal_mutable_multiplex()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_multiplex());
  }
  if (from._internal_has_channel_states()) {
    _internal_mutable_channel_states()->::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration::MergeFrom(from._internal_channel_states());
  }
  if (from._internal_compression_level() != 0) {
    _internal_set_compression_level(from._internal_compression_level());
  }
  if (from._internal_device_metadata() != 0) {
    _internal_set_device_metadata(from._internal_device_metadata());
  }
  if (from._internal_device_commands() != 0) {
    _internal_set_device_commands(from._internal_device_commands());
  }
  if (from._internal_compression_type() != 0) {
    _internal_set_compression_type(from._internal_compression_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_BulkConfiguration::CopyFrom(const WriterConfiguration_BulkConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_BulkConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_BulkConfiguration::InternalSwap(WriterConfiguration_BulkConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_pattern_, lhs_arena,
      &other->file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration_BulkConfiguration, compression_type_)
      + sizeof(WriterConfiguration_BulkConfiguration::compression_type_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration_BulkConfiguration, raw_)>(
          reinterpret_cast<char*>(&raw_),
          reinterpret_cast<char*>(&other->raw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_BulkConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[51]);
}

// ===================================================================

class WriterConfiguration_ReportConfiguration::_Internal {
 public:
};

WriterConfiguration_ReportConfiguration::WriterConfiguration_ReportConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
}
WriterConfiguration_ReportConfiguration::WriterConfiguration_ReportConfiguration(const WriterConfiguration_ReportConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pdf_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pdf_report_file_pattern().empty()) {
    pdf_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pdf_report_file_pattern(), 
      GetArenaForAllocation());
  }
  markdown_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_markdown_report_file_pattern().empty()) {
    markdown_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_markdown_report_file_pattern(), 
      GetArenaForAllocation());
  }
  duty_time_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_duty_time_report_file_pattern().empty()) {
    duty_time_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_duty_time_report_file_pattern(), 
      GetArenaForAllocation());
  }
  throughput_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_throughput_report_file_pattern().empty()) {
    throughput_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_throughput_report_file_pattern(), 
      GetArenaForAllocation());
  }
  final_summary_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_final_summary_report_file_pattern().empty()) {
    final_summary_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_final_summary_report_file_pattern(), 
      GetArenaForAllocation());
  }
  barcode_alignment_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_barcode_alignment_report_file_pattern().empty()) {
    barcode_alignment_report_file_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_barcode_alignment_report_file_pattern(), 
      GetArenaForAllocation());
  }
  custom_report_suffix_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_report_suffix_pattern().empty()) {
    custom_report_suffix_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_report_suffix_pattern(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
}

void WriterConfiguration_ReportConfiguration::SharedCtor() {
pdf_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
markdown_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
duty_time_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
throughput_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
final_summary_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
barcode_alignment_report_file_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_report_suffix_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WriterConfiguration_ReportConfiguration::~WriterConfiguration_ReportConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration_ReportConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pdf_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  markdown_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duty_time_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  throughput_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  final_summary_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  barcode_alignment_report_file_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_report_suffix_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriterConfiguration_ReportConfiguration::ArenaDtor(void* object) {
  WriterConfiguration_ReportConfiguration* _this = reinterpret_cast< WriterConfiguration_ReportConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration_ReportConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration_ReportConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration_ReportConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pdf_report_file_pattern_.ClearToEmpty();
  markdown_report_file_pattern_.ClearToEmpty();
  duty_time_report_file_pattern_.ClearToEmpty();
  throughput_report_file_pattern_.ClearToEmpty();
  final_summary_report_file_pattern_.ClearToEmpty();
  barcode_alignment_report_file_pattern_.ClearToEmpty();
  custom_report_suffix_pattern_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration_ReportConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pdf_report_file_pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pdf_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string markdown_report_file_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_markdown_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string duty_time_report_file_pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_duty_time_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string throughput_report_file_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_throughput_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string final_summary_report_file_pattern = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_final_summary_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string barcode_alignment_report_file_pattern = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_barcode_alignment_report_file_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string custom_report_suffix_pattern = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_custom_report_suffix_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration_ReportConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pdf_report_file_pattern = 1;
  if (!this->_internal_pdf_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pdf_report_file_pattern().data(), static_cast<int>(this->_internal_pdf_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.pdf_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pdf_report_file_pattern(), target);
  }

  // string markdown_report_file_pattern = 2;
  if (!this->_internal_markdown_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_markdown_report_file_pattern().data(), static_cast<int>(this->_internal_markdown_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.markdown_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_markdown_report_file_pattern(), target);
  }

  // string duty_time_report_file_pattern = 3;
  if (!this->_internal_duty_time_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_duty_time_report_file_pattern().data(), static_cast<int>(this->_internal_duty_time_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.duty_time_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_duty_time_report_file_pattern(), target);
  }

  // string throughput_report_file_pattern = 4;
  if (!this->_internal_throughput_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_throughput_report_file_pattern().data(), static_cast<int>(this->_internal_throughput_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.throughput_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_throughput_report_file_pattern(), target);
  }

  // string final_summary_report_file_pattern = 5;
  if (!this->_internal_final_summary_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_final_summary_report_file_pattern().data(), static_cast<int>(this->_internal_final_summary_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.final_summary_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_final_summary_report_file_pattern(), target);
  }

  // string barcode_alignment_report_file_pattern = 6;
  if (!this->_internal_barcode_alignment_report_file_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_barcode_alignment_report_file_pattern().data(), static_cast<int>(this->_internal_barcode_alignment_report_file_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.barcode_alignment_report_file_pattern");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_barcode_alignment_report_file_pattern(), target);
  }

  // string custom_report_suffix_pattern = 7;
  if (!this->_internal_custom_report_suffix_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_report_suffix_pattern().data(), static_cast<int>(this->_internal_custom_report_suffix_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration.custom_report_suffix_pattern");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_custom_report_suffix_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  return target;
}

size_t WriterConfiguration_ReportConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pdf_report_file_pattern = 1;
  if (!this->_internal_pdf_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pdf_report_file_pattern());
  }

  // string markdown_report_file_pattern = 2;
  if (!this->_internal_markdown_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_markdown_report_file_pattern());
  }

  // string duty_time_report_file_pattern = 3;
  if (!this->_internal_duty_time_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_duty_time_report_file_pattern());
  }

  // string throughput_report_file_pattern = 4;
  if (!this->_internal_throughput_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_throughput_report_file_pattern());
  }

  // string final_summary_report_file_pattern = 5;
  if (!this->_internal_final_summary_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_summary_report_file_pattern());
  }

  // string barcode_alignment_report_file_pattern = 6;
  if (!this->_internal_barcode_alignment_report_file_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_barcode_alignment_report_file_pattern());
  }

  // string custom_report_suffix_pattern = 7;
  if (!this->_internal_custom_report_suffix_pattern().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_report_suffix_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration_ReportConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration_ReportConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration_ReportConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration_ReportConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration_ReportConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration_ReportConfiguration &>(from));
}


void WriterConfiguration_ReportConfiguration::MergeFrom(const WriterConfiguration_ReportConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pdf_report_file_pattern().empty()) {
    _internal_set_pdf_report_file_pattern(from._internal_pdf_report_file_pattern());
  }
  if (!from._internal_markdown_report_file_pattern().empty()) {
    _internal_set_markdown_report_file_pattern(from._internal_markdown_report_file_pattern());
  }
  if (!from._internal_duty_time_report_file_pattern().empty()) {
    _internal_set_duty_time_report_file_pattern(from._internal_duty_time_report_file_pattern());
  }
  if (!from._internal_throughput_report_file_pattern().empty()) {
    _internal_set_throughput_report_file_pattern(from._internal_throughput_report_file_pattern());
  }
  if (!from._internal_final_summary_report_file_pattern().empty()) {
    _internal_set_final_summary_report_file_pattern(from._internal_final_summary_report_file_pattern());
  }
  if (!from._internal_barcode_alignment_report_file_pattern().empty()) {
    _internal_set_barcode_alignment_report_file_pattern(from._internal_barcode_alignment_report_file_pattern());
  }
  if (!from._internal_custom_report_suffix_pattern().empty()) {
    _internal_set_custom_report_suffix_pattern(from._internal_custom_report_suffix_pattern());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration_ReportConfiguration::CopyFrom(const WriterConfiguration_ReportConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration_ReportConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration_ReportConfiguration::InternalSwap(WriterConfiguration_ReportConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pdf_report_file_pattern_, lhs_arena,
      &other->pdf_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &markdown_report_file_pattern_, lhs_arena,
      &other->markdown_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &duty_time_report_file_pattern_, lhs_arena,
      &other->duty_time_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &throughput_report_file_pattern_, lhs_arena,
      &other->throughput_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &final_summary_report_file_pattern_, lhs_arena,
      &other->final_summary_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &barcode_alignment_report_file_pattern_, lhs_arena,
      &other->barcode_alignment_report_file_pattern_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_report_suffix_pattern_, lhs_arena,
      &other->custom_report_suffix_pattern_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration_ReportConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[52]);
}

// ===================================================================

class WriterConfiguration::_Internal {
 public:
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration& read_fast5(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration& read_fastq(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration& read_bam(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration& read_protobuf(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration& sequencing_summary(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration& bulk(const WriterConfiguration* msg);
  static const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration& report(const WriterConfiguration* msg);
};

const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration&
WriterConfiguration::_Internal::read_fast5(const WriterConfiguration* msg) {
  return *msg->read_fast5_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration&
WriterConfiguration::_Internal::read_fastq(const WriterConfiguration* msg) {
  return *msg->read_fastq_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration&
WriterConfiguration::_Internal::read_bam(const WriterConfiguration* msg) {
  return *msg->read_bam_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration&
WriterConfiguration::_Internal::read_protobuf(const WriterConfiguration* msg) {
  return *msg->read_protobuf_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration&
WriterConfiguration::_Internal::sequencing_summary(const WriterConfiguration* msg) {
  return *msg->sequencing_summary_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration&
WriterConfiguration::_Internal::bulk(const WriterConfiguration* msg) {
  return *msg->bulk_;
}
const ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration&
WriterConfiguration::_Internal::report(const WriterConfiguration* msg) {
  return *msg->report_;
}
WriterConfiguration::WriterConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.WriterConfiguration)
}
WriterConfiguration::WriterConfiguration(const WriterConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_read_fast5()) {
    read_fast5_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration(*from.read_fast5_);
  } else {
    read_fast5_ = nullptr;
  }
  if (from._internal_has_read_fastq()) {
    read_fastq_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration(*from.read_fastq_);
  } else {
    read_fastq_ = nullptr;
  }
  if (from._internal_has_read_protobuf()) {
    read_protobuf_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration(*from.read_protobuf_);
  } else {
    read_protobuf_ = nullptr;
  }
  if (from._internal_has_sequencing_summary()) {
    sequencing_summary_ = new ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration(*from.sequencing_summary_);
  } else {
    sequencing_summary_ = nullptr;
  }
  if (from._internal_has_bulk()) {
    bulk_ = new ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration(*from.bulk_);
  } else {
    bulk_ = nullptr;
  }
  if (from._internal_has_report()) {
    report_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration(*from.report_);
  } else {
    report_ = nullptr;
  }
  if (from._internal_has_read_bam()) {
    read_bam_ = new ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration(*from.read_bam_);
  } else {
    read_bam_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.WriterConfiguration)
}

void WriterConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&read_fast5_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_bam_) -
    reinterpret_cast<char*>(&read_fast5_)) + sizeof(read_bam_));
}

WriterConfiguration::~WriterConfiguration() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.WriterConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriterConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete read_fast5_;
  if (this != internal_default_instance()) delete read_fastq_;
  if (this != internal_default_instance()) delete read_protobuf_;
  if (this != internal_default_instance()) delete sequencing_summary_;
  if (this != internal_default_instance()) delete bulk_;
  if (this != internal_default_instance()) delete report_;
  if (this != internal_default_instance()) delete read_bam_;
}

void WriterConfiguration::ArenaDtor(void* object) {
  WriterConfiguration* _this = reinterpret_cast< WriterConfiguration* >(object);
  (void)_this;
}
void WriterConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriterConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriterConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.WriterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && read_fast5_ != nullptr) {
    delete read_fast5_;
  }
  read_fast5_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_fastq_ != nullptr) {
    delete read_fastq_;
  }
  read_fastq_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_protobuf_ != nullptr) {
    delete read_protobuf_;
  }
  read_protobuf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sequencing_summary_ != nullptr) {
    delete sequencing_summary_;
  }
  sequencing_summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_ != nullptr) {
    delete bulk_;
  }
  bulk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && report_ != nullptr) {
    delete report_;
  }
  report_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_bam_ != nullptr) {
    delete read_bam_;
  }
  read_bam_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriterConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration read_fast5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_fast5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration read_fastq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_fastq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration read_protobuf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_protobuf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration sequencing_summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequencing_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration bulk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_report(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration read_bam = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_bam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriterConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.WriterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration read_fast5 = 2;
  if (this->_internal_has_read_fast5()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_fast5(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration read_fastq = 3;
  if (this->_internal_has_read_fastq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::read_fastq(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration read_protobuf = 4;
  if (this->_internal_has_read_protobuf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::read_protobuf(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration sequencing_summary = 5;
  if (this->_internal_has_sequencing_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sequencing_summary(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration bulk = 6;
  if (this->_internal_has_bulk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bulk(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration report = 7;
  if (this->_internal_has_report()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::report(this), target, stream);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration read_bam = 8;
  if (this->_internal_has_read_bam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::read_bam(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.WriterConfiguration)
  return target;
}

size_t WriterConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.WriterConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFast5Configuration read_fast5 = 2;
  if (this->_internal_has_read_fast5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_fast5_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadFastqConfiguration read_fastq = 3;
  if (this->_internal_has_read_fastq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_fastq_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadProtobufConfiguration read_protobuf = 4;
  if (this->_internal_has_read_protobuf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_protobuf_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.SequencingSummaryConfiguration sequencing_summary = 5;
  if (this->_internal_has_sequencing_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequencing_summary_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.BulkConfiguration bulk = 6;
  if (this->_internal_has_bulk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReportConfiguration report = 7;
  if (this->_internal_has_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_);
  }

  // .minknow_api.analysis_configuration.WriterConfiguration.ReadBamConfiguration read_bam = 8;
  if (this->_internal_has_read_bam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_bam_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriterConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriterConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriterConfiguration::GetClassData() const { return &_class_data_; }

void WriterConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriterConfiguration *>(to)->MergeFrom(
      static_cast<const WriterConfiguration &>(from));
}


void WriterConfiguration::MergeFrom(const WriterConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.WriterConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_read_fast5()) {
    _internal_mutable_read_fast5()->::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration::MergeFrom(from._internal_read_fast5());
  }
  if (from._internal_has_read_fastq()) {
    _internal_mutable_read_fastq()->::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration::MergeFrom(from._internal_read_fastq());
  }
  if (from._internal_has_read_protobuf()) {
    _internal_mutable_read_protobuf()->::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration::MergeFrom(from._internal_read_protobuf());
  }
  if (from._internal_has_sequencing_summary()) {
    _internal_mutable_sequencing_summary()->::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration::MergeFrom(from._internal_sequencing_summary());
  }
  if (from._internal_has_bulk()) {
    _internal_mutable_bulk()->::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration::MergeFrom(from._internal_bulk());
  }
  if (from._internal_has_report()) {
    _internal_mutable_report()->::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration::MergeFrom(from._internal_report());
  }
  if (from._internal_has_read_bam()) {
    _internal_mutable_read_bam()->::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration::MergeFrom(from._internal_read_bam());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriterConfiguration::CopyFrom(const WriterConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.WriterConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriterConfiguration::IsInitialized() const {
  return true;
}

void WriterConfiguration::InternalSwap(WriterConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriterConfiguration, read_bam_)
      + sizeof(WriterConfiguration::read_bam_)
      - PROTOBUF_FIELD_OFFSET(WriterConfiguration, read_fast5_)>(
          reinterpret_cast<char*>(&read_fast5_),
          reinterpret_cast<char*>(&other->read_fast5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriterConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[53]);
}

// ===================================================================

class SetWriterConfigurationResponse::_Internal {
 public:
};

SetWriterConfigurationResponse::SetWriterConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.SetWriterConfigurationResponse)
}
SetWriterConfigurationResponse::SetWriterConfigurationResponse(const SetWriterConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.SetWriterConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWriterConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWriterConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetWriterConfigurationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[54]);
}

// ===================================================================

class GetWriterConfigurationRequest::_Internal {
 public:
};

GetWriterConfigurationRequest::GetWriterConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetWriterConfigurationRequest)
}
GetWriterConfigurationRequest::GetWriterConfigurationRequest(const GetWriterConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetWriterConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriterConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriterConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetWriterConfigurationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[55]);
}

// ===================================================================

class GetReadClassificationsRequest::_Internal {
 public:
};

GetReadClassificationsRequest::GetReadClassificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetReadClassificationsRequest)
}
GetReadClassificationsRequest::GetReadClassificationsRequest(const GetReadClassificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetReadClassificationsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadClassificationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadClassificationsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetReadClassificationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[56]);
}

// ===================================================================

GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse() {}
GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::MergeFrom(const GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[57]);
}

// ===================================================================

class GetReadClassificationsResponse::_Internal {
 public:
};

GetReadClassificationsResponse::GetReadClassificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  read_classifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minknow_api.analysis_configuration.GetReadClassificationsResponse)
}
GetReadClassificationsResponse::GetReadClassificationsResponse(const GetReadClassificationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_classifications_.MergeFrom(from.read_classifications_);
  // @@protoc_insertion_point(copy_constructor:minknow_api.analysis_configuration.GetReadClassificationsResponse)
}

void GetReadClassificationsResponse::SharedCtor() {
}

GetReadClassificationsResponse::~GetReadClassificationsResponse() {
  // @@protoc_insertion_point(destructor:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReadClassificationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadClassificationsResponse::ArenaDtor(void* object) {
  GetReadClassificationsResponse* _this = reinterpret_cast< GetReadClassificationsResponse* >(object);
  (void)_this;
  _this->read_classifications_. ~MapField();
}
inline void GetReadClassificationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GetReadClassificationsResponse::ArenaDtor);
  }
}
void GetReadClassificationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadClassificationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_classifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadClassificationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, string> read_classifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&read_classifications_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetReadClassificationsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> read_classifications = 1;
  if (!this->_internal_read_classifications().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "minknow_api.analysis_configuration.GetReadClassificationsResponse.ReadClassificationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_read_classifications().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_read_classifications().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_read_classifications().begin();
          it != this->_internal_read_classifications().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_read_classifications().begin();
          it != this->_internal_read_classifications().end(); ++it) {
        target = GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  return target;
}

size_t GetReadClassificationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> read_classifications = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_classifications_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_read_classifications().begin();
      it != this->_internal_read_classifications().end(); ++it) {
    total_size += GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadClassificationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadClassificationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadClassificationsResponse::GetClassData() const { return &_class_data_; }

void GetReadClassificationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadClassificationsResponse *>(to)->MergeFrom(
      static_cast<const GetReadClassificationsResponse &>(from));
}


void GetReadClassificationsResponse::MergeFrom(const GetReadClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_classifications_.MergeFrom(from.read_classifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadClassificationsResponse::CopyFrom(const GetReadClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minknow_api.analysis_configuration.GetReadClassificationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadClassificationsResponse::IsInitialized() const {
  return true;
}

void GetReadClassificationsResponse::InternalSwap(GetReadClassificationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  read_classifications_.InternalSwap(&other->read_classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadClassificationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_getter, &descriptor_table_minknow_5fapi_2fanalysis_5fconfiguration_2eproto_once,
      file_level_metadata_minknow_5fapi_2fanalysis_5fconfiguration_2eproto[58]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace analysis_configuration
}  // namespace minknow_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::EventDetection* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::EventDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::EventDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ReadDetectionParams* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ReadDetectionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ReadDetectionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ReadClassificationParams_Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ReadClassificationParams* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ReadClassificationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ReadClassificationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Logic_Behaviour >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Logic_Ranges >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Logic* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Logic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Logic >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Style* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Style >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Style >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates_Group* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ChannelStates* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ChannelStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ChannelStates >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetAnalysisConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::AnalysisConfiguration_ChannelStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::AnalysisConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::AnalysisConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::AnalysisConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetAnalysisConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::ResetAnalysisConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetAnalysisEnabledStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetChannelStatesDescRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetChannelStatesDescRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetChannelStatesDescRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Style >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_ChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetChannelStatesDescResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetChannelStatesDescResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetSummaryRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetSummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetSummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetSummaryResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetSummaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::BarcodingConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::BarcodingConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::BarcodingConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::AlignmentConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::AlignmentConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::AlignmentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::LampConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::LampConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::LampConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::BasecallerConfiguration_ReadFiltering >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::BasecallerConfiguration_TargetFiltering >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::BasecallerConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::BasecallerConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::BasecallerConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetBasecallerConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetBasecallerConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetBasecallerConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetPoreTypeConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWell >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_ChannelWellList >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations_PoreTypesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::PoreTypeConfiguration_ChannelWellPoreTypeConfigurations >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::PoreTypeConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::PoreTypeConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::PoreTypeConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetPoreTypeConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelList >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges_ChannelRange >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration_ChannelRanges >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ReadFast5Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ReadFastqConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ReadBamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ReadProtobufConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_SequencingSummaryConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_BulkConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration_ReportConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::WriterConfiguration* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::WriterConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::WriterConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::SetWriterConfigurationResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::SetWriterConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::SetWriterConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetWriterConfigurationRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetWriterConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetWriterConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetReadClassificationsRequest* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetReadClassificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetReadClassificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetReadClassificationsResponse_ReadClassificationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minknow_api::analysis_configuration::GetReadClassificationsResponse* Arena::CreateMaybeMessage< ::minknow_api::analysis_configuration::GetReadClassificationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minknow_api::analysis_configuration::GetReadClassificationsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
